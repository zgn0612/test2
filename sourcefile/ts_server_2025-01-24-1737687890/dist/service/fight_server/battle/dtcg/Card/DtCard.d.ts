/// <reference types="long" />
import { Icfg_card_skill } from "../../../cfg/card_skill";
import { Long } from "../../../cmn/proto/Long";
import { DtAreaType } from "../Data/DtEnum";
import { DtMsgBase, DtMsg_BattleInfo, DtMsg_BeforePlay, DtMsg_DigimonEvolution, DtMsg_OnActionEffect, DtMsg_OnPlay } from "../Data/DtEventMsg";
import { DtPlayer } from "../Player/DtPlayer";
import { DtCardBase } from "./DtCardBase";
import { DtEffect } from "./Effect/DtEffect";
import { DtEffectType } from "./Effect/DtEffectType";
import { DtEffectCreator } from "./Effect/DtEffectCreator";
import { DcgProto } from "../../../cmn/proto/protoMsg";
export declare class DtCard extends DtCardBase {
    effects: Array<DtEffect>;
    originEffect: Array<DtEffectCreator>;
    private curListeners;
    constructor(player: DtPlayer, uid: Long, cardid: number);
    private InitListener;
    private SetListenr;
    CheckEffectListener(): void;
    private AddListener;
    private RemoveListener;
    private GetListener;
    CreateEffect(creator: DtEffectCreator, cfg: Icfg_card_skill): void;
    ClientShow(creator: DtEffectCreator): void;
    private RemoveEffectIndex;
    CreateOriginEffect(creator: DtEffectCreator, cfg: Icfg_card_skill): void;
    ClearOriginEffect(): void;
    RegisterEffect(effect: DtEffect): void;
    RegisterEffectListener(effect: DtEffect): void;
    DeleteEffect(effect: DtEffect): void;
    CheckHasEffectByCreator(creator: DtEffectCreator): boolean;
    DeleteEffectWithCreator(creator: DtEffectCreator): void;
    CheckHasOfferEffect(creatorClsName: string, offer: DtCardBase, offCreator: DtEffectCreator): boolean;
    DeleteOfferEffectCreatorClassName(creatorClsName: string, offer: DtCardBase, offCreator: DtEffectCreator): void;
    RemoveUnusedOfferBuff(): void;
    RemoveOriginDigimon(card: DtCardBase): void;
    CanUseEffectInBattleArea(): boolean;
    CanUseEffectInHand(): boolean;
    CanFusionEvo(): boolean;
    GetFusionEffect(): DtEffect;
    OnPrecalculateCostCheck(msg: DtMsg_BeforePlay): void;
    OnBeforePlay(msg: DtMsg_BeforePlay): void;
    private TriggerPrecalculateCost;
    TriggerBeforePlay(msg: DtMsg_BeforePlay): void;
    OnPlay(msg: DtMsg_OnPlay): void;
    OnInBattleArea(): void;
    OnEvolution(msg: DtMsg_DigimonEvolution): void;
    OnWhenAttacking(msg: DtMsg_BattleInfo): void;
    OnDestroy(msg: DtMsg_OnActionEffect): void;
    OnBeBlock(): void;
    OnUseEffect(): void;
    OnFusionEvo(): void;
    OnDefenseEffect(): void;
    OnLeaveArea(area: DtAreaType): void;
    CheckCardEffect(effType: DtEffectType, msg?: DtMsgBase): void;
    CheckCardCanActivateEffect(effType: DtEffectType, msg?: DtMsgBase): boolean;
    OnNewEvoActivateInBattleArea(newEvo: DtCardBase): void;
    private TriggerRoundStart;
    private TriggerMainPhaseStart;
    private TriggerRoundOver;
    private TriggerBlockerSelect;
    private TriggerBlockerSelectOver;
    private TriggerWhenAttacking;
    private TriggerWhenOppAttacking;
    private TriggerAttackDeclare;
    private TriggerCardOnActEffect;
    private TriggerCardOnPlayer;
    private TriggerCardOnHatchPlay;
    private TriggerAreaCardsChange;
    private TriggerCardActivateEffect;
    private TriggerBattleFieldInfoChange;
    private TriggerCardBeforeEvolution;
    private TriggerCardEvolution;
    private TriggerCardMove;
    private TriggerCardBeforeDActEffect;
    private TriggerCheckPlayerRound;
    private TriggerAfterAtkJudge;
    private TriggerDiscardEvoOrigin;
    private TriggerBeforeAtkJudge;
    private TriggerCardChangeBattleState;
    private TriggerBattleOver;
    private TriggerAttackOver;
    private TriggerBeforeCardChangeCost;
    private TriggerBeforeAbsorbEffectActive;
    HasEffect(effName: number): boolean;
    HasOriginEffect(): boolean;
    HasEffectWithTriggerType(type: DtEffectType): boolean;
    GetFirstEffectWithTrigtgerType(type: DtEffectType): DtEffect;
    SetCardEvoOriginSkill(): void;
    ResetState(): void;
    UpdateInheritEffectData(oriEffect: Array<DtEffect>): void;
    private UpdateOriginEffectCreator;
    private UpdateSingleInheritEffectData;
    UpdateInheritEffectDataWithOriCreator(ori: Array<DtEffectCreator>): void;
    PopInheritEffects(): Array<DtEffect>;
    SetInheritEffect(inheritEffects: Array<DtEffect>): void;
    Clear(): void;
    protected GetCardBattleInfo(): Array<DcgProto.S_GameBattleCardInfo>;
    protected GetCardEffectInfo(): DcgProto.S_BattleCardEffectInfo[];
}

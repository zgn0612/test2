/// <reference types="long" />
import { Icfg_card_basic } from "../../../cfg/card_basic";
import { Long } from "../../../cmn/proto/Long";
import { DcgProto } from "../../../cmn/proto/protoMsg";
import { DtActionEffectType, DtAreaType, DtBuffType, DtCardBattleState, DtCardColor, DtCardType, DtFilterCompare } from "../Data/DtEnum";
import { DtCardDigimonType } from "../Data/DtCardDigimonType";
import { DtMsg_BattleInfo, DtMsg_BeforePlay, DtMsg_DigimonEvolution, DtMsg_OnActionEffect, DtMsg_OnPlay } from "../Data/DtEventMsg";
import { DtFsmAttackType } from "../Fsm/Attack/DtFsmAttackEnum";
import { DtPlayer } from "../Player/DtPlayer";
import { DtBuffBase } from "./Buff/DtBuffBase";
import { DtEffect } from "./Effect/DtEffect";
import { DtCardDataEvoResult } from "./DtCardDataEvoResult";
export declare class DtCardBase {
    uid: Long;
    parent: DtPlayer;
    config: Icfg_card_basic;
    cardSummonRound: number;
    cardBattleState: DtCardBattleState;
    evoOriginPrevCardUId: Long;
    protected evoOriginList: Array<DtCardBase>;
    whereAreaType: DtAreaType;
    private buffList;
    lastEffectedType: DtActionEffectType;
    isToken: boolean;
    CurrentInEffectType: DtActionEffectType;
    constructor(player: DtPlayer, uid: Long, cardid: number);
    ClearCardOriginListToGy(): void;
    GetPlayer(): DtPlayer;
    SetCardWhere(type: DtAreaType): void;
    CanUseEffectInBattleArea(): boolean;
    CanUseEffectInHand(): boolean;
    CanFusionEvo(): boolean;
    CheckEffectListener(): void;
    GetLastDP(): number;
    CheckCanChangeDp(buff: DtBuffBase): boolean;
    GetCostWithBuff(): number;
    GetPrecalculateLastCost(useWhere: DtAreaType): number;
    private CalCost;
    GetLastPower(): number;
    GetDestoryDPLim(): number;
    CheckCanEvo(originCard: DtCardBase): DtCardDataEvoResult;
    CheckCanPlayerChooseCostEvo(originCard: DtCardBase, pcost: number): DtCardDataEvoResult;
    private GetAllEvoResult;
    IsEvoOrigin(uid: Long): boolean;
    NameIs(name: DtCardDigimonType, isForce?: boolean): boolean;
    FeatureIs(type: DtCardDigimonType): boolean;
    FeatureHas(types: DtCardDigimonType[]): boolean;
    private ArrayHas;
    CardTypeIs(type: DtCardType): boolean;
    GetOriginDigimonCount(): number;
    GetOriginDigimonList(): Array<DtCardBase>;
    CheckOriginListWithCondition(func: (card: DtCardBase) => boolean): boolean;
    CheckOriginCountWithCondition(func: (card: DtCardBase) => boolean): number;
    CalculateDigimonOriginList(): void;
    GetBottomOriginDigimon(): DtCardBase;
    CanDegenerate(count: number): number;
    GetDegenerateChoose(count: number): Array<DtCardBase>;
    AddBuff(buff: DtBuffBase): void;
    RemoveBuff(buff: DtBuffBase): void;
    RemoveBuffWithEffectAdd(effect: DtEffect): void;
    CheckBuffWithEffectAdd(effect: DtEffect): boolean;
    private CheckBuff;
    CheckIsImmueEffect(caster: DtCardBase): boolean;
    HasBuff(type: DtBuffType): boolean;
    ForEachEffectedBuff(func: (buff: DtBuffBase) => void, ...buffs: DtBuffType[]): void;
    _NotCheckEffectedBuff(type: DtBuffType): boolean;
    ColorMulIs(...color: DtCardColor[]): boolean;
    ColorIs(color: DtCardColor): boolean;
    ColorCount(): number;
    CardIsInArea(area: number): boolean;
    OnPrecalculateCostCheck(msg: DtMsg_BeforePlay): void;
    OnBeforePlay(msg: DtMsg_BeforePlay): void;
    OnPlay(msg: DtMsg_OnPlay): void;
    OnInBattleArea(): void;
    OnEvolution(msg: DtMsg_DigimonEvolution): void;
    OnWhenAttacking(msg: DtMsg_BattleInfo): void;
    OnBeBlock(): void;
    OnDestroy(msg: DtMsg_OnActionEffect): void;
    OnUseEffect(): void;
    OnFusionEvo(): void;
    OnDefenseEffect(): void;
    OnEnterArea(area: DtAreaType): void;
    OnLeaveArea(area: DtAreaType): void;
    RemoveOriginDigimon(card: DtCardBase): void;
    ResetState(): void;
    CanAttack(): boolean;
    CardCanAttack(type: DtFsmAttackType, card: DtCardBase, isEvoOverAttack?: boolean): boolean;
    CardCanBeAttack(): boolean;
    CardCanUse(): boolean;
    PopInheritBuff(): Array<DtBuffBase>;
    SetInheritBuff(inheritBuffs: Array<DtBuffBase>): void;
    CardInActionEffect(type: DtActionEffectType): boolean;
    GetCardConfigLv(): number;
    GetConfigCost(): number;
    GetConfigDP(): number;
    GetCardForceNameIncludBuff(): Array<number>;
    GetCardConfigForceName(): DtCardDigimonType;
    NameIsForceOtherCard(card: DtCardBase): boolean;
    ColorIsSameOtherCard(card: DtCardBase): boolean;
    CardLvIs(compare: DtFilterCompare, lv: number): boolean;
    UidEquals(uid: Long): boolean;
    ISSameCard(card: DtCardBase): boolean;
    Clear(): void;
    GetCardInBattleIndex(): number;
    private lastGameBattleInfo;
    private forceUpdateBattleInfo;
    GetLastBattleInfo(): DcgProto.S_GameBattleCard;
    GetGameBattleCard(): DcgProto.S_GameBattleCard;
    protected GetCardBattleInfo(): Array<DcgProto.S_GameBattleCardInfo>;
    protected GetCardEffectInfo(): Array<DcgProto.S_BattleCardEffectInfo>;
    private CardInfoISSame;
    private EffectInfoIsSame;
    private GetCanActavateEffectInBattle;
    private lastHandInfo;
    private forceUpdateHandInfo;
    GetLastHandInfo(): DcgProto.S_GameHandCard;
    GetGameHandCard(): DcgProto.S_GameHandCard;
    private GetCardPlayCost;
    private GetCanActavateEffectInHand;
    private GetCardSpecInHand;
    private GetCardBuffsFromHand;
    private CardSpecISSame;
}

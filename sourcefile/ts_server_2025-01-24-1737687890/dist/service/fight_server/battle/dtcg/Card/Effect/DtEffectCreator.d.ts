/// <reference types="long" />
import { Long } from "../../../../cmn/proto/Long";
import { DtAreaType, DtBuffDurationType, DtBuffEffectToType, DtBuffType, DtEffectRoundValid } from "../../Data/DtEnum";
import { DtBattleManager } from "../../DtBattleManager";
import { DtcgMessage2Client } from "../../Message/DtcgMessage2Client";
import { DtProtoEnum_MoveReason } from "../../Message/DtMessageData";
import { DtPlayer } from "../../Player/DtPlayer";
import { DtBuffCommonAny } from "../Buff/DtBuffConditionAny";
import { DtBuffConditionAttribute } from "../Buff/DtBuffConditionAttribute";
import { DtBuffCommonInt } from "../Buff/DtBuffConditionInt";
import { DtBuffSpecialEvoCondition, SpecialEvoType } from "../Buff/DtBuffSpecialEvoCondition";
import { DtCard } from "../DtCard";
import { DtCardBase } from "../DtCardBase";
import { DtGlobalBuff_ConditionAttribute } from "../GlobalBuff/DtGlobalBuff_ConditionAttribute";
import { DtGlobalBuff_ConditionInt } from "../GlobalBuff/DtGlobalBuff_ConditionInt";
import { DtGlobalPlayerBuff } from "../GlobalBuff/DtGlobalPlayerBuff";
import { DtGlobalPlayerBuffInt } from "../GlobalBuff/DtGlobalPlayerBuffInt";
import { DtSkillCardOperateBase } from "../Skill/DtSkillCardOperate/DtSkillCardOperateBase";
import { DtEffect, DtEffectResult } from "./DtEffect";
import { DtOriginCreatorData } from "./DtOriginCreatorData";
import { DtTimeEffect } from "./DtTimeEffect";
import { DtConTriggerBattleOver } from "./TriggerCondition/DtConTriggerBattleOver";
export declare class DtEffectCreator {
    isOrigin: boolean;
    originCard: DtCard;
    parent: DtCard;
    offerEffectCard: DtCard;
    offerEffectCreator: DtEffectCreator;
    offerCardNeedInBattle: boolean;
    EffectCreatorConstructorName: string;
    effCfgId: number;
    private effindex;
    originCreatorData: DtOriginCreatorData;
    constructor();
    Init(card: DtCard): void;
    ClientShow(): void;
    SetEffect(): void;
    protected GetNewEffect(): DtEffect;
    protected SetOriginNewEffect(call: (effect: DtEffect) => void): DtEffect;
    protected CreateTimeEffectToCard(card: DtCard, type: DtBuffDurationType, param: number, needInherit?: boolean): DtTimeEffect;
    protected GetAddEffect(): DtEffect;
    GetListWithCondition(list: Array<DtCardBase>, func: (card: DtCardBase) => boolean): DtCardBase[];
    CheckListWithCondition(list: Array<DtCardBase>, func: (card: DtCardBase) => boolean): boolean;
    GetCardInList(list: Array<DtCardBase>, uid: Long): DtCardBase;
    PopCardInList(list: Array<DtCardBase>, uid: Long): DtCardBase;
    protected GetBuff_ChangeDP(func: (buff: DtBuffCommonInt) => number): DtBuffCommonInt;
    protected GetBuff_ChangePower(func: (buff: DtBuffCommonInt) => number): DtBuffCommonInt;
    protected GetBuff_SetColor(func: (buff: DtBuffCommonAny) => any): DtBuffCommonAny;
    protected GetBuff_Attribute(type: DtBuffType, func: (buff: DtBuffConditionAttribute) => boolean): DtBuffConditionAttribute;
    protected GetBuff_SpecialEvoCon(func: (buff: DtBuffSpecialEvoCondition, card: DtCardBase) => number, type: SpecialEvoType, willBlock: boolean): DtBuffSpecialEvoCondition;
    protected GetGlobalBuff_ChangePower(func: (buff: DtGlobalBuff_ConditionInt, card: DtCardBase) => number, effectToType: DtBuffEffectToType, toArea: DtAreaType, roundValid: DtEffectRoundValid): DtGlobalBuff_ConditionInt;
    protected GetGlobalBuff_ChangeDP(func: (buff: DtGlobalBuff_ConditionInt, card: DtCardBase) => number, effectToType: DtBuffEffectToType, toArea: DtAreaType, roundValid: DtEffectRoundValid): DtGlobalBuff_ConditionInt;
    protected GetGlobalBuff_Attribute(bufftype: DtBuffType, func: (buff: DtGlobalBuff_ConditionAttribute, card: DtCardBase) => boolean, effectToType: DtBuffEffectToType, toArea: DtAreaType, roundValid: DtEffectRoundValid): DtGlobalBuff_ConditionAttribute;
    protected GetGlobalPlayerBuff(bufftype: DtBuffType, func: (buff: DtGlobalPlayerBuff, card: DtPlayer) => boolean, effectToType: DtBuffEffectToType, roundValid: DtEffectRoundValid): DtGlobalPlayerBuff;
    protected GetGlobalPlayerBuffInt(bufftype: DtBuffType, func: (buff: DtGlobalPlayerBuffInt, card: DtPlayer) => number, effectToType: DtBuffEffectToType, roundValid: DtEffectRoundValid): DtGlobalPlayerBuffInt;
    protected CreateGlobalEffect(creator: DtEffectCreator): DtEffectCreator;
    protected CreateEffectTo(creator: DtEffectCreator, card: DtCard, offerCardNeedInBattle: boolean): DtEffectCreator;
    protected GetDPDestory(dp: number): number;
    protected GetLvToEff(lv: number): number;
    protected GetManager(): DtBattleManager;
    protected GetPlayer(): DtPlayer;
    protected GetOppPlayer(): DtPlayer;
    protected UseCard(card: DtCardBase, useCost: boolean, OnEffect?: boolean, reason?: DtProtoEnum_MoveReason): void;
    protected PlayerSelectOptions(player: DtPlayer, count: any, effect: DtEffect): void;
    protected Get2ClientMessageMgr(): DtcgMessage2Client;
    SetOriginCreatorData(effect: DtEffect): void;
    Clear(): void;
    protected SetNormalBlockerEffect(): void;
    protected SetBlockEffect(effect: DtEffect): void;
    private BlockerCondition;
    private BlockerEffect;
    protected CreateRestartEffect(): void;
    protected SetRestartEffect(effect: DtEffect): void;
    private RestartCondition;
    private RestartEffect;
    protected CreateMichizureEffect(): void;
    protected SetMichizureEffect(effect: DtEffect): void;
    private MichizureCondition;
    private MichizureEffect;
    protected CreateRoleCommonPlayDefenseEffect(): void;
    private RolePlayEffect;
    protected CreateMagicCommonDefenseDelayEffect(): void;
    protected MagicDefenseTobattle(): DtEffectResult;
    CreateRoleCommonLock3Effect(): void;
    private RoleLock3Condition;
    private RoleLock3Effect;
    CreateDefenseOverPlayToAreaEffect(): void;
    DefenseOverPlayCondition(effect: DtEffect): boolean;
    DefenseOverPlayEffect(): DtEffectResult;
    protected CreateMagicDelayEffect(): DtEffect;
    private MagicDelayUseEffect1;
    protected GetBattleDestroyDigimonAndSelfAlive(round: DtEffectRoundValid): DtConTriggerBattleOver;
    CreateMagicDefenseActiveMainEffect(): DtEffect;
    private EffetMagicDefenseActiveMainEffect;
    protected CreateDefenseReturnToHandEffect(): void;
    private defenseReturnHand;
    protected CreateEmptyGlobalBuffToClient(): void;
    private CreateEmptyGlobalBuffEffect;
    protected ThisCardUseCost(cost: number): void;
    protected BindOneTurnOnceEffect(eff1: DtEffect, eff2: DtEffect): void;
    protected SetDirectSkill(effect: DtEffect, operate: DtSkillCardOperateBase, stage?: number): void;
}

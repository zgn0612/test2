import { DtActionEffectType, DtAreaType, DtCardColor, DtCardType, DtFilterCompare, DtSkillTargetToPlayer } from "../../../Data/DtEnum";
import { DtCardDigimonType } from "../../../Data/DtCardDigimonType";
import { DtPlayer } from "../../../Player/DtPlayer";
import { DtBuffSpecialEvoSeen } from "../../Buff/DtBuffSpecialEvoCondition";
import { DtCardBase } from "../../DtCardBase";
export declare class DtConCard {
    private type;
    private color;
    private ownTo;
    private area;
    private areaForward;
    private name;
    private isNameforce;
    private feature;
    private lastEffectedType;
    private lvFilter;
    private lv;
    private colorFilter;
    private colorCount;
    private costFilter;
    private cost;
    private EffectName;
    private func;
    private funcObj;
    seen: DtBuffSpecialEvoSeen;
    constructor(type: DtCardType, c: DtCardColor, o: DtSkillTargetToPlayer);
    SetNameCon(name: DtCardDigimonType, force: boolean): void;
    SetArea(area: DtAreaType, isforward?: boolean): void;
    SetLv(filter: DtFilterCompare, lv: number): void;
    SetColorCount(filter: DtFilterCompare, count: number): void;
    SetCondition(obj: any, func: (d: DtCardBase) => boolean): void;
    SetFeatureIs(...feature: DtCardDigimonType[]): void;
    SetEffectHas(effectName: number): void;
    SetLastEffectedType(type: DtActionEffectType): void;
    SetCostCon(filter: DtFilterCompare, cost: number): void;
    CheckCondition(player: DtPlayer, card: DtCardBase): any;
    private ChechColorFilter;
    private CheckCostFilterCard;
    SeenLvIs(compare: DtFilterCompare, seenLv: number, lv: number): boolean;
}

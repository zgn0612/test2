/// <reference types="long" />
import { Long } from "../../cmn/proto/Long";
import { DcgProto } from "../../cmn/proto/protoMsg";
import { DtCard } from "./Card/DtCard";
import { DtCardBase } from "./Card/DtCardBase";
import { DtEffectBase } from "./Card/Effect/DtEffectBase";
import { DtEffectType } from "./Card/Effect/DtEffectType";
import { DtGlobalBuffMgr } from "./Card/GlobalBuff/DtGlobalBuffMgr";
import { DtActionEffectType, DtAreaType, DtBattlePhase, DtGameOverReason, DtDegenerateType } from "./Data/DtEnum";
import { DtMsgBase } from "./Data/DtEventMsg";
import { DtEventType } from "./DtEvent";
import { DtPlayerTimer } from "./DtPlayerTimer";
import { DtRandom } from "./DtRandom";
import { DtFsmActionEffect } from "./Fsm/ActionEffect/DtFsmActionEffect";
import { DtFsmActionEffectManager } from "./Fsm/ActionEffect/DtFsmActionEffectManager";
import { DtFsmAttackType } from "./Fsm/Attack/DtFsmAttackEnum";
import { DtFsmEvolution } from "./Fsm/Evolution/DtFsmEvolution";
import { DtFsmUseCard } from "./Fsm/UseCard/DtFsmUseCard";
import { DtcgMessage2Client } from "./Message/DtcgMessage2Client";
import { DtEffectDesc, DtProtoEnum_MoveReason, DtRoomData, DtRoomType, DtSkillDesc } from "./Message/DtMessageData";
import { DtPlayer } from "./Player/DtPlayer";
import { DtChainFunc } from "./System/DtChainFunc";
import { DtSystemChian } from "./System/DtSystemChian";
export declare class DtBattleManager {
    roomId: string;
    roomData: DtRoomData;
    whileWaitPlayer: boolean;
    private waitPlayerId;
    private listTriggerEffect;
    private systemChian;
    private fsmAttack;
    private fsmGameMain;
    private event;
    globalBuffMgr: DtGlobalBuffMgr;
    reconnectData?: DcgProto.S_RoomFight;
    reconnectBrowse: DcgProto.S_PlayerExcavated;
    messageManager: DtcgMessage2Client;
    playerTimeOut: DtPlayerTimer;
    Random: DtRandom;
    InitBattle(data: DtRoomData): void;
    RoomTypeIs(type: DtRoomType): boolean;
    PlayerBattleCardsReLimit(player: DtPlayer): number;
    get CurRound(): number;
    get CurPlayerID(): Long.Long;
    get CurOppPlayerID(): Long.Long;
    get CurCost(): number;
    IsCurrentPlayer(playerId: Long): boolean;
    GetPlayer(uId: Long): DtPlayer;
    GetOppPlayer(uId: Long): DtPlayer;
    GetCurrentWaitPlayer(): DtPlayer;
    GetCurrentPahse(): DtBattlePhase;
    GetAllPlayer(): Array<DtPlayer>;
    GetWaitPlayerId(): Long;
    SetGameWaitPlayer(playerId?: Long, reconnectData?: DcgProto.S_RoomFight): void;
    DirectWaitSystem(): void;
    private GetCurrentReconnectPlayerId;
    UpdateGameBattleInfo(): void;
    private CheckCardUnusedBuffAndEffect;
    CheckBattlefieldDigimon(): boolean;
    Run(): boolean;
    ImmediatelyCreateCurrentNewChain(): void;
    SetFunc(func: DtChainFunc): void;
    private LogicTick;
    private CheckGameLogicIsFree;
    CheckFsmAttackIsFree(): boolean;
    NotifiClientBattleState(state: DtBattlePhase): void;
    SetEffectTrigger(trigger: DtEffectBase, msg: DtMsgBase): void;
    SetCost(cost: number, needCheckTurnover?: boolean): void;
    ChangeReduceCost(caster: DtCardBase, change: number, reason: DtProtoEnum_MoveReason): void;
    OnPlayerHatchDigimon(playerId: Long): boolean;
    EffectHatchDigimon(player: DtPlayer): void;
    OnDigimonCardPlay(playerId: Long, carduid: Long, index: number): boolean;
    EffectHatchGoBattle(player: DtPlayer): void;
    OnUseCard(caster: DtCardBase, player: DtPlayer, card: DtCardBase, useCost: boolean, OnEffect?: boolean, reason?: DtProtoEnum_MoveReason): DtFsmUseCard;
    OnCardDestroy(casterCard: DtCardBase, receiveCard: DtCardBase, OnEffect?: boolean): DtFsmActionEffect;
    OnCardAtkZeroDestroy(casterCard: DtCardBase, receiveCard: DtCardBase, OnEffect?: boolean): void;
    OnCardCannotInBattleDestroy(casterCard: DtCardBase, receiveCard: DtCardBase, OnEffect?: boolean): void;
    OnCardAttackDestroy(casterCard: DtCardBase, receiveCard: DtCardBase, OnEffect?: boolean): DtFsmActionEffect;
    OnCardReturnTo(casterCard: DtCardBase, receiveCard: DtCardBase, type?: DtActionEffectType, param?: number): DtFsmActionEffect;
    OnCardDegenerate(casterCard: DtCardBase, receiveCard: DtCardBase, param?: number): DtFsmActionEffect;
    OnCardArmorPurge(casterCard: DtCardBase, receiveCard: DtCardBase, degType: DtDegenerateType): DtCardBase;
    OnDrawCard(caster: DtCard, drawCount: number, type: DtProtoEnum_MoveReason): number;
    OnDiscardDeckTopCard(caster: DtCard, player: DtPlayer, discardCount: number): number;
    OnCardMoveTo(caster: DtCardBase, card: DtCardBase, to: DtAreaType, reason: DtProtoEnum_MoveReason): void;
    OnCardMoveToBottom(caster: DtCardBase, card: DtCardBase, to: DtAreaType, reason: DtProtoEnum_MoveReason): void;
    OnCardDelayUse(caster: DtCardBase, card: DtCardBase, to: DtAreaType, reason: DtProtoEnum_MoveReason): void;
    OnMagicMoveToBattle(caster: DtCardBase, card: DtCardBase): void;
    OnRestore(caster: DtCardBase, player: DtPlayer, count: number): void;
    OnDiscardDefenseCard(caster: DtCardBase, player: DtPlayer, count: number, reason: DtProtoEnum_MoveReason): void;
    OnDrawDefenseCard(caster: DtCardBase, player: DtPlayer, count: number, reason: DtProtoEnum_MoveReason): void;
    OnDrawCardFromDefense(caster: DtCardBase, player: DtPlayer, card: DtCardBase, reason: DtProtoEnum_MoveReason): void;
    OnCardSetToEvo(caster: DtCardBase, battlecard: DtCardBase, placeCard: DtCardBase, where: number, reason: DtProtoEnum_MoveReason): DtFsmActionEffect;
    OnCardDiscardEvoOriginWhere(caster: DtCardBase, card: DtCardBase, where: number, reason: DtProtoEnum_MoveReason): boolean;
    OnCardDiscardEvoOriginCard(caster: DtCardBase, card: DtCardBase, discard: DtCardBase, reason: DtProtoEnum_MoveReason): boolean;
    OnCardDiscardEvoOriginCardToHand(caster: DtCardBase, card: DtCardBase, discard: DtCardBase, reason: DtProtoEnum_MoveReason): boolean;
    OnCardDiscardEvoOriginCardToDeckBottom(caster: DtCardBase, card: DtCardBase, discard: DtCardBase, reason: DtProtoEnum_MoveReason): boolean;
    OnCardPlayFromOrigin(caster: DtCardBase, card: DtCardBase, originCard: DtCardBase, useCost: boolean, OnEffect: boolean): DtFsmUseCard;
    OnSetCardActiveState(caster: DtCardBase, card: DtCardBase, reason: DtProtoEnum_MoveReason): DtFsmActionEffect;
    OnSetCardResetState(caster: DtCardBase, card: DtCardBase, reason: DtProtoEnum_MoveReason): DtFsmActionEffect;
    OnForceAttackChangeTarget(caster: any, card: DtCardBase): boolean;
    OnForceAttackOver(): void;
    SkipDefenseAttackJudge(): void;
    OnPlayerSetNextTurn(playerId: Long): boolean;
    OnDigimonBattle(playerId: Long, atkCardUID: Long, defCardUID: Long, isForceAttack?: boolean): boolean;
    OnDigimonAttackDefense(playerId: Long, atkCardUID: Long, isForceAttack?: boolean): boolean;
    OnDigimonEffectBattle(player: DtPlayer, atkCard: DtCardBase, type: DtFsmAttackType, defCard: DtCardBase): void;
    QuitGame(playerId: Long): void;
    GameOver(player: DtPlayer, reason: DtGameOverReason): void;
    OnDigimonEvo(playerId: Long, evoMonsterUID: Long, originUID: Long, playerChooseCost: number): boolean;
    ForceDigimonEvo(player: DtPlayer, evoCard: DtCardBase, oriCard: DtCardBase, cost: number): DtFsmEvolution;
    ForceDigimonAttackEvo(player: DtPlayer, evoCard: DtCardBase, oriCard: DtCardBase, cost: number, isnoCostEvo: boolean): DtFsmEvolution;
    ChangeBattleCardInfo(oricard: DtCardBase, changeCard: DtCardBase): void;
    FusionEvolution(player: DtPlayer, evoCard: DtCardBase, topCard: DtCardBase, bottomCard: DtCardBase, cost: number): void;
    OnPlayerChooseOne(playerId: Long, uid: Long, questId?: number): boolean;
    OnPlayerGameEvent(playerId: Long, eventid: number): boolean;
    OnPlayerChooseMul(playerId: Long, uids: Long[], questId?: number): boolean;
    OnPlayerChooseEffectActivateSortOrCancel(playerId: Long, activates: Array<number>, cancels: Array<number>, questId?: number): boolean;
    private CheckEffectActiveIndexLegal;
    private CheckQuestIdIsLegality;
    private GetCurrentReconnectQuestid;
    private CheckChooseOneIdIsLegality;
    private CheckChooseMulIdIsLegality;
    private CheckCardUidIsInArray;
    OnPlayerUseDigimonEffectInBattle(playerId: Long, uid: Long): boolean;
    OnPlayerUseFusionEvo(playerId: Long, uid: Long): boolean;
    AddListener(type: DtEventType, obj: any, func: Function): void;
    RemoveListener(type: DtEventType, obj: any, func?: Function): void;
    FireListener(type: DtEventType, msg: DtMsgBase): void;
    GetCurrentFsmEvo(): DtFsmEvolution;
    GetCurrentFsmActionManger(): DtFsmActionEffectManager;
    GetCurrentSysChainId(): number;
    CheckInBattleHasEffectCanActivate(effType: DtEffectType, player: DtPlayer, area: DtAreaType, msg?: DtMsgBase): boolean;
    GetSystemChain(): DtSystemChian;
    Get2ClientMessageMgr(): DtcgMessage2Client;
    IsClear(): boolean;
    Clear(): void;
    RunTimeOut(): boolean;
    ForceTimeOut(): boolean;
    private DoTimeoutLogic;
    GameEndPlayerWin(): void;
    private SkipStep;
    private AutoSkipPlayerChoose;
    private DtGMTest;
    OnGm(playerid: Long, gm: string): boolean;
    GetPlaybackInitData(): DcgProto.S_ReplayBattleData;
    private _tickId;
    private _idx;
    private _skillList;
    private _card;
    C_CheckEffectIndex(): void;
    C_InitClientEffectMode(): void;
    private C_CheckEffectTick;
    C_GetAllDescWithCardId(cardid: number): Array<DtEffectDesc>;
    C_GetEffectDescWithEffectIdAndIndex(effectid: number, index: number): DtSkillDesc;
    private C_CareateEffectToCard;
}

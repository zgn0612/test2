/// <reference types="long" />
import { Long } from "../../../cmn/proto/Long";
import { DcgProto } from "../../../cmn/proto/protoMsg";
import { DtArea } from "../Area/DtArea";
import { DtAreaBattle } from "../Area/DtAreaBattle";
import { DtAreaBrowse } from "../Area/DtAreaBrowse";
import { DtAreaDigitama } from "../Area/DtAreaDigitama";
import { DtAreaWait } from "../Area/DtAreaWait";
import { DtCard } from "../Card/DtCard";
import { DtCardBase } from "../Card/DtCardBase";
import { DtAreaType, DtDegenerateType } from "../Data/DtEnum";
import { DtBattleManager } from "../DtBattleManager";
import { DtProtoEnum_MoveReason } from "../Message/DtMessageData";
import { DtPlayerRoundData } from "./DtPlayerRoundData";
export declare class DtPlayer {
    manager: DtBattleManager;
    playerId: Long;
    private cardId;
    areaDefense: DtArea;
    areaDigitama: DtAreaDigitama;
    areaDeck: DtArea;
    areaGraveyard: DtArea;
    areaHand: DtArea;
    areaInBattle: DtAreaBattle;
    areaEvo: DtArea;
    areaToken: DtArea;
    areaWait: DtAreaWait;
    areaBrowse: DtAreaBrowse;
    roundData: DtPlayerRoundData;
    constructor(uId: Long, manager: DtBattleManager, startCardId?: Long);
    Init(deck: number[], egg: number[]): void;
    StartBattle(): void;
    SetDefenseCard(): void;
    DrawCard(type: DtProtoEnum_MoveReason): boolean;
    FirstDrawCard(type: DtProtoEnum_MoveReason): boolean;
    CreateTokenCard(cardId: number): DtCardBase;
    CreateCardOutDeck(cardId: number): void;
    MoveCard(card: DtCardBase, fromArea: DtAreaType, toArea: DtAreaType, reason: DtProtoEnum_MoveReason, callBack?: (c: DtCardBase) => void): DtCardBase;
    MoveCardNoMessage(card: DtCardBase, fromArea: DtAreaType, toArea: DtAreaType, callBack?: (c: DtCardBase) => void): DtCardBase;
    HatchDigitama(): void;
    HatchGoBattle(uid: Long, index: number): DtCardBase;
    DigimonEffectGoBattle(card: DtCardBase, index: number, reason: DtProtoEnum_MoveReason): void;
    DigimonEffectGoBattleAndResetState(card: DtCardBase, index: number, reason: DtProtoEnum_MoveReason): void;
    CardMoveTo(card: DtCardBase, to: DtAreaType, reason: DtProtoEnum_MoveReason): void;
    CardMoveToBottom(card: DtCardBase, to: DtAreaType, reason: DtProtoEnum_MoveReason): void;
    TopCardInDeck2GY(): DtCardBase;
    DiscardDefense(): void;
    CardEvo(evoCard: DtCardBase, originCard: DtCardBase): void;
    CardFusionEvo(evoCard: DtCardBase, oriTopCard: DtCardBase, oriBottomCard: DtCardBase): void;
    CardDiscardEvoOrigin(card: DtCardBase, origin: DtCardBase, toAreaType: DtAreaType, toUp?: boolean): void;
    PopCardFromCardEvo(card: DtCardBase, origin: DtCardBase, reason?: DtProtoEnum_MoveReason): boolean;
    CardDegenerate(caster: DtCardBase, card: DtCardBase, time: number): DtCard;
    private DegenerateOnce;
    CardArmorPurge(caster: DtCardBase, card: DtCardBase, degType: DtDegenerateType): DtCard;
    Restore(): void;
    DrawCardFromDefense(caster: DtCardBase, card: DtCardBase, reason: DtProtoEnum_MoveReason): void;
    GetBattleCardsReLimit(): number;
    IsThisPlayerRound(): boolean;
    GetOppPlayer(): DtPlayer;
    GetArea(type: DtAreaType): DtArea;
    GetReconnectData(playerID: Long): DcgProto.S_ReconnectPlayer;
    GetGameBattlePlayer(): DcgProto.S_GameBattlePlayer;
    PlayerIdEquals(id: Long): boolean;
    Clear(): void;
}

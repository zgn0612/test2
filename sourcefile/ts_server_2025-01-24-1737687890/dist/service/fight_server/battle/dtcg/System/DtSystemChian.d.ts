/// <reference types="long" />
import { Long } from "../../../cmn/proto/Long";
import { DtCardBase } from "../Card/DtCardBase";
import { DtActionEffectType } from "../Data/DtEnum";
import { DtBattleManager } from "../DtBattleManager";
import { DtTriggerEffectWithMsg } from "../DtTriggerEffectWithMsg";
import { DtFsmActionEffect } from "../Fsm/ActionEffect/DtFsmActionEffect";
import { DtFsmActionEffectManager } from "../Fsm/ActionEffect/DtFsmActionEffectManager";
import { DtFsmEvolution } from "../Fsm/Evolution/DtFsmEvolution";
import { DtFsmUseCard } from "../Fsm/UseCard/DtFsmUseCard";
import { DtProtoEnum_MoveReason } from "../Message/DtMessageData";
import { DtPlayer } from "../Player/DtPlayer";
import { DtChainFunc } from "./DtChainFunc";
import { DtChian } from "./DtChian";
export declare class DtSystemChian {
    chainId: number;
    SetEffectChainId: number;
    manager: DtBattleManager;
    private listChian;
    private activeChians;
    private currentExecuteTrigger;
    private waitEffects;
    private waitHightEffects;
    private waitFunc;
    waitPlayerChooseChain: DtChian;
    constructor(manager: DtBattleManager);
    OnTick(showlog?: boolean): void;
    ImmediatelyCreateNewChain(): void;
    private CreateNewChainForWaitEffect;
    ReduceWaitFuncFrame(): void;
    private HasSameEffect;
    ActivateNormalEffectTrigger(effect: DtTriggerEffectWithMsg): void;
    IsRunning(): boolean;
    SetCardsActiveEffect(effects: Array<DtTriggerEffectWithMsg>): void;
    SetChainFunc(func: DtChainFunc): void;
    private IsHighPriority;
    SetCardFsmActionEffect(player: DtPlayer, casterCard: DtCardBase, receiveCard: DtCardBase, effType: DtActionEffectType, param: number): DtFsmActionEffect;
    SetEvo(player: DtPlayer, evoCard: DtCardBase, oriCard: DtCardBase, cost: number): DtFsmEvolution;
    SetFusionEvolution(player: DtPlayer, evoCard: DtCardBase, topCard: DtCardBase, bottomCard: DtCardBase, cost: number): void;
    SetPlayerUseCard(caster: DtCardBase, player: DtPlayer, card: DtCardBase, useCost: boolean, onEffect: boolean, reason: DtProtoEnum_MoveReason): DtFsmUseCard;
    private GetChian;
    OnPlayerChooseOne(uid: Long): void;
    private CurrrenChooseOne;
    OnPlayerChooseMul(uids: Long[]): void;
    private CurrrenChooseMul;
    OnPlayerChooseEffectActivateSortOrCancel(activates: Array<number>, cancels: Array<number>): void;
    GetCurrentFsmEvo(): DtFsmEvolution;
    GetCurrentFsmActionManger(): DtFsmActionEffectManager;
    UpdateTriggerEffectEvoCard(evoCard: DtCardBase, oriCard: DtCardBase): void;
    private UpdateTriggerEffectEvoCardInWaitEffect;
    private GetSameEffect;
    IsLastChain(chain: DtChian): boolean;
    Clear(): void;
}

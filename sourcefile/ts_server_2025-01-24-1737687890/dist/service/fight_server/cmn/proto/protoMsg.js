/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.DcgProto = (function() {

    /**
     * Namespace DcgProto.
     * @exports DcgProto
     * @namespace
     */
    var DcgProto = {};

    DcgProto.S_Role = (function() {

        /**
         * Properties of a S_Role.
         * @memberof DcgProto
         * @interface IS_Role
         * @property {Long|null} [InstanceId] S_Role InstanceId
         * @property {number|null} [ShortId] S_Role ShortId
         * @property {number|null} [Level] S_Role Level
         * @property {string|null} [NickName] S_Role NickName
         * @property {number|null} [Icon] S_Role Icon
         * @property {number|null} [IconFrame] S_Role IconFrame
         * @property {number|null} [RankedSeasonCount] S_Role RankedSeasonCount
         * @property {number|null} [RankedStars] S_Role RankedStars
         * @property {number|null} [HistoryRankedStars] S_Role HistoryRankedStars
         * @property {number|null} [RankedConWin] S_Role RankedConWin
         * @property {Array.<number>|null} [TitleIds] S_Role TitleIds
         * @property {number|null} [PvpRoomDissolveTime] S_Role PvpRoomDissolveTime
         * @property {number|null} [PersonalRoomDissolveTime] S_Role PersonalRoomDissolveTime
         * @property {number|null} [DailyFriendIntroCount] S_Role DailyFriendIntroCount
         * @property {number|null} [DailyTaskRefreshCount] S_Role DailyTaskRefreshCount
         */

        /**
         * Constructs a new S_Role.
         * @memberof DcgProto
         * @classdesc Represents a S_Role.
         * @implements IS_Role
         * @constructor
         * @param {DcgProto.IS_Role=} [p] Properties to set
         */
        function S_Role(p) {
            this.TitleIds = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_Role InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_Role ShortId.
         * @member {number} ShortId
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.ShortId = 0;

        /**
         * S_Role Level.
         * @member {number} Level
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.Level = 0;

        /**
         * S_Role NickName.
         * @member {string} NickName
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.NickName = "";

        /**
         * S_Role Icon.
         * @member {number} Icon
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.Icon = 0;

        /**
         * S_Role IconFrame.
         * @member {number} IconFrame
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.IconFrame = 0;

        /**
         * S_Role RankedSeasonCount.
         * @member {number} RankedSeasonCount
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.RankedSeasonCount = 0;

        /**
         * S_Role RankedStars.
         * @member {number} RankedStars
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.RankedStars = 0;

        /**
         * S_Role HistoryRankedStars.
         * @member {number} HistoryRankedStars
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.HistoryRankedStars = 0;

        /**
         * S_Role RankedConWin.
         * @member {number} RankedConWin
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.RankedConWin = 0;

        /**
         * S_Role TitleIds.
         * @member {Array.<number>} TitleIds
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.TitleIds = $util.emptyArray;

        /**
         * S_Role PvpRoomDissolveTime.
         * @member {number} PvpRoomDissolveTime
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.PvpRoomDissolveTime = 0;

        /**
         * S_Role PersonalRoomDissolveTime.
         * @member {number} PersonalRoomDissolveTime
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.PersonalRoomDissolveTime = 0;

        /**
         * S_Role DailyFriendIntroCount.
         * @member {number} DailyFriendIntroCount
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.DailyFriendIntroCount = 0;

        /**
         * S_Role DailyTaskRefreshCount.
         * @member {number} DailyTaskRefreshCount
         * @memberof DcgProto.S_Role
         * @instance
         */
        S_Role.prototype.DailyTaskRefreshCount = 0;

        /**
         * Creates a new S_Role instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_Role
         * @static
         * @param {DcgProto.IS_Role=} [properties] Properties to set
         * @returns {DcgProto.S_Role} S_Role instance
         */
        S_Role.create = function create(properties) {
            return new S_Role(properties);
        };

        /**
         * Encodes the specified S_Role message. Does not implicitly {@link DcgProto.S_Role.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_Role
         * @static
         * @param {DcgProto.IS_Role} m S_Role message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_Role.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.ShortId != null && Object.hasOwnProperty.call(m, "ShortId"))
                w.uint32(16).int32(m.ShortId);
            if (m.Level != null && Object.hasOwnProperty.call(m, "Level"))
                w.uint32(24).int32(m.Level);
            if (m.NickName != null && Object.hasOwnProperty.call(m, "NickName"))
                w.uint32(42).string(m.NickName);
            if (m.Icon != null && Object.hasOwnProperty.call(m, "Icon"))
                w.uint32(48).int32(m.Icon);
            if (m.IconFrame != null && Object.hasOwnProperty.call(m, "IconFrame"))
                w.uint32(56).int32(m.IconFrame);
            if (m.RankedSeasonCount != null && Object.hasOwnProperty.call(m, "RankedSeasonCount"))
                w.uint32(64).int32(m.RankedSeasonCount);
            if (m.RankedStars != null && Object.hasOwnProperty.call(m, "RankedStars"))
                w.uint32(72).int32(m.RankedStars);
            if (m.HistoryRankedStars != null && Object.hasOwnProperty.call(m, "HistoryRankedStars"))
                w.uint32(80).int32(m.HistoryRankedStars);
            if (m.RankedConWin != null && Object.hasOwnProperty.call(m, "RankedConWin"))
                w.uint32(88).int32(m.RankedConWin);
            if (m.TitleIds != null && m.TitleIds.length) {
                w.uint32(162).fork();
                for (var i = 0; i < m.TitleIds.length; ++i)
                    w.int32(m.TitleIds[i]);
                w.ldelim();
            }
            if (m.PvpRoomDissolveTime != null && Object.hasOwnProperty.call(m, "PvpRoomDissolveTime"))
                w.uint32(168).uint32(m.PvpRoomDissolveTime);
            if (m.PersonalRoomDissolveTime != null && Object.hasOwnProperty.call(m, "PersonalRoomDissolveTime"))
                w.uint32(176).uint32(m.PersonalRoomDissolveTime);
            if (m.DailyFriendIntroCount != null && Object.hasOwnProperty.call(m, "DailyFriendIntroCount"))
                w.uint32(184).int32(m.DailyFriendIntroCount);
            if (m.DailyTaskRefreshCount != null && Object.hasOwnProperty.call(m, "DailyTaskRefreshCount"))
                w.uint32(192).int32(m.DailyTaskRefreshCount);
            return w;
        };

        /**
         * Decodes a S_Role message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_Role
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_Role} S_Role
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_Role.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_Role();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.ShortId = r.int32();
                    break;
                case 3:
                    m.Level = r.int32();
                    break;
                case 5:
                    m.NickName = r.string();
                    break;
                case 6:
                    m.Icon = r.int32();
                    break;
                case 7:
                    m.IconFrame = r.int32();
                    break;
                case 8:
                    m.RankedSeasonCount = r.int32();
                    break;
                case 9:
                    m.RankedStars = r.int32();
                    break;
                case 10:
                    m.HistoryRankedStars = r.int32();
                    break;
                case 11:
                    m.RankedConWin = r.int32();
                    break;
                case 20:
                    if (!(m.TitleIds && m.TitleIds.length))
                        m.TitleIds = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.TitleIds.push(r.int32());
                    } else
                        m.TitleIds.push(r.int32());
                    break;
                case 21:
                    m.PvpRoomDissolveTime = r.uint32();
                    break;
                case 22:
                    m.PersonalRoomDissolveTime = r.uint32();
                    break;
                case 23:
                    m.DailyFriendIntroCount = r.int32();
                    break;
                case 24:
                    m.DailyTaskRefreshCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_Role message.
         * @function verify
         * @memberof DcgProto.S_Role
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_Role.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.ShortId != null && m.hasOwnProperty("ShortId")) {
                if (!$util.isInteger(m.ShortId))
                    return "ShortId: integer expected";
            }
            if (m.Level != null && m.hasOwnProperty("Level")) {
                if (!$util.isInteger(m.Level))
                    return "Level: integer expected";
            }
            if (m.NickName != null && m.hasOwnProperty("NickName")) {
                if (!$util.isString(m.NickName))
                    return "NickName: string expected";
            }
            if (m.Icon != null && m.hasOwnProperty("Icon")) {
                if (!$util.isInteger(m.Icon))
                    return "Icon: integer expected";
            }
            if (m.IconFrame != null && m.hasOwnProperty("IconFrame")) {
                if (!$util.isInteger(m.IconFrame))
                    return "IconFrame: integer expected";
            }
            if (m.RankedSeasonCount != null && m.hasOwnProperty("RankedSeasonCount")) {
                if (!$util.isInteger(m.RankedSeasonCount))
                    return "RankedSeasonCount: integer expected";
            }
            if (m.RankedStars != null && m.hasOwnProperty("RankedStars")) {
                if (!$util.isInteger(m.RankedStars))
                    return "RankedStars: integer expected";
            }
            if (m.HistoryRankedStars != null && m.hasOwnProperty("HistoryRankedStars")) {
                if (!$util.isInteger(m.HistoryRankedStars))
                    return "HistoryRankedStars: integer expected";
            }
            if (m.RankedConWin != null && m.hasOwnProperty("RankedConWin")) {
                if (!$util.isInteger(m.RankedConWin))
                    return "RankedConWin: integer expected";
            }
            if (m.TitleIds != null && m.hasOwnProperty("TitleIds")) {
                if (!Array.isArray(m.TitleIds))
                    return "TitleIds: array expected";
                for (var i = 0; i < m.TitleIds.length; ++i) {
                    if (!$util.isInteger(m.TitleIds[i]))
                        return "TitleIds: integer[] expected";
                }
            }
            if (m.PvpRoomDissolveTime != null && m.hasOwnProperty("PvpRoomDissolveTime")) {
                if (!$util.isInteger(m.PvpRoomDissolveTime))
                    return "PvpRoomDissolveTime: integer expected";
            }
            if (m.PersonalRoomDissolveTime != null && m.hasOwnProperty("PersonalRoomDissolveTime")) {
                if (!$util.isInteger(m.PersonalRoomDissolveTime))
                    return "PersonalRoomDissolveTime: integer expected";
            }
            if (m.DailyFriendIntroCount != null && m.hasOwnProperty("DailyFriendIntroCount")) {
                if (!$util.isInteger(m.DailyFriendIntroCount))
                    return "DailyFriendIntroCount: integer expected";
            }
            if (m.DailyTaskRefreshCount != null && m.hasOwnProperty("DailyTaskRefreshCount")) {
                if (!$util.isInteger(m.DailyTaskRefreshCount))
                    return "DailyTaskRefreshCount: integer expected";
            }
            return null;
        };

        return S_Role;
    })();

    DcgProto.S_GameServerInfo = (function() {

        /**
         * Properties of a S_GameServerInfo.
         * @memberof DcgProto
         * @interface IS_GameServerInfo
         * @property {number|null} [OpenServerTime] S_GameServerInfo OpenServerTime
         * @property {string|null} [StartVersion] S_GameServerInfo StartVersion
         */

        /**
         * Constructs a new S_GameServerInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_GameServerInfo.
         * @implements IS_GameServerInfo
         * @constructor
         * @param {DcgProto.IS_GameServerInfo=} [p] Properties to set
         */
        function S_GameServerInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_GameServerInfo OpenServerTime.
         * @member {number} OpenServerTime
         * @memberof DcgProto.S_GameServerInfo
         * @instance
         */
        S_GameServerInfo.prototype.OpenServerTime = 0;

        /**
         * S_GameServerInfo StartVersion.
         * @member {string} StartVersion
         * @memberof DcgProto.S_GameServerInfo
         * @instance
         */
        S_GameServerInfo.prototype.StartVersion = "";

        /**
         * Creates a new S_GameServerInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_GameServerInfo
         * @static
         * @param {DcgProto.IS_GameServerInfo=} [properties] Properties to set
         * @returns {DcgProto.S_GameServerInfo} S_GameServerInfo instance
         */
        S_GameServerInfo.create = function create(properties) {
            return new S_GameServerInfo(properties);
        };

        /**
         * Encodes the specified S_GameServerInfo message. Does not implicitly {@link DcgProto.S_GameServerInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_GameServerInfo
         * @static
         * @param {DcgProto.IS_GameServerInfo} m S_GameServerInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_GameServerInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.OpenServerTime != null && Object.hasOwnProperty.call(m, "OpenServerTime"))
                w.uint32(8).uint32(m.OpenServerTime);
            if (m.StartVersion != null && Object.hasOwnProperty.call(m, "StartVersion"))
                w.uint32(18).string(m.StartVersion);
            return w;
        };

        /**
         * Decodes a S_GameServerInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_GameServerInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_GameServerInfo} S_GameServerInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_GameServerInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_GameServerInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.OpenServerTime = r.uint32();
                    break;
                case 2:
                    m.StartVersion = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_GameServerInfo message.
         * @function verify
         * @memberof DcgProto.S_GameServerInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_GameServerInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.OpenServerTime != null && m.hasOwnProperty("OpenServerTime")) {
                if (!$util.isInteger(m.OpenServerTime))
                    return "OpenServerTime: integer expected";
            }
            if (m.StartVersion != null && m.hasOwnProperty("StartVersion")) {
                if (!$util.isString(m.StartVersion))
                    return "StartVersion: string expected";
            }
            return null;
        };

        return S_GameServerInfo;
    })();

    DcgProto.S_CommonUpdate = (function() {

        /**
         * Properties of a S_CommonUpdate.
         * @memberof DcgProto
         * @interface IS_CommonUpdate
         * @property {DcgProto.IS_Role|null} [Role] S_CommonUpdate Role
         * @property {DcgProto.IS_GameServerInfo|null} [ServerInfo] S_CommonUpdate ServerInfo
         * @property {Array.<DcgProto.IS_Item>|null} [Items] S_CommonUpdate Items
         * @property {Array.<DcgProto.IS_Card>|null} [Cards] S_CommonUpdate Cards
         * @property {Array.<DcgProto.IS_DeckInfo>|null} [Decks] S_CommonUpdate Decks
         * @property {Array.<DcgProto.IS_DeckExtendInfo>|null} [DeckExtends] S_CommonUpdate DeckExtends
         * @property {Array.<DcgProto.IS_Shop>|null} [Shops] S_CommonUpdate Shops
         * @property {Array.<DcgProto.IS_CardBag>|null} [CardBags] S_CommonUpdate CardBags
         * @property {Array.<DcgProto.IS_Parts>|null} [Parts] S_CommonUpdate Parts
         * @property {Array.<DcgProto.IS_CardCollect>|null} [CardCollects] S_CommonUpdate CardCollects
         * @property {Array.<DcgProto.IS_MailNew>|null} [MailNews] S_CommonUpdate MailNews
         * @property {Array.<DcgProto.IS_Friend>|null} [Friend] S_CommonUpdate Friend
         * @property {Array.<DcgProto.IS_FriendApply>|null} [FriendApply] S_CommonUpdate FriendApply
         * @property {Array.<DcgProto.IS_FriendApply>|null} [FriendBeApply] S_CommonUpdate FriendBeApply
         * @property {DcgProto.IS_Fight|null} [Fight] S_CommonUpdate Fight
         * @property {DcgProto.IS_Match|null} [Match] S_CommonUpdate Match
         * @property {Array.<DcgProto.IS_PvpInvite>|null} [PvpInvite] S_CommonUpdate PvpInvite
         * @property {Array.<DcgProto.IS_PvpInvite>|null} [PvpBeInvite] S_CommonUpdate PvpBeInvite
         * @property {DcgProto.IS_RoleExtra|null} [RoleExtra] S_CommonUpdate RoleExtra
         * @property {DcgProto.IS_PersonalRoom|null} [PersonalRoom] S_CommonUpdate PersonalRoom
         * @property {DcgProto.IS_PvpRoom|null} [PvpRoom] S_CommonUpdate PvpRoom
         * @property {Array.<DcgProto.IS_PvpRoomMember>|null} [PvpRoomMember] S_CommonUpdate PvpRoomMember
         * @property {DcgProto.IS_PvpRoomRace|null} [PvpRoomRace] S_CommonUpdate PvpRoomRace
         * @property {Array.<DcgProto.IS_Task>|null} [Tasks] S_CommonUpdate Tasks
         * @property {Array.<DcgProto.IS_StageTask>|null} [StageTasks] S_CommonUpdate StageTasks
         * @property {Array.<DcgProto.IS_Story>|null} [Storys] S_CommonUpdate Storys
         * @property {Array.<DcgProto.IS_Digimon>|null} [Digimons] S_CommonUpdate Digimons
         * @property {DcgProto.IS_DigimonEvo|null} [DigimonEvo] S_CommonUpdate DigimonEvo
         * @property {DcgProto.IS_Ranked|null} [Ranked] S_CommonUpdate Ranked
         */

        /**
         * Constructs a new S_CommonUpdate.
         * @memberof DcgProto
         * @classdesc Represents a S_CommonUpdate.
         * @implements IS_CommonUpdate
         * @constructor
         * @param {DcgProto.IS_CommonUpdate=} [p] Properties to set
         */
        function S_CommonUpdate(p) {
            this.Items = [];
            this.Cards = [];
            this.Decks = [];
            this.DeckExtends = [];
            this.Shops = [];
            this.CardBags = [];
            this.Parts = [];
            this.CardCollects = [];
            this.MailNews = [];
            this.Friend = [];
            this.FriendApply = [];
            this.FriendBeApply = [];
            this.PvpInvite = [];
            this.PvpBeInvite = [];
            this.PvpRoomMember = [];
            this.Tasks = [];
            this.StageTasks = [];
            this.Storys = [];
            this.Digimons = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_CommonUpdate Role.
         * @member {DcgProto.IS_Role|null|undefined} Role
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.Role = null;

        /**
         * S_CommonUpdate ServerInfo.
         * @member {DcgProto.IS_GameServerInfo|null|undefined} ServerInfo
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.ServerInfo = null;

        /**
         * S_CommonUpdate Items.
         * @member {Array.<DcgProto.IS_Item>} Items
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.Items = $util.emptyArray;

        /**
         * S_CommonUpdate Cards.
         * @member {Array.<DcgProto.IS_Card>} Cards
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.Cards = $util.emptyArray;

        /**
         * S_CommonUpdate Decks.
         * @member {Array.<DcgProto.IS_DeckInfo>} Decks
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.Decks = $util.emptyArray;

        /**
         * S_CommonUpdate DeckExtends.
         * @member {Array.<DcgProto.IS_DeckExtendInfo>} DeckExtends
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.DeckExtends = $util.emptyArray;

        /**
         * S_CommonUpdate Shops.
         * @member {Array.<DcgProto.IS_Shop>} Shops
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.Shops = $util.emptyArray;

        /**
         * S_CommonUpdate CardBags.
         * @member {Array.<DcgProto.IS_CardBag>} CardBags
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.CardBags = $util.emptyArray;

        /**
         * S_CommonUpdate Parts.
         * @member {Array.<DcgProto.IS_Parts>} Parts
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.Parts = $util.emptyArray;

        /**
         * S_CommonUpdate CardCollects.
         * @member {Array.<DcgProto.IS_CardCollect>} CardCollects
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.CardCollects = $util.emptyArray;

        /**
         * S_CommonUpdate MailNews.
         * @member {Array.<DcgProto.IS_MailNew>} MailNews
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.MailNews = $util.emptyArray;

        /**
         * S_CommonUpdate Friend.
         * @member {Array.<DcgProto.IS_Friend>} Friend
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.Friend = $util.emptyArray;

        /**
         * S_CommonUpdate FriendApply.
         * @member {Array.<DcgProto.IS_FriendApply>} FriendApply
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.FriendApply = $util.emptyArray;

        /**
         * S_CommonUpdate FriendBeApply.
         * @member {Array.<DcgProto.IS_FriendApply>} FriendBeApply
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.FriendBeApply = $util.emptyArray;

        /**
         * S_CommonUpdate Fight.
         * @member {DcgProto.IS_Fight|null|undefined} Fight
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.Fight = null;

        /**
         * S_CommonUpdate Match.
         * @member {DcgProto.IS_Match|null|undefined} Match
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.Match = null;

        /**
         * S_CommonUpdate PvpInvite.
         * @member {Array.<DcgProto.IS_PvpInvite>} PvpInvite
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.PvpInvite = $util.emptyArray;

        /**
         * S_CommonUpdate PvpBeInvite.
         * @member {Array.<DcgProto.IS_PvpInvite>} PvpBeInvite
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.PvpBeInvite = $util.emptyArray;

        /**
         * S_CommonUpdate RoleExtra.
         * @member {DcgProto.IS_RoleExtra|null|undefined} RoleExtra
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.RoleExtra = null;

        /**
         * S_CommonUpdate PersonalRoom.
         * @member {DcgProto.IS_PersonalRoom|null|undefined} PersonalRoom
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.PersonalRoom = null;

        /**
         * S_CommonUpdate PvpRoom.
         * @member {DcgProto.IS_PvpRoom|null|undefined} PvpRoom
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.PvpRoom = null;

        /**
         * S_CommonUpdate PvpRoomMember.
         * @member {Array.<DcgProto.IS_PvpRoomMember>} PvpRoomMember
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.PvpRoomMember = $util.emptyArray;

        /**
         * S_CommonUpdate PvpRoomRace.
         * @member {DcgProto.IS_PvpRoomRace|null|undefined} PvpRoomRace
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.PvpRoomRace = null;

        /**
         * S_CommonUpdate Tasks.
         * @member {Array.<DcgProto.IS_Task>} Tasks
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.Tasks = $util.emptyArray;

        /**
         * S_CommonUpdate StageTasks.
         * @member {Array.<DcgProto.IS_StageTask>} StageTasks
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.StageTasks = $util.emptyArray;

        /**
         * S_CommonUpdate Storys.
         * @member {Array.<DcgProto.IS_Story>} Storys
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.Storys = $util.emptyArray;

        /**
         * S_CommonUpdate Digimons.
         * @member {Array.<DcgProto.IS_Digimon>} Digimons
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.Digimons = $util.emptyArray;

        /**
         * S_CommonUpdate DigimonEvo.
         * @member {DcgProto.IS_DigimonEvo|null|undefined} DigimonEvo
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.DigimonEvo = null;

        /**
         * S_CommonUpdate Ranked.
         * @member {DcgProto.IS_Ranked|null|undefined} Ranked
         * @memberof DcgProto.S_CommonUpdate
         * @instance
         */
        S_CommonUpdate.prototype.Ranked = null;

        /**
         * Creates a new S_CommonUpdate instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_CommonUpdate
         * @static
         * @param {DcgProto.IS_CommonUpdate=} [properties] Properties to set
         * @returns {DcgProto.S_CommonUpdate} S_CommonUpdate instance
         */
        S_CommonUpdate.create = function create(properties) {
            return new S_CommonUpdate(properties);
        };

        /**
         * Encodes the specified S_CommonUpdate message. Does not implicitly {@link DcgProto.S_CommonUpdate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_CommonUpdate
         * @static
         * @param {DcgProto.IS_CommonUpdate} m S_CommonUpdate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_CommonUpdate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Role != null && Object.hasOwnProperty.call(m, "Role"))
                $root.DcgProto.S_Role.encode(m.Role, w.uint32(10).fork()).ldelim();
            if (m.ServerInfo != null && Object.hasOwnProperty.call(m, "ServerInfo"))
                $root.DcgProto.S_GameServerInfo.encode(m.ServerInfo, w.uint32(18).fork()).ldelim();
            if (m.Items != null && m.Items.length) {
                for (var i = 0; i < m.Items.length; ++i)
                    $root.DcgProto.S_Item.encode(m.Items[i], w.uint32(26).fork()).ldelim();
            }
            if (m.Cards != null && m.Cards.length) {
                for (var i = 0; i < m.Cards.length; ++i)
                    $root.DcgProto.S_Card.encode(m.Cards[i], w.uint32(34).fork()).ldelim();
            }
            if (m.Decks != null && m.Decks.length) {
                for (var i = 0; i < m.Decks.length; ++i)
                    $root.DcgProto.S_DeckInfo.encode(m.Decks[i], w.uint32(42).fork()).ldelim();
            }
            if (m.DeckExtends != null && m.DeckExtends.length) {
                for (var i = 0; i < m.DeckExtends.length; ++i)
                    $root.DcgProto.S_DeckExtendInfo.encode(m.DeckExtends[i], w.uint32(50).fork()).ldelim();
            }
            if (m.Shops != null && m.Shops.length) {
                for (var i = 0; i < m.Shops.length; ++i)
                    $root.DcgProto.S_Shop.encode(m.Shops[i], w.uint32(58).fork()).ldelim();
            }
            if (m.CardBags != null && m.CardBags.length) {
                for (var i = 0; i < m.CardBags.length; ++i)
                    $root.DcgProto.S_CardBag.encode(m.CardBags[i], w.uint32(66).fork()).ldelim();
            }
            if (m.Parts != null && m.Parts.length) {
                for (var i = 0; i < m.Parts.length; ++i)
                    $root.DcgProto.S_Parts.encode(m.Parts[i], w.uint32(74).fork()).ldelim();
            }
            if (m.CardCollects != null && m.CardCollects.length) {
                for (var i = 0; i < m.CardCollects.length; ++i)
                    $root.DcgProto.S_CardCollect.encode(m.CardCollects[i], w.uint32(82).fork()).ldelim();
            }
            if (m.MailNews != null && m.MailNews.length) {
                for (var i = 0; i < m.MailNews.length; ++i)
                    $root.DcgProto.S_MailNew.encode(m.MailNews[i], w.uint32(90).fork()).ldelim();
            }
            if (m.Friend != null && m.Friend.length) {
                for (var i = 0; i < m.Friend.length; ++i)
                    $root.DcgProto.S_Friend.encode(m.Friend[i], w.uint32(98).fork()).ldelim();
            }
            if (m.FriendApply != null && m.FriendApply.length) {
                for (var i = 0; i < m.FriendApply.length; ++i)
                    $root.DcgProto.S_FriendApply.encode(m.FriendApply[i], w.uint32(106).fork()).ldelim();
            }
            if (m.FriendBeApply != null && m.FriendBeApply.length) {
                for (var i = 0; i < m.FriendBeApply.length; ++i)
                    $root.DcgProto.S_FriendApply.encode(m.FriendBeApply[i], w.uint32(114).fork()).ldelim();
            }
            if (m.Fight != null && Object.hasOwnProperty.call(m, "Fight"))
                $root.DcgProto.S_Fight.encode(m.Fight, w.uint32(130).fork()).ldelim();
            if (m.Match != null && Object.hasOwnProperty.call(m, "Match"))
                $root.DcgProto.S_Match.encode(m.Match, w.uint32(138).fork()).ldelim();
            if (m.PvpInvite != null && m.PvpInvite.length) {
                for (var i = 0; i < m.PvpInvite.length; ++i)
                    $root.DcgProto.S_PvpInvite.encode(m.PvpInvite[i], w.uint32(146).fork()).ldelim();
            }
            if (m.PvpBeInvite != null && m.PvpBeInvite.length) {
                for (var i = 0; i < m.PvpBeInvite.length; ++i)
                    $root.DcgProto.S_PvpInvite.encode(m.PvpBeInvite[i], w.uint32(154).fork()).ldelim();
            }
            if (m.RoleExtra != null && Object.hasOwnProperty.call(m, "RoleExtra"))
                $root.DcgProto.S_RoleExtra.encode(m.RoleExtra, w.uint32(162).fork()).ldelim();
            if (m.PersonalRoom != null && Object.hasOwnProperty.call(m, "PersonalRoom"))
                $root.DcgProto.S_PersonalRoom.encode(m.PersonalRoom, w.uint32(170).fork()).ldelim();
            if (m.PvpRoom != null && Object.hasOwnProperty.call(m, "PvpRoom"))
                $root.DcgProto.S_PvpRoom.encode(m.PvpRoom, w.uint32(178).fork()).ldelim();
            if (m.PvpRoomMember != null && m.PvpRoomMember.length) {
                for (var i = 0; i < m.PvpRoomMember.length; ++i)
                    $root.DcgProto.S_PvpRoomMember.encode(m.PvpRoomMember[i], w.uint32(186).fork()).ldelim();
            }
            if (m.PvpRoomRace != null && Object.hasOwnProperty.call(m, "PvpRoomRace"))
                $root.DcgProto.S_PvpRoomRace.encode(m.PvpRoomRace, w.uint32(194).fork()).ldelim();
            if (m.Tasks != null && m.Tasks.length) {
                for (var i = 0; i < m.Tasks.length; ++i)
                    $root.DcgProto.S_Task.encode(m.Tasks[i], w.uint32(202).fork()).ldelim();
            }
            if (m.StageTasks != null && m.StageTasks.length) {
                for (var i = 0; i < m.StageTasks.length; ++i)
                    $root.DcgProto.S_StageTask.encode(m.StageTasks[i], w.uint32(210).fork()).ldelim();
            }
            if (m.Storys != null && m.Storys.length) {
                for (var i = 0; i < m.Storys.length; ++i)
                    $root.DcgProto.S_Story.encode(m.Storys[i], w.uint32(218).fork()).ldelim();
            }
            if (m.Digimons != null && m.Digimons.length) {
                for (var i = 0; i < m.Digimons.length; ++i)
                    $root.DcgProto.S_Digimon.encode(m.Digimons[i], w.uint32(226).fork()).ldelim();
            }
            if (m.DigimonEvo != null && Object.hasOwnProperty.call(m, "DigimonEvo"))
                $root.DcgProto.S_DigimonEvo.encode(m.DigimonEvo, w.uint32(234).fork()).ldelim();
            if (m.Ranked != null && Object.hasOwnProperty.call(m, "Ranked"))
                $root.DcgProto.S_Ranked.encode(m.Ranked, w.uint32(242).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_CommonUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_CommonUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_CommonUpdate} S_CommonUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_CommonUpdate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_CommonUpdate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Role = $root.DcgProto.S_Role.decode(r, r.uint32());
                    break;
                case 2:
                    m.ServerInfo = $root.DcgProto.S_GameServerInfo.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.Items && m.Items.length))
                        m.Items = [];
                    m.Items.push($root.DcgProto.S_Item.decode(r, r.uint32()));
                    break;
                case 4:
                    if (!(m.Cards && m.Cards.length))
                        m.Cards = [];
                    m.Cards.push($root.DcgProto.S_Card.decode(r, r.uint32()));
                    break;
                case 5:
                    if (!(m.Decks && m.Decks.length))
                        m.Decks = [];
                    m.Decks.push($root.DcgProto.S_DeckInfo.decode(r, r.uint32()));
                    break;
                case 6:
                    if (!(m.DeckExtends && m.DeckExtends.length))
                        m.DeckExtends = [];
                    m.DeckExtends.push($root.DcgProto.S_DeckExtendInfo.decode(r, r.uint32()));
                    break;
                case 7:
                    if (!(m.Shops && m.Shops.length))
                        m.Shops = [];
                    m.Shops.push($root.DcgProto.S_Shop.decode(r, r.uint32()));
                    break;
                case 8:
                    if (!(m.CardBags && m.CardBags.length))
                        m.CardBags = [];
                    m.CardBags.push($root.DcgProto.S_CardBag.decode(r, r.uint32()));
                    break;
                case 9:
                    if (!(m.Parts && m.Parts.length))
                        m.Parts = [];
                    m.Parts.push($root.DcgProto.S_Parts.decode(r, r.uint32()));
                    break;
                case 10:
                    if (!(m.CardCollects && m.CardCollects.length))
                        m.CardCollects = [];
                    m.CardCollects.push($root.DcgProto.S_CardCollect.decode(r, r.uint32()));
                    break;
                case 11:
                    if (!(m.MailNews && m.MailNews.length))
                        m.MailNews = [];
                    m.MailNews.push($root.DcgProto.S_MailNew.decode(r, r.uint32()));
                    break;
                case 12:
                    if (!(m.Friend && m.Friend.length))
                        m.Friend = [];
                    m.Friend.push($root.DcgProto.S_Friend.decode(r, r.uint32()));
                    break;
                case 13:
                    if (!(m.FriendApply && m.FriendApply.length))
                        m.FriendApply = [];
                    m.FriendApply.push($root.DcgProto.S_FriendApply.decode(r, r.uint32()));
                    break;
                case 14:
                    if (!(m.FriendBeApply && m.FriendBeApply.length))
                        m.FriendBeApply = [];
                    m.FriendBeApply.push($root.DcgProto.S_FriendApply.decode(r, r.uint32()));
                    break;
                case 16:
                    m.Fight = $root.DcgProto.S_Fight.decode(r, r.uint32());
                    break;
                case 17:
                    m.Match = $root.DcgProto.S_Match.decode(r, r.uint32());
                    break;
                case 18:
                    if (!(m.PvpInvite && m.PvpInvite.length))
                        m.PvpInvite = [];
                    m.PvpInvite.push($root.DcgProto.S_PvpInvite.decode(r, r.uint32()));
                    break;
                case 19:
                    if (!(m.PvpBeInvite && m.PvpBeInvite.length))
                        m.PvpBeInvite = [];
                    m.PvpBeInvite.push($root.DcgProto.S_PvpInvite.decode(r, r.uint32()));
                    break;
                case 20:
                    m.RoleExtra = $root.DcgProto.S_RoleExtra.decode(r, r.uint32());
                    break;
                case 21:
                    m.PersonalRoom = $root.DcgProto.S_PersonalRoom.decode(r, r.uint32());
                    break;
                case 22:
                    m.PvpRoom = $root.DcgProto.S_PvpRoom.decode(r, r.uint32());
                    break;
                case 23:
                    if (!(m.PvpRoomMember && m.PvpRoomMember.length))
                        m.PvpRoomMember = [];
                    m.PvpRoomMember.push($root.DcgProto.S_PvpRoomMember.decode(r, r.uint32()));
                    break;
                case 24:
                    m.PvpRoomRace = $root.DcgProto.S_PvpRoomRace.decode(r, r.uint32());
                    break;
                case 25:
                    if (!(m.Tasks && m.Tasks.length))
                        m.Tasks = [];
                    m.Tasks.push($root.DcgProto.S_Task.decode(r, r.uint32()));
                    break;
                case 26:
                    if (!(m.StageTasks && m.StageTasks.length))
                        m.StageTasks = [];
                    m.StageTasks.push($root.DcgProto.S_StageTask.decode(r, r.uint32()));
                    break;
                case 27:
                    if (!(m.Storys && m.Storys.length))
                        m.Storys = [];
                    m.Storys.push($root.DcgProto.S_Story.decode(r, r.uint32()));
                    break;
                case 28:
                    if (!(m.Digimons && m.Digimons.length))
                        m.Digimons = [];
                    m.Digimons.push($root.DcgProto.S_Digimon.decode(r, r.uint32()));
                    break;
                case 29:
                    m.DigimonEvo = $root.DcgProto.S_DigimonEvo.decode(r, r.uint32());
                    break;
                case 30:
                    m.Ranked = $root.DcgProto.S_Ranked.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_CommonUpdate message.
         * @function verify
         * @memberof DcgProto.S_CommonUpdate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_CommonUpdate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Role != null && m.hasOwnProperty("Role")) {
                {
                    var e = $root.DcgProto.S_Role.verify(m.Role);
                    if (e)
                        return "Role." + e;
                }
            }
            if (m.ServerInfo != null && m.hasOwnProperty("ServerInfo")) {
                {
                    var e = $root.DcgProto.S_GameServerInfo.verify(m.ServerInfo);
                    if (e)
                        return "ServerInfo." + e;
                }
            }
            if (m.Items != null && m.hasOwnProperty("Items")) {
                if (!Array.isArray(m.Items))
                    return "Items: array expected";
                for (var i = 0; i < m.Items.length; ++i) {
                    {
                        var e = $root.DcgProto.S_Item.verify(m.Items[i]);
                        if (e)
                            return "Items." + e;
                    }
                }
            }
            if (m.Cards != null && m.hasOwnProperty("Cards")) {
                if (!Array.isArray(m.Cards))
                    return "Cards: array expected";
                for (var i = 0; i < m.Cards.length; ++i) {
                    {
                        var e = $root.DcgProto.S_Card.verify(m.Cards[i]);
                        if (e)
                            return "Cards." + e;
                    }
                }
            }
            if (m.Decks != null && m.hasOwnProperty("Decks")) {
                if (!Array.isArray(m.Decks))
                    return "Decks: array expected";
                for (var i = 0; i < m.Decks.length; ++i) {
                    {
                        var e = $root.DcgProto.S_DeckInfo.verify(m.Decks[i]);
                        if (e)
                            return "Decks." + e;
                    }
                }
            }
            if (m.DeckExtends != null && m.hasOwnProperty("DeckExtends")) {
                if (!Array.isArray(m.DeckExtends))
                    return "DeckExtends: array expected";
                for (var i = 0; i < m.DeckExtends.length; ++i) {
                    {
                        var e = $root.DcgProto.S_DeckExtendInfo.verify(m.DeckExtends[i]);
                        if (e)
                            return "DeckExtends." + e;
                    }
                }
            }
            if (m.Shops != null && m.hasOwnProperty("Shops")) {
                if (!Array.isArray(m.Shops))
                    return "Shops: array expected";
                for (var i = 0; i < m.Shops.length; ++i) {
                    {
                        var e = $root.DcgProto.S_Shop.verify(m.Shops[i]);
                        if (e)
                            return "Shops." + e;
                    }
                }
            }
            if (m.CardBags != null && m.hasOwnProperty("CardBags")) {
                if (!Array.isArray(m.CardBags))
                    return "CardBags: array expected";
                for (var i = 0; i < m.CardBags.length; ++i) {
                    {
                        var e = $root.DcgProto.S_CardBag.verify(m.CardBags[i]);
                        if (e)
                            return "CardBags." + e;
                    }
                }
            }
            if (m.Parts != null && m.hasOwnProperty("Parts")) {
                if (!Array.isArray(m.Parts))
                    return "Parts: array expected";
                for (var i = 0; i < m.Parts.length; ++i) {
                    {
                        var e = $root.DcgProto.S_Parts.verify(m.Parts[i]);
                        if (e)
                            return "Parts." + e;
                    }
                }
            }
            if (m.CardCollects != null && m.hasOwnProperty("CardCollects")) {
                if (!Array.isArray(m.CardCollects))
                    return "CardCollects: array expected";
                for (var i = 0; i < m.CardCollects.length; ++i) {
                    {
                        var e = $root.DcgProto.S_CardCollect.verify(m.CardCollects[i]);
                        if (e)
                            return "CardCollects." + e;
                    }
                }
            }
            if (m.MailNews != null && m.hasOwnProperty("MailNews")) {
                if (!Array.isArray(m.MailNews))
                    return "MailNews: array expected";
                for (var i = 0; i < m.MailNews.length; ++i) {
                    {
                        var e = $root.DcgProto.S_MailNew.verify(m.MailNews[i]);
                        if (e)
                            return "MailNews." + e;
                    }
                }
            }
            if (m.Friend != null && m.hasOwnProperty("Friend")) {
                if (!Array.isArray(m.Friend))
                    return "Friend: array expected";
                for (var i = 0; i < m.Friend.length; ++i) {
                    {
                        var e = $root.DcgProto.S_Friend.verify(m.Friend[i]);
                        if (e)
                            return "Friend." + e;
                    }
                }
            }
            if (m.FriendApply != null && m.hasOwnProperty("FriendApply")) {
                if (!Array.isArray(m.FriendApply))
                    return "FriendApply: array expected";
                for (var i = 0; i < m.FriendApply.length; ++i) {
                    {
                        var e = $root.DcgProto.S_FriendApply.verify(m.FriendApply[i]);
                        if (e)
                            return "FriendApply." + e;
                    }
                }
            }
            if (m.FriendBeApply != null && m.hasOwnProperty("FriendBeApply")) {
                if (!Array.isArray(m.FriendBeApply))
                    return "FriendBeApply: array expected";
                for (var i = 0; i < m.FriendBeApply.length; ++i) {
                    {
                        var e = $root.DcgProto.S_FriendApply.verify(m.FriendBeApply[i]);
                        if (e)
                            return "FriendBeApply." + e;
                    }
                }
            }
            if (m.Fight != null && m.hasOwnProperty("Fight")) {
                {
                    var e = $root.DcgProto.S_Fight.verify(m.Fight);
                    if (e)
                        return "Fight." + e;
                }
            }
            if (m.Match != null && m.hasOwnProperty("Match")) {
                {
                    var e = $root.DcgProto.S_Match.verify(m.Match);
                    if (e)
                        return "Match." + e;
                }
            }
            if (m.PvpInvite != null && m.hasOwnProperty("PvpInvite")) {
                if (!Array.isArray(m.PvpInvite))
                    return "PvpInvite: array expected";
                for (var i = 0; i < m.PvpInvite.length; ++i) {
                    {
                        var e = $root.DcgProto.S_PvpInvite.verify(m.PvpInvite[i]);
                        if (e)
                            return "PvpInvite." + e;
                    }
                }
            }
            if (m.PvpBeInvite != null && m.hasOwnProperty("PvpBeInvite")) {
                if (!Array.isArray(m.PvpBeInvite))
                    return "PvpBeInvite: array expected";
                for (var i = 0; i < m.PvpBeInvite.length; ++i) {
                    {
                        var e = $root.DcgProto.S_PvpInvite.verify(m.PvpBeInvite[i]);
                        if (e)
                            return "PvpBeInvite." + e;
                    }
                }
            }
            if (m.RoleExtra != null && m.hasOwnProperty("RoleExtra")) {
                {
                    var e = $root.DcgProto.S_RoleExtra.verify(m.RoleExtra);
                    if (e)
                        return "RoleExtra." + e;
                }
            }
            if (m.PersonalRoom != null && m.hasOwnProperty("PersonalRoom")) {
                {
                    var e = $root.DcgProto.S_PersonalRoom.verify(m.PersonalRoom);
                    if (e)
                        return "PersonalRoom." + e;
                }
            }
            if (m.PvpRoom != null && m.hasOwnProperty("PvpRoom")) {
                {
                    var e = $root.DcgProto.S_PvpRoom.verify(m.PvpRoom);
                    if (e)
                        return "PvpRoom." + e;
                }
            }
            if (m.PvpRoomMember != null && m.hasOwnProperty("PvpRoomMember")) {
                if (!Array.isArray(m.PvpRoomMember))
                    return "PvpRoomMember: array expected";
                for (var i = 0; i < m.PvpRoomMember.length; ++i) {
                    {
                        var e = $root.DcgProto.S_PvpRoomMember.verify(m.PvpRoomMember[i]);
                        if (e)
                            return "PvpRoomMember." + e;
                    }
                }
            }
            if (m.PvpRoomRace != null && m.hasOwnProperty("PvpRoomRace")) {
                {
                    var e = $root.DcgProto.S_PvpRoomRace.verify(m.PvpRoomRace);
                    if (e)
                        return "PvpRoomRace." + e;
                }
            }
            if (m.Tasks != null && m.hasOwnProperty("Tasks")) {
                if (!Array.isArray(m.Tasks))
                    return "Tasks: array expected";
                for (var i = 0; i < m.Tasks.length; ++i) {
                    {
                        var e = $root.DcgProto.S_Task.verify(m.Tasks[i]);
                        if (e)
                            return "Tasks." + e;
                    }
                }
            }
            if (m.StageTasks != null && m.hasOwnProperty("StageTasks")) {
                if (!Array.isArray(m.StageTasks))
                    return "StageTasks: array expected";
                for (var i = 0; i < m.StageTasks.length; ++i) {
                    {
                        var e = $root.DcgProto.S_StageTask.verify(m.StageTasks[i]);
                        if (e)
                            return "StageTasks." + e;
                    }
                }
            }
            if (m.Storys != null && m.hasOwnProperty("Storys")) {
                if (!Array.isArray(m.Storys))
                    return "Storys: array expected";
                for (var i = 0; i < m.Storys.length; ++i) {
                    {
                        var e = $root.DcgProto.S_Story.verify(m.Storys[i]);
                        if (e)
                            return "Storys." + e;
                    }
                }
            }
            if (m.Digimons != null && m.hasOwnProperty("Digimons")) {
                if (!Array.isArray(m.Digimons))
                    return "Digimons: array expected";
                for (var i = 0; i < m.Digimons.length; ++i) {
                    {
                        var e = $root.DcgProto.S_Digimon.verify(m.Digimons[i]);
                        if (e)
                            return "Digimons." + e;
                    }
                }
            }
            if (m.DigimonEvo != null && m.hasOwnProperty("DigimonEvo")) {
                {
                    var e = $root.DcgProto.S_DigimonEvo.verify(m.DigimonEvo);
                    if (e)
                        return "DigimonEvo." + e;
                }
            }
            if (m.Ranked != null && m.hasOwnProperty("Ranked")) {
                {
                    var e = $root.DcgProto.S_Ranked.verify(m.Ranked);
                    if (e)
                        return "Ranked." + e;
                }
            }
            return null;
        };

        return S_CommonUpdate;
    })();

    DcgProto.S_CommonDelete = (function() {

        /**
         * Properties of a S_CommonDelete.
         * @memberof DcgProto
         * @interface IS_CommonDelete
         * @property {Array.<Long>|null} [Items] S_CommonDelete Items
         * @property {Array.<Long>|null} [Cards] S_CommonDelete Cards
         * @property {Array.<Long>|null} [Decks] S_CommonDelete Decks
         * @property {Array.<Long>|null} [DeckExtends] S_CommonDelete DeckExtends
         * @property {Array.<Long>|null} [Shops] S_CommonDelete Shops
         * @property {Array.<Long>|null} [CardBags] S_CommonDelete CardBags
         * @property {Array.<Long>|null} [Parts] S_CommonDelete Parts
         * @property {Array.<Long>|null} [MailNews] S_CommonDelete MailNews
         * @property {Array.<Long>|null} [Friends] S_CommonDelete Friends
         * @property {Array.<Long>|null} [FriendApply] S_CommonDelete FriendApply
         * @property {Array.<Long>|null} [PvpInvites] S_CommonDelete PvpInvites
         * @property {Long|null} [PvpRoom] S_CommonDelete PvpRoom
         * @property {Array.<Long>|null} [PvpRoomMembers] S_CommonDelete PvpRoomMembers
         * @property {Long|null} [Match] S_CommonDelete Match
         * @property {Long|null} [Fight] S_CommonDelete Fight
         * @property {Long|null} [PersonalRoom] S_CommonDelete PersonalRoom
         * @property {Array.<Long>|null} [Tasks] S_CommonDelete Tasks
         * @property {Array.<Long>|null} [StageTasks] S_CommonDelete StageTasks
         * @property {Array.<Long>|null} [Storys] S_CommonDelete Storys
         * @property {Array.<Long>|null} [Digimons] S_CommonDelete Digimons
         */

        /**
         * Constructs a new S_CommonDelete.
         * @memberof DcgProto
         * @classdesc Represents a S_CommonDelete.
         * @implements IS_CommonDelete
         * @constructor
         * @param {DcgProto.IS_CommonDelete=} [p] Properties to set
         */
        function S_CommonDelete(p) {
            this.Items = [];
            this.Cards = [];
            this.Decks = [];
            this.DeckExtends = [];
            this.Shops = [];
            this.CardBags = [];
            this.Parts = [];
            this.MailNews = [];
            this.Friends = [];
            this.FriendApply = [];
            this.PvpInvites = [];
            this.PvpRoomMembers = [];
            this.Tasks = [];
            this.StageTasks = [];
            this.Storys = [];
            this.Digimons = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_CommonDelete Items.
         * @member {Array.<Long>} Items
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.Items = $util.emptyArray;

        /**
         * S_CommonDelete Cards.
         * @member {Array.<Long>} Cards
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.Cards = $util.emptyArray;

        /**
         * S_CommonDelete Decks.
         * @member {Array.<Long>} Decks
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.Decks = $util.emptyArray;

        /**
         * S_CommonDelete DeckExtends.
         * @member {Array.<Long>} DeckExtends
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.DeckExtends = $util.emptyArray;

        /**
         * S_CommonDelete Shops.
         * @member {Array.<Long>} Shops
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.Shops = $util.emptyArray;

        /**
         * S_CommonDelete CardBags.
         * @member {Array.<Long>} CardBags
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.CardBags = $util.emptyArray;

        /**
         * S_CommonDelete Parts.
         * @member {Array.<Long>} Parts
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.Parts = $util.emptyArray;

        /**
         * S_CommonDelete MailNews.
         * @member {Array.<Long>} MailNews
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.MailNews = $util.emptyArray;

        /**
         * S_CommonDelete Friends.
         * @member {Array.<Long>} Friends
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.Friends = $util.emptyArray;

        /**
         * S_CommonDelete FriendApply.
         * @member {Array.<Long>} FriendApply
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.FriendApply = $util.emptyArray;

        /**
         * S_CommonDelete PvpInvites.
         * @member {Array.<Long>} PvpInvites
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.PvpInvites = $util.emptyArray;

        /**
         * S_CommonDelete PvpRoom.
         * @member {Long} PvpRoom
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.PvpRoom = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_CommonDelete PvpRoomMembers.
         * @member {Array.<Long>} PvpRoomMembers
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.PvpRoomMembers = $util.emptyArray;

        /**
         * S_CommonDelete Match.
         * @member {Long} Match
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.Match = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_CommonDelete Fight.
         * @member {Long} Fight
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.Fight = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_CommonDelete PersonalRoom.
         * @member {Long} PersonalRoom
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.PersonalRoom = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_CommonDelete Tasks.
         * @member {Array.<Long>} Tasks
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.Tasks = $util.emptyArray;

        /**
         * S_CommonDelete StageTasks.
         * @member {Array.<Long>} StageTasks
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.StageTasks = $util.emptyArray;

        /**
         * S_CommonDelete Storys.
         * @member {Array.<Long>} Storys
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.Storys = $util.emptyArray;

        /**
         * S_CommonDelete Digimons.
         * @member {Array.<Long>} Digimons
         * @memberof DcgProto.S_CommonDelete
         * @instance
         */
        S_CommonDelete.prototype.Digimons = $util.emptyArray;

        /**
         * Creates a new S_CommonDelete instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_CommonDelete
         * @static
         * @param {DcgProto.IS_CommonDelete=} [properties] Properties to set
         * @returns {DcgProto.S_CommonDelete} S_CommonDelete instance
         */
        S_CommonDelete.create = function create(properties) {
            return new S_CommonDelete(properties);
        };

        /**
         * Encodes the specified S_CommonDelete message. Does not implicitly {@link DcgProto.S_CommonDelete.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_CommonDelete
         * @static
         * @param {DcgProto.IS_CommonDelete} m S_CommonDelete message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_CommonDelete.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Items != null && m.Items.length) {
                w.uint32(10).fork();
                for (var i = 0; i < m.Items.length; ++i)
                    w.int64(m.Items[i]);
                w.ldelim();
            }
            if (m.Cards != null && m.Cards.length) {
                w.uint32(18).fork();
                for (var i = 0; i < m.Cards.length; ++i)
                    w.int64(m.Cards[i]);
                w.ldelim();
            }
            if (m.Decks != null && m.Decks.length) {
                w.uint32(26).fork();
                for (var i = 0; i < m.Decks.length; ++i)
                    w.int64(m.Decks[i]);
                w.ldelim();
            }
            if (m.DeckExtends != null && m.DeckExtends.length) {
                w.uint32(34).fork();
                for (var i = 0; i < m.DeckExtends.length; ++i)
                    w.int64(m.DeckExtends[i]);
                w.ldelim();
            }
            if (m.Shops != null && m.Shops.length) {
                w.uint32(42).fork();
                for (var i = 0; i < m.Shops.length; ++i)
                    w.int64(m.Shops[i]);
                w.ldelim();
            }
            if (m.CardBags != null && m.CardBags.length) {
                w.uint32(50).fork();
                for (var i = 0; i < m.CardBags.length; ++i)
                    w.int64(m.CardBags[i]);
                w.ldelim();
            }
            if (m.Parts != null && m.Parts.length) {
                w.uint32(58).fork();
                for (var i = 0; i < m.Parts.length; ++i)
                    w.int64(m.Parts[i]);
                w.ldelim();
            }
            if (m.MailNews != null && m.MailNews.length) {
                w.uint32(74).fork();
                for (var i = 0; i < m.MailNews.length; ++i)
                    w.int64(m.MailNews[i]);
                w.ldelim();
            }
            if (m.Friends != null && m.Friends.length) {
                w.uint32(82).fork();
                for (var i = 0; i < m.Friends.length; ++i)
                    w.int64(m.Friends[i]);
                w.ldelim();
            }
            if (m.FriendApply != null && m.FriendApply.length) {
                w.uint32(90).fork();
                for (var i = 0; i < m.FriendApply.length; ++i)
                    w.int64(m.FriendApply[i]);
                w.ldelim();
            }
            if (m.PvpInvites != null && m.PvpInvites.length) {
                w.uint32(98).fork();
                for (var i = 0; i < m.PvpInvites.length; ++i)
                    w.int64(m.PvpInvites[i]);
                w.ldelim();
            }
            if (m.PvpRoom != null && Object.hasOwnProperty.call(m, "PvpRoom"))
                w.uint32(112).int64(m.PvpRoom);
            if (m.PvpRoomMembers != null && m.PvpRoomMembers.length) {
                w.uint32(122).fork();
                for (var i = 0; i < m.PvpRoomMembers.length; ++i)
                    w.int64(m.PvpRoomMembers[i]);
                w.ldelim();
            }
            if (m.Match != null && Object.hasOwnProperty.call(m, "Match"))
                w.uint32(128).int64(m.Match);
            if (m.Fight != null && Object.hasOwnProperty.call(m, "Fight"))
                w.uint32(136).int64(m.Fight);
            if (m.PersonalRoom != null && Object.hasOwnProperty.call(m, "PersonalRoom"))
                w.uint32(144).int64(m.PersonalRoom);
            if (m.Tasks != null && m.Tasks.length) {
                w.uint32(154).fork();
                for (var i = 0; i < m.Tasks.length; ++i)
                    w.int64(m.Tasks[i]);
                w.ldelim();
            }
            if (m.StageTasks != null && m.StageTasks.length) {
                w.uint32(162).fork();
                for (var i = 0; i < m.StageTasks.length; ++i)
                    w.int64(m.StageTasks[i]);
                w.ldelim();
            }
            if (m.Storys != null && m.Storys.length) {
                w.uint32(170).fork();
                for (var i = 0; i < m.Storys.length; ++i)
                    w.int64(m.Storys[i]);
                w.ldelim();
            }
            if (m.Digimons != null && m.Digimons.length) {
                w.uint32(178).fork();
                for (var i = 0; i < m.Digimons.length; ++i)
                    w.int64(m.Digimons[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_CommonDelete message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_CommonDelete
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_CommonDelete} S_CommonDelete
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_CommonDelete.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_CommonDelete();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.Items && m.Items.length))
                        m.Items = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Items.push(r.int64());
                    } else
                        m.Items.push(r.int64());
                    break;
                case 2:
                    if (!(m.Cards && m.Cards.length))
                        m.Cards = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Cards.push(r.int64());
                    } else
                        m.Cards.push(r.int64());
                    break;
                case 3:
                    if (!(m.Decks && m.Decks.length))
                        m.Decks = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Decks.push(r.int64());
                    } else
                        m.Decks.push(r.int64());
                    break;
                case 4:
                    if (!(m.DeckExtends && m.DeckExtends.length))
                        m.DeckExtends = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.DeckExtends.push(r.int64());
                    } else
                        m.DeckExtends.push(r.int64());
                    break;
                case 5:
                    if (!(m.Shops && m.Shops.length))
                        m.Shops = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Shops.push(r.int64());
                    } else
                        m.Shops.push(r.int64());
                    break;
                case 6:
                    if (!(m.CardBags && m.CardBags.length))
                        m.CardBags = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.CardBags.push(r.int64());
                    } else
                        m.CardBags.push(r.int64());
                    break;
                case 7:
                    if (!(m.Parts && m.Parts.length))
                        m.Parts = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Parts.push(r.int64());
                    } else
                        m.Parts.push(r.int64());
                    break;
                case 9:
                    if (!(m.MailNews && m.MailNews.length))
                        m.MailNews = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.MailNews.push(r.int64());
                    } else
                        m.MailNews.push(r.int64());
                    break;
                case 10:
                    if (!(m.Friends && m.Friends.length))
                        m.Friends = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Friends.push(r.int64());
                    } else
                        m.Friends.push(r.int64());
                    break;
                case 11:
                    if (!(m.FriendApply && m.FriendApply.length))
                        m.FriendApply = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.FriendApply.push(r.int64());
                    } else
                        m.FriendApply.push(r.int64());
                    break;
                case 12:
                    if (!(m.PvpInvites && m.PvpInvites.length))
                        m.PvpInvites = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.PvpInvites.push(r.int64());
                    } else
                        m.PvpInvites.push(r.int64());
                    break;
                case 14:
                    m.PvpRoom = r.int64();
                    break;
                case 15:
                    if (!(m.PvpRoomMembers && m.PvpRoomMembers.length))
                        m.PvpRoomMembers = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.PvpRoomMembers.push(r.int64());
                    } else
                        m.PvpRoomMembers.push(r.int64());
                    break;
                case 16:
                    m.Match = r.int64();
                    break;
                case 17:
                    m.Fight = r.int64();
                    break;
                case 18:
                    m.PersonalRoom = r.int64();
                    break;
                case 19:
                    if (!(m.Tasks && m.Tasks.length))
                        m.Tasks = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Tasks.push(r.int64());
                    } else
                        m.Tasks.push(r.int64());
                    break;
                case 20:
                    if (!(m.StageTasks && m.StageTasks.length))
                        m.StageTasks = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.StageTasks.push(r.int64());
                    } else
                        m.StageTasks.push(r.int64());
                    break;
                case 21:
                    if (!(m.Storys && m.Storys.length))
                        m.Storys = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Storys.push(r.int64());
                    } else
                        m.Storys.push(r.int64());
                    break;
                case 22:
                    if (!(m.Digimons && m.Digimons.length))
                        m.Digimons = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Digimons.push(r.int64());
                    } else
                        m.Digimons.push(r.int64());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_CommonDelete message.
         * @function verify
         * @memberof DcgProto.S_CommonDelete
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_CommonDelete.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Items != null && m.hasOwnProperty("Items")) {
                if (!Array.isArray(m.Items))
                    return "Items: array expected";
                for (var i = 0; i < m.Items.length; ++i) {
                    if (!$util.isInteger(m.Items[i]) && !(m.Items[i] && $util.isInteger(m.Items[i].low) && $util.isInteger(m.Items[i].high)))
                        return "Items: integer|Long[] expected";
                }
            }
            if (m.Cards != null && m.hasOwnProperty("Cards")) {
                if (!Array.isArray(m.Cards))
                    return "Cards: array expected";
                for (var i = 0; i < m.Cards.length; ++i) {
                    if (!$util.isInteger(m.Cards[i]) && !(m.Cards[i] && $util.isInteger(m.Cards[i].low) && $util.isInteger(m.Cards[i].high)))
                        return "Cards: integer|Long[] expected";
                }
            }
            if (m.Decks != null && m.hasOwnProperty("Decks")) {
                if (!Array.isArray(m.Decks))
                    return "Decks: array expected";
                for (var i = 0; i < m.Decks.length; ++i) {
                    if (!$util.isInteger(m.Decks[i]) && !(m.Decks[i] && $util.isInteger(m.Decks[i].low) && $util.isInteger(m.Decks[i].high)))
                        return "Decks: integer|Long[] expected";
                }
            }
            if (m.DeckExtends != null && m.hasOwnProperty("DeckExtends")) {
                if (!Array.isArray(m.DeckExtends))
                    return "DeckExtends: array expected";
                for (var i = 0; i < m.DeckExtends.length; ++i) {
                    if (!$util.isInteger(m.DeckExtends[i]) && !(m.DeckExtends[i] && $util.isInteger(m.DeckExtends[i].low) && $util.isInteger(m.DeckExtends[i].high)))
                        return "DeckExtends: integer|Long[] expected";
                }
            }
            if (m.Shops != null && m.hasOwnProperty("Shops")) {
                if (!Array.isArray(m.Shops))
                    return "Shops: array expected";
                for (var i = 0; i < m.Shops.length; ++i) {
                    if (!$util.isInteger(m.Shops[i]) && !(m.Shops[i] && $util.isInteger(m.Shops[i].low) && $util.isInteger(m.Shops[i].high)))
                        return "Shops: integer|Long[] expected";
                }
            }
            if (m.CardBags != null && m.hasOwnProperty("CardBags")) {
                if (!Array.isArray(m.CardBags))
                    return "CardBags: array expected";
                for (var i = 0; i < m.CardBags.length; ++i) {
                    if (!$util.isInteger(m.CardBags[i]) && !(m.CardBags[i] && $util.isInteger(m.CardBags[i].low) && $util.isInteger(m.CardBags[i].high)))
                        return "CardBags: integer|Long[] expected";
                }
            }
            if (m.Parts != null && m.hasOwnProperty("Parts")) {
                if (!Array.isArray(m.Parts))
                    return "Parts: array expected";
                for (var i = 0; i < m.Parts.length; ++i) {
                    if (!$util.isInteger(m.Parts[i]) && !(m.Parts[i] && $util.isInteger(m.Parts[i].low) && $util.isInteger(m.Parts[i].high)))
                        return "Parts: integer|Long[] expected";
                }
            }
            if (m.MailNews != null && m.hasOwnProperty("MailNews")) {
                if (!Array.isArray(m.MailNews))
                    return "MailNews: array expected";
                for (var i = 0; i < m.MailNews.length; ++i) {
                    if (!$util.isInteger(m.MailNews[i]) && !(m.MailNews[i] && $util.isInteger(m.MailNews[i].low) && $util.isInteger(m.MailNews[i].high)))
                        return "MailNews: integer|Long[] expected";
                }
            }
            if (m.Friends != null && m.hasOwnProperty("Friends")) {
                if (!Array.isArray(m.Friends))
                    return "Friends: array expected";
                for (var i = 0; i < m.Friends.length; ++i) {
                    if (!$util.isInteger(m.Friends[i]) && !(m.Friends[i] && $util.isInteger(m.Friends[i].low) && $util.isInteger(m.Friends[i].high)))
                        return "Friends: integer|Long[] expected";
                }
            }
            if (m.FriendApply != null && m.hasOwnProperty("FriendApply")) {
                if (!Array.isArray(m.FriendApply))
                    return "FriendApply: array expected";
                for (var i = 0; i < m.FriendApply.length; ++i) {
                    if (!$util.isInteger(m.FriendApply[i]) && !(m.FriendApply[i] && $util.isInteger(m.FriendApply[i].low) && $util.isInteger(m.FriendApply[i].high)))
                        return "FriendApply: integer|Long[] expected";
                }
            }
            if (m.PvpInvites != null && m.hasOwnProperty("PvpInvites")) {
                if (!Array.isArray(m.PvpInvites))
                    return "PvpInvites: array expected";
                for (var i = 0; i < m.PvpInvites.length; ++i) {
                    if (!$util.isInteger(m.PvpInvites[i]) && !(m.PvpInvites[i] && $util.isInteger(m.PvpInvites[i].low) && $util.isInteger(m.PvpInvites[i].high)))
                        return "PvpInvites: integer|Long[] expected";
                }
            }
            if (m.PvpRoom != null && m.hasOwnProperty("PvpRoom")) {
                if (!$util.isInteger(m.PvpRoom) && !(m.PvpRoom && $util.isInteger(m.PvpRoom.low) && $util.isInteger(m.PvpRoom.high)))
                    return "PvpRoom: integer|Long expected";
            }
            if (m.PvpRoomMembers != null && m.hasOwnProperty("PvpRoomMembers")) {
                if (!Array.isArray(m.PvpRoomMembers))
                    return "PvpRoomMembers: array expected";
                for (var i = 0; i < m.PvpRoomMembers.length; ++i) {
                    if (!$util.isInteger(m.PvpRoomMembers[i]) && !(m.PvpRoomMembers[i] && $util.isInteger(m.PvpRoomMembers[i].low) && $util.isInteger(m.PvpRoomMembers[i].high)))
                        return "PvpRoomMembers: integer|Long[] expected";
                }
            }
            if (m.Match != null && m.hasOwnProperty("Match")) {
                if (!$util.isInteger(m.Match) && !(m.Match && $util.isInteger(m.Match.low) && $util.isInteger(m.Match.high)))
                    return "Match: integer|Long expected";
            }
            if (m.Fight != null && m.hasOwnProperty("Fight")) {
                if (!$util.isInteger(m.Fight) && !(m.Fight && $util.isInteger(m.Fight.low) && $util.isInteger(m.Fight.high)))
                    return "Fight: integer|Long expected";
            }
            if (m.PersonalRoom != null && m.hasOwnProperty("PersonalRoom")) {
                if (!$util.isInteger(m.PersonalRoom) && !(m.PersonalRoom && $util.isInteger(m.PersonalRoom.low) && $util.isInteger(m.PersonalRoom.high)))
                    return "PersonalRoom: integer|Long expected";
            }
            if (m.Tasks != null && m.hasOwnProperty("Tasks")) {
                if (!Array.isArray(m.Tasks))
                    return "Tasks: array expected";
                for (var i = 0; i < m.Tasks.length; ++i) {
                    if (!$util.isInteger(m.Tasks[i]) && !(m.Tasks[i] && $util.isInteger(m.Tasks[i].low) && $util.isInteger(m.Tasks[i].high)))
                        return "Tasks: integer|Long[] expected";
                }
            }
            if (m.StageTasks != null && m.hasOwnProperty("StageTasks")) {
                if (!Array.isArray(m.StageTasks))
                    return "StageTasks: array expected";
                for (var i = 0; i < m.StageTasks.length; ++i) {
                    if (!$util.isInteger(m.StageTasks[i]) && !(m.StageTasks[i] && $util.isInteger(m.StageTasks[i].low) && $util.isInteger(m.StageTasks[i].high)))
                        return "StageTasks: integer|Long[] expected";
                }
            }
            if (m.Storys != null && m.hasOwnProperty("Storys")) {
                if (!Array.isArray(m.Storys))
                    return "Storys: array expected";
                for (var i = 0; i < m.Storys.length; ++i) {
                    if (!$util.isInteger(m.Storys[i]) && !(m.Storys[i] && $util.isInteger(m.Storys[i].low) && $util.isInteger(m.Storys[i].high)))
                        return "Storys: integer|Long[] expected";
                }
            }
            if (m.Digimons != null && m.hasOwnProperty("Digimons")) {
                if (!Array.isArray(m.Digimons))
                    return "Digimons: array expected";
                for (var i = 0; i < m.Digimons.length; ++i) {
                    if (!$util.isInteger(m.Digimons[i]) && !(m.Digimons[i] && $util.isInteger(m.Digimons[i].low) && $util.isInteger(m.Digimons[i].high)))
                        return "Digimons: integer|Long[] expected";
                }
            }
            return null;
        };

        return S_CommonDelete;
    })();

    DcgProto.S_CommonReq = (function() {

        /**
         * Properties of a S_CommonReq.
         * @memberof DcgProto
         * @interface IS_CommonReq
         */

        /**
         * Constructs a new S_CommonReq.
         * @memberof DcgProto
         * @classdesc Represents a S_CommonReq.
         * @implements IS_CommonReq
         * @constructor
         * @param {DcgProto.IS_CommonReq=} [p] Properties to set
         */
        function S_CommonReq(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new S_CommonReq instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_CommonReq
         * @static
         * @param {DcgProto.IS_CommonReq=} [properties] Properties to set
         * @returns {DcgProto.S_CommonReq} S_CommonReq instance
         */
        S_CommonReq.create = function create(properties) {
            return new S_CommonReq(properties);
        };

        /**
         * Encodes the specified S_CommonReq message. Does not implicitly {@link DcgProto.S_CommonReq.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_CommonReq
         * @static
         * @param {DcgProto.IS_CommonReq} m S_CommonReq message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_CommonReq.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a S_CommonReq message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_CommonReq
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_CommonReq} S_CommonReq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_CommonReq.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_CommonReq();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_CommonReq message.
         * @function verify
         * @memberof DcgProto.S_CommonReq
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_CommonReq.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return S_CommonReq;
    })();

    DcgProto.S_AddData = (function() {

        /**
         * Properties of a S_AddData.
         * @memberof DcgProto
         * @interface IS_AddData
         * @property {Array.<DcgProto.IS_AddInfo>|null} [AddInfoList] S_AddData AddInfoList
         */

        /**
         * Constructs a new S_AddData.
         * @memberof DcgProto
         * @classdesc Represents a S_AddData.
         * @implements IS_AddData
         * @constructor
         * @param {DcgProto.IS_AddData=} [p] Properties to set
         */
        function S_AddData(p) {
            this.AddInfoList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_AddData AddInfoList.
         * @member {Array.<DcgProto.IS_AddInfo>} AddInfoList
         * @memberof DcgProto.S_AddData
         * @instance
         */
        S_AddData.prototype.AddInfoList = $util.emptyArray;

        /**
         * Creates a new S_AddData instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_AddData
         * @static
         * @param {DcgProto.IS_AddData=} [properties] Properties to set
         * @returns {DcgProto.S_AddData} S_AddData instance
         */
        S_AddData.create = function create(properties) {
            return new S_AddData(properties);
        };

        /**
         * Encodes the specified S_AddData message. Does not implicitly {@link DcgProto.S_AddData.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_AddData
         * @static
         * @param {DcgProto.IS_AddData} m S_AddData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_AddData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.AddInfoList != null && m.AddInfoList.length) {
                for (var i = 0; i < m.AddInfoList.length; ++i)
                    $root.DcgProto.S_AddInfo.encode(m.AddInfoList[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_AddData message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_AddData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_AddData} S_AddData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_AddData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_AddData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.AddInfoList && m.AddInfoList.length))
                        m.AddInfoList = [];
                    m.AddInfoList.push($root.DcgProto.S_AddInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_AddData message.
         * @function verify
         * @memberof DcgProto.S_AddData
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_AddData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.AddInfoList != null && m.hasOwnProperty("AddInfoList")) {
                if (!Array.isArray(m.AddInfoList))
                    return "AddInfoList: array expected";
                for (var i = 0; i < m.AddInfoList.length; ++i) {
                    {
                        var e = $root.DcgProto.S_AddInfo.verify(m.AddInfoList[i]);
                        if (e)
                            return "AddInfoList." + e;
                    }
                }
            }
            return null;
        };

        return S_AddData;
    })();

    DcgProto.S_AddInfo = (function() {

        /**
         * Properties of a S_AddInfo.
         * @memberof DcgProto
         * @interface IS_AddInfo
         * @property {number|null} [CfgId] S_AddInfo CfgId
         * @property {number|null} [Num] S_AddInfo Num
         * @property {number|null} [RealCfgId] S_AddInfo RealCfgId
         * @property {number|null} [RealNum] S_AddInfo RealNum
         */

        /**
         * Constructs a new S_AddInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_AddInfo.
         * @implements IS_AddInfo
         * @constructor
         * @param {DcgProto.IS_AddInfo=} [p] Properties to set
         */
        function S_AddInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_AddInfo CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_AddInfo
         * @instance
         */
        S_AddInfo.prototype.CfgId = 0;

        /**
         * S_AddInfo Num.
         * @member {number} Num
         * @memberof DcgProto.S_AddInfo
         * @instance
         */
        S_AddInfo.prototype.Num = 0;

        /**
         * S_AddInfo RealCfgId.
         * @member {number} RealCfgId
         * @memberof DcgProto.S_AddInfo
         * @instance
         */
        S_AddInfo.prototype.RealCfgId = 0;

        /**
         * S_AddInfo RealNum.
         * @member {number} RealNum
         * @memberof DcgProto.S_AddInfo
         * @instance
         */
        S_AddInfo.prototype.RealNum = 0;

        /**
         * Creates a new S_AddInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_AddInfo
         * @static
         * @param {DcgProto.IS_AddInfo=} [properties] Properties to set
         * @returns {DcgProto.S_AddInfo} S_AddInfo instance
         */
        S_AddInfo.create = function create(properties) {
            return new S_AddInfo(properties);
        };

        /**
         * Encodes the specified S_AddInfo message. Does not implicitly {@link DcgProto.S_AddInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_AddInfo
         * @static
         * @param {DcgProto.IS_AddInfo} m S_AddInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_AddInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(8).int32(m.CfgId);
            if (m.Num != null && Object.hasOwnProperty.call(m, "Num"))
                w.uint32(16).int32(m.Num);
            if (m.RealCfgId != null && Object.hasOwnProperty.call(m, "RealCfgId"))
                w.uint32(24).int32(m.RealCfgId);
            if (m.RealNum != null && Object.hasOwnProperty.call(m, "RealNum"))
                w.uint32(32).int32(m.RealNum);
            return w;
        };

        /**
         * Decodes a S_AddInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_AddInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_AddInfo} S_AddInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_AddInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_AddInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CfgId = r.int32();
                    break;
                case 2:
                    m.Num = r.int32();
                    break;
                case 3:
                    m.RealCfgId = r.int32();
                    break;
                case 4:
                    m.RealNum = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_AddInfo message.
         * @function verify
         * @memberof DcgProto.S_AddInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_AddInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.Num != null && m.hasOwnProperty("Num")) {
                if (!$util.isInteger(m.Num))
                    return "Num: integer expected";
            }
            if (m.RealCfgId != null && m.hasOwnProperty("RealCfgId")) {
                if (!$util.isInteger(m.RealCfgId))
                    return "RealCfgId: integer expected";
            }
            if (m.RealNum != null && m.hasOwnProperty("RealNum")) {
                if (!$util.isInteger(m.RealNum))
                    return "RealNum: integer expected";
            }
            return null;
        };

        return S_AddInfo;
    })();

    DcgProto.S_CommonResp = (function() {

        /**
         * Properties of a S_CommonResp.
         * @memberof DcgProto
         * @interface IS_CommonResp
         * @property {number|null} [ServerTime] S_CommonResp ServerTime
         * @property {DcgProto.IS_CommonUpdate|null} [CommonUpdate] S_CommonResp CommonUpdate
         * @property {DcgProto.IS_CommonDelete|null} [CommonDelete] S_CommonResp CommonDelete
         * @property {Array.<DcgProto.IS_AddInfo>|null} [AddInfoList] S_CommonResp AddInfoList
         */

        /**
         * Constructs a new S_CommonResp.
         * @memberof DcgProto
         * @classdesc Represents a S_CommonResp.
         * @implements IS_CommonResp
         * @constructor
         * @param {DcgProto.IS_CommonResp=} [p] Properties to set
         */
        function S_CommonResp(p) {
            this.AddInfoList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_CommonResp ServerTime.
         * @member {number} ServerTime
         * @memberof DcgProto.S_CommonResp
         * @instance
         */
        S_CommonResp.prototype.ServerTime = 0;

        /**
         * S_CommonResp CommonUpdate.
         * @member {DcgProto.IS_CommonUpdate|null|undefined} CommonUpdate
         * @memberof DcgProto.S_CommonResp
         * @instance
         */
        S_CommonResp.prototype.CommonUpdate = null;

        /**
         * S_CommonResp CommonDelete.
         * @member {DcgProto.IS_CommonDelete|null|undefined} CommonDelete
         * @memberof DcgProto.S_CommonResp
         * @instance
         */
        S_CommonResp.prototype.CommonDelete = null;

        /**
         * S_CommonResp AddInfoList.
         * @member {Array.<DcgProto.IS_AddInfo>} AddInfoList
         * @memberof DcgProto.S_CommonResp
         * @instance
         */
        S_CommonResp.prototype.AddInfoList = $util.emptyArray;

        /**
         * Creates a new S_CommonResp instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_CommonResp
         * @static
         * @param {DcgProto.IS_CommonResp=} [properties] Properties to set
         * @returns {DcgProto.S_CommonResp} S_CommonResp instance
         */
        S_CommonResp.create = function create(properties) {
            return new S_CommonResp(properties);
        };

        /**
         * Encodes the specified S_CommonResp message. Does not implicitly {@link DcgProto.S_CommonResp.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_CommonResp
         * @static
         * @param {DcgProto.IS_CommonResp} m S_CommonResp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_CommonResp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ServerTime != null && Object.hasOwnProperty.call(m, "ServerTime"))
                w.uint32(8).uint32(m.ServerTime);
            if (m.CommonUpdate != null && Object.hasOwnProperty.call(m, "CommonUpdate"))
                $root.DcgProto.S_CommonUpdate.encode(m.CommonUpdate, w.uint32(18).fork()).ldelim();
            if (m.CommonDelete != null && Object.hasOwnProperty.call(m, "CommonDelete"))
                $root.DcgProto.S_CommonDelete.encode(m.CommonDelete, w.uint32(26).fork()).ldelim();
            if (m.AddInfoList != null && m.AddInfoList.length) {
                for (var i = 0; i < m.AddInfoList.length; ++i)
                    $root.DcgProto.S_AddInfo.encode(m.AddInfoList[i], w.uint32(34).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_CommonResp message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_CommonResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_CommonResp} S_CommonResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_CommonResp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_CommonResp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ServerTime = r.uint32();
                    break;
                case 2:
                    m.CommonUpdate = $root.DcgProto.S_CommonUpdate.decode(r, r.uint32());
                    break;
                case 3:
                    m.CommonDelete = $root.DcgProto.S_CommonDelete.decode(r, r.uint32());
                    break;
                case 4:
                    if (!(m.AddInfoList && m.AddInfoList.length))
                        m.AddInfoList = [];
                    m.AddInfoList.push($root.DcgProto.S_AddInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_CommonResp message.
         * @function verify
         * @memberof DcgProto.S_CommonResp
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_CommonResp.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ServerTime != null && m.hasOwnProperty("ServerTime")) {
                if (!$util.isInteger(m.ServerTime))
                    return "ServerTime: integer expected";
            }
            if (m.CommonUpdate != null && m.hasOwnProperty("CommonUpdate")) {
                {
                    var e = $root.DcgProto.S_CommonUpdate.verify(m.CommonUpdate);
                    if (e)
                        return "CommonUpdate." + e;
                }
            }
            if (m.CommonDelete != null && m.hasOwnProperty("CommonDelete")) {
                {
                    var e = $root.DcgProto.S_CommonDelete.verify(m.CommonDelete);
                    if (e)
                        return "CommonDelete." + e;
                }
            }
            if (m.AddInfoList != null && m.hasOwnProperty("AddInfoList")) {
                if (!Array.isArray(m.AddInfoList))
                    return "AddInfoList: array expected";
                for (var i = 0; i < m.AddInfoList.length; ++i) {
                    {
                        var e = $root.DcgProto.S_AddInfo.verify(m.AddInfoList[i]);
                        if (e)
                            return "AddInfoList." + e;
                    }
                }
            }
            return null;
        };

        return S_CommonResp;
    })();

    DcgProto.S_OtherRole = (function() {

        /**
         * Properties of a S_OtherRole.
         * @memberof DcgProto
         * @interface IS_OtherRole
         * @property {Long|null} [InstanceId] S_OtherRole InstanceId
         * @property {number|null} [Level] S_OtherRole Level
         * @property {string|null} [NickName] S_OtherRole NickName
         * @property {number|null} [Icon] S_OtherRole Icon
         * @property {number|null} [IconFrame] S_OtherRole IconFrame
         * @property {number|null} [Paper] S_OtherRole Paper
         * @property {Array.<number>|null} [TitleIds] S_OtherRole TitleIds
         * @property {boolean|null} [IsOnline] S_OtherRole IsOnline
         * @property {boolean|null} [IsFight] S_OtherRole IsFight
         * @property {Long|null} [RoomIID] S_OtherRole RoomIID
         * @property {number|null} [ShortId] S_OtherRole ShortId
         * @property {number|null} [RankedStars] S_OtherRole RankedStars
         * @property {number|null} [RankedSeasonCount] S_OtherRole RankedSeasonCount
         */

        /**
         * Constructs a new S_OtherRole.
         * @memberof DcgProto
         * @classdesc Represents a S_OtherRole.
         * @implements IS_OtherRole
         * @constructor
         * @param {DcgProto.IS_OtherRole=} [p] Properties to set
         */
        function S_OtherRole(p) {
            this.TitleIds = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_OtherRole InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_OtherRole
         * @instance
         */
        S_OtherRole.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_OtherRole Level.
         * @member {number} Level
         * @memberof DcgProto.S_OtherRole
         * @instance
         */
        S_OtherRole.prototype.Level = 0;

        /**
         * S_OtherRole NickName.
         * @member {string} NickName
         * @memberof DcgProto.S_OtherRole
         * @instance
         */
        S_OtherRole.prototype.NickName = "";

        /**
         * S_OtherRole Icon.
         * @member {number} Icon
         * @memberof DcgProto.S_OtherRole
         * @instance
         */
        S_OtherRole.prototype.Icon = 0;

        /**
         * S_OtherRole IconFrame.
         * @member {number} IconFrame
         * @memberof DcgProto.S_OtherRole
         * @instance
         */
        S_OtherRole.prototype.IconFrame = 0;

        /**
         * S_OtherRole Paper.
         * @member {number} Paper
         * @memberof DcgProto.S_OtherRole
         * @instance
         */
        S_OtherRole.prototype.Paper = 0;

        /**
         * S_OtherRole TitleIds.
         * @member {Array.<number>} TitleIds
         * @memberof DcgProto.S_OtherRole
         * @instance
         */
        S_OtherRole.prototype.TitleIds = $util.emptyArray;

        /**
         * S_OtherRole IsOnline.
         * @member {boolean} IsOnline
         * @memberof DcgProto.S_OtherRole
         * @instance
         */
        S_OtherRole.prototype.IsOnline = false;

        /**
         * S_OtherRole IsFight.
         * @member {boolean} IsFight
         * @memberof DcgProto.S_OtherRole
         * @instance
         */
        S_OtherRole.prototype.IsFight = false;

        /**
         * S_OtherRole RoomIID.
         * @member {Long} RoomIID
         * @memberof DcgProto.S_OtherRole
         * @instance
         */
        S_OtherRole.prototype.RoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_OtherRole ShortId.
         * @member {number} ShortId
         * @memberof DcgProto.S_OtherRole
         * @instance
         */
        S_OtherRole.prototype.ShortId = 0;

        /**
         * S_OtherRole RankedStars.
         * @member {number} RankedStars
         * @memberof DcgProto.S_OtherRole
         * @instance
         */
        S_OtherRole.prototype.RankedStars = 0;

        /**
         * S_OtherRole RankedSeasonCount.
         * @member {number} RankedSeasonCount
         * @memberof DcgProto.S_OtherRole
         * @instance
         */
        S_OtherRole.prototype.RankedSeasonCount = 0;

        /**
         * Creates a new S_OtherRole instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_OtherRole
         * @static
         * @param {DcgProto.IS_OtherRole=} [properties] Properties to set
         * @returns {DcgProto.S_OtherRole} S_OtherRole instance
         */
        S_OtherRole.create = function create(properties) {
            return new S_OtherRole(properties);
        };

        /**
         * Encodes the specified S_OtherRole message. Does not implicitly {@link DcgProto.S_OtherRole.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_OtherRole
         * @static
         * @param {DcgProto.IS_OtherRole} m S_OtherRole message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_OtherRole.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.Level != null && Object.hasOwnProperty.call(m, "Level"))
                w.uint32(16).int32(m.Level);
            if (m.NickName != null && Object.hasOwnProperty.call(m, "NickName"))
                w.uint32(26).string(m.NickName);
            if (m.Icon != null && Object.hasOwnProperty.call(m, "Icon"))
                w.uint32(32).int32(m.Icon);
            if (m.IconFrame != null && Object.hasOwnProperty.call(m, "IconFrame"))
                w.uint32(40).int32(m.IconFrame);
            if (m.Paper != null && Object.hasOwnProperty.call(m, "Paper"))
                w.uint32(48).int32(m.Paper);
            if (m.TitleIds != null && m.TitleIds.length) {
                w.uint32(58).fork();
                for (var i = 0; i < m.TitleIds.length; ++i)
                    w.int32(m.TitleIds[i]);
                w.ldelim();
            }
            if (m.IsOnline != null && Object.hasOwnProperty.call(m, "IsOnline"))
                w.uint32(64).bool(m.IsOnline);
            if (m.IsFight != null && Object.hasOwnProperty.call(m, "IsFight"))
                w.uint32(72).bool(m.IsFight);
            if (m.RoomIID != null && Object.hasOwnProperty.call(m, "RoomIID"))
                w.uint32(80).int64(m.RoomIID);
            if (m.ShortId != null && Object.hasOwnProperty.call(m, "ShortId"))
                w.uint32(88).int32(m.ShortId);
            if (m.RankedStars != null && Object.hasOwnProperty.call(m, "RankedStars"))
                w.uint32(96).int32(m.RankedStars);
            if (m.RankedSeasonCount != null && Object.hasOwnProperty.call(m, "RankedSeasonCount"))
                w.uint32(104).int32(m.RankedSeasonCount);
            return w;
        };

        /**
         * Decodes a S_OtherRole message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_OtherRole
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_OtherRole} S_OtherRole
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_OtherRole.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_OtherRole();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.Level = r.int32();
                    break;
                case 3:
                    m.NickName = r.string();
                    break;
                case 4:
                    m.Icon = r.int32();
                    break;
                case 5:
                    m.IconFrame = r.int32();
                    break;
                case 6:
                    m.Paper = r.int32();
                    break;
                case 7:
                    if (!(m.TitleIds && m.TitleIds.length))
                        m.TitleIds = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.TitleIds.push(r.int32());
                    } else
                        m.TitleIds.push(r.int32());
                    break;
                case 8:
                    m.IsOnline = r.bool();
                    break;
                case 9:
                    m.IsFight = r.bool();
                    break;
                case 10:
                    m.RoomIID = r.int64();
                    break;
                case 11:
                    m.ShortId = r.int32();
                    break;
                case 12:
                    m.RankedStars = r.int32();
                    break;
                case 13:
                    m.RankedSeasonCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_OtherRole message.
         * @function verify
         * @memberof DcgProto.S_OtherRole
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_OtherRole.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.Level != null && m.hasOwnProperty("Level")) {
                if (!$util.isInteger(m.Level))
                    return "Level: integer expected";
            }
            if (m.NickName != null && m.hasOwnProperty("NickName")) {
                if (!$util.isString(m.NickName))
                    return "NickName: string expected";
            }
            if (m.Icon != null && m.hasOwnProperty("Icon")) {
                if (!$util.isInteger(m.Icon))
                    return "Icon: integer expected";
            }
            if (m.IconFrame != null && m.hasOwnProperty("IconFrame")) {
                if (!$util.isInteger(m.IconFrame))
                    return "IconFrame: integer expected";
            }
            if (m.Paper != null && m.hasOwnProperty("Paper")) {
                if (!$util.isInteger(m.Paper))
                    return "Paper: integer expected";
            }
            if (m.TitleIds != null && m.hasOwnProperty("TitleIds")) {
                if (!Array.isArray(m.TitleIds))
                    return "TitleIds: array expected";
                for (var i = 0; i < m.TitleIds.length; ++i) {
                    if (!$util.isInteger(m.TitleIds[i]))
                        return "TitleIds: integer[] expected";
                }
            }
            if (m.IsOnline != null && m.hasOwnProperty("IsOnline")) {
                if (typeof m.IsOnline !== "boolean")
                    return "IsOnline: boolean expected";
            }
            if (m.IsFight != null && m.hasOwnProperty("IsFight")) {
                if (typeof m.IsFight !== "boolean")
                    return "IsFight: boolean expected";
            }
            if (m.RoomIID != null && m.hasOwnProperty("RoomIID")) {
                if (!$util.isInteger(m.RoomIID) && !(m.RoomIID && $util.isInteger(m.RoomIID.low) && $util.isInteger(m.RoomIID.high)))
                    return "RoomIID: integer|Long expected";
            }
            if (m.ShortId != null && m.hasOwnProperty("ShortId")) {
                if (!$util.isInteger(m.ShortId))
                    return "ShortId: integer expected";
            }
            if (m.RankedStars != null && m.hasOwnProperty("RankedStars")) {
                if (!$util.isInteger(m.RankedStars))
                    return "RankedStars: integer expected";
            }
            if (m.RankedSeasonCount != null && m.hasOwnProperty("RankedSeasonCount")) {
                if (!$util.isInteger(m.RankedSeasonCount))
                    return "RankedSeasonCount: integer expected";
            }
            return null;
        };

        return S_OtherRole;
    })();

    DcgProto.S_InnerRole = (function() {

        /**
         * Properties of a S_InnerRole.
         * @memberof DcgProto
         * @interface IS_InnerRole
         * @property {DcgProto.IS_OtherRole|null} [OtherRole] S_InnerRole OtherRole
         * @property {number|null} [LastLoginTime] S_InnerRole LastLoginTime
         * @property {number|null} [MatchScore] S_InnerRole MatchScore
         * @property {number|null} [RankedMatchScore] S_InnerRole RankedMatchScore
         */

        /**
         * Constructs a new S_InnerRole.
         * @memberof DcgProto
         * @classdesc Represents a S_InnerRole.
         * @implements IS_InnerRole
         * @constructor
         * @param {DcgProto.IS_InnerRole=} [p] Properties to set
         */
        function S_InnerRole(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_InnerRole OtherRole.
         * @member {DcgProto.IS_OtherRole|null|undefined} OtherRole
         * @memberof DcgProto.S_InnerRole
         * @instance
         */
        S_InnerRole.prototype.OtherRole = null;

        /**
         * S_InnerRole LastLoginTime.
         * @member {number} LastLoginTime
         * @memberof DcgProto.S_InnerRole
         * @instance
         */
        S_InnerRole.prototype.LastLoginTime = 0;

        /**
         * S_InnerRole MatchScore.
         * @member {number} MatchScore
         * @memberof DcgProto.S_InnerRole
         * @instance
         */
        S_InnerRole.prototype.MatchScore = 0;

        /**
         * S_InnerRole RankedMatchScore.
         * @member {number} RankedMatchScore
         * @memberof DcgProto.S_InnerRole
         * @instance
         */
        S_InnerRole.prototype.RankedMatchScore = 0;

        /**
         * Creates a new S_InnerRole instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_InnerRole
         * @static
         * @param {DcgProto.IS_InnerRole=} [properties] Properties to set
         * @returns {DcgProto.S_InnerRole} S_InnerRole instance
         */
        S_InnerRole.create = function create(properties) {
            return new S_InnerRole(properties);
        };

        /**
         * Encodes the specified S_InnerRole message. Does not implicitly {@link DcgProto.S_InnerRole.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_InnerRole
         * @static
         * @param {DcgProto.IS_InnerRole} m S_InnerRole message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_InnerRole.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.OtherRole != null && Object.hasOwnProperty.call(m, "OtherRole"))
                $root.DcgProto.S_OtherRole.encode(m.OtherRole, w.uint32(10).fork()).ldelim();
            if (m.LastLoginTime != null && Object.hasOwnProperty.call(m, "LastLoginTime"))
                w.uint32(16).uint32(m.LastLoginTime);
            if (m.MatchScore != null && Object.hasOwnProperty.call(m, "MatchScore"))
                w.uint32(24).int32(m.MatchScore);
            if (m.RankedMatchScore != null && Object.hasOwnProperty.call(m, "RankedMatchScore"))
                w.uint32(32).int32(m.RankedMatchScore);
            return w;
        };

        /**
         * Decodes a S_InnerRole message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_InnerRole
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_InnerRole} S_InnerRole
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_InnerRole.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_InnerRole();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.OtherRole = $root.DcgProto.S_OtherRole.decode(r, r.uint32());
                    break;
                case 2:
                    m.LastLoginTime = r.uint32();
                    break;
                case 3:
                    m.MatchScore = r.int32();
                    break;
                case 4:
                    m.RankedMatchScore = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_InnerRole message.
         * @function verify
         * @memberof DcgProto.S_InnerRole
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_InnerRole.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.OtherRole != null && m.hasOwnProperty("OtherRole")) {
                {
                    var e = $root.DcgProto.S_OtherRole.verify(m.OtherRole);
                    if (e)
                        return "OtherRole." + e;
                }
            }
            if (m.LastLoginTime != null && m.hasOwnProperty("LastLoginTime")) {
                if (!$util.isInteger(m.LastLoginTime))
                    return "LastLoginTime: integer expected";
            }
            if (m.MatchScore != null && m.hasOwnProperty("MatchScore")) {
                if (!$util.isInteger(m.MatchScore))
                    return "MatchScore: integer expected";
            }
            if (m.RankedMatchScore != null && m.hasOwnProperty("RankedMatchScore")) {
                if (!$util.isInteger(m.RankedMatchScore))
                    return "RankedMatchScore: integer expected";
            }
            return null;
        };

        return S_InnerRole;
    })();

    DcgProto.S_RoomInfo = (function() {

        /**
         * Properties of a S_RoomInfo.
         * @memberof DcgProto
         * @interface IS_RoomInfo
         * @property {DcgProto.IS_RoomData|null} [RoomData] S_RoomInfo RoomData
         * @property {DcgProto.IS_RoomPanel|null} [RoomPanel] S_RoomInfo RoomPanel
         */

        /**
         * Constructs a new S_RoomInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_RoomInfo.
         * @implements IS_RoomInfo
         * @constructor
         * @param {DcgProto.IS_RoomInfo=} [p] Properties to set
         */
        function S_RoomInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_RoomInfo RoomData.
         * @member {DcgProto.IS_RoomData|null|undefined} RoomData
         * @memberof DcgProto.S_RoomInfo
         * @instance
         */
        S_RoomInfo.prototype.RoomData = null;

        /**
         * S_RoomInfo RoomPanel.
         * @member {DcgProto.IS_RoomPanel|null|undefined} RoomPanel
         * @memberof DcgProto.S_RoomInfo
         * @instance
         */
        S_RoomInfo.prototype.RoomPanel = null;

        /**
         * Creates a new S_RoomInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_RoomInfo
         * @static
         * @param {DcgProto.IS_RoomInfo=} [properties] Properties to set
         * @returns {DcgProto.S_RoomInfo} S_RoomInfo instance
         */
        S_RoomInfo.create = function create(properties) {
            return new S_RoomInfo(properties);
        };

        /**
         * Encodes the specified S_RoomInfo message. Does not implicitly {@link DcgProto.S_RoomInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_RoomInfo
         * @static
         * @param {DcgProto.IS_RoomInfo} m S_RoomInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_RoomInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomData != null && Object.hasOwnProperty.call(m, "RoomData"))
                $root.DcgProto.S_RoomData.encode(m.RoomData, w.uint32(10).fork()).ldelim();
            if (m.RoomPanel != null && Object.hasOwnProperty.call(m, "RoomPanel"))
                $root.DcgProto.S_RoomPanel.encode(m.RoomPanel, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_RoomInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_RoomInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_RoomInfo} S_RoomInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_RoomInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_RoomInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomData = $root.DcgProto.S_RoomData.decode(r, r.uint32());
                    break;
                case 2:
                    m.RoomPanel = $root.DcgProto.S_RoomPanel.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_RoomInfo message.
         * @function verify
         * @memberof DcgProto.S_RoomInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_RoomInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomData != null && m.hasOwnProperty("RoomData")) {
                {
                    var e = $root.DcgProto.S_RoomData.verify(m.RoomData);
                    if (e)
                        return "RoomData." + e;
                }
            }
            if (m.RoomPanel != null && m.hasOwnProperty("RoomPanel")) {
                {
                    var e = $root.DcgProto.S_RoomPanel.verify(m.RoomPanel);
                    if (e)
                        return "RoomPanel." + e;
                }
            }
            return null;
        };

        return S_RoomInfo;
    })();

    DcgProto.S_RoomPanel = (function() {

        /**
         * Properties of a S_RoomPanel.
         * @memberof DcgProto
         * @interface IS_RoomPanel
         * @property {Array.<DcgProto.IS_Reward>|null} [WinReward] S_RoomPanel WinReward
         * @property {Array.<DcgProto.IS_Reward>|null} [LostReward] S_RoomPanel LostReward
         */

        /**
         * Constructs a new S_RoomPanel.
         * @memberof DcgProto
         * @classdesc Represents a S_RoomPanel.
         * @implements IS_RoomPanel
         * @constructor
         * @param {DcgProto.IS_RoomPanel=} [p] Properties to set
         */
        function S_RoomPanel(p) {
            this.WinReward = [];
            this.LostReward = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_RoomPanel WinReward.
         * @member {Array.<DcgProto.IS_Reward>} WinReward
         * @memberof DcgProto.S_RoomPanel
         * @instance
         */
        S_RoomPanel.prototype.WinReward = $util.emptyArray;

        /**
         * S_RoomPanel LostReward.
         * @member {Array.<DcgProto.IS_Reward>} LostReward
         * @memberof DcgProto.S_RoomPanel
         * @instance
         */
        S_RoomPanel.prototype.LostReward = $util.emptyArray;

        /**
         * Creates a new S_RoomPanel instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_RoomPanel
         * @static
         * @param {DcgProto.IS_RoomPanel=} [properties] Properties to set
         * @returns {DcgProto.S_RoomPanel} S_RoomPanel instance
         */
        S_RoomPanel.create = function create(properties) {
            return new S_RoomPanel(properties);
        };

        /**
         * Encodes the specified S_RoomPanel message. Does not implicitly {@link DcgProto.S_RoomPanel.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_RoomPanel
         * @static
         * @param {DcgProto.IS_RoomPanel} m S_RoomPanel message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_RoomPanel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.WinReward != null && m.WinReward.length) {
                for (var i = 0; i < m.WinReward.length; ++i)
                    $root.DcgProto.S_Reward.encode(m.WinReward[i], w.uint32(10).fork()).ldelim();
            }
            if (m.LostReward != null && m.LostReward.length) {
                for (var i = 0; i < m.LostReward.length; ++i)
                    $root.DcgProto.S_Reward.encode(m.LostReward[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_RoomPanel message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_RoomPanel
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_RoomPanel} S_RoomPanel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_RoomPanel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_RoomPanel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.WinReward && m.WinReward.length))
                        m.WinReward = [];
                    m.WinReward.push($root.DcgProto.S_Reward.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.LostReward && m.LostReward.length))
                        m.LostReward = [];
                    m.LostReward.push($root.DcgProto.S_Reward.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_RoomPanel message.
         * @function verify
         * @memberof DcgProto.S_RoomPanel
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_RoomPanel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.WinReward != null && m.hasOwnProperty("WinReward")) {
                if (!Array.isArray(m.WinReward))
                    return "WinReward: array expected";
                for (var i = 0; i < m.WinReward.length; ++i) {
                    {
                        var e = $root.DcgProto.S_Reward.verify(m.WinReward[i]);
                        if (e)
                            return "WinReward." + e;
                    }
                }
            }
            if (m.LostReward != null && m.hasOwnProperty("LostReward")) {
                if (!Array.isArray(m.LostReward))
                    return "LostReward: array expected";
                for (var i = 0; i < m.LostReward.length; ++i) {
                    {
                        var e = $root.DcgProto.S_Reward.verify(m.LostReward[i]);
                        if (e)
                            return "LostReward." + e;
                    }
                }
            }
            return null;
        };

        return S_RoomPanel;
    })();

    DcgProto.S_RoomData = (function() {

        /**
         * Properties of a S_RoomData.
         * @memberof DcgProto
         * @interface IS_RoomData
         * @property {Long|null} [InstanceId] S_RoomData InstanceId
         * @property {DcgProto.E_ROOM_STATUS|null} [Status] S_RoomData Status
         * @property {DcgProto.IS_RoomRoleData|null} [FightRoleA] S_RoomData FightRoleA
         * @property {DcgProto.IS_RoomRoleData|null} [FightRoleB] S_RoomData FightRoleB
         * @property {number|null} [ViewerNum] S_RoomData ViewerNum
         * @property {DcgProto.IS_RoomReadyData|null} [Ready] S_RoomData Ready
         * @property {DcgProto.E_ROOM_MODE|null} [RoomMode] S_RoomData RoomMode
         * @property {number|null} [CreateTime] S_RoomData CreateTime
         */

        /**
         * Constructs a new S_RoomData.
         * @memberof DcgProto
         * @classdesc Represents a S_RoomData.
         * @implements IS_RoomData
         * @constructor
         * @param {DcgProto.IS_RoomData=} [p] Properties to set
         */
        function S_RoomData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_RoomData InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_RoomData
         * @instance
         */
        S_RoomData.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_RoomData Status.
         * @member {DcgProto.E_ROOM_STATUS} Status
         * @memberof DcgProto.S_RoomData
         * @instance
         */
        S_RoomData.prototype.Status = 0;

        /**
         * S_RoomData FightRoleA.
         * @member {DcgProto.IS_RoomRoleData|null|undefined} FightRoleA
         * @memberof DcgProto.S_RoomData
         * @instance
         */
        S_RoomData.prototype.FightRoleA = null;

        /**
         * S_RoomData FightRoleB.
         * @member {DcgProto.IS_RoomRoleData|null|undefined} FightRoleB
         * @memberof DcgProto.S_RoomData
         * @instance
         */
        S_RoomData.prototype.FightRoleB = null;

        /**
         * S_RoomData ViewerNum.
         * @member {number} ViewerNum
         * @memberof DcgProto.S_RoomData
         * @instance
         */
        S_RoomData.prototype.ViewerNum = 0;

        /**
         * S_RoomData Ready.
         * @member {DcgProto.IS_RoomReadyData|null|undefined} Ready
         * @memberof DcgProto.S_RoomData
         * @instance
         */
        S_RoomData.prototype.Ready = null;

        /**
         * S_RoomData RoomMode.
         * @member {DcgProto.E_ROOM_MODE} RoomMode
         * @memberof DcgProto.S_RoomData
         * @instance
         */
        S_RoomData.prototype.RoomMode = 0;

        /**
         * S_RoomData CreateTime.
         * @member {number} CreateTime
         * @memberof DcgProto.S_RoomData
         * @instance
         */
        S_RoomData.prototype.CreateTime = 0;

        /**
         * Creates a new S_RoomData instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_RoomData
         * @static
         * @param {DcgProto.IS_RoomData=} [properties] Properties to set
         * @returns {DcgProto.S_RoomData} S_RoomData instance
         */
        S_RoomData.create = function create(properties) {
            return new S_RoomData(properties);
        };

        /**
         * Encodes the specified S_RoomData message. Does not implicitly {@link DcgProto.S_RoomData.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_RoomData
         * @static
         * @param {DcgProto.IS_RoomData} m S_RoomData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_RoomData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.Status != null && Object.hasOwnProperty.call(m, "Status"))
                w.uint32(16).int32(m.Status);
            if (m.FightRoleA != null && Object.hasOwnProperty.call(m, "FightRoleA"))
                $root.DcgProto.S_RoomRoleData.encode(m.FightRoleA, w.uint32(26).fork()).ldelim();
            if (m.FightRoleB != null && Object.hasOwnProperty.call(m, "FightRoleB"))
                $root.DcgProto.S_RoomRoleData.encode(m.FightRoleB, w.uint32(34).fork()).ldelim();
            if (m.ViewerNum != null && Object.hasOwnProperty.call(m, "ViewerNum"))
                w.uint32(40).int32(m.ViewerNum);
            if (m.Ready != null && Object.hasOwnProperty.call(m, "Ready"))
                $root.DcgProto.S_RoomReadyData.encode(m.Ready, w.uint32(50).fork()).ldelim();
            if (m.RoomMode != null && Object.hasOwnProperty.call(m, "RoomMode"))
                w.uint32(56).int32(m.RoomMode);
            if (m.CreateTime != null && Object.hasOwnProperty.call(m, "CreateTime"))
                w.uint32(64).uint32(m.CreateTime);
            return w;
        };

        /**
         * Decodes a S_RoomData message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_RoomData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_RoomData} S_RoomData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_RoomData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_RoomData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.Status = r.int32();
                    break;
                case 3:
                    m.FightRoleA = $root.DcgProto.S_RoomRoleData.decode(r, r.uint32());
                    break;
                case 4:
                    m.FightRoleB = $root.DcgProto.S_RoomRoleData.decode(r, r.uint32());
                    break;
                case 5:
                    m.ViewerNum = r.int32();
                    break;
                case 6:
                    m.Ready = $root.DcgProto.S_RoomReadyData.decode(r, r.uint32());
                    break;
                case 7:
                    m.RoomMode = r.int32();
                    break;
                case 8:
                    m.CreateTime = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_RoomData message.
         * @function verify
         * @memberof DcgProto.S_RoomData
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_RoomData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.Status != null && m.hasOwnProperty("Status")) {
                switch (m.Status) {
                default:
                    return "Status: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            }
            if (m.FightRoleA != null && m.hasOwnProperty("FightRoleA")) {
                {
                    var e = $root.DcgProto.S_RoomRoleData.verify(m.FightRoleA);
                    if (e)
                        return "FightRoleA." + e;
                }
            }
            if (m.FightRoleB != null && m.hasOwnProperty("FightRoleB")) {
                {
                    var e = $root.DcgProto.S_RoomRoleData.verify(m.FightRoleB);
                    if (e)
                        return "FightRoleB." + e;
                }
            }
            if (m.ViewerNum != null && m.hasOwnProperty("ViewerNum")) {
                if (!$util.isInteger(m.ViewerNum))
                    return "ViewerNum: integer expected";
            }
            if (m.Ready != null && m.hasOwnProperty("Ready")) {
                {
                    var e = $root.DcgProto.S_RoomReadyData.verify(m.Ready);
                    if (e)
                        return "Ready." + e;
                }
            }
            if (m.RoomMode != null && m.hasOwnProperty("RoomMode")) {
                switch (m.RoomMode) {
                default:
                    return "RoomMode: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            }
            if (m.CreateTime != null && m.hasOwnProperty("CreateTime")) {
                if (!$util.isInteger(m.CreateTime))
                    return "CreateTime: integer expected";
            }
            return null;
        };

        return S_RoomData;
    })();

    DcgProto.S_RoomRoleData = (function() {

        /**
         * Properties of a S_RoomRoleData.
         * @memberof DcgProto
         * @interface IS_RoomRoleData
         * @property {DcgProto.IS_OtherRole|null} [OtherRole] S_RoomRoleData OtherRole
         * @property {boolean|null} [IsJoin] S_RoomRoleData IsJoin
         * @property {DcgProto.IS_DeckInfo|null} [DeckInfo] S_RoomRoleData DeckInfo
         * @property {DcgProto.IS_RobotData|null} [RobotData] S_RoomRoleData RobotData
         * @property {number|null} [MatchScore] S_RoomRoleData MatchScore
         * @property {number|null} [RankedMatchScore] S_RoomRoleData RankedMatchScore
         */

        /**
         * Constructs a new S_RoomRoleData.
         * @memberof DcgProto
         * @classdesc Represents a S_RoomRoleData.
         * @implements IS_RoomRoleData
         * @constructor
         * @param {DcgProto.IS_RoomRoleData=} [p] Properties to set
         */
        function S_RoomRoleData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_RoomRoleData OtherRole.
         * @member {DcgProto.IS_OtherRole|null|undefined} OtherRole
         * @memberof DcgProto.S_RoomRoleData
         * @instance
         */
        S_RoomRoleData.prototype.OtherRole = null;

        /**
         * S_RoomRoleData IsJoin.
         * @member {boolean} IsJoin
         * @memberof DcgProto.S_RoomRoleData
         * @instance
         */
        S_RoomRoleData.prototype.IsJoin = false;

        /**
         * S_RoomRoleData DeckInfo.
         * @member {DcgProto.IS_DeckInfo|null|undefined} DeckInfo
         * @memberof DcgProto.S_RoomRoleData
         * @instance
         */
        S_RoomRoleData.prototype.DeckInfo = null;

        /**
         * S_RoomRoleData RobotData.
         * @member {DcgProto.IS_RobotData|null|undefined} RobotData
         * @memberof DcgProto.S_RoomRoleData
         * @instance
         */
        S_RoomRoleData.prototype.RobotData = null;

        /**
         * S_RoomRoleData MatchScore.
         * @member {number} MatchScore
         * @memberof DcgProto.S_RoomRoleData
         * @instance
         */
        S_RoomRoleData.prototype.MatchScore = 0;

        /**
         * S_RoomRoleData RankedMatchScore.
         * @member {number} RankedMatchScore
         * @memberof DcgProto.S_RoomRoleData
         * @instance
         */
        S_RoomRoleData.prototype.RankedMatchScore = 0;

        /**
         * Creates a new S_RoomRoleData instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_RoomRoleData
         * @static
         * @param {DcgProto.IS_RoomRoleData=} [properties] Properties to set
         * @returns {DcgProto.S_RoomRoleData} S_RoomRoleData instance
         */
        S_RoomRoleData.create = function create(properties) {
            return new S_RoomRoleData(properties);
        };

        /**
         * Encodes the specified S_RoomRoleData message. Does not implicitly {@link DcgProto.S_RoomRoleData.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_RoomRoleData
         * @static
         * @param {DcgProto.IS_RoomRoleData} m S_RoomRoleData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_RoomRoleData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.OtherRole != null && Object.hasOwnProperty.call(m, "OtherRole"))
                $root.DcgProto.S_OtherRole.encode(m.OtherRole, w.uint32(10).fork()).ldelim();
            if (m.IsJoin != null && Object.hasOwnProperty.call(m, "IsJoin"))
                w.uint32(16).bool(m.IsJoin);
            if (m.DeckInfo != null && Object.hasOwnProperty.call(m, "DeckInfo"))
                $root.DcgProto.S_DeckInfo.encode(m.DeckInfo, w.uint32(26).fork()).ldelim();
            if (m.RobotData != null && Object.hasOwnProperty.call(m, "RobotData"))
                $root.DcgProto.S_RobotData.encode(m.RobotData, w.uint32(34).fork()).ldelim();
            if (m.MatchScore != null && Object.hasOwnProperty.call(m, "MatchScore"))
                w.uint32(40).int32(m.MatchScore);
            if (m.RankedMatchScore != null && Object.hasOwnProperty.call(m, "RankedMatchScore"))
                w.uint32(48).int32(m.RankedMatchScore);
            return w;
        };

        /**
         * Decodes a S_RoomRoleData message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_RoomRoleData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_RoomRoleData} S_RoomRoleData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_RoomRoleData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_RoomRoleData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.OtherRole = $root.DcgProto.S_OtherRole.decode(r, r.uint32());
                    break;
                case 2:
                    m.IsJoin = r.bool();
                    break;
                case 3:
                    m.DeckInfo = $root.DcgProto.S_DeckInfo.decode(r, r.uint32());
                    break;
                case 4:
                    m.RobotData = $root.DcgProto.S_RobotData.decode(r, r.uint32());
                    break;
                case 5:
                    m.MatchScore = r.int32();
                    break;
                case 6:
                    m.RankedMatchScore = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_RoomRoleData message.
         * @function verify
         * @memberof DcgProto.S_RoomRoleData
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_RoomRoleData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.OtherRole != null && m.hasOwnProperty("OtherRole")) {
                {
                    var e = $root.DcgProto.S_OtherRole.verify(m.OtherRole);
                    if (e)
                        return "OtherRole." + e;
                }
            }
            if (m.IsJoin != null && m.hasOwnProperty("IsJoin")) {
                if (typeof m.IsJoin !== "boolean")
                    return "IsJoin: boolean expected";
            }
            if (m.DeckInfo != null && m.hasOwnProperty("DeckInfo")) {
                {
                    var e = $root.DcgProto.S_DeckInfo.verify(m.DeckInfo);
                    if (e)
                        return "DeckInfo." + e;
                }
            }
            if (m.RobotData != null && m.hasOwnProperty("RobotData")) {
                {
                    var e = $root.DcgProto.S_RobotData.verify(m.RobotData);
                    if (e)
                        return "RobotData." + e;
                }
            }
            if (m.MatchScore != null && m.hasOwnProperty("MatchScore")) {
                if (!$util.isInteger(m.MatchScore))
                    return "MatchScore: integer expected";
            }
            if (m.RankedMatchScore != null && m.hasOwnProperty("RankedMatchScore")) {
                if (!$util.isInteger(m.RankedMatchScore))
                    return "RankedMatchScore: integer expected";
            }
            return null;
        };

        return S_RoomRoleData;
    })();

    DcgProto.S_RobotData = (function() {

        /**
         * Properties of a S_RobotData.
         * @memberof DcgProto
         * @interface IS_RobotData
         * @property {number|null} [CfgId] S_RobotData CfgId
         */

        /**
         * Constructs a new S_RobotData.
         * @memberof DcgProto
         * @classdesc Represents a S_RobotData.
         * @implements IS_RobotData
         * @constructor
         * @param {DcgProto.IS_RobotData=} [p] Properties to set
         */
        function S_RobotData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_RobotData CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_RobotData
         * @instance
         */
        S_RobotData.prototype.CfgId = 0;

        /**
         * Creates a new S_RobotData instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_RobotData
         * @static
         * @param {DcgProto.IS_RobotData=} [properties] Properties to set
         * @returns {DcgProto.S_RobotData} S_RobotData instance
         */
        S_RobotData.create = function create(properties) {
            return new S_RobotData(properties);
        };

        /**
         * Encodes the specified S_RobotData message. Does not implicitly {@link DcgProto.S_RobotData.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_RobotData
         * @static
         * @param {DcgProto.IS_RobotData} m S_RobotData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_RobotData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(8).int32(m.CfgId);
            return w;
        };

        /**
         * Decodes a S_RobotData message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_RobotData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_RobotData} S_RobotData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_RobotData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_RobotData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CfgId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_RobotData message.
         * @function verify
         * @memberof DcgProto.S_RobotData
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_RobotData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            return null;
        };

        return S_RobotData;
    })();

    DcgProto.S_RoomReadyData = (function() {

        /**
         * Properties of a S_RoomReadyData.
         * @memberof DcgProto
         * @interface IS_RoomReadyData
         * @property {Long|null} [FirstAtkAccountIID] S_RoomReadyData FirstAtkAccountIID
         * @property {Array.<DcgProto.IS_GuessFist>|null} [GuessFist] S_RoomReadyData GuessFist
         */

        /**
         * Constructs a new S_RoomReadyData.
         * @memberof DcgProto
         * @classdesc Represents a S_RoomReadyData.
         * @implements IS_RoomReadyData
         * @constructor
         * @param {DcgProto.IS_RoomReadyData=} [p] Properties to set
         */
        function S_RoomReadyData(p) {
            this.GuessFist = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_RoomReadyData FirstAtkAccountIID.
         * @member {Long} FirstAtkAccountIID
         * @memberof DcgProto.S_RoomReadyData
         * @instance
         */
        S_RoomReadyData.prototype.FirstAtkAccountIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_RoomReadyData GuessFist.
         * @member {Array.<DcgProto.IS_GuessFist>} GuessFist
         * @memberof DcgProto.S_RoomReadyData
         * @instance
         */
        S_RoomReadyData.prototype.GuessFist = $util.emptyArray;

        /**
         * Creates a new S_RoomReadyData instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_RoomReadyData
         * @static
         * @param {DcgProto.IS_RoomReadyData=} [properties] Properties to set
         * @returns {DcgProto.S_RoomReadyData} S_RoomReadyData instance
         */
        S_RoomReadyData.create = function create(properties) {
            return new S_RoomReadyData(properties);
        };

        /**
         * Encodes the specified S_RoomReadyData message. Does not implicitly {@link DcgProto.S_RoomReadyData.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_RoomReadyData
         * @static
         * @param {DcgProto.IS_RoomReadyData} m S_RoomReadyData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_RoomReadyData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.FirstAtkAccountIID != null && Object.hasOwnProperty.call(m, "FirstAtkAccountIID"))
                w.uint32(8).int64(m.FirstAtkAccountIID);
            if (m.GuessFist != null && m.GuessFist.length) {
                for (var i = 0; i < m.GuessFist.length; ++i)
                    $root.DcgProto.S_GuessFist.encode(m.GuessFist[i], w.uint32(18).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_RoomReadyData message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_RoomReadyData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_RoomReadyData} S_RoomReadyData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_RoomReadyData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_RoomReadyData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.FirstAtkAccountIID = r.int64();
                    break;
                case 2:
                    if (!(m.GuessFist && m.GuessFist.length))
                        m.GuessFist = [];
                    m.GuessFist.push($root.DcgProto.S_GuessFist.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_RoomReadyData message.
         * @function verify
         * @memberof DcgProto.S_RoomReadyData
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_RoomReadyData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.FirstAtkAccountIID != null && m.hasOwnProperty("FirstAtkAccountIID")) {
                if (!$util.isInteger(m.FirstAtkAccountIID) && !(m.FirstAtkAccountIID && $util.isInteger(m.FirstAtkAccountIID.low) && $util.isInteger(m.FirstAtkAccountIID.high)))
                    return "FirstAtkAccountIID: integer|Long expected";
            }
            if (m.GuessFist != null && m.hasOwnProperty("GuessFist")) {
                if (!Array.isArray(m.GuessFist))
                    return "GuessFist: array expected";
                for (var i = 0; i < m.GuessFist.length; ++i) {
                    {
                        var e = $root.DcgProto.S_GuessFist.verify(m.GuessFist[i]);
                        if (e)
                            return "GuessFist." + e;
                    }
                }
            }
            return null;
        };

        return S_RoomReadyData;
    })();

    DcgProto.S_GuessFist = (function() {

        /**
         * Properties of a S_GuessFist.
         * @memberof DcgProto
         * @interface IS_GuessFist
         * @property {DcgProto.IS_GuessFistRole|null} [RoleA] S_GuessFist RoleA
         * @property {DcgProto.IS_GuessFistRole|null} [RoleB] S_GuessFist RoleB
         */

        /**
         * Constructs a new S_GuessFist.
         * @memberof DcgProto
         * @classdesc Represents a S_GuessFist.
         * @implements IS_GuessFist
         * @constructor
         * @param {DcgProto.IS_GuessFist=} [p] Properties to set
         */
        function S_GuessFist(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_GuessFist RoleA.
         * @member {DcgProto.IS_GuessFistRole|null|undefined} RoleA
         * @memberof DcgProto.S_GuessFist
         * @instance
         */
        S_GuessFist.prototype.RoleA = null;

        /**
         * S_GuessFist RoleB.
         * @member {DcgProto.IS_GuessFistRole|null|undefined} RoleB
         * @memberof DcgProto.S_GuessFist
         * @instance
         */
        S_GuessFist.prototype.RoleB = null;

        /**
         * Creates a new S_GuessFist instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_GuessFist
         * @static
         * @param {DcgProto.IS_GuessFist=} [properties] Properties to set
         * @returns {DcgProto.S_GuessFist} S_GuessFist instance
         */
        S_GuessFist.create = function create(properties) {
            return new S_GuessFist(properties);
        };

        /**
         * Encodes the specified S_GuessFist message. Does not implicitly {@link DcgProto.S_GuessFist.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_GuessFist
         * @static
         * @param {DcgProto.IS_GuessFist} m S_GuessFist message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_GuessFist.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoleA != null && Object.hasOwnProperty.call(m, "RoleA"))
                $root.DcgProto.S_GuessFistRole.encode(m.RoleA, w.uint32(10).fork()).ldelim();
            if (m.RoleB != null && Object.hasOwnProperty.call(m, "RoleB"))
                $root.DcgProto.S_GuessFistRole.encode(m.RoleB, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_GuessFist message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_GuessFist
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_GuessFist} S_GuessFist
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_GuessFist.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_GuessFist();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoleA = $root.DcgProto.S_GuessFistRole.decode(r, r.uint32());
                    break;
                case 2:
                    m.RoleB = $root.DcgProto.S_GuessFistRole.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_GuessFist message.
         * @function verify
         * @memberof DcgProto.S_GuessFist
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_GuessFist.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoleA != null && m.hasOwnProperty("RoleA")) {
                {
                    var e = $root.DcgProto.S_GuessFistRole.verify(m.RoleA);
                    if (e)
                        return "RoleA." + e;
                }
            }
            if (m.RoleB != null && m.hasOwnProperty("RoleB")) {
                {
                    var e = $root.DcgProto.S_GuessFistRole.verify(m.RoleB);
                    if (e)
                        return "RoleB." + e;
                }
            }
            return null;
        };

        return S_GuessFist;
    })();

    DcgProto.S_GuessFistRole = (function() {

        /**
         * Properties of a S_GuessFistRole.
         * @memberof DcgProto
         * @interface IS_GuessFistRole
         * @property {Long|null} [RoleIID] S_GuessFistRole RoleIID
         * @property {DcgProto.E_GUESS_FIST|null} [GuessFist] S_GuessFistRole GuessFist
         * @property {DcgProto.E_FightResult|null} [FightResult] S_GuessFistRole FightResult
         */

        /**
         * Constructs a new S_GuessFistRole.
         * @memberof DcgProto
         * @classdesc Represents a S_GuessFistRole.
         * @implements IS_GuessFistRole
         * @constructor
         * @param {DcgProto.IS_GuessFistRole=} [p] Properties to set
         */
        function S_GuessFistRole(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_GuessFistRole RoleIID.
         * @member {Long} RoleIID
         * @memberof DcgProto.S_GuessFistRole
         * @instance
         */
        S_GuessFistRole.prototype.RoleIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_GuessFistRole GuessFist.
         * @member {DcgProto.E_GUESS_FIST} GuessFist
         * @memberof DcgProto.S_GuessFistRole
         * @instance
         */
        S_GuessFistRole.prototype.GuessFist = 0;

        /**
         * S_GuessFistRole FightResult.
         * @member {DcgProto.E_FightResult} FightResult
         * @memberof DcgProto.S_GuessFistRole
         * @instance
         */
        S_GuessFistRole.prototype.FightResult = 0;

        /**
         * Creates a new S_GuessFistRole instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_GuessFistRole
         * @static
         * @param {DcgProto.IS_GuessFistRole=} [properties] Properties to set
         * @returns {DcgProto.S_GuessFistRole} S_GuessFistRole instance
         */
        S_GuessFistRole.create = function create(properties) {
            return new S_GuessFistRole(properties);
        };

        /**
         * Encodes the specified S_GuessFistRole message. Does not implicitly {@link DcgProto.S_GuessFistRole.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_GuessFistRole
         * @static
         * @param {DcgProto.IS_GuessFistRole} m S_GuessFistRole message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_GuessFistRole.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoleIID != null && Object.hasOwnProperty.call(m, "RoleIID"))
                w.uint32(8).int64(m.RoleIID);
            if (m.GuessFist != null && Object.hasOwnProperty.call(m, "GuessFist"))
                w.uint32(16).int32(m.GuessFist);
            if (m.FightResult != null && Object.hasOwnProperty.call(m, "FightResult"))
                w.uint32(24).int32(m.FightResult);
            return w;
        };

        /**
         * Decodes a S_GuessFistRole message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_GuessFistRole
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_GuessFistRole} S_GuessFistRole
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_GuessFistRole.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_GuessFistRole();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoleIID = r.int64();
                    break;
                case 2:
                    m.GuessFist = r.int32();
                    break;
                case 3:
                    m.FightResult = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_GuessFistRole message.
         * @function verify
         * @memberof DcgProto.S_GuessFistRole
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_GuessFistRole.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoleIID != null && m.hasOwnProperty("RoleIID")) {
                if (!$util.isInteger(m.RoleIID) && !(m.RoleIID && $util.isInteger(m.RoleIID.low) && $util.isInteger(m.RoleIID.high)))
                    return "RoleIID: integer|Long expected";
            }
            if (m.GuessFist != null && m.hasOwnProperty("GuessFist")) {
                switch (m.GuessFist) {
                default:
                    return "GuessFist: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            if (m.FightResult != null && m.hasOwnProperty("FightResult")) {
                switch (m.FightResult) {
                default:
                    return "FightResult: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            }
            return null;
        };

        return S_GuessFistRole;
    })();

    DcgProto.S_BattleMsg = (function() {

        /**
         * Properties of a S_BattleMsg.
         * @memberof DcgProto
         * @interface IS_BattleMsg
         * @property {number|null} [FrameIndex] S_BattleMsg FrameIndex
         * @property {Array.<DcgProto.IS_RoomFight>|null} [FightA] S_BattleMsg FightA
         * @property {Array.<DcgProto.IS_RoomFight>|null} [FightB] S_BattleMsg FightB
         * @property {Array.<DcgProto.IS_RoomFight>|null} [Viewer] S_BattleMsg Viewer
         * @property {Long|null} [CurrRoundRoleIID] S_BattleMsg CurrRoundRoleIID
         * @property {number|null} [EndTurnTime] S_BattleMsg EndTurnTime
         */

        /**
         * Constructs a new S_BattleMsg.
         * @memberof DcgProto
         * @classdesc Represents a S_BattleMsg.
         * @implements IS_BattleMsg
         * @constructor
         * @param {DcgProto.IS_BattleMsg=} [p] Properties to set
         */
        function S_BattleMsg(p) {
            this.FightA = [];
            this.FightB = [];
            this.Viewer = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_BattleMsg FrameIndex.
         * @member {number} FrameIndex
         * @memberof DcgProto.S_BattleMsg
         * @instance
         */
        S_BattleMsg.prototype.FrameIndex = 0;

        /**
         * S_BattleMsg FightA.
         * @member {Array.<DcgProto.IS_RoomFight>} FightA
         * @memberof DcgProto.S_BattleMsg
         * @instance
         */
        S_BattleMsg.prototype.FightA = $util.emptyArray;

        /**
         * S_BattleMsg FightB.
         * @member {Array.<DcgProto.IS_RoomFight>} FightB
         * @memberof DcgProto.S_BattleMsg
         * @instance
         */
        S_BattleMsg.prototype.FightB = $util.emptyArray;

        /**
         * S_BattleMsg Viewer.
         * @member {Array.<DcgProto.IS_RoomFight>} Viewer
         * @memberof DcgProto.S_BattleMsg
         * @instance
         */
        S_BattleMsg.prototype.Viewer = $util.emptyArray;

        /**
         * S_BattleMsg CurrRoundRoleIID.
         * @member {Long} CurrRoundRoleIID
         * @memberof DcgProto.S_BattleMsg
         * @instance
         */
        S_BattleMsg.prototype.CurrRoundRoleIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_BattleMsg EndTurnTime.
         * @member {number} EndTurnTime
         * @memberof DcgProto.S_BattleMsg
         * @instance
         */
        S_BattleMsg.prototype.EndTurnTime = 0;

        /**
         * Creates a new S_BattleMsg instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_BattleMsg
         * @static
         * @param {DcgProto.IS_BattleMsg=} [properties] Properties to set
         * @returns {DcgProto.S_BattleMsg} S_BattleMsg instance
         */
        S_BattleMsg.create = function create(properties) {
            return new S_BattleMsg(properties);
        };

        /**
         * Encodes the specified S_BattleMsg message. Does not implicitly {@link DcgProto.S_BattleMsg.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_BattleMsg
         * @static
         * @param {DcgProto.IS_BattleMsg} m S_BattleMsg message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_BattleMsg.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.FrameIndex != null && Object.hasOwnProperty.call(m, "FrameIndex"))
                w.uint32(8).int32(m.FrameIndex);
            if (m.FightA != null && m.FightA.length) {
                for (var i = 0; i < m.FightA.length; ++i)
                    $root.DcgProto.S_RoomFight.encode(m.FightA[i], w.uint32(18).fork()).ldelim();
            }
            if (m.FightB != null && m.FightB.length) {
                for (var i = 0; i < m.FightB.length; ++i)
                    $root.DcgProto.S_RoomFight.encode(m.FightB[i], w.uint32(26).fork()).ldelim();
            }
            if (m.Viewer != null && m.Viewer.length) {
                for (var i = 0; i < m.Viewer.length; ++i)
                    $root.DcgProto.S_RoomFight.encode(m.Viewer[i], w.uint32(34).fork()).ldelim();
            }
            if (m.CurrRoundRoleIID != null && Object.hasOwnProperty.call(m, "CurrRoundRoleIID"))
                w.uint32(40).int64(m.CurrRoundRoleIID);
            if (m.EndTurnTime != null && Object.hasOwnProperty.call(m, "EndTurnTime"))
                w.uint32(48).uint32(m.EndTurnTime);
            return w;
        };

        /**
         * Decodes a S_BattleMsg message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_BattleMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_BattleMsg} S_BattleMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_BattleMsg.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_BattleMsg();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.FrameIndex = r.int32();
                    break;
                case 2:
                    if (!(m.FightA && m.FightA.length))
                        m.FightA = [];
                    m.FightA.push($root.DcgProto.S_RoomFight.decode(r, r.uint32()));
                    break;
                case 3:
                    if (!(m.FightB && m.FightB.length))
                        m.FightB = [];
                    m.FightB.push($root.DcgProto.S_RoomFight.decode(r, r.uint32()));
                    break;
                case 4:
                    if (!(m.Viewer && m.Viewer.length))
                        m.Viewer = [];
                    m.Viewer.push($root.DcgProto.S_RoomFight.decode(r, r.uint32()));
                    break;
                case 5:
                    m.CurrRoundRoleIID = r.int64();
                    break;
                case 6:
                    m.EndTurnTime = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_BattleMsg message.
         * @function verify
         * @memberof DcgProto.S_BattleMsg
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_BattleMsg.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.FrameIndex != null && m.hasOwnProperty("FrameIndex")) {
                if (!$util.isInteger(m.FrameIndex))
                    return "FrameIndex: integer expected";
            }
            if (m.FightA != null && m.hasOwnProperty("FightA")) {
                if (!Array.isArray(m.FightA))
                    return "FightA: array expected";
                for (var i = 0; i < m.FightA.length; ++i) {
                    {
                        var e = $root.DcgProto.S_RoomFight.verify(m.FightA[i]);
                        if (e)
                            return "FightA." + e;
                    }
                }
            }
            if (m.FightB != null && m.hasOwnProperty("FightB")) {
                if (!Array.isArray(m.FightB))
                    return "FightB: array expected";
                for (var i = 0; i < m.FightB.length; ++i) {
                    {
                        var e = $root.DcgProto.S_RoomFight.verify(m.FightB[i]);
                        if (e)
                            return "FightB." + e;
                    }
                }
            }
            if (m.Viewer != null && m.hasOwnProperty("Viewer")) {
                if (!Array.isArray(m.Viewer))
                    return "Viewer: array expected";
                for (var i = 0; i < m.Viewer.length; ++i) {
                    {
                        var e = $root.DcgProto.S_RoomFight.verify(m.Viewer[i]);
                        if (e)
                            return "Viewer." + e;
                    }
                }
            }
            if (m.CurrRoundRoleIID != null && m.hasOwnProperty("CurrRoundRoleIID")) {
                if (!$util.isInteger(m.CurrRoundRoleIID) && !(m.CurrRoundRoleIID && $util.isInteger(m.CurrRoundRoleIID.low) && $util.isInteger(m.CurrRoundRoleIID.high)))
                    return "CurrRoundRoleIID: integer|Long expected";
            }
            if (m.EndTurnTime != null && m.hasOwnProperty("EndTurnTime")) {
                if (!$util.isInteger(m.EndTurnTime))
                    return "EndTurnTime: integer expected";
            }
            return null;
        };

        return S_BattleMsg;
    })();

    DcgProto.S_EventMsg = (function() {

        /**
         * Properties of a S_EventMsg.
         * @memberof DcgProto
         * @interface IS_EventMsg
         * @property {DcgProto.IS_RoundChange|null} [RoundChange] S_EventMsg RoundChange
         * @property {DcgProto.IS_AreaCardsCountChange|null} [AreaCardsCountChange] S_EventMsg AreaCardsCountChange
         * @property {DcgProto.IS_DigimonEvolution|null} [DigimonEvolution] S_EventMsg DigimonEvolution
         * @property {DcgProto.IS_HitterChoose|null} [HitterChoose] S_EventMsg HitterChoose
         * @property {DcgProto.IS_OnPlay|null} [OnPlay] S_EventMsg OnPlay
         * @property {DcgProto.IS_OnActionEffect|null} [OnActionEffect] S_EventMsg OnActionEffect
         * @property {DcgProto.IS_BattleInfo|null} [BattleInfo] S_EventMsg BattleInfo
         * @property {DcgProto.IS_DigimonChangeBattleState|null} [DigimonChangeBattleState] S_EventMsg DigimonChangeBattleState
         * @property {DcgProto.IS_BeforePlay|null} [BeforePlay] S_EventMsg BeforePlay
         * @property {DcgProto.IS_CommonCardInfo|null} [CommonCardInfo] S_EventMsg CommonCardInfo
         */

        /**
         * Constructs a new S_EventMsg.
         * @memberof DcgProto
         * @classdesc Represents a S_EventMsg.
         * @implements IS_EventMsg
         * @constructor
         * @param {DcgProto.IS_EventMsg=} [p] Properties to set
         */
        function S_EventMsg(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_EventMsg RoundChange.
         * @member {DcgProto.IS_RoundChange|null|undefined} RoundChange
         * @memberof DcgProto.S_EventMsg
         * @instance
         */
        S_EventMsg.prototype.RoundChange = null;

        /**
         * S_EventMsg AreaCardsCountChange.
         * @member {DcgProto.IS_AreaCardsCountChange|null|undefined} AreaCardsCountChange
         * @memberof DcgProto.S_EventMsg
         * @instance
         */
        S_EventMsg.prototype.AreaCardsCountChange = null;

        /**
         * S_EventMsg DigimonEvolution.
         * @member {DcgProto.IS_DigimonEvolution|null|undefined} DigimonEvolution
         * @memberof DcgProto.S_EventMsg
         * @instance
         */
        S_EventMsg.prototype.DigimonEvolution = null;

        /**
         * S_EventMsg HitterChoose.
         * @member {DcgProto.IS_HitterChoose|null|undefined} HitterChoose
         * @memberof DcgProto.S_EventMsg
         * @instance
         */
        S_EventMsg.prototype.HitterChoose = null;

        /**
         * S_EventMsg OnPlay.
         * @member {DcgProto.IS_OnPlay|null|undefined} OnPlay
         * @memberof DcgProto.S_EventMsg
         * @instance
         */
        S_EventMsg.prototype.OnPlay = null;

        /**
         * S_EventMsg OnActionEffect.
         * @member {DcgProto.IS_OnActionEffect|null|undefined} OnActionEffect
         * @memberof DcgProto.S_EventMsg
         * @instance
         */
        S_EventMsg.prototype.OnActionEffect = null;

        /**
         * S_EventMsg BattleInfo.
         * @member {DcgProto.IS_BattleInfo|null|undefined} BattleInfo
         * @memberof DcgProto.S_EventMsg
         * @instance
         */
        S_EventMsg.prototype.BattleInfo = null;

        /**
         * S_EventMsg DigimonChangeBattleState.
         * @member {DcgProto.IS_DigimonChangeBattleState|null|undefined} DigimonChangeBattleState
         * @memberof DcgProto.S_EventMsg
         * @instance
         */
        S_EventMsg.prototype.DigimonChangeBattleState = null;

        /**
         * S_EventMsg BeforePlay.
         * @member {DcgProto.IS_BeforePlay|null|undefined} BeforePlay
         * @memberof DcgProto.S_EventMsg
         * @instance
         */
        S_EventMsg.prototype.BeforePlay = null;

        /**
         * S_EventMsg CommonCardInfo.
         * @member {DcgProto.IS_CommonCardInfo|null|undefined} CommonCardInfo
         * @memberof DcgProto.S_EventMsg
         * @instance
         */
        S_EventMsg.prototype.CommonCardInfo = null;

        /**
         * Creates a new S_EventMsg instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_EventMsg
         * @static
         * @param {DcgProto.IS_EventMsg=} [properties] Properties to set
         * @returns {DcgProto.S_EventMsg} S_EventMsg instance
         */
        S_EventMsg.create = function create(properties) {
            return new S_EventMsg(properties);
        };

        /**
         * Encodes the specified S_EventMsg message. Does not implicitly {@link DcgProto.S_EventMsg.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_EventMsg
         * @static
         * @param {DcgProto.IS_EventMsg} m S_EventMsg message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_EventMsg.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoundChange != null && Object.hasOwnProperty.call(m, "RoundChange"))
                $root.DcgProto.S_RoundChange.encode(m.RoundChange, w.uint32(10).fork()).ldelim();
            if (m.AreaCardsCountChange != null && Object.hasOwnProperty.call(m, "AreaCardsCountChange"))
                $root.DcgProto.S_AreaCardsCountChange.encode(m.AreaCardsCountChange, w.uint32(18).fork()).ldelim();
            if (m.DigimonEvolution != null && Object.hasOwnProperty.call(m, "DigimonEvolution"))
                $root.DcgProto.S_DigimonEvolution.encode(m.DigimonEvolution, w.uint32(26).fork()).ldelim();
            if (m.HitterChoose != null && Object.hasOwnProperty.call(m, "HitterChoose"))
                $root.DcgProto.S_HitterChoose.encode(m.HitterChoose, w.uint32(34).fork()).ldelim();
            if (m.OnPlay != null && Object.hasOwnProperty.call(m, "OnPlay"))
                $root.DcgProto.S_OnPlay.encode(m.OnPlay, w.uint32(42).fork()).ldelim();
            if (m.OnActionEffect != null && Object.hasOwnProperty.call(m, "OnActionEffect"))
                $root.DcgProto.S_OnActionEffect.encode(m.OnActionEffect, w.uint32(50).fork()).ldelim();
            if (m.BattleInfo != null && Object.hasOwnProperty.call(m, "BattleInfo"))
                $root.DcgProto.S_BattleInfo.encode(m.BattleInfo, w.uint32(58).fork()).ldelim();
            if (m.DigimonChangeBattleState != null && Object.hasOwnProperty.call(m, "DigimonChangeBattleState"))
                $root.DcgProto.S_DigimonChangeBattleState.encode(m.DigimonChangeBattleState, w.uint32(66).fork()).ldelim();
            if (m.BeforePlay != null && Object.hasOwnProperty.call(m, "BeforePlay"))
                $root.DcgProto.S_BeforePlay.encode(m.BeforePlay, w.uint32(74).fork()).ldelim();
            if (m.CommonCardInfo != null && Object.hasOwnProperty.call(m, "CommonCardInfo"))
                $root.DcgProto.S_CommonCardInfo.encode(m.CommonCardInfo, w.uint32(82).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_EventMsg message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_EventMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_EventMsg} S_EventMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_EventMsg.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_EventMsg();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoundChange = $root.DcgProto.S_RoundChange.decode(r, r.uint32());
                    break;
                case 2:
                    m.AreaCardsCountChange = $root.DcgProto.S_AreaCardsCountChange.decode(r, r.uint32());
                    break;
                case 3:
                    m.DigimonEvolution = $root.DcgProto.S_DigimonEvolution.decode(r, r.uint32());
                    break;
                case 4:
                    m.HitterChoose = $root.DcgProto.S_HitterChoose.decode(r, r.uint32());
                    break;
                case 5:
                    m.OnPlay = $root.DcgProto.S_OnPlay.decode(r, r.uint32());
                    break;
                case 6:
                    m.OnActionEffect = $root.DcgProto.S_OnActionEffect.decode(r, r.uint32());
                    break;
                case 7:
                    m.BattleInfo = $root.DcgProto.S_BattleInfo.decode(r, r.uint32());
                    break;
                case 8:
                    m.DigimonChangeBattleState = $root.DcgProto.S_DigimonChangeBattleState.decode(r, r.uint32());
                    break;
                case 9:
                    m.BeforePlay = $root.DcgProto.S_BeforePlay.decode(r, r.uint32());
                    break;
                case 10:
                    m.CommonCardInfo = $root.DcgProto.S_CommonCardInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_EventMsg message.
         * @function verify
         * @memberof DcgProto.S_EventMsg
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_EventMsg.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoundChange != null && m.hasOwnProperty("RoundChange")) {
                {
                    var e = $root.DcgProto.S_RoundChange.verify(m.RoundChange);
                    if (e)
                        return "RoundChange." + e;
                }
            }
            if (m.AreaCardsCountChange != null && m.hasOwnProperty("AreaCardsCountChange")) {
                {
                    var e = $root.DcgProto.S_AreaCardsCountChange.verify(m.AreaCardsCountChange);
                    if (e)
                        return "AreaCardsCountChange." + e;
                }
            }
            if (m.DigimonEvolution != null && m.hasOwnProperty("DigimonEvolution")) {
                {
                    var e = $root.DcgProto.S_DigimonEvolution.verify(m.DigimonEvolution);
                    if (e)
                        return "DigimonEvolution." + e;
                }
            }
            if (m.HitterChoose != null && m.hasOwnProperty("HitterChoose")) {
                {
                    var e = $root.DcgProto.S_HitterChoose.verify(m.HitterChoose);
                    if (e)
                        return "HitterChoose." + e;
                }
            }
            if (m.OnPlay != null && m.hasOwnProperty("OnPlay")) {
                {
                    var e = $root.DcgProto.S_OnPlay.verify(m.OnPlay);
                    if (e)
                        return "OnPlay." + e;
                }
            }
            if (m.OnActionEffect != null && m.hasOwnProperty("OnActionEffect")) {
                {
                    var e = $root.DcgProto.S_OnActionEffect.verify(m.OnActionEffect);
                    if (e)
                        return "OnActionEffect." + e;
                }
            }
            if (m.BattleInfo != null && m.hasOwnProperty("BattleInfo")) {
                {
                    var e = $root.DcgProto.S_BattleInfo.verify(m.BattleInfo);
                    if (e)
                        return "BattleInfo." + e;
                }
            }
            if (m.DigimonChangeBattleState != null && m.hasOwnProperty("DigimonChangeBattleState")) {
                {
                    var e = $root.DcgProto.S_DigimonChangeBattleState.verify(m.DigimonChangeBattleState);
                    if (e)
                        return "DigimonChangeBattleState." + e;
                }
            }
            if (m.BeforePlay != null && m.hasOwnProperty("BeforePlay")) {
                {
                    var e = $root.DcgProto.S_BeforePlay.verify(m.BeforePlay);
                    if (e)
                        return "BeforePlay." + e;
                }
            }
            if (m.CommonCardInfo != null && m.hasOwnProperty("CommonCardInfo")) {
                {
                    var e = $root.DcgProto.S_CommonCardInfo.verify(m.CommonCardInfo);
                    if (e)
                        return "CommonCardInfo." + e;
                }
            }
            return null;
        };

        return S_EventMsg;
    })();

    DcgProto.S_DigimonChangeBattleState = (function() {

        /**
         * Properties of a S_DigimonChangeBattleState.
         * @memberof DcgProto
         * @interface IS_DigimonChangeBattleState
         * @property {Long|null} [CardIID] S_DigimonChangeBattleState CardIID
         * @property {DcgProto.E_CHANGE_DIGIMON_BATTLE_STATE_REASON|null} [Reason] S_DigimonChangeBattleState Reason
         * @property {DcgProto.E_CARD_BATTLE_STATE|null} [ToState] S_DigimonChangeBattleState ToState
         */

        /**
         * Constructs a new S_DigimonChangeBattleState.
         * @memberof DcgProto
         * @classdesc Represents a S_DigimonChangeBattleState.
         * @implements IS_DigimonChangeBattleState
         * @constructor
         * @param {DcgProto.IS_DigimonChangeBattleState=} [p] Properties to set
         */
        function S_DigimonChangeBattleState(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_DigimonChangeBattleState CardIID.
         * @member {Long} CardIID
         * @memberof DcgProto.S_DigimonChangeBattleState
         * @instance
         */
        S_DigimonChangeBattleState.prototype.CardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_DigimonChangeBattleState Reason.
         * @member {DcgProto.E_CHANGE_DIGIMON_BATTLE_STATE_REASON} Reason
         * @memberof DcgProto.S_DigimonChangeBattleState
         * @instance
         */
        S_DigimonChangeBattleState.prototype.Reason = 0;

        /**
         * S_DigimonChangeBattleState ToState.
         * @member {DcgProto.E_CARD_BATTLE_STATE} ToState
         * @memberof DcgProto.S_DigimonChangeBattleState
         * @instance
         */
        S_DigimonChangeBattleState.prototype.ToState = 0;

        /**
         * Creates a new S_DigimonChangeBattleState instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_DigimonChangeBattleState
         * @static
         * @param {DcgProto.IS_DigimonChangeBattleState=} [properties] Properties to set
         * @returns {DcgProto.S_DigimonChangeBattleState} S_DigimonChangeBattleState instance
         */
        S_DigimonChangeBattleState.create = function create(properties) {
            return new S_DigimonChangeBattleState(properties);
        };

        /**
         * Encodes the specified S_DigimonChangeBattleState message. Does not implicitly {@link DcgProto.S_DigimonChangeBattleState.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_DigimonChangeBattleState
         * @static
         * @param {DcgProto.IS_DigimonChangeBattleState} m S_DigimonChangeBattleState message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_DigimonChangeBattleState.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardIID != null && Object.hasOwnProperty.call(m, "CardIID"))
                w.uint32(8).int64(m.CardIID);
            if (m.Reason != null && Object.hasOwnProperty.call(m, "Reason"))
                w.uint32(16).int32(m.Reason);
            if (m.ToState != null && Object.hasOwnProperty.call(m, "ToState"))
                w.uint32(24).int32(m.ToState);
            return w;
        };

        /**
         * Decodes a S_DigimonChangeBattleState message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_DigimonChangeBattleState
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_DigimonChangeBattleState} S_DigimonChangeBattleState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_DigimonChangeBattleState.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_DigimonChangeBattleState();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CardIID = r.int64();
                    break;
                case 2:
                    m.Reason = r.int32();
                    break;
                case 3:
                    m.ToState = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_DigimonChangeBattleState message.
         * @function verify
         * @memberof DcgProto.S_DigimonChangeBattleState
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_DigimonChangeBattleState.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardIID != null && m.hasOwnProperty("CardIID")) {
                if (!$util.isInteger(m.CardIID) && !(m.CardIID && $util.isInteger(m.CardIID.low) && $util.isInteger(m.CardIID.high)))
                    return "CardIID: integer|Long expected";
            }
            if (m.Reason != null && m.hasOwnProperty("Reason")) {
                switch (m.Reason) {
                default:
                    return "Reason: enum value expected";
                case 0:
                case 1:
                    break;
                }
            }
            if (m.ToState != null && m.hasOwnProperty("ToState")) {
                switch (m.ToState) {
                default:
                    return "ToState: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            return null;
        };

        return S_DigimonChangeBattleState;
    })();

    DcgProto.S_BattleInfo = (function() {

        /**
         * Properties of a S_BattleInfo.
         * @memberof DcgProto
         * @interface IS_BattleInfo
         * @property {Long|null} [AtkCardIID] S_BattleInfo AtkCardIID
         * @property {Long|null} [DefCardIID] S_BattleInfo DefCardIID
         * @property {DcgProto.E_ATTACK_TYPE|null} [AtkType] S_BattleInfo AtkType
         */

        /**
         * Constructs a new S_BattleInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_BattleInfo.
         * @implements IS_BattleInfo
         * @constructor
         * @param {DcgProto.IS_BattleInfo=} [p] Properties to set
         */
        function S_BattleInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_BattleInfo AtkCardIID.
         * @member {Long} AtkCardIID
         * @memberof DcgProto.S_BattleInfo
         * @instance
         */
        S_BattleInfo.prototype.AtkCardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_BattleInfo DefCardIID.
         * @member {Long} DefCardIID
         * @memberof DcgProto.S_BattleInfo
         * @instance
         */
        S_BattleInfo.prototype.DefCardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_BattleInfo AtkType.
         * @member {DcgProto.E_ATTACK_TYPE} AtkType
         * @memberof DcgProto.S_BattleInfo
         * @instance
         */
        S_BattleInfo.prototype.AtkType = 0;

        /**
         * Creates a new S_BattleInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_BattleInfo
         * @static
         * @param {DcgProto.IS_BattleInfo=} [properties] Properties to set
         * @returns {DcgProto.S_BattleInfo} S_BattleInfo instance
         */
        S_BattleInfo.create = function create(properties) {
            return new S_BattleInfo(properties);
        };

        /**
         * Encodes the specified S_BattleInfo message. Does not implicitly {@link DcgProto.S_BattleInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_BattleInfo
         * @static
         * @param {DcgProto.IS_BattleInfo} m S_BattleInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_BattleInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.AtkCardIID != null && Object.hasOwnProperty.call(m, "AtkCardIID"))
                w.uint32(8).int64(m.AtkCardIID);
            if (m.DefCardIID != null && Object.hasOwnProperty.call(m, "DefCardIID"))
                w.uint32(16).int64(m.DefCardIID);
            if (m.AtkType != null && Object.hasOwnProperty.call(m, "AtkType"))
                w.uint32(32).int32(m.AtkType);
            return w;
        };

        /**
         * Decodes a S_BattleInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_BattleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_BattleInfo} S_BattleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_BattleInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_BattleInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.AtkCardIID = r.int64();
                    break;
                case 2:
                    m.DefCardIID = r.int64();
                    break;
                case 4:
                    m.AtkType = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_BattleInfo message.
         * @function verify
         * @memberof DcgProto.S_BattleInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_BattleInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.AtkCardIID != null && m.hasOwnProperty("AtkCardIID")) {
                if (!$util.isInteger(m.AtkCardIID) && !(m.AtkCardIID && $util.isInteger(m.AtkCardIID.low) && $util.isInteger(m.AtkCardIID.high)))
                    return "AtkCardIID: integer|Long expected";
            }
            if (m.DefCardIID != null && m.hasOwnProperty("DefCardIID")) {
                if (!$util.isInteger(m.DefCardIID) && !(m.DefCardIID && $util.isInteger(m.DefCardIID.low) && $util.isInteger(m.DefCardIID.high)))
                    return "DefCardIID: integer|Long expected";
            }
            if (m.AtkType != null && m.hasOwnProperty("AtkType")) {
                switch (m.AtkType) {
                default:
                    return "AtkType: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            return null;
        };

        return S_BattleInfo;
    })();

    DcgProto.S_OnActionEffect = (function() {

        /**
         * Properties of a S_OnActionEffect.
         * @memberof DcgProto
         * @interface IS_OnActionEffect
         * @property {Long|null} [CardIID] S_OnActionEffect CardIID
         * @property {DcgProto.E_ACTION_EFFECT_TYPE|null} [reason] S_OnActionEffect reason
         * @property {Long|null} [OriginCardIID] S_OnActionEffect OriginCardIID
         * @property {number|null} [ActionId] S_OnActionEffect ActionId
         */

        /**
         * Constructs a new S_OnActionEffect.
         * @memberof DcgProto
         * @classdesc Represents a S_OnActionEffect.
         * @implements IS_OnActionEffect
         * @constructor
         * @param {DcgProto.IS_OnActionEffect=} [p] Properties to set
         */
        function S_OnActionEffect(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_OnActionEffect CardIID.
         * @member {Long} CardIID
         * @memberof DcgProto.S_OnActionEffect
         * @instance
         */
        S_OnActionEffect.prototype.CardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_OnActionEffect reason.
         * @member {DcgProto.E_ACTION_EFFECT_TYPE} reason
         * @memberof DcgProto.S_OnActionEffect
         * @instance
         */
        S_OnActionEffect.prototype.reason = 0;

        /**
         * S_OnActionEffect OriginCardIID.
         * @member {Long} OriginCardIID
         * @memberof DcgProto.S_OnActionEffect
         * @instance
         */
        S_OnActionEffect.prototype.OriginCardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_OnActionEffect ActionId.
         * @member {number} ActionId
         * @memberof DcgProto.S_OnActionEffect
         * @instance
         */
        S_OnActionEffect.prototype.ActionId = 0;

        /**
         * Creates a new S_OnActionEffect instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_OnActionEffect
         * @static
         * @param {DcgProto.IS_OnActionEffect=} [properties] Properties to set
         * @returns {DcgProto.S_OnActionEffect} S_OnActionEffect instance
         */
        S_OnActionEffect.create = function create(properties) {
            return new S_OnActionEffect(properties);
        };

        /**
         * Encodes the specified S_OnActionEffect message. Does not implicitly {@link DcgProto.S_OnActionEffect.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_OnActionEffect
         * @static
         * @param {DcgProto.IS_OnActionEffect} m S_OnActionEffect message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_OnActionEffect.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardIID != null && Object.hasOwnProperty.call(m, "CardIID"))
                w.uint32(8).int64(m.CardIID);
            if (m.reason != null && Object.hasOwnProperty.call(m, "reason"))
                w.uint32(16).int32(m.reason);
            if (m.OriginCardIID != null && Object.hasOwnProperty.call(m, "OriginCardIID"))
                w.uint32(24).int64(m.OriginCardIID);
            if (m.ActionId != null && Object.hasOwnProperty.call(m, "ActionId"))
                w.uint32(32).int32(m.ActionId);
            return w;
        };

        /**
         * Decodes a S_OnActionEffect message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_OnActionEffect
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_OnActionEffect} S_OnActionEffect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_OnActionEffect.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_OnActionEffect();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CardIID = r.int64();
                    break;
                case 2:
                    m.reason = r.int32();
                    break;
                case 3:
                    m.OriginCardIID = r.int64();
                    break;
                case 4:
                    m.ActionId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_OnActionEffect message.
         * @function verify
         * @memberof DcgProto.S_OnActionEffect
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_OnActionEffect.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardIID != null && m.hasOwnProperty("CardIID")) {
                if (!$util.isInteger(m.CardIID) && !(m.CardIID && $util.isInteger(m.CardIID.low) && $util.isInteger(m.CardIID.high)))
                    return "CardIID: integer|Long expected";
            }
            if (m.reason != null && m.hasOwnProperty("reason")) {
                switch (m.reason) {
                default:
                    return "reason: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                    break;
                }
            }
            if (m.OriginCardIID != null && m.hasOwnProperty("OriginCardIID")) {
                if (!$util.isInteger(m.OriginCardIID) && !(m.OriginCardIID && $util.isInteger(m.OriginCardIID.low) && $util.isInteger(m.OriginCardIID.high)))
                    return "OriginCardIID: integer|Long expected";
            }
            if (m.ActionId != null && m.hasOwnProperty("ActionId")) {
                if (!$util.isInteger(m.ActionId))
                    return "ActionId: integer expected";
            }
            return null;
        };

        return S_OnActionEffect;
    })();

    DcgProto.S_RoundChange = (function() {

        /**
         * Properties of a S_RoundChange.
         * @memberof DcgProto
         * @interface IS_RoundChange
         * @property {Long|null} [PlayerIID] S_RoundChange PlayerIID
         * @property {number|null} [RoundNum] S_RoundChange RoundNum
         */

        /**
         * Constructs a new S_RoundChange.
         * @memberof DcgProto
         * @classdesc Represents a S_RoundChange.
         * @implements IS_RoundChange
         * @constructor
         * @param {DcgProto.IS_RoundChange=} [p] Properties to set
         */
        function S_RoundChange(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_RoundChange PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_RoundChange
         * @instance
         */
        S_RoundChange.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_RoundChange RoundNum.
         * @member {number} RoundNum
         * @memberof DcgProto.S_RoundChange
         * @instance
         */
        S_RoundChange.prototype.RoundNum = 0;

        /**
         * Creates a new S_RoundChange instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_RoundChange
         * @static
         * @param {DcgProto.IS_RoundChange=} [properties] Properties to set
         * @returns {DcgProto.S_RoundChange} S_RoundChange instance
         */
        S_RoundChange.create = function create(properties) {
            return new S_RoundChange(properties);
        };

        /**
         * Encodes the specified S_RoundChange message. Does not implicitly {@link DcgProto.S_RoundChange.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_RoundChange
         * @static
         * @param {DcgProto.IS_RoundChange} m S_RoundChange message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_RoundChange.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.RoundNum != null && Object.hasOwnProperty.call(m, "RoundNum"))
                w.uint32(16).int32(m.RoundNum);
            return w;
        };

        /**
         * Decodes a S_RoundChange message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_RoundChange
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_RoundChange} S_RoundChange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_RoundChange.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_RoundChange();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.RoundNum = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_RoundChange message.
         * @function verify
         * @memberof DcgProto.S_RoundChange
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_RoundChange.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.RoundNum != null && m.hasOwnProperty("RoundNum")) {
                if (!$util.isInteger(m.RoundNum))
                    return "RoundNum: integer expected";
            }
            return null;
        };

        return S_RoundChange;
    })();

    DcgProto.S_AreaCardsCountChange = (function() {

        /**
         * Properties of a S_AreaCardsCountChange.
         * @memberof DcgProto
         * @interface IS_AreaCardsCountChange
         * @property {Long|null} [PlayerIID] S_AreaCardsCountChange PlayerIID
         * @property {DcgProto.E_AREA_TYPE|null} [AreaType] S_AreaCardsCountChange AreaType
         * @property {number|null} [CurAreaNumber] S_AreaCardsCountChange CurAreaNumber
         */

        /**
         * Constructs a new S_AreaCardsCountChange.
         * @memberof DcgProto
         * @classdesc Represents a S_AreaCardsCountChange.
         * @implements IS_AreaCardsCountChange
         * @constructor
         * @param {DcgProto.IS_AreaCardsCountChange=} [p] Properties to set
         */
        function S_AreaCardsCountChange(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_AreaCardsCountChange PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_AreaCardsCountChange
         * @instance
         */
        S_AreaCardsCountChange.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_AreaCardsCountChange AreaType.
         * @member {DcgProto.E_AREA_TYPE} AreaType
         * @memberof DcgProto.S_AreaCardsCountChange
         * @instance
         */
        S_AreaCardsCountChange.prototype.AreaType = 0;

        /**
         * S_AreaCardsCountChange CurAreaNumber.
         * @member {number} CurAreaNumber
         * @memberof DcgProto.S_AreaCardsCountChange
         * @instance
         */
        S_AreaCardsCountChange.prototype.CurAreaNumber = 0;

        /**
         * Creates a new S_AreaCardsCountChange instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_AreaCardsCountChange
         * @static
         * @param {DcgProto.IS_AreaCardsCountChange=} [properties] Properties to set
         * @returns {DcgProto.S_AreaCardsCountChange} S_AreaCardsCountChange instance
         */
        S_AreaCardsCountChange.create = function create(properties) {
            return new S_AreaCardsCountChange(properties);
        };

        /**
         * Encodes the specified S_AreaCardsCountChange message. Does not implicitly {@link DcgProto.S_AreaCardsCountChange.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_AreaCardsCountChange
         * @static
         * @param {DcgProto.IS_AreaCardsCountChange} m S_AreaCardsCountChange message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_AreaCardsCountChange.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.AreaType != null && Object.hasOwnProperty.call(m, "AreaType"))
                w.uint32(16).int32(m.AreaType);
            if (m.CurAreaNumber != null && Object.hasOwnProperty.call(m, "CurAreaNumber"))
                w.uint32(24).int32(m.CurAreaNumber);
            return w;
        };

        /**
         * Decodes a S_AreaCardsCountChange message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_AreaCardsCountChange
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_AreaCardsCountChange} S_AreaCardsCountChange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_AreaCardsCountChange.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_AreaCardsCountChange();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.AreaType = r.int32();
                    break;
                case 3:
                    m.CurAreaNumber = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_AreaCardsCountChange message.
         * @function verify
         * @memberof DcgProto.S_AreaCardsCountChange
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_AreaCardsCountChange.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.AreaType != null && m.hasOwnProperty("AreaType")) {
                switch (m.AreaType) {
                default:
                    return "AreaType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 4:
                case 8:
                case 16:
                case 32:
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                    break;
                }
            }
            if (m.CurAreaNumber != null && m.hasOwnProperty("CurAreaNumber")) {
                if (!$util.isInteger(m.CurAreaNumber))
                    return "CurAreaNumber: integer expected";
            }
            return null;
        };

        return S_AreaCardsCountChange;
    })();

    DcgProto.S_DigimonEvolution = (function() {

        /**
         * Properties of a S_DigimonEvolution.
         * @memberof DcgProto
         * @interface IS_DigimonEvolution
         * @property {number|null} [Cost] S_DigimonEvolution Cost
         * @property {Long|null} [EvoCardIID] S_DigimonEvolution EvoCardIID
         * @property {Long|null} [OriCardIID] S_DigimonEvolution OriCardIID
         * @property {Long|null} [BottomCardIID] S_DigimonEvolution BottomCardIID
         * @property {DcgProto.E_EVOLUTION_TYPE|null} [EvolutionType] S_DigimonEvolution EvolutionType
         */

        /**
         * Constructs a new S_DigimonEvolution.
         * @memberof DcgProto
         * @classdesc Represents a S_DigimonEvolution.
         * @implements IS_DigimonEvolution
         * @constructor
         * @param {DcgProto.IS_DigimonEvolution=} [p] Properties to set
         */
        function S_DigimonEvolution(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_DigimonEvolution Cost.
         * @member {number} Cost
         * @memberof DcgProto.S_DigimonEvolution
         * @instance
         */
        S_DigimonEvolution.prototype.Cost = 0;

        /**
         * S_DigimonEvolution EvoCardIID.
         * @member {Long} EvoCardIID
         * @memberof DcgProto.S_DigimonEvolution
         * @instance
         */
        S_DigimonEvolution.prototype.EvoCardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_DigimonEvolution OriCardIID.
         * @member {Long} OriCardIID
         * @memberof DcgProto.S_DigimonEvolution
         * @instance
         */
        S_DigimonEvolution.prototype.OriCardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_DigimonEvolution BottomCardIID.
         * @member {Long} BottomCardIID
         * @memberof DcgProto.S_DigimonEvolution
         * @instance
         */
        S_DigimonEvolution.prototype.BottomCardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_DigimonEvolution EvolutionType.
         * @member {DcgProto.E_EVOLUTION_TYPE} EvolutionType
         * @memberof DcgProto.S_DigimonEvolution
         * @instance
         */
        S_DigimonEvolution.prototype.EvolutionType = 0;

        /**
         * Creates a new S_DigimonEvolution instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_DigimonEvolution
         * @static
         * @param {DcgProto.IS_DigimonEvolution=} [properties] Properties to set
         * @returns {DcgProto.S_DigimonEvolution} S_DigimonEvolution instance
         */
        S_DigimonEvolution.create = function create(properties) {
            return new S_DigimonEvolution(properties);
        };

        /**
         * Encodes the specified S_DigimonEvolution message. Does not implicitly {@link DcgProto.S_DigimonEvolution.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_DigimonEvolution
         * @static
         * @param {DcgProto.IS_DigimonEvolution} m S_DigimonEvolution message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_DigimonEvolution.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Cost != null && Object.hasOwnProperty.call(m, "Cost"))
                w.uint32(8).int32(m.Cost);
            if (m.EvoCardIID != null && Object.hasOwnProperty.call(m, "EvoCardIID"))
                w.uint32(16).int64(m.EvoCardIID);
            if (m.OriCardIID != null && Object.hasOwnProperty.call(m, "OriCardIID"))
                w.uint32(24).int64(m.OriCardIID);
            if (m.BottomCardIID != null && Object.hasOwnProperty.call(m, "BottomCardIID"))
                w.uint32(32).int64(m.BottomCardIID);
            if (m.EvolutionType != null && Object.hasOwnProperty.call(m, "EvolutionType"))
                w.uint32(40).int32(m.EvolutionType);
            return w;
        };

        /**
         * Decodes a S_DigimonEvolution message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_DigimonEvolution
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_DigimonEvolution} S_DigimonEvolution
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_DigimonEvolution.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_DigimonEvolution();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Cost = r.int32();
                    break;
                case 2:
                    m.EvoCardIID = r.int64();
                    break;
                case 3:
                    m.OriCardIID = r.int64();
                    break;
                case 4:
                    m.BottomCardIID = r.int64();
                    break;
                case 5:
                    m.EvolutionType = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_DigimonEvolution message.
         * @function verify
         * @memberof DcgProto.S_DigimonEvolution
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_DigimonEvolution.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Cost != null && m.hasOwnProperty("Cost")) {
                if (!$util.isInteger(m.Cost))
                    return "Cost: integer expected";
            }
            if (m.EvoCardIID != null && m.hasOwnProperty("EvoCardIID")) {
                if (!$util.isInteger(m.EvoCardIID) && !(m.EvoCardIID && $util.isInteger(m.EvoCardIID.low) && $util.isInteger(m.EvoCardIID.high)))
                    return "EvoCardIID: integer|Long expected";
            }
            if (m.OriCardIID != null && m.hasOwnProperty("OriCardIID")) {
                if (!$util.isInteger(m.OriCardIID) && !(m.OriCardIID && $util.isInteger(m.OriCardIID.low) && $util.isInteger(m.OriCardIID.high)))
                    return "OriCardIID: integer|Long expected";
            }
            if (m.BottomCardIID != null && m.hasOwnProperty("BottomCardIID")) {
                if (!$util.isInteger(m.BottomCardIID) && !(m.BottomCardIID && $util.isInteger(m.BottomCardIID.low) && $util.isInteger(m.BottomCardIID.high)))
                    return "BottomCardIID: integer|Long expected";
            }
            if (m.EvolutionType != null && m.hasOwnProperty("EvolutionType")) {
                switch (m.EvolutionType) {
                default:
                    return "EvolutionType: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            return null;
        };

        return S_DigimonEvolution;
    })();

    DcgProto.S_BeforePlay = (function() {

        /**
         * Properties of a S_BeforePlay.
         * @memberof DcgProto
         * @interface IS_BeforePlay
         * @property {Long|null} [CardIID] S_BeforePlay CardIID
         * @property {DcgProto.E_AREA_TYPE|null} [WherePlay] S_BeforePlay WherePlay
         */

        /**
         * Constructs a new S_BeforePlay.
         * @memberof DcgProto
         * @classdesc Represents a S_BeforePlay.
         * @implements IS_BeforePlay
         * @constructor
         * @param {DcgProto.IS_BeforePlay=} [p] Properties to set
         */
        function S_BeforePlay(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_BeforePlay CardIID.
         * @member {Long} CardIID
         * @memberof DcgProto.S_BeforePlay
         * @instance
         */
        S_BeforePlay.prototype.CardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_BeforePlay WherePlay.
         * @member {DcgProto.E_AREA_TYPE} WherePlay
         * @memberof DcgProto.S_BeforePlay
         * @instance
         */
        S_BeforePlay.prototype.WherePlay = 0;

        /**
         * Creates a new S_BeforePlay instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_BeforePlay
         * @static
         * @param {DcgProto.IS_BeforePlay=} [properties] Properties to set
         * @returns {DcgProto.S_BeforePlay} S_BeforePlay instance
         */
        S_BeforePlay.create = function create(properties) {
            return new S_BeforePlay(properties);
        };

        /**
         * Encodes the specified S_BeforePlay message. Does not implicitly {@link DcgProto.S_BeforePlay.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_BeforePlay
         * @static
         * @param {DcgProto.IS_BeforePlay} m S_BeforePlay message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_BeforePlay.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardIID != null && Object.hasOwnProperty.call(m, "CardIID"))
                w.uint32(8).int64(m.CardIID);
            if (m.WherePlay != null && Object.hasOwnProperty.call(m, "WherePlay"))
                w.uint32(16).int32(m.WherePlay);
            return w;
        };

        /**
         * Decodes a S_BeforePlay message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_BeforePlay
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_BeforePlay} S_BeforePlay
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_BeforePlay.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_BeforePlay();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CardIID = r.int64();
                    break;
                case 2:
                    m.WherePlay = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_BeforePlay message.
         * @function verify
         * @memberof DcgProto.S_BeforePlay
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_BeforePlay.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardIID != null && m.hasOwnProperty("CardIID")) {
                if (!$util.isInteger(m.CardIID) && !(m.CardIID && $util.isInteger(m.CardIID.low) && $util.isInteger(m.CardIID.high)))
                    return "CardIID: integer|Long expected";
            }
            if (m.WherePlay != null && m.hasOwnProperty("WherePlay")) {
                switch (m.WherePlay) {
                default:
                    return "WherePlay: enum value expected";
                case 0:
                case 1:
                case 2:
                case 4:
                case 8:
                case 16:
                case 32:
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                    break;
                }
            }
            return null;
        };

        return S_BeforePlay;
    })();

    DcgProto.S_CommonCardInfo = (function() {

        /**
         * Properties of a S_CommonCardInfo.
         * @memberof DcgProto
         * @interface IS_CommonCardInfo
         * @property {Long|null} [CardIID] S_CommonCardInfo CardIID
         */

        /**
         * Constructs a new S_CommonCardInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_CommonCardInfo.
         * @implements IS_CommonCardInfo
         * @constructor
         * @param {DcgProto.IS_CommonCardInfo=} [p] Properties to set
         */
        function S_CommonCardInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_CommonCardInfo CardIID.
         * @member {Long} CardIID
         * @memberof DcgProto.S_CommonCardInfo
         * @instance
         */
        S_CommonCardInfo.prototype.CardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new S_CommonCardInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_CommonCardInfo
         * @static
         * @param {DcgProto.IS_CommonCardInfo=} [properties] Properties to set
         * @returns {DcgProto.S_CommonCardInfo} S_CommonCardInfo instance
         */
        S_CommonCardInfo.create = function create(properties) {
            return new S_CommonCardInfo(properties);
        };

        /**
         * Encodes the specified S_CommonCardInfo message. Does not implicitly {@link DcgProto.S_CommonCardInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_CommonCardInfo
         * @static
         * @param {DcgProto.IS_CommonCardInfo} m S_CommonCardInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_CommonCardInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardIID != null && Object.hasOwnProperty.call(m, "CardIID"))
                w.uint32(8).int64(m.CardIID);
            return w;
        };

        /**
         * Decodes a S_CommonCardInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_CommonCardInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_CommonCardInfo} S_CommonCardInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_CommonCardInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_CommonCardInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CardIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_CommonCardInfo message.
         * @function verify
         * @memberof DcgProto.S_CommonCardInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_CommonCardInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardIID != null && m.hasOwnProperty("CardIID")) {
                if (!$util.isInteger(m.CardIID) && !(m.CardIID && $util.isInteger(m.CardIID.low) && $util.isInteger(m.CardIID.high)))
                    return "CardIID: integer|Long expected";
            }
            return null;
        };

        return S_CommonCardInfo;
    })();

    DcgProto.S_HitterChoose = (function() {

        /**
         * Properties of a S_HitterChoose.
         * @memberof DcgProto
         * @interface IS_HitterChoose
         * @property {Long|null} [AtkCardIID] S_HitterChoose AtkCardIID
         * @property {DcgProto.E_ATTACK_TYPE|null} [AtkType] S_HitterChoose AtkType
         * @property {Long|null} [DefenseCardIID] S_HitterChoose DefenseCardIID
         * @property {Array.<Long>|null} [ListDef] S_HitterChoose ListDef
         */

        /**
         * Constructs a new S_HitterChoose.
         * @memberof DcgProto
         * @classdesc Represents a S_HitterChoose.
         * @implements IS_HitterChoose
         * @constructor
         * @param {DcgProto.IS_HitterChoose=} [p] Properties to set
         */
        function S_HitterChoose(p) {
            this.ListDef = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_HitterChoose AtkCardIID.
         * @member {Long} AtkCardIID
         * @memberof DcgProto.S_HitterChoose
         * @instance
         */
        S_HitterChoose.prototype.AtkCardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_HitterChoose AtkType.
         * @member {DcgProto.E_ATTACK_TYPE} AtkType
         * @memberof DcgProto.S_HitterChoose
         * @instance
         */
        S_HitterChoose.prototype.AtkType = 0;

        /**
         * S_HitterChoose DefenseCardIID.
         * @member {Long} DefenseCardIID
         * @memberof DcgProto.S_HitterChoose
         * @instance
         */
        S_HitterChoose.prototype.DefenseCardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_HitterChoose ListDef.
         * @member {Array.<Long>} ListDef
         * @memberof DcgProto.S_HitterChoose
         * @instance
         */
        S_HitterChoose.prototype.ListDef = $util.emptyArray;

        /**
         * Creates a new S_HitterChoose instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_HitterChoose
         * @static
         * @param {DcgProto.IS_HitterChoose=} [properties] Properties to set
         * @returns {DcgProto.S_HitterChoose} S_HitterChoose instance
         */
        S_HitterChoose.create = function create(properties) {
            return new S_HitterChoose(properties);
        };

        /**
         * Encodes the specified S_HitterChoose message. Does not implicitly {@link DcgProto.S_HitterChoose.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_HitterChoose
         * @static
         * @param {DcgProto.IS_HitterChoose} m S_HitterChoose message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_HitterChoose.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.AtkCardIID != null && Object.hasOwnProperty.call(m, "AtkCardIID"))
                w.uint32(8).int64(m.AtkCardIID);
            if (m.AtkType != null && Object.hasOwnProperty.call(m, "AtkType"))
                w.uint32(16).int32(m.AtkType);
            if (m.DefenseCardIID != null && Object.hasOwnProperty.call(m, "DefenseCardIID"))
                w.uint32(24).int64(m.DefenseCardIID);
            if (m.ListDef != null && m.ListDef.length) {
                w.uint32(34).fork();
                for (var i = 0; i < m.ListDef.length; ++i)
                    w.int64(m.ListDef[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_HitterChoose message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_HitterChoose
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_HitterChoose} S_HitterChoose
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_HitterChoose.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_HitterChoose();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.AtkCardIID = r.int64();
                    break;
                case 2:
                    m.AtkType = r.int32();
                    break;
                case 3:
                    m.DefenseCardIID = r.int64();
                    break;
                case 4:
                    if (!(m.ListDef && m.ListDef.length))
                        m.ListDef = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.ListDef.push(r.int64());
                    } else
                        m.ListDef.push(r.int64());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_HitterChoose message.
         * @function verify
         * @memberof DcgProto.S_HitterChoose
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_HitterChoose.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.AtkCardIID != null && m.hasOwnProperty("AtkCardIID")) {
                if (!$util.isInteger(m.AtkCardIID) && !(m.AtkCardIID && $util.isInteger(m.AtkCardIID.low) && $util.isInteger(m.AtkCardIID.high)))
                    return "AtkCardIID: integer|Long expected";
            }
            if (m.AtkType != null && m.hasOwnProperty("AtkType")) {
                switch (m.AtkType) {
                default:
                    return "AtkType: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            if (m.DefenseCardIID != null && m.hasOwnProperty("DefenseCardIID")) {
                if (!$util.isInteger(m.DefenseCardIID) && !(m.DefenseCardIID && $util.isInteger(m.DefenseCardIID.low) && $util.isInteger(m.DefenseCardIID.high)))
                    return "DefenseCardIID: integer|Long expected";
            }
            if (m.ListDef != null && m.hasOwnProperty("ListDef")) {
                if (!Array.isArray(m.ListDef))
                    return "ListDef: array expected";
                for (var i = 0; i < m.ListDef.length; ++i) {
                    if (!$util.isInteger(m.ListDef[i]) && !(m.ListDef[i] && $util.isInteger(m.ListDef[i].low) && $util.isInteger(m.ListDef[i].high)))
                        return "ListDef: integer|Long[] expected";
                }
            }
            return null;
        };

        return S_HitterChoose;
    })();

    DcgProto.S_OnPlay = (function() {

        /**
         * Properties of a S_OnPlay.
         * @memberof DcgProto
         * @interface IS_OnPlay
         * @property {Long|null} [CardIID] S_OnPlay CardIID
         * @property {number|null} [Reason] S_OnPlay Reason
         */

        /**
         * Constructs a new S_OnPlay.
         * @memberof DcgProto
         * @classdesc Represents a S_OnPlay.
         * @implements IS_OnPlay
         * @constructor
         * @param {DcgProto.IS_OnPlay=} [p] Properties to set
         */
        function S_OnPlay(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_OnPlay CardIID.
         * @member {Long} CardIID
         * @memberof DcgProto.S_OnPlay
         * @instance
         */
        S_OnPlay.prototype.CardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_OnPlay Reason.
         * @member {number} Reason
         * @memberof DcgProto.S_OnPlay
         * @instance
         */
        S_OnPlay.prototype.Reason = 0;

        /**
         * Creates a new S_OnPlay instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_OnPlay
         * @static
         * @param {DcgProto.IS_OnPlay=} [properties] Properties to set
         * @returns {DcgProto.S_OnPlay} S_OnPlay instance
         */
        S_OnPlay.create = function create(properties) {
            return new S_OnPlay(properties);
        };

        /**
         * Encodes the specified S_OnPlay message. Does not implicitly {@link DcgProto.S_OnPlay.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_OnPlay
         * @static
         * @param {DcgProto.IS_OnPlay} m S_OnPlay message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_OnPlay.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardIID != null && Object.hasOwnProperty.call(m, "CardIID"))
                w.uint32(8).int64(m.CardIID);
            if (m.Reason != null && Object.hasOwnProperty.call(m, "Reason"))
                w.uint32(16).int32(m.Reason);
            return w;
        };

        /**
         * Decodes a S_OnPlay message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_OnPlay
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_OnPlay} S_OnPlay
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_OnPlay.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_OnPlay();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CardIID = r.int64();
                    break;
                case 2:
                    m.Reason = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_OnPlay message.
         * @function verify
         * @memberof DcgProto.S_OnPlay
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_OnPlay.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardIID != null && m.hasOwnProperty("CardIID")) {
                if (!$util.isInteger(m.CardIID) && !(m.CardIID && $util.isInteger(m.CardIID.low) && $util.isInteger(m.CardIID.high)))
                    return "CardIID: integer|Long expected";
            }
            if (m.Reason != null && m.hasOwnProperty("Reason")) {
                if (!$util.isInteger(m.Reason))
                    return "Reason: integer expected";
            }
            return null;
        };

        return S_OnPlay;
    })();

    DcgProto.S_RoomFight = (function() {

        /**
         * Properties of a S_RoomFight.
         * @memberof DcgProto
         * @interface IS_RoomFight
         * @property {DcgProto.IS_BattleStartMsg|null} [BattleStartMsg] S_RoomFight BattleStartMsg
         * @property {DcgProto.IS_SetBattlePhase|null} [SetBattlePhase] S_RoomFight SetBattlePhase
         * @property {DcgProto.IS_DigimonSetCost|null} [DigimonSetCost] S_RoomFight DigimonSetCost
         * @property {DcgProto.IS_GameOver|null} [GameOver] S_RoomFight GameOver
         * @property {DcgProto.IS_MoveCardMessage|null} [MoveCardMessage] S_RoomFight MoveCardMessage
         * @property {DcgProto.IS_EvoDigimon|null} [EvoDigimon] S_RoomFight EvoDigimon
         * @property {DcgProto.IS_UpdateCardDetails|null} [UpdateCardDetails] S_RoomFight UpdateCardDetails
         * @property {DcgProto.IS_PlayerChoose|null} [PlayerChoose] S_RoomFight PlayerChoose
         * @property {DcgProto.IS_PlayerDefenseSelect|null} [PlayerDefenseSelect] S_RoomFight PlayerDefenseSelect
         * @property {DcgProto.IS_PlayerSelectOptions|null} [PlayerSelectOptions] S_RoomFight PlayerSelectOptions
         * @property {DcgProto.IS_ClientShow|null} [ClientShow] S_RoomFight ClientShow
         * @property {DcgProto.IS_BattleDetail|null} [BattleDetail] S_RoomFight BattleDetail
         * @property {DcgProto.IS_PlayerSelectEffectActivate|null} [PlayerSelectEffectActivate] S_RoomFight PlayerSelectEffectActivate
         * @property {DcgProto.IS_UpdateGameBattleCardInfo|null} [UpdateGameBattleCardInfo] S_RoomFight UpdateGameBattleCardInfo
         * @property {DcgProto.IS_DigimonDegenerate|null} [DigimonDegenerate] S_RoomFight DigimonDegenerate
         * @property {DcgProto.IS_PlayerExcavated|null} [PlayerExcavated] S_RoomFight PlayerExcavated
         * @property {DcgProto.IS_PlayerSceneEvent|null} [PlayerSceneEvent] S_RoomFight PlayerSceneEvent
         */

        /**
         * Constructs a new S_RoomFight.
         * @memberof DcgProto
         * @classdesc Represents a S_RoomFight.
         * @implements IS_RoomFight
         * @constructor
         * @param {DcgProto.IS_RoomFight=} [p] Properties to set
         */
        function S_RoomFight(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_RoomFight BattleStartMsg.
         * @member {DcgProto.IS_BattleStartMsg|null|undefined} BattleStartMsg
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.BattleStartMsg = null;

        /**
         * S_RoomFight SetBattlePhase.
         * @member {DcgProto.IS_SetBattlePhase|null|undefined} SetBattlePhase
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.SetBattlePhase = null;

        /**
         * S_RoomFight DigimonSetCost.
         * @member {DcgProto.IS_DigimonSetCost|null|undefined} DigimonSetCost
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.DigimonSetCost = null;

        /**
         * S_RoomFight GameOver.
         * @member {DcgProto.IS_GameOver|null|undefined} GameOver
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.GameOver = null;

        /**
         * S_RoomFight MoveCardMessage.
         * @member {DcgProto.IS_MoveCardMessage|null|undefined} MoveCardMessage
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.MoveCardMessage = null;

        /**
         * S_RoomFight EvoDigimon.
         * @member {DcgProto.IS_EvoDigimon|null|undefined} EvoDigimon
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.EvoDigimon = null;

        /**
         * S_RoomFight UpdateCardDetails.
         * @member {DcgProto.IS_UpdateCardDetails|null|undefined} UpdateCardDetails
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.UpdateCardDetails = null;

        /**
         * S_RoomFight PlayerChoose.
         * @member {DcgProto.IS_PlayerChoose|null|undefined} PlayerChoose
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.PlayerChoose = null;

        /**
         * S_RoomFight PlayerDefenseSelect.
         * @member {DcgProto.IS_PlayerDefenseSelect|null|undefined} PlayerDefenseSelect
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.PlayerDefenseSelect = null;

        /**
         * S_RoomFight PlayerSelectOptions.
         * @member {DcgProto.IS_PlayerSelectOptions|null|undefined} PlayerSelectOptions
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.PlayerSelectOptions = null;

        /**
         * S_RoomFight ClientShow.
         * @member {DcgProto.IS_ClientShow|null|undefined} ClientShow
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.ClientShow = null;

        /**
         * S_RoomFight BattleDetail.
         * @member {DcgProto.IS_BattleDetail|null|undefined} BattleDetail
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.BattleDetail = null;

        /**
         * S_RoomFight PlayerSelectEffectActivate.
         * @member {DcgProto.IS_PlayerSelectEffectActivate|null|undefined} PlayerSelectEffectActivate
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.PlayerSelectEffectActivate = null;

        /**
         * S_RoomFight UpdateGameBattleCardInfo.
         * @member {DcgProto.IS_UpdateGameBattleCardInfo|null|undefined} UpdateGameBattleCardInfo
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.UpdateGameBattleCardInfo = null;

        /**
         * S_RoomFight DigimonDegenerate.
         * @member {DcgProto.IS_DigimonDegenerate|null|undefined} DigimonDegenerate
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.DigimonDegenerate = null;

        /**
         * S_RoomFight PlayerExcavated.
         * @member {DcgProto.IS_PlayerExcavated|null|undefined} PlayerExcavated
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.PlayerExcavated = null;

        /**
         * S_RoomFight PlayerSceneEvent.
         * @member {DcgProto.IS_PlayerSceneEvent|null|undefined} PlayerSceneEvent
         * @memberof DcgProto.S_RoomFight
         * @instance
         */
        S_RoomFight.prototype.PlayerSceneEvent = null;

        /**
         * Creates a new S_RoomFight instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_RoomFight
         * @static
         * @param {DcgProto.IS_RoomFight=} [properties] Properties to set
         * @returns {DcgProto.S_RoomFight} S_RoomFight instance
         */
        S_RoomFight.create = function create(properties) {
            return new S_RoomFight(properties);
        };

        /**
         * Encodes the specified S_RoomFight message. Does not implicitly {@link DcgProto.S_RoomFight.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_RoomFight
         * @static
         * @param {DcgProto.IS_RoomFight} m S_RoomFight message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_RoomFight.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.BattleStartMsg != null && Object.hasOwnProperty.call(m, "BattleStartMsg"))
                $root.DcgProto.S_BattleStartMsg.encode(m.BattleStartMsg, w.uint32(10).fork()).ldelim();
            if (m.SetBattlePhase != null && Object.hasOwnProperty.call(m, "SetBattlePhase"))
                $root.DcgProto.S_SetBattlePhase.encode(m.SetBattlePhase, w.uint32(18).fork()).ldelim();
            if (m.DigimonSetCost != null && Object.hasOwnProperty.call(m, "DigimonSetCost"))
                $root.DcgProto.S_DigimonSetCost.encode(m.DigimonSetCost, w.uint32(26).fork()).ldelim();
            if (m.GameOver != null && Object.hasOwnProperty.call(m, "GameOver"))
                $root.DcgProto.S_GameOver.encode(m.GameOver, w.uint32(34).fork()).ldelim();
            if (m.MoveCardMessage != null && Object.hasOwnProperty.call(m, "MoveCardMessage"))
                $root.DcgProto.S_MoveCardMessage.encode(m.MoveCardMessage, w.uint32(42).fork()).ldelim();
            if (m.EvoDigimon != null && Object.hasOwnProperty.call(m, "EvoDigimon"))
                $root.DcgProto.S_EvoDigimon.encode(m.EvoDigimon, w.uint32(50).fork()).ldelim();
            if (m.UpdateCardDetails != null && Object.hasOwnProperty.call(m, "UpdateCardDetails"))
                $root.DcgProto.S_UpdateCardDetails.encode(m.UpdateCardDetails, w.uint32(58).fork()).ldelim();
            if (m.PlayerChoose != null && Object.hasOwnProperty.call(m, "PlayerChoose"))
                $root.DcgProto.S_PlayerChoose.encode(m.PlayerChoose, w.uint32(66).fork()).ldelim();
            if (m.PlayerDefenseSelect != null && Object.hasOwnProperty.call(m, "PlayerDefenseSelect"))
                $root.DcgProto.S_PlayerDefenseSelect.encode(m.PlayerDefenseSelect, w.uint32(74).fork()).ldelim();
            if (m.PlayerSelectOptions != null && Object.hasOwnProperty.call(m, "PlayerSelectOptions"))
                $root.DcgProto.S_PlayerSelectOptions.encode(m.PlayerSelectOptions, w.uint32(82).fork()).ldelim();
            if (m.ClientShow != null && Object.hasOwnProperty.call(m, "ClientShow"))
                $root.DcgProto.S_ClientShow.encode(m.ClientShow, w.uint32(90).fork()).ldelim();
            if (m.BattleDetail != null && Object.hasOwnProperty.call(m, "BattleDetail"))
                $root.DcgProto.S_BattleDetail.encode(m.BattleDetail, w.uint32(98).fork()).ldelim();
            if (m.PlayerSelectEffectActivate != null && Object.hasOwnProperty.call(m, "PlayerSelectEffectActivate"))
                $root.DcgProto.S_PlayerSelectEffectActivate.encode(m.PlayerSelectEffectActivate, w.uint32(106).fork()).ldelim();
            if (m.UpdateGameBattleCardInfo != null && Object.hasOwnProperty.call(m, "UpdateGameBattleCardInfo"))
                $root.DcgProto.S_UpdateGameBattleCardInfo.encode(m.UpdateGameBattleCardInfo, w.uint32(114).fork()).ldelim();
            if (m.DigimonDegenerate != null && Object.hasOwnProperty.call(m, "DigimonDegenerate"))
                $root.DcgProto.S_DigimonDegenerate.encode(m.DigimonDegenerate, w.uint32(122).fork()).ldelim();
            if (m.PlayerExcavated != null && Object.hasOwnProperty.call(m, "PlayerExcavated"))
                $root.DcgProto.S_PlayerExcavated.encode(m.PlayerExcavated, w.uint32(130).fork()).ldelim();
            if (m.PlayerSceneEvent != null && Object.hasOwnProperty.call(m, "PlayerSceneEvent"))
                $root.DcgProto.S_PlayerSceneEvent.encode(m.PlayerSceneEvent, w.uint32(138).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_RoomFight message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_RoomFight
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_RoomFight} S_RoomFight
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_RoomFight.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_RoomFight();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.BattleStartMsg = $root.DcgProto.S_BattleStartMsg.decode(r, r.uint32());
                    break;
                case 2:
                    m.SetBattlePhase = $root.DcgProto.S_SetBattlePhase.decode(r, r.uint32());
                    break;
                case 3:
                    m.DigimonSetCost = $root.DcgProto.S_DigimonSetCost.decode(r, r.uint32());
                    break;
                case 4:
                    m.GameOver = $root.DcgProto.S_GameOver.decode(r, r.uint32());
                    break;
                case 5:
                    m.MoveCardMessage = $root.DcgProto.S_MoveCardMessage.decode(r, r.uint32());
                    break;
                case 6:
                    m.EvoDigimon = $root.DcgProto.S_EvoDigimon.decode(r, r.uint32());
                    break;
                case 7:
                    m.UpdateCardDetails = $root.DcgProto.S_UpdateCardDetails.decode(r, r.uint32());
                    break;
                case 8:
                    m.PlayerChoose = $root.DcgProto.S_PlayerChoose.decode(r, r.uint32());
                    break;
                case 9:
                    m.PlayerDefenseSelect = $root.DcgProto.S_PlayerDefenseSelect.decode(r, r.uint32());
                    break;
                case 10:
                    m.PlayerSelectOptions = $root.DcgProto.S_PlayerSelectOptions.decode(r, r.uint32());
                    break;
                case 11:
                    m.ClientShow = $root.DcgProto.S_ClientShow.decode(r, r.uint32());
                    break;
                case 12:
                    m.BattleDetail = $root.DcgProto.S_BattleDetail.decode(r, r.uint32());
                    break;
                case 13:
                    m.PlayerSelectEffectActivate = $root.DcgProto.S_PlayerSelectEffectActivate.decode(r, r.uint32());
                    break;
                case 14:
                    m.UpdateGameBattleCardInfo = $root.DcgProto.S_UpdateGameBattleCardInfo.decode(r, r.uint32());
                    break;
                case 15:
                    m.DigimonDegenerate = $root.DcgProto.S_DigimonDegenerate.decode(r, r.uint32());
                    break;
                case 16:
                    m.PlayerExcavated = $root.DcgProto.S_PlayerExcavated.decode(r, r.uint32());
                    break;
                case 17:
                    m.PlayerSceneEvent = $root.DcgProto.S_PlayerSceneEvent.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_RoomFight message.
         * @function verify
         * @memberof DcgProto.S_RoomFight
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_RoomFight.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.BattleStartMsg != null && m.hasOwnProperty("BattleStartMsg")) {
                {
                    var e = $root.DcgProto.S_BattleStartMsg.verify(m.BattleStartMsg);
                    if (e)
                        return "BattleStartMsg." + e;
                }
            }
            if (m.SetBattlePhase != null && m.hasOwnProperty("SetBattlePhase")) {
                {
                    var e = $root.DcgProto.S_SetBattlePhase.verify(m.SetBattlePhase);
                    if (e)
                        return "SetBattlePhase." + e;
                }
            }
            if (m.DigimonSetCost != null && m.hasOwnProperty("DigimonSetCost")) {
                {
                    var e = $root.DcgProto.S_DigimonSetCost.verify(m.DigimonSetCost);
                    if (e)
                        return "DigimonSetCost." + e;
                }
            }
            if (m.GameOver != null && m.hasOwnProperty("GameOver")) {
                {
                    var e = $root.DcgProto.S_GameOver.verify(m.GameOver);
                    if (e)
                        return "GameOver." + e;
                }
            }
            if (m.MoveCardMessage != null && m.hasOwnProperty("MoveCardMessage")) {
                {
                    var e = $root.DcgProto.S_MoveCardMessage.verify(m.MoveCardMessage);
                    if (e)
                        return "MoveCardMessage." + e;
                }
            }
            if (m.EvoDigimon != null && m.hasOwnProperty("EvoDigimon")) {
                {
                    var e = $root.DcgProto.S_EvoDigimon.verify(m.EvoDigimon);
                    if (e)
                        return "EvoDigimon." + e;
                }
            }
            if (m.UpdateCardDetails != null && m.hasOwnProperty("UpdateCardDetails")) {
                {
                    var e = $root.DcgProto.S_UpdateCardDetails.verify(m.UpdateCardDetails);
                    if (e)
                        return "UpdateCardDetails." + e;
                }
            }
            if (m.PlayerChoose != null && m.hasOwnProperty("PlayerChoose")) {
                {
                    var e = $root.DcgProto.S_PlayerChoose.verify(m.PlayerChoose);
                    if (e)
                        return "PlayerChoose." + e;
                }
            }
            if (m.PlayerDefenseSelect != null && m.hasOwnProperty("PlayerDefenseSelect")) {
                {
                    var e = $root.DcgProto.S_PlayerDefenseSelect.verify(m.PlayerDefenseSelect);
                    if (e)
                        return "PlayerDefenseSelect." + e;
                }
            }
            if (m.PlayerSelectOptions != null && m.hasOwnProperty("PlayerSelectOptions")) {
                {
                    var e = $root.DcgProto.S_PlayerSelectOptions.verify(m.PlayerSelectOptions);
                    if (e)
                        return "PlayerSelectOptions." + e;
                }
            }
            if (m.ClientShow != null && m.hasOwnProperty("ClientShow")) {
                {
                    var e = $root.DcgProto.S_ClientShow.verify(m.ClientShow);
                    if (e)
                        return "ClientShow." + e;
                }
            }
            if (m.BattleDetail != null && m.hasOwnProperty("BattleDetail")) {
                {
                    var e = $root.DcgProto.S_BattleDetail.verify(m.BattleDetail);
                    if (e)
                        return "BattleDetail." + e;
                }
            }
            if (m.PlayerSelectEffectActivate != null && m.hasOwnProperty("PlayerSelectEffectActivate")) {
                {
                    var e = $root.DcgProto.S_PlayerSelectEffectActivate.verify(m.PlayerSelectEffectActivate);
                    if (e)
                        return "PlayerSelectEffectActivate." + e;
                }
            }
            if (m.UpdateGameBattleCardInfo != null && m.hasOwnProperty("UpdateGameBattleCardInfo")) {
                {
                    var e = $root.DcgProto.S_UpdateGameBattleCardInfo.verify(m.UpdateGameBattleCardInfo);
                    if (e)
                        return "UpdateGameBattleCardInfo." + e;
                }
            }
            if (m.DigimonDegenerate != null && m.hasOwnProperty("DigimonDegenerate")) {
                {
                    var e = $root.DcgProto.S_DigimonDegenerate.verify(m.DigimonDegenerate);
                    if (e)
                        return "DigimonDegenerate." + e;
                }
            }
            if (m.PlayerExcavated != null && m.hasOwnProperty("PlayerExcavated")) {
                {
                    var e = $root.DcgProto.S_PlayerExcavated.verify(m.PlayerExcavated);
                    if (e)
                        return "PlayerExcavated." + e;
                }
            }
            if (m.PlayerSceneEvent != null && m.hasOwnProperty("PlayerSceneEvent")) {
                {
                    var e = $root.DcgProto.S_PlayerSceneEvent.verify(m.PlayerSceneEvent);
                    if (e)
                        return "PlayerSceneEvent." + e;
                }
            }
            return null;
        };

        return S_RoomFight;
    })();

    DcgProto.S_ClientShow = (function() {

        /**
         * Properties of a S_ClientShow.
         * @memberof DcgProto
         * @interface IS_ClientShow
         * @property {Long|null} [PlayerIID] S_ClientShow PlayerIID
         * @property {number|null} [ShowType] S_ClientShow ShowType
         * @property {Array.<Long>|null} [CardIIDS] S_ClientShow CardIIDS
         * @property {string|null} [other] S_ClientShow other
         */

        /**
         * Constructs a new S_ClientShow.
         * @memberof DcgProto
         * @classdesc Represents a S_ClientShow.
         * @implements IS_ClientShow
         * @constructor
         * @param {DcgProto.IS_ClientShow=} [p] Properties to set
         */
        function S_ClientShow(p) {
            this.CardIIDS = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_ClientShow PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_ClientShow
         * @instance
         */
        S_ClientShow.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_ClientShow ShowType.
         * @member {number} ShowType
         * @memberof DcgProto.S_ClientShow
         * @instance
         */
        S_ClientShow.prototype.ShowType = 0;

        /**
         * S_ClientShow CardIIDS.
         * @member {Array.<Long>} CardIIDS
         * @memberof DcgProto.S_ClientShow
         * @instance
         */
        S_ClientShow.prototype.CardIIDS = $util.emptyArray;

        /**
         * S_ClientShow other.
         * @member {string} other
         * @memberof DcgProto.S_ClientShow
         * @instance
         */
        S_ClientShow.prototype.other = "";

        /**
         * Creates a new S_ClientShow instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_ClientShow
         * @static
         * @param {DcgProto.IS_ClientShow=} [properties] Properties to set
         * @returns {DcgProto.S_ClientShow} S_ClientShow instance
         */
        S_ClientShow.create = function create(properties) {
            return new S_ClientShow(properties);
        };

        /**
         * Encodes the specified S_ClientShow message. Does not implicitly {@link DcgProto.S_ClientShow.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_ClientShow
         * @static
         * @param {DcgProto.IS_ClientShow} m S_ClientShow message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_ClientShow.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.ShowType != null && Object.hasOwnProperty.call(m, "ShowType"))
                w.uint32(16).int32(m.ShowType);
            if (m.CardIIDS != null && m.CardIIDS.length) {
                w.uint32(26).fork();
                for (var i = 0; i < m.CardIIDS.length; ++i)
                    w.int64(m.CardIIDS[i]);
                w.ldelim();
            }
            if (m.other != null && Object.hasOwnProperty.call(m, "other"))
                w.uint32(34).string(m.other);
            return w;
        };

        /**
         * Decodes a S_ClientShow message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_ClientShow
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_ClientShow} S_ClientShow
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_ClientShow.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_ClientShow();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.ShowType = r.int32();
                    break;
                case 3:
                    if (!(m.CardIIDS && m.CardIIDS.length))
                        m.CardIIDS = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.CardIIDS.push(r.int64());
                    } else
                        m.CardIIDS.push(r.int64());
                    break;
                case 4:
                    m.other = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_ClientShow message.
         * @function verify
         * @memberof DcgProto.S_ClientShow
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_ClientShow.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.ShowType != null && m.hasOwnProperty("ShowType")) {
                if (!$util.isInteger(m.ShowType))
                    return "ShowType: integer expected";
            }
            if (m.CardIIDS != null && m.hasOwnProperty("CardIIDS")) {
                if (!Array.isArray(m.CardIIDS))
                    return "CardIIDS: array expected";
                for (var i = 0; i < m.CardIIDS.length; ++i) {
                    if (!$util.isInteger(m.CardIIDS[i]) && !(m.CardIIDS[i] && $util.isInteger(m.CardIIDS[i].low) && $util.isInteger(m.CardIIDS[i].high)))
                        return "CardIIDS: integer|Long[] expected";
                }
            }
            if (m.other != null && m.hasOwnProperty("other")) {
                if (!$util.isString(m.other))
                    return "other: string expected";
            }
            return null;
        };

        return S_ClientShow;
    })();

    DcgProto.S_BattleStartMsg = (function() {

        /**
         * Properties of a S_BattleStartMsg.
         * @memberof DcgProto
         * @interface IS_BattleStartMsg
         * @property {DcgProto.IS_PlayerBattleDetail|null} [PlayerA] S_BattleStartMsg PlayerA
         * @property {DcgProto.IS_PlayerBattleDetail|null} [PlayerB] S_BattleStartMsg PlayerB
         */

        /**
         * Constructs a new S_BattleStartMsg.
         * @memberof DcgProto
         * @classdesc Represents a S_BattleStartMsg.
         * @implements IS_BattleStartMsg
         * @constructor
         * @param {DcgProto.IS_BattleStartMsg=} [p] Properties to set
         */
        function S_BattleStartMsg(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_BattleStartMsg PlayerA.
         * @member {DcgProto.IS_PlayerBattleDetail|null|undefined} PlayerA
         * @memberof DcgProto.S_BattleStartMsg
         * @instance
         */
        S_BattleStartMsg.prototype.PlayerA = null;

        /**
         * S_BattleStartMsg PlayerB.
         * @member {DcgProto.IS_PlayerBattleDetail|null|undefined} PlayerB
         * @memberof DcgProto.S_BattleStartMsg
         * @instance
         */
        S_BattleStartMsg.prototype.PlayerB = null;

        /**
         * Creates a new S_BattleStartMsg instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_BattleStartMsg
         * @static
         * @param {DcgProto.IS_BattleStartMsg=} [properties] Properties to set
         * @returns {DcgProto.S_BattleStartMsg} S_BattleStartMsg instance
         */
        S_BattleStartMsg.create = function create(properties) {
            return new S_BattleStartMsg(properties);
        };

        /**
         * Encodes the specified S_BattleStartMsg message. Does not implicitly {@link DcgProto.S_BattleStartMsg.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_BattleStartMsg
         * @static
         * @param {DcgProto.IS_BattleStartMsg} m S_BattleStartMsg message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_BattleStartMsg.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerA != null && Object.hasOwnProperty.call(m, "PlayerA"))
                $root.DcgProto.S_PlayerBattleDetail.encode(m.PlayerA, w.uint32(10).fork()).ldelim();
            if (m.PlayerB != null && Object.hasOwnProperty.call(m, "PlayerB"))
                $root.DcgProto.S_PlayerBattleDetail.encode(m.PlayerB, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_BattleStartMsg message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_BattleStartMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_BattleStartMsg} S_BattleStartMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_BattleStartMsg.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_BattleStartMsg();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerA = $root.DcgProto.S_PlayerBattleDetail.decode(r, r.uint32());
                    break;
                case 2:
                    m.PlayerB = $root.DcgProto.S_PlayerBattleDetail.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_BattleStartMsg message.
         * @function verify
         * @memberof DcgProto.S_BattleStartMsg
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_BattleStartMsg.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerA != null && m.hasOwnProperty("PlayerA")) {
                {
                    var e = $root.DcgProto.S_PlayerBattleDetail.verify(m.PlayerA);
                    if (e)
                        return "PlayerA." + e;
                }
            }
            if (m.PlayerB != null && m.hasOwnProperty("PlayerB")) {
                {
                    var e = $root.DcgProto.S_PlayerBattleDetail.verify(m.PlayerB);
                    if (e)
                        return "PlayerB." + e;
                }
            }
            return null;
        };

        return S_BattleStartMsg;
    })();

    DcgProto.S_BattleDetail = (function() {

        /**
         * Properties of a S_BattleDetail.
         * @memberof DcgProto
         * @interface IS_BattleDetail
         * @property {DcgProto.IS_PlayerBattleDetail|null} [PlayerA] S_BattleDetail PlayerA
         * @property {DcgProto.IS_PlayerBattleDetail|null} [PlayerB] S_BattleDetail PlayerB
         * @property {Long|null} [WaitPlayerIID] S_BattleDetail WaitPlayerIID
         * @property {number|null} [TimeOutEndTime] S_BattleDetail TimeOutEndTime
         * @property {boolean|null} [IsPause] S_BattleDetail IsPause
         */

        /**
         * Constructs a new S_BattleDetail.
         * @memberof DcgProto
         * @classdesc Represents a S_BattleDetail.
         * @implements IS_BattleDetail
         * @constructor
         * @param {DcgProto.IS_BattleDetail=} [p] Properties to set
         */
        function S_BattleDetail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_BattleDetail PlayerA.
         * @member {DcgProto.IS_PlayerBattleDetail|null|undefined} PlayerA
         * @memberof DcgProto.S_BattleDetail
         * @instance
         */
        S_BattleDetail.prototype.PlayerA = null;

        /**
         * S_BattleDetail PlayerB.
         * @member {DcgProto.IS_PlayerBattleDetail|null|undefined} PlayerB
         * @memberof DcgProto.S_BattleDetail
         * @instance
         */
        S_BattleDetail.prototype.PlayerB = null;

        /**
         * S_BattleDetail WaitPlayerIID.
         * @member {Long} WaitPlayerIID
         * @memberof DcgProto.S_BattleDetail
         * @instance
         */
        S_BattleDetail.prototype.WaitPlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_BattleDetail TimeOutEndTime.
         * @member {number} TimeOutEndTime
         * @memberof DcgProto.S_BattleDetail
         * @instance
         */
        S_BattleDetail.prototype.TimeOutEndTime = 0;

        /**
         * S_BattleDetail IsPause.
         * @member {boolean} IsPause
         * @memberof DcgProto.S_BattleDetail
         * @instance
         */
        S_BattleDetail.prototype.IsPause = false;

        /**
         * Creates a new S_BattleDetail instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_BattleDetail
         * @static
         * @param {DcgProto.IS_BattleDetail=} [properties] Properties to set
         * @returns {DcgProto.S_BattleDetail} S_BattleDetail instance
         */
        S_BattleDetail.create = function create(properties) {
            return new S_BattleDetail(properties);
        };

        /**
         * Encodes the specified S_BattleDetail message. Does not implicitly {@link DcgProto.S_BattleDetail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_BattleDetail
         * @static
         * @param {DcgProto.IS_BattleDetail} m S_BattleDetail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_BattleDetail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerA != null && Object.hasOwnProperty.call(m, "PlayerA"))
                $root.DcgProto.S_PlayerBattleDetail.encode(m.PlayerA, w.uint32(10).fork()).ldelim();
            if (m.PlayerB != null && Object.hasOwnProperty.call(m, "PlayerB"))
                $root.DcgProto.S_PlayerBattleDetail.encode(m.PlayerB, w.uint32(18).fork()).ldelim();
            if (m.WaitPlayerIID != null && Object.hasOwnProperty.call(m, "WaitPlayerIID"))
                w.uint32(24).int64(m.WaitPlayerIID);
            if (m.TimeOutEndTime != null && Object.hasOwnProperty.call(m, "TimeOutEndTime"))
                w.uint32(32).uint32(m.TimeOutEndTime);
            if (m.IsPause != null && Object.hasOwnProperty.call(m, "IsPause"))
                w.uint32(40).bool(m.IsPause);
            return w;
        };

        /**
         * Decodes a S_BattleDetail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_BattleDetail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_BattleDetail} S_BattleDetail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_BattleDetail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_BattleDetail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerA = $root.DcgProto.S_PlayerBattleDetail.decode(r, r.uint32());
                    break;
                case 2:
                    m.PlayerB = $root.DcgProto.S_PlayerBattleDetail.decode(r, r.uint32());
                    break;
                case 3:
                    m.WaitPlayerIID = r.int64();
                    break;
                case 4:
                    m.TimeOutEndTime = r.uint32();
                    break;
                case 5:
                    m.IsPause = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_BattleDetail message.
         * @function verify
         * @memberof DcgProto.S_BattleDetail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_BattleDetail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerA != null && m.hasOwnProperty("PlayerA")) {
                {
                    var e = $root.DcgProto.S_PlayerBattleDetail.verify(m.PlayerA);
                    if (e)
                        return "PlayerA." + e;
                }
            }
            if (m.PlayerB != null && m.hasOwnProperty("PlayerB")) {
                {
                    var e = $root.DcgProto.S_PlayerBattleDetail.verify(m.PlayerB);
                    if (e)
                        return "PlayerB." + e;
                }
            }
            if (m.WaitPlayerIID != null && m.hasOwnProperty("WaitPlayerIID")) {
                if (!$util.isInteger(m.WaitPlayerIID) && !(m.WaitPlayerIID && $util.isInteger(m.WaitPlayerIID.low) && $util.isInteger(m.WaitPlayerIID.high)))
                    return "WaitPlayerIID: integer|Long expected";
            }
            if (m.TimeOutEndTime != null && m.hasOwnProperty("TimeOutEndTime")) {
                if (!$util.isInteger(m.TimeOutEndTime))
                    return "TimeOutEndTime: integer expected";
            }
            if (m.IsPause != null && m.hasOwnProperty("IsPause")) {
                if (typeof m.IsPause !== "boolean")
                    return "IsPause: boolean expected";
            }
            return null;
        };

        return S_BattleDetail;
    })();

    DcgProto.S_PlayerSelectEffectActivate = (function() {

        /**
         * Properties of a S_PlayerSelectEffectActivate.
         * @memberof DcgProto
         * @interface IS_PlayerSelectEffectActivate
         * @property {Long|null} [PlayerIID] S_PlayerSelectEffectActivate PlayerIID
         * @property {Array.<DcgProto.IS_EffectActivate>|null} [EffectActivate] S_PlayerSelectEffectActivate EffectActivate
         * @property {number|null} [RequestId] S_PlayerSelectEffectActivate RequestId
         */

        /**
         * Constructs a new S_PlayerSelectEffectActivate.
         * @memberof DcgProto
         * @classdesc Represents a S_PlayerSelectEffectActivate.
         * @implements IS_PlayerSelectEffectActivate
         * @constructor
         * @param {DcgProto.IS_PlayerSelectEffectActivate=} [p] Properties to set
         */
        function S_PlayerSelectEffectActivate(p) {
            this.EffectActivate = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PlayerSelectEffectActivate PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_PlayerSelectEffectActivate
         * @instance
         */
        S_PlayerSelectEffectActivate.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PlayerSelectEffectActivate EffectActivate.
         * @member {Array.<DcgProto.IS_EffectActivate>} EffectActivate
         * @memberof DcgProto.S_PlayerSelectEffectActivate
         * @instance
         */
        S_PlayerSelectEffectActivate.prototype.EffectActivate = $util.emptyArray;

        /**
         * S_PlayerSelectEffectActivate RequestId.
         * @member {number} RequestId
         * @memberof DcgProto.S_PlayerSelectEffectActivate
         * @instance
         */
        S_PlayerSelectEffectActivate.prototype.RequestId = 0;

        /**
         * Creates a new S_PlayerSelectEffectActivate instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PlayerSelectEffectActivate
         * @static
         * @param {DcgProto.IS_PlayerSelectEffectActivate=} [properties] Properties to set
         * @returns {DcgProto.S_PlayerSelectEffectActivate} S_PlayerSelectEffectActivate instance
         */
        S_PlayerSelectEffectActivate.create = function create(properties) {
            return new S_PlayerSelectEffectActivate(properties);
        };

        /**
         * Encodes the specified S_PlayerSelectEffectActivate message. Does not implicitly {@link DcgProto.S_PlayerSelectEffectActivate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PlayerSelectEffectActivate
         * @static
         * @param {DcgProto.IS_PlayerSelectEffectActivate} m S_PlayerSelectEffectActivate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PlayerSelectEffectActivate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.EffectActivate != null && m.EffectActivate.length) {
                for (var i = 0; i < m.EffectActivate.length; ++i)
                    $root.DcgProto.S_EffectActivate.encode(m.EffectActivate[i], w.uint32(18).fork()).ldelim();
            }
            if (m.RequestId != null && Object.hasOwnProperty.call(m, "RequestId"))
                w.uint32(24).int32(m.RequestId);
            return w;
        };

        /**
         * Decodes a S_PlayerSelectEffectActivate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PlayerSelectEffectActivate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PlayerSelectEffectActivate} S_PlayerSelectEffectActivate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PlayerSelectEffectActivate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PlayerSelectEffectActivate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    if (!(m.EffectActivate && m.EffectActivate.length))
                        m.EffectActivate = [];
                    m.EffectActivate.push($root.DcgProto.S_EffectActivate.decode(r, r.uint32()));
                    break;
                case 3:
                    m.RequestId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PlayerSelectEffectActivate message.
         * @function verify
         * @memberof DcgProto.S_PlayerSelectEffectActivate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PlayerSelectEffectActivate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.EffectActivate != null && m.hasOwnProperty("EffectActivate")) {
                if (!Array.isArray(m.EffectActivate))
                    return "EffectActivate: array expected";
                for (var i = 0; i < m.EffectActivate.length; ++i) {
                    {
                        var e = $root.DcgProto.S_EffectActivate.verify(m.EffectActivate[i]);
                        if (e)
                            return "EffectActivate." + e;
                    }
                }
            }
            if (m.RequestId != null && m.hasOwnProperty("RequestId")) {
                if (!$util.isInteger(m.RequestId))
                    return "RequestId: integer expected";
            }
            return null;
        };

        return S_PlayerSelectEffectActivate;
    })();

    DcgProto.S_UpdateGameBattleCardInfo = (function() {

        /**
         * Properties of a S_UpdateGameBattleCardInfo.
         * @memberof DcgProto
         * @interface IS_UpdateGameBattleCardInfo
         * @property {Array.<DcgProto.IS_GameBattlePlayer>|null} [GameBattlePlayers] S_UpdateGameBattleCardInfo GameBattlePlayers
         */

        /**
         * Constructs a new S_UpdateGameBattleCardInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_UpdateGameBattleCardInfo.
         * @implements IS_UpdateGameBattleCardInfo
         * @constructor
         * @param {DcgProto.IS_UpdateGameBattleCardInfo=} [p] Properties to set
         */
        function S_UpdateGameBattleCardInfo(p) {
            this.GameBattlePlayers = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_UpdateGameBattleCardInfo GameBattlePlayers.
         * @member {Array.<DcgProto.IS_GameBattlePlayer>} GameBattlePlayers
         * @memberof DcgProto.S_UpdateGameBattleCardInfo
         * @instance
         */
        S_UpdateGameBattleCardInfo.prototype.GameBattlePlayers = $util.emptyArray;

        /**
         * Creates a new S_UpdateGameBattleCardInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_UpdateGameBattleCardInfo
         * @static
         * @param {DcgProto.IS_UpdateGameBattleCardInfo=} [properties] Properties to set
         * @returns {DcgProto.S_UpdateGameBattleCardInfo} S_UpdateGameBattleCardInfo instance
         */
        S_UpdateGameBattleCardInfo.create = function create(properties) {
            return new S_UpdateGameBattleCardInfo(properties);
        };

        /**
         * Encodes the specified S_UpdateGameBattleCardInfo message. Does not implicitly {@link DcgProto.S_UpdateGameBattleCardInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_UpdateGameBattleCardInfo
         * @static
         * @param {DcgProto.IS_UpdateGameBattleCardInfo} m S_UpdateGameBattleCardInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_UpdateGameBattleCardInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.GameBattlePlayers != null && m.GameBattlePlayers.length) {
                for (var i = 0; i < m.GameBattlePlayers.length; ++i)
                    $root.DcgProto.S_GameBattlePlayer.encode(m.GameBattlePlayers[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_UpdateGameBattleCardInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_UpdateGameBattleCardInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_UpdateGameBattleCardInfo} S_UpdateGameBattleCardInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_UpdateGameBattleCardInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_UpdateGameBattleCardInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.GameBattlePlayers && m.GameBattlePlayers.length))
                        m.GameBattlePlayers = [];
                    m.GameBattlePlayers.push($root.DcgProto.S_GameBattlePlayer.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_UpdateGameBattleCardInfo message.
         * @function verify
         * @memberof DcgProto.S_UpdateGameBattleCardInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_UpdateGameBattleCardInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.GameBattlePlayers != null && m.hasOwnProperty("GameBattlePlayers")) {
                if (!Array.isArray(m.GameBattlePlayers))
                    return "GameBattlePlayers: array expected";
                for (var i = 0; i < m.GameBattlePlayers.length; ++i) {
                    {
                        var e = $root.DcgProto.S_GameBattlePlayer.verify(m.GameBattlePlayers[i]);
                        if (e)
                            return "GameBattlePlayers." + e;
                    }
                }
            }
            return null;
        };

        return S_UpdateGameBattleCardInfo;
    })();

    DcgProto.S_DigimonDegenerate = (function() {

        /**
         * Properties of a S_DigimonDegenerate.
         * @memberof DcgProto
         * @interface IS_DigimonDegenerate
         * @property {Long|null} [PlayerIID] S_DigimonDegenerate PlayerIID
         * @property {DcgProto.IS_OtherCard|null} [DegenerateCard] S_DigimonDegenerate DegenerateCard
         * @property {Array.<DcgProto.IS_OtherCard>|null} [ProcessDegenCards] S_DigimonDegenerate ProcessDegenCards
         * @property {number|null} [DegType] S_DigimonDegenerate DegType
         * @property {DcgProto.IS_OtherCard|null} [CasterCard] S_DigimonDegenerate CasterCard
         */

        /**
         * Constructs a new S_DigimonDegenerate.
         * @memberof DcgProto
         * @classdesc Represents a S_DigimonDegenerate.
         * @implements IS_DigimonDegenerate
         * @constructor
         * @param {DcgProto.IS_DigimonDegenerate=} [p] Properties to set
         */
        function S_DigimonDegenerate(p) {
            this.ProcessDegenCards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_DigimonDegenerate PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_DigimonDegenerate
         * @instance
         */
        S_DigimonDegenerate.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_DigimonDegenerate DegenerateCard.
         * @member {DcgProto.IS_OtherCard|null|undefined} DegenerateCard
         * @memberof DcgProto.S_DigimonDegenerate
         * @instance
         */
        S_DigimonDegenerate.prototype.DegenerateCard = null;

        /**
         * S_DigimonDegenerate ProcessDegenCards.
         * @member {Array.<DcgProto.IS_OtherCard>} ProcessDegenCards
         * @memberof DcgProto.S_DigimonDegenerate
         * @instance
         */
        S_DigimonDegenerate.prototype.ProcessDegenCards = $util.emptyArray;

        /**
         * S_DigimonDegenerate DegType.
         * @member {number} DegType
         * @memberof DcgProto.S_DigimonDegenerate
         * @instance
         */
        S_DigimonDegenerate.prototype.DegType = 0;

        /**
         * S_DigimonDegenerate CasterCard.
         * @member {DcgProto.IS_OtherCard|null|undefined} CasterCard
         * @memberof DcgProto.S_DigimonDegenerate
         * @instance
         */
        S_DigimonDegenerate.prototype.CasterCard = null;

        /**
         * Creates a new S_DigimonDegenerate instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_DigimonDegenerate
         * @static
         * @param {DcgProto.IS_DigimonDegenerate=} [properties] Properties to set
         * @returns {DcgProto.S_DigimonDegenerate} S_DigimonDegenerate instance
         */
        S_DigimonDegenerate.create = function create(properties) {
            return new S_DigimonDegenerate(properties);
        };

        /**
         * Encodes the specified S_DigimonDegenerate message. Does not implicitly {@link DcgProto.S_DigimonDegenerate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_DigimonDegenerate
         * @static
         * @param {DcgProto.IS_DigimonDegenerate} m S_DigimonDegenerate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_DigimonDegenerate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.DegenerateCard != null && Object.hasOwnProperty.call(m, "DegenerateCard"))
                $root.DcgProto.S_OtherCard.encode(m.DegenerateCard, w.uint32(18).fork()).ldelim();
            if (m.ProcessDegenCards != null && m.ProcessDegenCards.length) {
                for (var i = 0; i < m.ProcessDegenCards.length; ++i)
                    $root.DcgProto.S_OtherCard.encode(m.ProcessDegenCards[i], w.uint32(26).fork()).ldelim();
            }
            if (m.DegType != null && Object.hasOwnProperty.call(m, "DegType"))
                w.uint32(32).int32(m.DegType);
            if (m.CasterCard != null && Object.hasOwnProperty.call(m, "CasterCard"))
                $root.DcgProto.S_OtherCard.encode(m.CasterCard, w.uint32(42).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_DigimonDegenerate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_DigimonDegenerate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_DigimonDegenerate} S_DigimonDegenerate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_DigimonDegenerate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_DigimonDegenerate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.DegenerateCard = $root.DcgProto.S_OtherCard.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.ProcessDegenCards && m.ProcessDegenCards.length))
                        m.ProcessDegenCards = [];
                    m.ProcessDegenCards.push($root.DcgProto.S_OtherCard.decode(r, r.uint32()));
                    break;
                case 4:
                    m.DegType = r.int32();
                    break;
                case 5:
                    m.CasterCard = $root.DcgProto.S_OtherCard.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_DigimonDegenerate message.
         * @function verify
         * @memberof DcgProto.S_DigimonDegenerate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_DigimonDegenerate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.DegenerateCard != null && m.hasOwnProperty("DegenerateCard")) {
                {
                    var e = $root.DcgProto.S_OtherCard.verify(m.DegenerateCard);
                    if (e)
                        return "DegenerateCard." + e;
                }
            }
            if (m.ProcessDegenCards != null && m.hasOwnProperty("ProcessDegenCards")) {
                if (!Array.isArray(m.ProcessDegenCards))
                    return "ProcessDegenCards: array expected";
                for (var i = 0; i < m.ProcessDegenCards.length; ++i) {
                    {
                        var e = $root.DcgProto.S_OtherCard.verify(m.ProcessDegenCards[i]);
                        if (e)
                            return "ProcessDegenCards." + e;
                    }
                }
            }
            if (m.DegType != null && m.hasOwnProperty("DegType")) {
                if (!$util.isInteger(m.DegType))
                    return "DegType: integer expected";
            }
            if (m.CasterCard != null && m.hasOwnProperty("CasterCard")) {
                {
                    var e = $root.DcgProto.S_OtherCard.verify(m.CasterCard);
                    if (e)
                        return "CasterCard." + e;
                }
            }
            return null;
        };

        return S_DigimonDegenerate;
    })();

    DcgProto.S_GameBattlePlayer = (function() {

        /**
         * Properties of a S_GameBattlePlayer.
         * @memberof DcgProto
         * @interface IS_GameBattlePlayer
         * @property {Long|null} [PlayerIID] S_GameBattlePlayer PlayerIID
         * @property {Array.<DcgProto.IS_GameBattleCard>|null} [GameBattleCards] S_GameBattlePlayer GameBattleCards
         * @property {Array.<DcgProto.IS_GameHandCard>|null} [GameHandCards] S_GameBattlePlayer GameHandCards
         * @property {Array.<number>|null} [PlayerBuffs] S_GameBattlePlayer PlayerBuffs
         */

        /**
         * Constructs a new S_GameBattlePlayer.
         * @memberof DcgProto
         * @classdesc Represents a S_GameBattlePlayer.
         * @implements IS_GameBattlePlayer
         * @constructor
         * @param {DcgProto.IS_GameBattlePlayer=} [p] Properties to set
         */
        function S_GameBattlePlayer(p) {
            this.GameBattleCards = [];
            this.GameHandCards = [];
            this.PlayerBuffs = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_GameBattlePlayer PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_GameBattlePlayer
         * @instance
         */
        S_GameBattlePlayer.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_GameBattlePlayer GameBattleCards.
         * @member {Array.<DcgProto.IS_GameBattleCard>} GameBattleCards
         * @memberof DcgProto.S_GameBattlePlayer
         * @instance
         */
        S_GameBattlePlayer.prototype.GameBattleCards = $util.emptyArray;

        /**
         * S_GameBattlePlayer GameHandCards.
         * @member {Array.<DcgProto.IS_GameHandCard>} GameHandCards
         * @memberof DcgProto.S_GameBattlePlayer
         * @instance
         */
        S_GameBattlePlayer.prototype.GameHandCards = $util.emptyArray;

        /**
         * S_GameBattlePlayer PlayerBuffs.
         * @member {Array.<number>} PlayerBuffs
         * @memberof DcgProto.S_GameBattlePlayer
         * @instance
         */
        S_GameBattlePlayer.prototype.PlayerBuffs = $util.emptyArray;

        /**
         * Creates a new S_GameBattlePlayer instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_GameBattlePlayer
         * @static
         * @param {DcgProto.IS_GameBattlePlayer=} [properties] Properties to set
         * @returns {DcgProto.S_GameBattlePlayer} S_GameBattlePlayer instance
         */
        S_GameBattlePlayer.create = function create(properties) {
            return new S_GameBattlePlayer(properties);
        };

        /**
         * Encodes the specified S_GameBattlePlayer message. Does not implicitly {@link DcgProto.S_GameBattlePlayer.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_GameBattlePlayer
         * @static
         * @param {DcgProto.IS_GameBattlePlayer} m S_GameBattlePlayer message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_GameBattlePlayer.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.GameBattleCards != null && m.GameBattleCards.length) {
                for (var i = 0; i < m.GameBattleCards.length; ++i)
                    $root.DcgProto.S_GameBattleCard.encode(m.GameBattleCards[i], w.uint32(18).fork()).ldelim();
            }
            if (m.GameHandCards != null && m.GameHandCards.length) {
                for (var i = 0; i < m.GameHandCards.length; ++i)
                    $root.DcgProto.S_GameHandCard.encode(m.GameHandCards[i], w.uint32(26).fork()).ldelim();
            }
            if (m.PlayerBuffs != null && m.PlayerBuffs.length) {
                w.uint32(34).fork();
                for (var i = 0; i < m.PlayerBuffs.length; ++i)
                    w.int32(m.PlayerBuffs[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_GameBattlePlayer message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_GameBattlePlayer
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_GameBattlePlayer} S_GameBattlePlayer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_GameBattlePlayer.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_GameBattlePlayer();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    if (!(m.GameBattleCards && m.GameBattleCards.length))
                        m.GameBattleCards = [];
                    m.GameBattleCards.push($root.DcgProto.S_GameBattleCard.decode(r, r.uint32()));
                    break;
                case 3:
                    if (!(m.GameHandCards && m.GameHandCards.length))
                        m.GameHandCards = [];
                    m.GameHandCards.push($root.DcgProto.S_GameHandCard.decode(r, r.uint32()));
                    break;
                case 4:
                    if (!(m.PlayerBuffs && m.PlayerBuffs.length))
                        m.PlayerBuffs = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.PlayerBuffs.push(r.int32());
                    } else
                        m.PlayerBuffs.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_GameBattlePlayer message.
         * @function verify
         * @memberof DcgProto.S_GameBattlePlayer
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_GameBattlePlayer.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.GameBattleCards != null && m.hasOwnProperty("GameBattleCards")) {
                if (!Array.isArray(m.GameBattleCards))
                    return "GameBattleCards: array expected";
                for (var i = 0; i < m.GameBattleCards.length; ++i) {
                    {
                        var e = $root.DcgProto.S_GameBattleCard.verify(m.GameBattleCards[i]);
                        if (e)
                            return "GameBattleCards." + e;
                    }
                }
            }
            if (m.GameHandCards != null && m.hasOwnProperty("GameHandCards")) {
                if (!Array.isArray(m.GameHandCards))
                    return "GameHandCards: array expected";
                for (var i = 0; i < m.GameHandCards.length; ++i) {
                    {
                        var e = $root.DcgProto.S_GameHandCard.verify(m.GameHandCards[i]);
                        if (e)
                            return "GameHandCards." + e;
                    }
                }
            }
            if (m.PlayerBuffs != null && m.hasOwnProperty("PlayerBuffs")) {
                if (!Array.isArray(m.PlayerBuffs))
                    return "PlayerBuffs: array expected";
                for (var i = 0; i < m.PlayerBuffs.length; ++i) {
                    if (!$util.isInteger(m.PlayerBuffs[i]))
                        return "PlayerBuffs: integer[] expected";
                }
            }
            return null;
        };

        return S_GameBattlePlayer;
    })();

    DcgProto.S_GameBattleCard = (function() {

        /**
         * Properties of a S_GameBattleCard.
         * @memberof DcgProto
         * @interface IS_GameBattleCard
         * @property {Long|null} [CardIID] S_GameBattleCard CardIID
         * @property {number|null} [LastDP] S_GameBattleCard LastDP
         * @property {Array.<DcgProto.IS_GameBattleCardInfo>|null} [GameBattleCardInfos] S_GameBattleCard GameBattleCardInfos
         * @property {Array.<number>|null} [CanActivateEffects] S_GameBattleCard CanActivateEffects
         * @property {Array.<DcgProto.IS_BattleCardEffectInfo>|null} [EffectInfos] S_GameBattleCard EffectInfos
         */

        /**
         * Constructs a new S_GameBattleCard.
         * @memberof DcgProto
         * @classdesc Represents a S_GameBattleCard.
         * @implements IS_GameBattleCard
         * @constructor
         * @param {DcgProto.IS_GameBattleCard=} [p] Properties to set
         */
        function S_GameBattleCard(p) {
            this.GameBattleCardInfos = [];
            this.CanActivateEffects = [];
            this.EffectInfos = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_GameBattleCard CardIID.
         * @member {Long} CardIID
         * @memberof DcgProto.S_GameBattleCard
         * @instance
         */
        S_GameBattleCard.prototype.CardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_GameBattleCard LastDP.
         * @member {number} LastDP
         * @memberof DcgProto.S_GameBattleCard
         * @instance
         */
        S_GameBattleCard.prototype.LastDP = 0;

        /**
         * S_GameBattleCard GameBattleCardInfos.
         * @member {Array.<DcgProto.IS_GameBattleCardInfo>} GameBattleCardInfos
         * @memberof DcgProto.S_GameBattleCard
         * @instance
         */
        S_GameBattleCard.prototype.GameBattleCardInfos = $util.emptyArray;

        /**
         * S_GameBattleCard CanActivateEffects.
         * @member {Array.<number>} CanActivateEffects
         * @memberof DcgProto.S_GameBattleCard
         * @instance
         */
        S_GameBattleCard.prototype.CanActivateEffects = $util.emptyArray;

        /**
         * S_GameBattleCard EffectInfos.
         * @member {Array.<DcgProto.IS_BattleCardEffectInfo>} EffectInfos
         * @memberof DcgProto.S_GameBattleCard
         * @instance
         */
        S_GameBattleCard.prototype.EffectInfos = $util.emptyArray;

        /**
         * Creates a new S_GameBattleCard instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_GameBattleCard
         * @static
         * @param {DcgProto.IS_GameBattleCard=} [properties] Properties to set
         * @returns {DcgProto.S_GameBattleCard} S_GameBattleCard instance
         */
        S_GameBattleCard.create = function create(properties) {
            return new S_GameBattleCard(properties);
        };

        /**
         * Encodes the specified S_GameBattleCard message. Does not implicitly {@link DcgProto.S_GameBattleCard.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_GameBattleCard
         * @static
         * @param {DcgProto.IS_GameBattleCard} m S_GameBattleCard message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_GameBattleCard.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardIID != null && Object.hasOwnProperty.call(m, "CardIID"))
                w.uint32(8).int64(m.CardIID);
            if (m.LastDP != null && Object.hasOwnProperty.call(m, "LastDP"))
                w.uint32(16).int32(m.LastDP);
            if (m.GameBattleCardInfos != null && m.GameBattleCardInfos.length) {
                for (var i = 0; i < m.GameBattleCardInfos.length; ++i)
                    $root.DcgProto.S_GameBattleCardInfo.encode(m.GameBattleCardInfos[i], w.uint32(26).fork()).ldelim();
            }
            if (m.CanActivateEffects != null && m.CanActivateEffects.length) {
                w.uint32(34).fork();
                for (var i = 0; i < m.CanActivateEffects.length; ++i)
                    w.int32(m.CanActivateEffects[i]);
                w.ldelim();
            }
            if (m.EffectInfos != null && m.EffectInfos.length) {
                for (var i = 0; i < m.EffectInfos.length; ++i)
                    $root.DcgProto.S_BattleCardEffectInfo.encode(m.EffectInfos[i], w.uint32(42).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_GameBattleCard message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_GameBattleCard
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_GameBattleCard} S_GameBattleCard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_GameBattleCard.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_GameBattleCard();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CardIID = r.int64();
                    break;
                case 2:
                    m.LastDP = r.int32();
                    break;
                case 3:
                    if (!(m.GameBattleCardInfos && m.GameBattleCardInfos.length))
                        m.GameBattleCardInfos = [];
                    m.GameBattleCardInfos.push($root.DcgProto.S_GameBattleCardInfo.decode(r, r.uint32()));
                    break;
                case 4:
                    if (!(m.CanActivateEffects && m.CanActivateEffects.length))
                        m.CanActivateEffects = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.CanActivateEffects.push(r.int32());
                    } else
                        m.CanActivateEffects.push(r.int32());
                    break;
                case 5:
                    if (!(m.EffectInfos && m.EffectInfos.length))
                        m.EffectInfos = [];
                    m.EffectInfos.push($root.DcgProto.S_BattleCardEffectInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_GameBattleCard message.
         * @function verify
         * @memberof DcgProto.S_GameBattleCard
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_GameBattleCard.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardIID != null && m.hasOwnProperty("CardIID")) {
                if (!$util.isInteger(m.CardIID) && !(m.CardIID && $util.isInteger(m.CardIID.low) && $util.isInteger(m.CardIID.high)))
                    return "CardIID: integer|Long expected";
            }
            if (m.LastDP != null && m.hasOwnProperty("LastDP")) {
                if (!$util.isInteger(m.LastDP))
                    return "LastDP: integer expected";
            }
            if (m.GameBattleCardInfos != null && m.hasOwnProperty("GameBattleCardInfos")) {
                if (!Array.isArray(m.GameBattleCardInfos))
                    return "GameBattleCardInfos: array expected";
                for (var i = 0; i < m.GameBattleCardInfos.length; ++i) {
                    {
                        var e = $root.DcgProto.S_GameBattleCardInfo.verify(m.GameBattleCardInfos[i]);
                        if (e)
                            return "GameBattleCardInfos." + e;
                    }
                }
            }
            if (m.CanActivateEffects != null && m.hasOwnProperty("CanActivateEffects")) {
                if (!Array.isArray(m.CanActivateEffects))
                    return "CanActivateEffects: array expected";
                for (var i = 0; i < m.CanActivateEffects.length; ++i) {
                    if (!$util.isInteger(m.CanActivateEffects[i]))
                        return "CanActivateEffects: integer[] expected";
                }
            }
            if (m.EffectInfos != null && m.hasOwnProperty("EffectInfos")) {
                if (!Array.isArray(m.EffectInfos))
                    return "EffectInfos: array expected";
                for (var i = 0; i < m.EffectInfos.length; ++i) {
                    {
                        var e = $root.DcgProto.S_BattleCardEffectInfo.verify(m.EffectInfos[i]);
                        if (e)
                            return "EffectInfos." + e;
                    }
                }
            }
            return null;
        };

        return S_GameBattleCard;
    })();

    DcgProto.S_GameBattleCardInfo = (function() {

        /**
         * Properties of a S_GameBattleCardInfo.
         * @memberof DcgProto
         * @interface IS_GameBattleCardInfo
         * @property {number|null} [Type] S_GameBattleCardInfo Type
         * @property {number|null} [SubType] S_GameBattleCardInfo SubType
         * @property {number|null} [Data] S_GameBattleCardInfo Data
         */

        /**
         * Constructs a new S_GameBattleCardInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_GameBattleCardInfo.
         * @implements IS_GameBattleCardInfo
         * @constructor
         * @param {DcgProto.IS_GameBattleCardInfo=} [p] Properties to set
         */
        function S_GameBattleCardInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_GameBattleCardInfo Type.
         * @member {number} Type
         * @memberof DcgProto.S_GameBattleCardInfo
         * @instance
         */
        S_GameBattleCardInfo.prototype.Type = 0;

        /**
         * S_GameBattleCardInfo SubType.
         * @member {number} SubType
         * @memberof DcgProto.S_GameBattleCardInfo
         * @instance
         */
        S_GameBattleCardInfo.prototype.SubType = 0;

        /**
         * S_GameBattleCardInfo Data.
         * @member {number} Data
         * @memberof DcgProto.S_GameBattleCardInfo
         * @instance
         */
        S_GameBattleCardInfo.prototype.Data = 0;

        /**
         * Creates a new S_GameBattleCardInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_GameBattleCardInfo
         * @static
         * @param {DcgProto.IS_GameBattleCardInfo=} [properties] Properties to set
         * @returns {DcgProto.S_GameBattleCardInfo} S_GameBattleCardInfo instance
         */
        S_GameBattleCardInfo.create = function create(properties) {
            return new S_GameBattleCardInfo(properties);
        };

        /**
         * Encodes the specified S_GameBattleCardInfo message. Does not implicitly {@link DcgProto.S_GameBattleCardInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_GameBattleCardInfo
         * @static
         * @param {DcgProto.IS_GameBattleCardInfo} m S_GameBattleCardInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_GameBattleCardInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Type != null && Object.hasOwnProperty.call(m, "Type"))
                w.uint32(8).int32(m.Type);
            if (m.SubType != null && Object.hasOwnProperty.call(m, "SubType"))
                w.uint32(16).int32(m.SubType);
            if (m.Data != null && Object.hasOwnProperty.call(m, "Data"))
                w.uint32(24).int32(m.Data);
            return w;
        };

        /**
         * Decodes a S_GameBattleCardInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_GameBattleCardInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_GameBattleCardInfo} S_GameBattleCardInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_GameBattleCardInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_GameBattleCardInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Type = r.int32();
                    break;
                case 2:
                    m.SubType = r.int32();
                    break;
                case 3:
                    m.Data = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_GameBattleCardInfo message.
         * @function verify
         * @memberof DcgProto.S_GameBattleCardInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_GameBattleCardInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Type != null && m.hasOwnProperty("Type")) {
                if (!$util.isInteger(m.Type))
                    return "Type: integer expected";
            }
            if (m.SubType != null && m.hasOwnProperty("SubType")) {
                if (!$util.isInteger(m.SubType))
                    return "SubType: integer expected";
            }
            if (m.Data != null && m.hasOwnProperty("Data")) {
                if (!$util.isInteger(m.Data))
                    return "Data: integer expected";
            }
            return null;
        };

        return S_GameBattleCardInfo;
    })();

    DcgProto.S_BattleCardEffectInfo = (function() {

        /**
         * Properties of a S_BattleCardEffectInfo.
         * @memberof DcgProto
         * @interface IS_BattleCardEffectInfo
         * @property {Long|null} [CardIID] S_BattleCardEffectInfo CardIID
         * @property {number|null} [EffectId] S_BattleCardEffectInfo EffectId
         * @property {number|null} [param] S_BattleCardEffectInfo param
         */

        /**
         * Constructs a new S_BattleCardEffectInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_BattleCardEffectInfo.
         * @implements IS_BattleCardEffectInfo
         * @constructor
         * @param {DcgProto.IS_BattleCardEffectInfo=} [p] Properties to set
         */
        function S_BattleCardEffectInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_BattleCardEffectInfo CardIID.
         * @member {Long} CardIID
         * @memberof DcgProto.S_BattleCardEffectInfo
         * @instance
         */
        S_BattleCardEffectInfo.prototype.CardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_BattleCardEffectInfo EffectId.
         * @member {number} EffectId
         * @memberof DcgProto.S_BattleCardEffectInfo
         * @instance
         */
        S_BattleCardEffectInfo.prototype.EffectId = 0;

        /**
         * S_BattleCardEffectInfo param.
         * @member {number} param
         * @memberof DcgProto.S_BattleCardEffectInfo
         * @instance
         */
        S_BattleCardEffectInfo.prototype.param = 0;

        /**
         * Creates a new S_BattleCardEffectInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_BattleCardEffectInfo
         * @static
         * @param {DcgProto.IS_BattleCardEffectInfo=} [properties] Properties to set
         * @returns {DcgProto.S_BattleCardEffectInfo} S_BattleCardEffectInfo instance
         */
        S_BattleCardEffectInfo.create = function create(properties) {
            return new S_BattleCardEffectInfo(properties);
        };

        /**
         * Encodes the specified S_BattleCardEffectInfo message. Does not implicitly {@link DcgProto.S_BattleCardEffectInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_BattleCardEffectInfo
         * @static
         * @param {DcgProto.IS_BattleCardEffectInfo} m S_BattleCardEffectInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_BattleCardEffectInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardIID != null && Object.hasOwnProperty.call(m, "CardIID"))
                w.uint32(8).int64(m.CardIID);
            if (m.EffectId != null && Object.hasOwnProperty.call(m, "EffectId"))
                w.uint32(16).int32(m.EffectId);
            if (m.param != null && Object.hasOwnProperty.call(m, "param"))
                w.uint32(24).int32(m.param);
            return w;
        };

        /**
         * Decodes a S_BattleCardEffectInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_BattleCardEffectInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_BattleCardEffectInfo} S_BattleCardEffectInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_BattleCardEffectInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_BattleCardEffectInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CardIID = r.int64();
                    break;
                case 2:
                    m.EffectId = r.int32();
                    break;
                case 3:
                    m.param = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_BattleCardEffectInfo message.
         * @function verify
         * @memberof DcgProto.S_BattleCardEffectInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_BattleCardEffectInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardIID != null && m.hasOwnProperty("CardIID")) {
                if (!$util.isInteger(m.CardIID) && !(m.CardIID && $util.isInteger(m.CardIID.low) && $util.isInteger(m.CardIID.high)))
                    return "CardIID: integer|Long expected";
            }
            if (m.EffectId != null && m.hasOwnProperty("EffectId")) {
                if (!$util.isInteger(m.EffectId))
                    return "EffectId: integer expected";
            }
            if (m.param != null && m.hasOwnProperty("param")) {
                if (!$util.isInteger(m.param))
                    return "param: integer expected";
            }
            return null;
        };

        return S_BattleCardEffectInfo;
    })();

    DcgProto.S_GameHandCard = (function() {

        /**
         * Properties of a S_GameHandCard.
         * @memberof DcgProto
         * @interface IS_GameHandCard
         * @property {Long|null} [CardIID] S_GameHandCard CardIID
         * @property {number|null} [PlayCost] S_GameHandCard PlayCost
         * @property {Array.<number>|null} [CanActivateEffects] S_GameHandCard CanActivateEffects
         * @property {Array.<DcgProto.IS_GameCardSpecEvoEffect>|null} [CardSpecEvo] S_GameHandCard CardSpecEvo
         * @property {Array.<number>|null} [Buffs] S_GameHandCard Buffs
         */

        /**
         * Constructs a new S_GameHandCard.
         * @memberof DcgProto
         * @classdesc Represents a S_GameHandCard.
         * @implements IS_GameHandCard
         * @constructor
         * @param {DcgProto.IS_GameHandCard=} [p] Properties to set
         */
        function S_GameHandCard(p) {
            this.CanActivateEffects = [];
            this.CardSpecEvo = [];
            this.Buffs = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_GameHandCard CardIID.
         * @member {Long} CardIID
         * @memberof DcgProto.S_GameHandCard
         * @instance
         */
        S_GameHandCard.prototype.CardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_GameHandCard PlayCost.
         * @member {number} PlayCost
         * @memberof DcgProto.S_GameHandCard
         * @instance
         */
        S_GameHandCard.prototype.PlayCost = 0;

        /**
         * S_GameHandCard CanActivateEffects.
         * @member {Array.<number>} CanActivateEffects
         * @memberof DcgProto.S_GameHandCard
         * @instance
         */
        S_GameHandCard.prototype.CanActivateEffects = $util.emptyArray;

        /**
         * S_GameHandCard CardSpecEvo.
         * @member {Array.<DcgProto.IS_GameCardSpecEvoEffect>} CardSpecEvo
         * @memberof DcgProto.S_GameHandCard
         * @instance
         */
        S_GameHandCard.prototype.CardSpecEvo = $util.emptyArray;

        /**
         * S_GameHandCard Buffs.
         * @member {Array.<number>} Buffs
         * @memberof DcgProto.S_GameHandCard
         * @instance
         */
        S_GameHandCard.prototype.Buffs = $util.emptyArray;

        /**
         * Creates a new S_GameHandCard instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_GameHandCard
         * @static
         * @param {DcgProto.IS_GameHandCard=} [properties] Properties to set
         * @returns {DcgProto.S_GameHandCard} S_GameHandCard instance
         */
        S_GameHandCard.create = function create(properties) {
            return new S_GameHandCard(properties);
        };

        /**
         * Encodes the specified S_GameHandCard message. Does not implicitly {@link DcgProto.S_GameHandCard.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_GameHandCard
         * @static
         * @param {DcgProto.IS_GameHandCard} m S_GameHandCard message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_GameHandCard.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardIID != null && Object.hasOwnProperty.call(m, "CardIID"))
                w.uint32(8).int64(m.CardIID);
            if (m.PlayCost != null && Object.hasOwnProperty.call(m, "PlayCost"))
                w.uint32(16).int32(m.PlayCost);
            if (m.CanActivateEffects != null && m.CanActivateEffects.length) {
                w.uint32(26).fork();
                for (var i = 0; i < m.CanActivateEffects.length; ++i)
                    w.int32(m.CanActivateEffects[i]);
                w.ldelim();
            }
            if (m.CardSpecEvo != null && m.CardSpecEvo.length) {
                for (var i = 0; i < m.CardSpecEvo.length; ++i)
                    $root.DcgProto.S_GameCardSpecEvoEffect.encode(m.CardSpecEvo[i], w.uint32(34).fork()).ldelim();
            }
            if (m.Buffs != null && m.Buffs.length) {
                w.uint32(42).fork();
                for (var i = 0; i < m.Buffs.length; ++i)
                    w.int32(m.Buffs[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_GameHandCard message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_GameHandCard
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_GameHandCard} S_GameHandCard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_GameHandCard.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_GameHandCard();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CardIID = r.int64();
                    break;
                case 2:
                    m.PlayCost = r.int32();
                    break;
                case 3:
                    if (!(m.CanActivateEffects && m.CanActivateEffects.length))
                        m.CanActivateEffects = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.CanActivateEffects.push(r.int32());
                    } else
                        m.CanActivateEffects.push(r.int32());
                    break;
                case 4:
                    if (!(m.CardSpecEvo && m.CardSpecEvo.length))
                        m.CardSpecEvo = [];
                    m.CardSpecEvo.push($root.DcgProto.S_GameCardSpecEvoEffect.decode(r, r.uint32()));
                    break;
                case 5:
                    if (!(m.Buffs && m.Buffs.length))
                        m.Buffs = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Buffs.push(r.int32());
                    } else
                        m.Buffs.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_GameHandCard message.
         * @function verify
         * @memberof DcgProto.S_GameHandCard
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_GameHandCard.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardIID != null && m.hasOwnProperty("CardIID")) {
                if (!$util.isInteger(m.CardIID) && !(m.CardIID && $util.isInteger(m.CardIID.low) && $util.isInteger(m.CardIID.high)))
                    return "CardIID: integer|Long expected";
            }
            if (m.PlayCost != null && m.hasOwnProperty("PlayCost")) {
                if (!$util.isInteger(m.PlayCost))
                    return "PlayCost: integer expected";
            }
            if (m.CanActivateEffects != null && m.hasOwnProperty("CanActivateEffects")) {
                if (!Array.isArray(m.CanActivateEffects))
                    return "CanActivateEffects: array expected";
                for (var i = 0; i < m.CanActivateEffects.length; ++i) {
                    if (!$util.isInteger(m.CanActivateEffects[i]))
                        return "CanActivateEffects: integer[] expected";
                }
            }
            if (m.CardSpecEvo != null && m.hasOwnProperty("CardSpecEvo")) {
                if (!Array.isArray(m.CardSpecEvo))
                    return "CardSpecEvo: array expected";
                for (var i = 0; i < m.CardSpecEvo.length; ++i) {
                    {
                        var e = $root.DcgProto.S_GameCardSpecEvoEffect.verify(m.CardSpecEvo[i]);
                        if (e)
                            return "CardSpecEvo." + e;
                    }
                }
            }
            if (m.Buffs != null && m.hasOwnProperty("Buffs")) {
                if (!Array.isArray(m.Buffs))
                    return "Buffs: array expected";
                for (var i = 0; i < m.Buffs.length; ++i) {
                    if (!$util.isInteger(m.Buffs[i]))
                        return "Buffs: integer[] expected";
                }
            }
            return null;
        };

        return S_GameHandCard;
    })();

    DcgProto.S_GameCardSpecEvoEffect = (function() {

        /**
         * Properties of a S_GameCardSpecEvoEffect.
         * @memberof DcgProto
         * @interface IS_GameCardSpecEvoEffect
         * @property {Long|null} [CardIID] S_GameCardSpecEvoEffect CardIID
         * @property {number|null} [Cost] S_GameCardSpecEvoEffect Cost
         */

        /**
         * Constructs a new S_GameCardSpecEvoEffect.
         * @memberof DcgProto
         * @classdesc Represents a S_GameCardSpecEvoEffect.
         * @implements IS_GameCardSpecEvoEffect
         * @constructor
         * @param {DcgProto.IS_GameCardSpecEvoEffect=} [p] Properties to set
         */
        function S_GameCardSpecEvoEffect(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_GameCardSpecEvoEffect CardIID.
         * @member {Long} CardIID
         * @memberof DcgProto.S_GameCardSpecEvoEffect
         * @instance
         */
        S_GameCardSpecEvoEffect.prototype.CardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_GameCardSpecEvoEffect Cost.
         * @member {number} Cost
         * @memberof DcgProto.S_GameCardSpecEvoEffect
         * @instance
         */
        S_GameCardSpecEvoEffect.prototype.Cost = 0;

        /**
         * Creates a new S_GameCardSpecEvoEffect instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_GameCardSpecEvoEffect
         * @static
         * @param {DcgProto.IS_GameCardSpecEvoEffect=} [properties] Properties to set
         * @returns {DcgProto.S_GameCardSpecEvoEffect} S_GameCardSpecEvoEffect instance
         */
        S_GameCardSpecEvoEffect.create = function create(properties) {
            return new S_GameCardSpecEvoEffect(properties);
        };

        /**
         * Encodes the specified S_GameCardSpecEvoEffect message. Does not implicitly {@link DcgProto.S_GameCardSpecEvoEffect.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_GameCardSpecEvoEffect
         * @static
         * @param {DcgProto.IS_GameCardSpecEvoEffect} m S_GameCardSpecEvoEffect message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_GameCardSpecEvoEffect.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardIID != null && Object.hasOwnProperty.call(m, "CardIID"))
                w.uint32(8).int64(m.CardIID);
            if (m.Cost != null && Object.hasOwnProperty.call(m, "Cost"))
                w.uint32(16).int32(m.Cost);
            return w;
        };

        /**
         * Decodes a S_GameCardSpecEvoEffect message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_GameCardSpecEvoEffect
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_GameCardSpecEvoEffect} S_GameCardSpecEvoEffect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_GameCardSpecEvoEffect.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_GameCardSpecEvoEffect();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CardIID = r.int64();
                    break;
                case 2:
                    m.Cost = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_GameCardSpecEvoEffect message.
         * @function verify
         * @memberof DcgProto.S_GameCardSpecEvoEffect
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_GameCardSpecEvoEffect.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardIID != null && m.hasOwnProperty("CardIID")) {
                if (!$util.isInteger(m.CardIID) && !(m.CardIID && $util.isInteger(m.CardIID.low) && $util.isInteger(m.CardIID.high)))
                    return "CardIID: integer|Long expected";
            }
            if (m.Cost != null && m.hasOwnProperty("Cost")) {
                if (!$util.isInteger(m.Cost))
                    return "Cost: integer expected";
            }
            return null;
        };

        return S_GameCardSpecEvoEffect;
    })();

    DcgProto.S_EffectActivate = (function() {

        /**
         * Properties of a S_EffectActivate.
         * @memberof DcgProto
         * @interface IS_EffectActivate
         * @property {Long|null} [CardIID] S_EffectActivate CardIID
         * @property {number|null} [CfgId] S_EffectActivate CfgId
         * @property {number|null} [EffectCfgId] S_EffectActivate EffectCfgId
         * @property {boolean|null} [AskActivate] S_EffectActivate AskActivate
         * @property {number|null} [EffectIndex] S_EffectActivate EffectIndex
         * @property {boolean|null} [IsCon] S_EffectActivate IsCon
         * @property {boolean|null} [IsUseful] S_EffectActivate IsUseful
         */

        /**
         * Constructs a new S_EffectActivate.
         * @memberof DcgProto
         * @classdesc Represents a S_EffectActivate.
         * @implements IS_EffectActivate
         * @constructor
         * @param {DcgProto.IS_EffectActivate=} [p] Properties to set
         */
        function S_EffectActivate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_EffectActivate CardIID.
         * @member {Long} CardIID
         * @memberof DcgProto.S_EffectActivate
         * @instance
         */
        S_EffectActivate.prototype.CardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_EffectActivate CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_EffectActivate
         * @instance
         */
        S_EffectActivate.prototype.CfgId = 0;

        /**
         * S_EffectActivate EffectCfgId.
         * @member {number} EffectCfgId
         * @memberof DcgProto.S_EffectActivate
         * @instance
         */
        S_EffectActivate.prototype.EffectCfgId = 0;

        /**
         * S_EffectActivate AskActivate.
         * @member {boolean} AskActivate
         * @memberof DcgProto.S_EffectActivate
         * @instance
         */
        S_EffectActivate.prototype.AskActivate = false;

        /**
         * S_EffectActivate EffectIndex.
         * @member {number} EffectIndex
         * @memberof DcgProto.S_EffectActivate
         * @instance
         */
        S_EffectActivate.prototype.EffectIndex = 0;

        /**
         * S_EffectActivate IsCon.
         * @member {boolean} IsCon
         * @memberof DcgProto.S_EffectActivate
         * @instance
         */
        S_EffectActivate.prototype.IsCon = false;

        /**
         * S_EffectActivate IsUseful.
         * @member {boolean} IsUseful
         * @memberof DcgProto.S_EffectActivate
         * @instance
         */
        S_EffectActivate.prototype.IsUseful = false;

        /**
         * Creates a new S_EffectActivate instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_EffectActivate
         * @static
         * @param {DcgProto.IS_EffectActivate=} [properties] Properties to set
         * @returns {DcgProto.S_EffectActivate} S_EffectActivate instance
         */
        S_EffectActivate.create = function create(properties) {
            return new S_EffectActivate(properties);
        };

        /**
         * Encodes the specified S_EffectActivate message. Does not implicitly {@link DcgProto.S_EffectActivate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_EffectActivate
         * @static
         * @param {DcgProto.IS_EffectActivate} m S_EffectActivate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_EffectActivate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardIID != null && Object.hasOwnProperty.call(m, "CardIID"))
                w.uint32(8).int64(m.CardIID);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            if (m.EffectCfgId != null && Object.hasOwnProperty.call(m, "EffectCfgId"))
                w.uint32(24).int32(m.EffectCfgId);
            if (m.AskActivate != null && Object.hasOwnProperty.call(m, "AskActivate"))
                w.uint32(32).bool(m.AskActivate);
            if (m.EffectIndex != null && Object.hasOwnProperty.call(m, "EffectIndex"))
                w.uint32(40).int32(m.EffectIndex);
            if (m.IsCon != null && Object.hasOwnProperty.call(m, "IsCon"))
                w.uint32(48).bool(m.IsCon);
            if (m.IsUseful != null && Object.hasOwnProperty.call(m, "IsUseful"))
                w.uint32(56).bool(m.IsUseful);
            return w;
        };

        /**
         * Decodes a S_EffectActivate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_EffectActivate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_EffectActivate} S_EffectActivate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_EffectActivate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_EffectActivate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CardIID = r.int64();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                case 3:
                    m.EffectCfgId = r.int32();
                    break;
                case 4:
                    m.AskActivate = r.bool();
                    break;
                case 5:
                    m.EffectIndex = r.int32();
                    break;
                case 6:
                    m.IsCon = r.bool();
                    break;
                case 7:
                    m.IsUseful = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_EffectActivate message.
         * @function verify
         * @memberof DcgProto.S_EffectActivate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_EffectActivate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardIID != null && m.hasOwnProperty("CardIID")) {
                if (!$util.isInteger(m.CardIID) && !(m.CardIID && $util.isInteger(m.CardIID.low) && $util.isInteger(m.CardIID.high)))
                    return "CardIID: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.EffectCfgId != null && m.hasOwnProperty("EffectCfgId")) {
                if (!$util.isInteger(m.EffectCfgId))
                    return "EffectCfgId: integer expected";
            }
            if (m.AskActivate != null && m.hasOwnProperty("AskActivate")) {
                if (typeof m.AskActivate !== "boolean")
                    return "AskActivate: boolean expected";
            }
            if (m.EffectIndex != null && m.hasOwnProperty("EffectIndex")) {
                if (!$util.isInteger(m.EffectIndex))
                    return "EffectIndex: integer expected";
            }
            if (m.IsCon != null && m.hasOwnProperty("IsCon")) {
                if (typeof m.IsCon !== "boolean")
                    return "IsCon: boolean expected";
            }
            if (m.IsUseful != null && m.hasOwnProperty("IsUseful")) {
                if (typeof m.IsUseful !== "boolean")
                    return "IsUseful: boolean expected";
            }
            return null;
        };

        return S_EffectActivate;
    })();

    DcgProto.S_PlayerBattleDetail = (function() {

        /**
         * Properties of a S_PlayerBattleDetail.
         * @memberof DcgProto
         * @interface IS_PlayerBattleDetail
         * @property {Long|null} [PlayerIID] S_PlayerBattleDetail PlayerIID
         * @property {number|null} [AreaDefenseCount] S_PlayerBattleDetail AreaDefenseCount
         * @property {number|null} [AreaDigitamaCount] S_PlayerBattleDetail AreaDigitamaCount
         * @property {number|null} [AreaDeckCount] S_PlayerBattleDetail AreaDeckCount
         * @property {number|null} [PlayerRemainingTime] S_PlayerBattleDetail PlayerRemainingTime
         */

        /**
         * Constructs a new S_PlayerBattleDetail.
         * @memberof DcgProto
         * @classdesc Represents a S_PlayerBattleDetail.
         * @implements IS_PlayerBattleDetail
         * @constructor
         * @param {DcgProto.IS_PlayerBattleDetail=} [p] Properties to set
         */
        function S_PlayerBattleDetail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PlayerBattleDetail PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_PlayerBattleDetail
         * @instance
         */
        S_PlayerBattleDetail.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PlayerBattleDetail AreaDefenseCount.
         * @member {number} AreaDefenseCount
         * @memberof DcgProto.S_PlayerBattleDetail
         * @instance
         */
        S_PlayerBattleDetail.prototype.AreaDefenseCount = 0;

        /**
         * S_PlayerBattleDetail AreaDigitamaCount.
         * @member {number} AreaDigitamaCount
         * @memberof DcgProto.S_PlayerBattleDetail
         * @instance
         */
        S_PlayerBattleDetail.prototype.AreaDigitamaCount = 0;

        /**
         * S_PlayerBattleDetail AreaDeckCount.
         * @member {number} AreaDeckCount
         * @memberof DcgProto.S_PlayerBattleDetail
         * @instance
         */
        S_PlayerBattleDetail.prototype.AreaDeckCount = 0;

        /**
         * S_PlayerBattleDetail PlayerRemainingTime.
         * @member {number} PlayerRemainingTime
         * @memberof DcgProto.S_PlayerBattleDetail
         * @instance
         */
        S_PlayerBattleDetail.prototype.PlayerRemainingTime = 0;

        /**
         * Creates a new S_PlayerBattleDetail instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PlayerBattleDetail
         * @static
         * @param {DcgProto.IS_PlayerBattleDetail=} [properties] Properties to set
         * @returns {DcgProto.S_PlayerBattleDetail} S_PlayerBattleDetail instance
         */
        S_PlayerBattleDetail.create = function create(properties) {
            return new S_PlayerBattleDetail(properties);
        };

        /**
         * Encodes the specified S_PlayerBattleDetail message. Does not implicitly {@link DcgProto.S_PlayerBattleDetail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PlayerBattleDetail
         * @static
         * @param {DcgProto.IS_PlayerBattleDetail} m S_PlayerBattleDetail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PlayerBattleDetail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.AreaDefenseCount != null && Object.hasOwnProperty.call(m, "AreaDefenseCount"))
                w.uint32(16).int32(m.AreaDefenseCount);
            if (m.AreaDigitamaCount != null && Object.hasOwnProperty.call(m, "AreaDigitamaCount"))
                w.uint32(24).int32(m.AreaDigitamaCount);
            if (m.AreaDeckCount != null && Object.hasOwnProperty.call(m, "AreaDeckCount"))
                w.uint32(32).int32(m.AreaDeckCount);
            if (m.PlayerRemainingTime != null && Object.hasOwnProperty.call(m, "PlayerRemainingTime"))
                w.uint32(40).int32(m.PlayerRemainingTime);
            return w;
        };

        /**
         * Decodes a S_PlayerBattleDetail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PlayerBattleDetail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PlayerBattleDetail} S_PlayerBattleDetail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PlayerBattleDetail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PlayerBattleDetail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.AreaDefenseCount = r.int32();
                    break;
                case 3:
                    m.AreaDigitamaCount = r.int32();
                    break;
                case 4:
                    m.AreaDeckCount = r.int32();
                    break;
                case 5:
                    m.PlayerRemainingTime = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PlayerBattleDetail message.
         * @function verify
         * @memberof DcgProto.S_PlayerBattleDetail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PlayerBattleDetail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.AreaDefenseCount != null && m.hasOwnProperty("AreaDefenseCount")) {
                if (!$util.isInteger(m.AreaDefenseCount))
                    return "AreaDefenseCount: integer expected";
            }
            if (m.AreaDigitamaCount != null && m.hasOwnProperty("AreaDigitamaCount")) {
                if (!$util.isInteger(m.AreaDigitamaCount))
                    return "AreaDigitamaCount: integer expected";
            }
            if (m.AreaDeckCount != null && m.hasOwnProperty("AreaDeckCount")) {
                if (!$util.isInteger(m.AreaDeckCount))
                    return "AreaDeckCount: integer expected";
            }
            if (m.PlayerRemainingTime != null && m.hasOwnProperty("PlayerRemainingTime")) {
                if (!$util.isInteger(m.PlayerRemainingTime))
                    return "PlayerRemainingTime: integer expected";
            }
            return null;
        };

        return S_PlayerBattleDetail;
    })();

    DcgProto.S_SetBattlePhase = (function() {

        /**
         * Properties of a S_SetBattlePhase.
         * @memberof DcgProto
         * @interface IS_SetBattlePhase
         * @property {Long|null} [PlayerIID] S_SetBattlePhase PlayerIID
         * @property {number|null} [CurRound] S_SetBattlePhase CurRound
         * @property {DcgProto.E_BATTLE_PHASE|null} [BattlePhase] S_SetBattlePhase BattlePhase
         */

        /**
         * Constructs a new S_SetBattlePhase.
         * @memberof DcgProto
         * @classdesc Represents a S_SetBattlePhase.
         * @implements IS_SetBattlePhase
         * @constructor
         * @param {DcgProto.IS_SetBattlePhase=} [p] Properties to set
         */
        function S_SetBattlePhase(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_SetBattlePhase PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_SetBattlePhase
         * @instance
         */
        S_SetBattlePhase.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_SetBattlePhase CurRound.
         * @member {number} CurRound
         * @memberof DcgProto.S_SetBattlePhase
         * @instance
         */
        S_SetBattlePhase.prototype.CurRound = 0;

        /**
         * S_SetBattlePhase BattlePhase.
         * @member {DcgProto.E_BATTLE_PHASE} BattlePhase
         * @memberof DcgProto.S_SetBattlePhase
         * @instance
         */
        S_SetBattlePhase.prototype.BattlePhase = 0;

        /**
         * Creates a new S_SetBattlePhase instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_SetBattlePhase
         * @static
         * @param {DcgProto.IS_SetBattlePhase=} [properties] Properties to set
         * @returns {DcgProto.S_SetBattlePhase} S_SetBattlePhase instance
         */
        S_SetBattlePhase.create = function create(properties) {
            return new S_SetBattlePhase(properties);
        };

        /**
         * Encodes the specified S_SetBattlePhase message. Does not implicitly {@link DcgProto.S_SetBattlePhase.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_SetBattlePhase
         * @static
         * @param {DcgProto.IS_SetBattlePhase} m S_SetBattlePhase message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_SetBattlePhase.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.CurRound != null && Object.hasOwnProperty.call(m, "CurRound"))
                w.uint32(16).int32(m.CurRound);
            if (m.BattlePhase != null && Object.hasOwnProperty.call(m, "BattlePhase"))
                w.uint32(24).int32(m.BattlePhase);
            return w;
        };

        /**
         * Decodes a S_SetBattlePhase message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_SetBattlePhase
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_SetBattlePhase} S_SetBattlePhase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_SetBattlePhase.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_SetBattlePhase();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.CurRound = r.int32();
                    break;
                case 3:
                    m.BattlePhase = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_SetBattlePhase message.
         * @function verify
         * @memberof DcgProto.S_SetBattlePhase
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_SetBattlePhase.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.CurRound != null && m.hasOwnProperty("CurRound")) {
                if (!$util.isInteger(m.CurRound))
                    return "CurRound: integer expected";
            }
            if (m.BattlePhase != null && m.hasOwnProperty("BattlePhase")) {
                switch (m.BattlePhase) {
                default:
                    return "BattlePhase: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                    break;
                }
            }
            return null;
        };

        return S_SetBattlePhase;
    })();

    DcgProto.S_DigimonSetCost = (function() {

        /**
         * Properties of a S_DigimonSetCost.
         * @memberof DcgProto
         * @interface IS_DigimonSetCost
         * @property {number|null} [Cost] S_DigimonSetCost Cost
         */

        /**
         * Constructs a new S_DigimonSetCost.
         * @memberof DcgProto
         * @classdesc Represents a S_DigimonSetCost.
         * @implements IS_DigimonSetCost
         * @constructor
         * @param {DcgProto.IS_DigimonSetCost=} [p] Properties to set
         */
        function S_DigimonSetCost(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_DigimonSetCost Cost.
         * @member {number} Cost
         * @memberof DcgProto.S_DigimonSetCost
         * @instance
         */
        S_DigimonSetCost.prototype.Cost = 0;

        /**
         * Creates a new S_DigimonSetCost instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_DigimonSetCost
         * @static
         * @param {DcgProto.IS_DigimonSetCost=} [properties] Properties to set
         * @returns {DcgProto.S_DigimonSetCost} S_DigimonSetCost instance
         */
        S_DigimonSetCost.create = function create(properties) {
            return new S_DigimonSetCost(properties);
        };

        /**
         * Encodes the specified S_DigimonSetCost message. Does not implicitly {@link DcgProto.S_DigimonSetCost.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_DigimonSetCost
         * @static
         * @param {DcgProto.IS_DigimonSetCost} m S_DigimonSetCost message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_DigimonSetCost.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Cost != null && Object.hasOwnProperty.call(m, "Cost"))
                w.uint32(8).int32(m.Cost);
            return w;
        };

        /**
         * Decodes a S_DigimonSetCost message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_DigimonSetCost
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_DigimonSetCost} S_DigimonSetCost
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_DigimonSetCost.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_DigimonSetCost();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Cost = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_DigimonSetCost message.
         * @function verify
         * @memberof DcgProto.S_DigimonSetCost
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_DigimonSetCost.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Cost != null && m.hasOwnProperty("Cost")) {
                if (!$util.isInteger(m.Cost))
                    return "Cost: integer expected";
            }
            return null;
        };

        return S_DigimonSetCost;
    })();

    DcgProto.S_GameOver = (function() {

        /**
         * Properties of a S_GameOver.
         * @memberof DcgProto
         * @interface IS_GameOver
         * @property {Long|null} [PlayerIID] S_GameOver PlayerIID
         * @property {number|null} [Reason] S_GameOver Reason
         * @property {DcgProto.IS_RoomPanel|null} [RoomPanel] S_GameOver RoomPanel
         */

        /**
         * Constructs a new S_GameOver.
         * @memberof DcgProto
         * @classdesc Represents a S_GameOver.
         * @implements IS_GameOver
         * @constructor
         * @param {DcgProto.IS_GameOver=} [p] Properties to set
         */
        function S_GameOver(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_GameOver PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_GameOver
         * @instance
         */
        S_GameOver.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_GameOver Reason.
         * @member {number} Reason
         * @memberof DcgProto.S_GameOver
         * @instance
         */
        S_GameOver.prototype.Reason = 0;

        /**
         * S_GameOver RoomPanel.
         * @member {DcgProto.IS_RoomPanel|null|undefined} RoomPanel
         * @memberof DcgProto.S_GameOver
         * @instance
         */
        S_GameOver.prototype.RoomPanel = null;

        /**
         * Creates a new S_GameOver instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_GameOver
         * @static
         * @param {DcgProto.IS_GameOver=} [properties] Properties to set
         * @returns {DcgProto.S_GameOver} S_GameOver instance
         */
        S_GameOver.create = function create(properties) {
            return new S_GameOver(properties);
        };

        /**
         * Encodes the specified S_GameOver message. Does not implicitly {@link DcgProto.S_GameOver.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_GameOver
         * @static
         * @param {DcgProto.IS_GameOver} m S_GameOver message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_GameOver.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.Reason != null && Object.hasOwnProperty.call(m, "Reason"))
                w.uint32(16).int32(m.Reason);
            if (m.RoomPanel != null && Object.hasOwnProperty.call(m, "RoomPanel"))
                $root.DcgProto.S_RoomPanel.encode(m.RoomPanel, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_GameOver message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_GameOver
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_GameOver} S_GameOver
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_GameOver.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_GameOver();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.Reason = r.int32();
                    break;
                case 3:
                    m.RoomPanel = $root.DcgProto.S_RoomPanel.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_GameOver message.
         * @function verify
         * @memberof DcgProto.S_GameOver
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_GameOver.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.Reason != null && m.hasOwnProperty("Reason")) {
                if (!$util.isInteger(m.Reason))
                    return "Reason: integer expected";
            }
            if (m.RoomPanel != null && m.hasOwnProperty("RoomPanel")) {
                {
                    var e = $root.DcgProto.S_RoomPanel.verify(m.RoomPanel);
                    if (e)
                        return "RoomPanel." + e;
                }
            }
            return null;
        };

        return S_GameOver;
    })();

    DcgProto.S_MoveCardMessage = (function() {

        /**
         * Properties of a S_MoveCardMessage.
         * @memberof DcgProto
         * @interface IS_MoveCardMessage
         * @property {Long|null} [PlayerIID] S_MoveCardMessage PlayerIID
         * @property {DcgProto.E_AREA_TYPE|null} [From] S_MoveCardMessage From
         * @property {DcgProto.E_AREA_TYPE|null} [To] S_MoveCardMessage To
         * @property {DcgProto.IS_OtherCard|null} [CardData] S_MoveCardMessage CardData
         * @property {DcgProto.IS_OtherCardDetail|null} [CardDetail] S_MoveCardMessage CardDetail
         * @property {number|null} [Reason] S_MoveCardMessage Reason
         * @property {number|null} [CardIndex] S_MoveCardMessage CardIndex
         */

        /**
         * Constructs a new S_MoveCardMessage.
         * @memberof DcgProto
         * @classdesc Represents a S_MoveCardMessage.
         * @implements IS_MoveCardMessage
         * @constructor
         * @param {DcgProto.IS_MoveCardMessage=} [p] Properties to set
         */
        function S_MoveCardMessage(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_MoveCardMessage PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_MoveCardMessage
         * @instance
         */
        S_MoveCardMessage.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_MoveCardMessage From.
         * @member {DcgProto.E_AREA_TYPE} From
         * @memberof DcgProto.S_MoveCardMessage
         * @instance
         */
        S_MoveCardMessage.prototype.From = 0;

        /**
         * S_MoveCardMessage To.
         * @member {DcgProto.E_AREA_TYPE} To
         * @memberof DcgProto.S_MoveCardMessage
         * @instance
         */
        S_MoveCardMessage.prototype.To = 0;

        /**
         * S_MoveCardMessage CardData.
         * @member {DcgProto.IS_OtherCard|null|undefined} CardData
         * @memberof DcgProto.S_MoveCardMessage
         * @instance
         */
        S_MoveCardMessage.prototype.CardData = null;

        /**
         * S_MoveCardMessage CardDetail.
         * @member {DcgProto.IS_OtherCardDetail|null|undefined} CardDetail
         * @memberof DcgProto.S_MoveCardMessage
         * @instance
         */
        S_MoveCardMessage.prototype.CardDetail = null;

        /**
         * S_MoveCardMessage Reason.
         * @member {number} Reason
         * @memberof DcgProto.S_MoveCardMessage
         * @instance
         */
        S_MoveCardMessage.prototype.Reason = 0;

        /**
         * S_MoveCardMessage CardIndex.
         * @member {number} CardIndex
         * @memberof DcgProto.S_MoveCardMessage
         * @instance
         */
        S_MoveCardMessage.prototype.CardIndex = 0;

        /**
         * Creates a new S_MoveCardMessage instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_MoveCardMessage
         * @static
         * @param {DcgProto.IS_MoveCardMessage=} [properties] Properties to set
         * @returns {DcgProto.S_MoveCardMessage} S_MoveCardMessage instance
         */
        S_MoveCardMessage.create = function create(properties) {
            return new S_MoveCardMessage(properties);
        };

        /**
         * Encodes the specified S_MoveCardMessage message. Does not implicitly {@link DcgProto.S_MoveCardMessage.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_MoveCardMessage
         * @static
         * @param {DcgProto.IS_MoveCardMessage} m S_MoveCardMessage message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_MoveCardMessage.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.From != null && Object.hasOwnProperty.call(m, "From"))
                w.uint32(16).int32(m.From);
            if (m.To != null && Object.hasOwnProperty.call(m, "To"))
                w.uint32(24).int32(m.To);
            if (m.CardData != null && Object.hasOwnProperty.call(m, "CardData"))
                $root.DcgProto.S_OtherCard.encode(m.CardData, w.uint32(34).fork()).ldelim();
            if (m.CardDetail != null && Object.hasOwnProperty.call(m, "CardDetail"))
                $root.DcgProto.S_OtherCardDetail.encode(m.CardDetail, w.uint32(42).fork()).ldelim();
            if (m.Reason != null && Object.hasOwnProperty.call(m, "Reason"))
                w.uint32(48).int32(m.Reason);
            if (m.CardIndex != null && Object.hasOwnProperty.call(m, "CardIndex"))
                w.uint32(56).int32(m.CardIndex);
            return w;
        };

        /**
         * Decodes a S_MoveCardMessage message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_MoveCardMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_MoveCardMessage} S_MoveCardMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_MoveCardMessage.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_MoveCardMessage();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.From = r.int32();
                    break;
                case 3:
                    m.To = r.int32();
                    break;
                case 4:
                    m.CardData = $root.DcgProto.S_OtherCard.decode(r, r.uint32());
                    break;
                case 5:
                    m.CardDetail = $root.DcgProto.S_OtherCardDetail.decode(r, r.uint32());
                    break;
                case 6:
                    m.Reason = r.int32();
                    break;
                case 7:
                    m.CardIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_MoveCardMessage message.
         * @function verify
         * @memberof DcgProto.S_MoveCardMessage
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_MoveCardMessage.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.From != null && m.hasOwnProperty("From")) {
                switch (m.From) {
                default:
                    return "From: enum value expected";
                case 0:
                case 1:
                case 2:
                case 4:
                case 8:
                case 16:
                case 32:
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                    break;
                }
            }
            if (m.To != null && m.hasOwnProperty("To")) {
                switch (m.To) {
                default:
                    return "To: enum value expected";
                case 0:
                case 1:
                case 2:
                case 4:
                case 8:
                case 16:
                case 32:
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                    break;
                }
            }
            if (m.CardData != null && m.hasOwnProperty("CardData")) {
                {
                    var e = $root.DcgProto.S_OtherCard.verify(m.CardData);
                    if (e)
                        return "CardData." + e;
                }
            }
            if (m.CardDetail != null && m.hasOwnProperty("CardDetail")) {
                {
                    var e = $root.DcgProto.S_OtherCardDetail.verify(m.CardDetail);
                    if (e)
                        return "CardDetail." + e;
                }
            }
            if (m.Reason != null && m.hasOwnProperty("Reason")) {
                if (!$util.isInteger(m.Reason))
                    return "Reason: integer expected";
            }
            if (m.CardIndex != null && m.hasOwnProperty("CardIndex")) {
                if (!$util.isInteger(m.CardIndex))
                    return "CardIndex: integer expected";
            }
            return null;
        };

        return S_MoveCardMessage;
    })();

    DcgProto.S_EvoDigimon = (function() {

        /**
         * Properties of a S_EvoDigimon.
         * @memberof DcgProto
         * @interface IS_EvoDigimon
         * @property {Long|null} [PlayerIID] S_EvoDigimon PlayerIID
         * @property {DcgProto.IS_OtherCard|null} [EvoCardData] S_EvoDigimon EvoCardData
         * @property {DcgProto.IS_OtherCardDetail|null} [EvoCardDetail] S_EvoDigimon EvoCardDetail
         * @property {DcgProto.IS_OtherCard|null} [OriginCardData] S_EvoDigimon OriginCardData
         * @property {DcgProto.IS_OtherCardDetail|null} [OriginCardDetail] S_EvoDigimon OriginCardDetail
         * @property {DcgProto.IS_OtherCard|null} [BottomCardData] S_EvoDigimon BottomCardData
         * @property {DcgProto.IS_OtherCardDetail|null} [BottomCardDetail] S_EvoDigimon BottomCardDetail
         * @property {DcgProto.E_EVOLUTION_TYPE|null} [EvolutionType] S_EvoDigimon EvolutionType
         */

        /**
         * Constructs a new S_EvoDigimon.
         * @memberof DcgProto
         * @classdesc Represents a S_EvoDigimon.
         * @implements IS_EvoDigimon
         * @constructor
         * @param {DcgProto.IS_EvoDigimon=} [p] Properties to set
         */
        function S_EvoDigimon(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_EvoDigimon PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_EvoDigimon
         * @instance
         */
        S_EvoDigimon.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_EvoDigimon EvoCardData.
         * @member {DcgProto.IS_OtherCard|null|undefined} EvoCardData
         * @memberof DcgProto.S_EvoDigimon
         * @instance
         */
        S_EvoDigimon.prototype.EvoCardData = null;

        /**
         * S_EvoDigimon EvoCardDetail.
         * @member {DcgProto.IS_OtherCardDetail|null|undefined} EvoCardDetail
         * @memberof DcgProto.S_EvoDigimon
         * @instance
         */
        S_EvoDigimon.prototype.EvoCardDetail = null;

        /**
         * S_EvoDigimon OriginCardData.
         * @member {DcgProto.IS_OtherCard|null|undefined} OriginCardData
         * @memberof DcgProto.S_EvoDigimon
         * @instance
         */
        S_EvoDigimon.prototype.OriginCardData = null;

        /**
         * S_EvoDigimon OriginCardDetail.
         * @member {DcgProto.IS_OtherCardDetail|null|undefined} OriginCardDetail
         * @memberof DcgProto.S_EvoDigimon
         * @instance
         */
        S_EvoDigimon.prototype.OriginCardDetail = null;

        /**
         * S_EvoDigimon BottomCardData.
         * @member {DcgProto.IS_OtherCard|null|undefined} BottomCardData
         * @memberof DcgProto.S_EvoDigimon
         * @instance
         */
        S_EvoDigimon.prototype.BottomCardData = null;

        /**
         * S_EvoDigimon BottomCardDetail.
         * @member {DcgProto.IS_OtherCardDetail|null|undefined} BottomCardDetail
         * @memberof DcgProto.S_EvoDigimon
         * @instance
         */
        S_EvoDigimon.prototype.BottomCardDetail = null;

        /**
         * S_EvoDigimon EvolutionType.
         * @member {DcgProto.E_EVOLUTION_TYPE} EvolutionType
         * @memberof DcgProto.S_EvoDigimon
         * @instance
         */
        S_EvoDigimon.prototype.EvolutionType = 0;

        /**
         * Creates a new S_EvoDigimon instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_EvoDigimon
         * @static
         * @param {DcgProto.IS_EvoDigimon=} [properties] Properties to set
         * @returns {DcgProto.S_EvoDigimon} S_EvoDigimon instance
         */
        S_EvoDigimon.create = function create(properties) {
            return new S_EvoDigimon(properties);
        };

        /**
         * Encodes the specified S_EvoDigimon message. Does not implicitly {@link DcgProto.S_EvoDigimon.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_EvoDigimon
         * @static
         * @param {DcgProto.IS_EvoDigimon} m S_EvoDigimon message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_EvoDigimon.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.EvoCardData != null && Object.hasOwnProperty.call(m, "EvoCardData"))
                $root.DcgProto.S_OtherCard.encode(m.EvoCardData, w.uint32(18).fork()).ldelim();
            if (m.EvoCardDetail != null && Object.hasOwnProperty.call(m, "EvoCardDetail"))
                $root.DcgProto.S_OtherCardDetail.encode(m.EvoCardDetail, w.uint32(26).fork()).ldelim();
            if (m.OriginCardData != null && Object.hasOwnProperty.call(m, "OriginCardData"))
                $root.DcgProto.S_OtherCard.encode(m.OriginCardData, w.uint32(34).fork()).ldelim();
            if (m.OriginCardDetail != null && Object.hasOwnProperty.call(m, "OriginCardDetail"))
                $root.DcgProto.S_OtherCardDetail.encode(m.OriginCardDetail, w.uint32(42).fork()).ldelim();
            if (m.BottomCardData != null && Object.hasOwnProperty.call(m, "BottomCardData"))
                $root.DcgProto.S_OtherCard.encode(m.BottomCardData, w.uint32(50).fork()).ldelim();
            if (m.BottomCardDetail != null && Object.hasOwnProperty.call(m, "BottomCardDetail"))
                $root.DcgProto.S_OtherCardDetail.encode(m.BottomCardDetail, w.uint32(58).fork()).ldelim();
            if (m.EvolutionType != null && Object.hasOwnProperty.call(m, "EvolutionType"))
                w.uint32(64).int32(m.EvolutionType);
            return w;
        };

        /**
         * Decodes a S_EvoDigimon message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_EvoDigimon
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_EvoDigimon} S_EvoDigimon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_EvoDigimon.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_EvoDigimon();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.EvoCardData = $root.DcgProto.S_OtherCard.decode(r, r.uint32());
                    break;
                case 3:
                    m.EvoCardDetail = $root.DcgProto.S_OtherCardDetail.decode(r, r.uint32());
                    break;
                case 4:
                    m.OriginCardData = $root.DcgProto.S_OtherCard.decode(r, r.uint32());
                    break;
                case 5:
                    m.OriginCardDetail = $root.DcgProto.S_OtherCardDetail.decode(r, r.uint32());
                    break;
                case 6:
                    m.BottomCardData = $root.DcgProto.S_OtherCard.decode(r, r.uint32());
                    break;
                case 7:
                    m.BottomCardDetail = $root.DcgProto.S_OtherCardDetail.decode(r, r.uint32());
                    break;
                case 8:
                    m.EvolutionType = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_EvoDigimon message.
         * @function verify
         * @memberof DcgProto.S_EvoDigimon
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_EvoDigimon.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.EvoCardData != null && m.hasOwnProperty("EvoCardData")) {
                {
                    var e = $root.DcgProto.S_OtherCard.verify(m.EvoCardData);
                    if (e)
                        return "EvoCardData." + e;
                }
            }
            if (m.EvoCardDetail != null && m.hasOwnProperty("EvoCardDetail")) {
                {
                    var e = $root.DcgProto.S_OtherCardDetail.verify(m.EvoCardDetail);
                    if (e)
                        return "EvoCardDetail." + e;
                }
            }
            if (m.OriginCardData != null && m.hasOwnProperty("OriginCardData")) {
                {
                    var e = $root.DcgProto.S_OtherCard.verify(m.OriginCardData);
                    if (e)
                        return "OriginCardData." + e;
                }
            }
            if (m.OriginCardDetail != null && m.hasOwnProperty("OriginCardDetail")) {
                {
                    var e = $root.DcgProto.S_OtherCardDetail.verify(m.OriginCardDetail);
                    if (e)
                        return "OriginCardDetail." + e;
                }
            }
            if (m.BottomCardData != null && m.hasOwnProperty("BottomCardData")) {
                {
                    var e = $root.DcgProto.S_OtherCard.verify(m.BottomCardData);
                    if (e)
                        return "BottomCardData." + e;
                }
            }
            if (m.BottomCardDetail != null && m.hasOwnProperty("BottomCardDetail")) {
                {
                    var e = $root.DcgProto.S_OtherCardDetail.verify(m.BottomCardDetail);
                    if (e)
                        return "BottomCardDetail." + e;
                }
            }
            if (m.EvolutionType != null && m.hasOwnProperty("EvolutionType")) {
                switch (m.EvolutionType) {
                default:
                    return "EvolutionType: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            return null;
        };

        return S_EvoDigimon;
    })();

    DcgProto.S_UpdateCardDetails = (function() {

        /**
         * Properties of a S_UpdateCardDetails.
         * @memberof DcgProto
         * @interface IS_UpdateCardDetails
         * @property {Long|null} [PlayerIID] S_UpdateCardDetails PlayerIID
         * @property {DcgProto.IS_OtherCard|null} [Card] S_UpdateCardDetails Card
         * @property {DcgProto.IS_OtherCardDetail|null} [Detail] S_UpdateCardDetails Detail
         */

        /**
         * Constructs a new S_UpdateCardDetails.
         * @memberof DcgProto
         * @classdesc Represents a S_UpdateCardDetails.
         * @implements IS_UpdateCardDetails
         * @constructor
         * @param {DcgProto.IS_UpdateCardDetails=} [p] Properties to set
         */
        function S_UpdateCardDetails(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_UpdateCardDetails PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_UpdateCardDetails
         * @instance
         */
        S_UpdateCardDetails.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_UpdateCardDetails Card.
         * @member {DcgProto.IS_OtherCard|null|undefined} Card
         * @memberof DcgProto.S_UpdateCardDetails
         * @instance
         */
        S_UpdateCardDetails.prototype.Card = null;

        /**
         * S_UpdateCardDetails Detail.
         * @member {DcgProto.IS_OtherCardDetail|null|undefined} Detail
         * @memberof DcgProto.S_UpdateCardDetails
         * @instance
         */
        S_UpdateCardDetails.prototype.Detail = null;

        /**
         * Creates a new S_UpdateCardDetails instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_UpdateCardDetails
         * @static
         * @param {DcgProto.IS_UpdateCardDetails=} [properties] Properties to set
         * @returns {DcgProto.S_UpdateCardDetails} S_UpdateCardDetails instance
         */
        S_UpdateCardDetails.create = function create(properties) {
            return new S_UpdateCardDetails(properties);
        };

        /**
         * Encodes the specified S_UpdateCardDetails message. Does not implicitly {@link DcgProto.S_UpdateCardDetails.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_UpdateCardDetails
         * @static
         * @param {DcgProto.IS_UpdateCardDetails} m S_UpdateCardDetails message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_UpdateCardDetails.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.Card != null && Object.hasOwnProperty.call(m, "Card"))
                $root.DcgProto.S_OtherCard.encode(m.Card, w.uint32(18).fork()).ldelim();
            if (m.Detail != null && Object.hasOwnProperty.call(m, "Detail"))
                $root.DcgProto.S_OtherCardDetail.encode(m.Detail, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_UpdateCardDetails message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_UpdateCardDetails
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_UpdateCardDetails} S_UpdateCardDetails
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_UpdateCardDetails.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_UpdateCardDetails();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.Card = $root.DcgProto.S_OtherCard.decode(r, r.uint32());
                    break;
                case 3:
                    m.Detail = $root.DcgProto.S_OtherCardDetail.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_UpdateCardDetails message.
         * @function verify
         * @memberof DcgProto.S_UpdateCardDetails
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_UpdateCardDetails.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.Card != null && m.hasOwnProperty("Card")) {
                {
                    var e = $root.DcgProto.S_OtherCard.verify(m.Card);
                    if (e)
                        return "Card." + e;
                }
            }
            if (m.Detail != null && m.hasOwnProperty("Detail")) {
                {
                    var e = $root.DcgProto.S_OtherCardDetail.verify(m.Detail);
                    if (e)
                        return "Detail." + e;
                }
            }
            return null;
        };

        return S_UpdateCardDetails;
    })();

    DcgProto.S_PlayerChoose = (function() {

        /**
         * Properties of a S_PlayerChoose.
         * @memberof DcgProto
         * @interface IS_PlayerChoose
         * @property {Long|null} [PlayerIID] S_PlayerChoose PlayerIID
         * @property {DcgProto.IS_OtherCard|null} [EffectCard] S_PlayerChoose EffectCard
         * @property {DcgProto.E_COMPARE|null} [Compare] S_PlayerChoose Compare
         * @property {number|null} [ChooseNums] S_PlayerChoose ChooseNums
         * @property {Array.<DcgProto.IS_OtherCard>|null} [CheckCards] S_PlayerChoose CheckCards
         * @property {boolean|null} [CanCancel] S_PlayerChoose CanCancel
         * @property {DcgProto.IS_EffectOriginInfo|null} [EffectOriginInfo] S_PlayerChoose EffectOriginInfo
         * @property {number|null} [RequestId] S_PlayerChoose RequestId
         * @property {number|null} [CompareExtend] S_PlayerChoose CompareExtend
         */

        /**
         * Constructs a new S_PlayerChoose.
         * @memberof DcgProto
         * @classdesc Represents a S_PlayerChoose.
         * @implements IS_PlayerChoose
         * @constructor
         * @param {DcgProto.IS_PlayerChoose=} [p] Properties to set
         */
        function S_PlayerChoose(p) {
            this.CheckCards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PlayerChoose PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_PlayerChoose
         * @instance
         */
        S_PlayerChoose.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PlayerChoose EffectCard.
         * @member {DcgProto.IS_OtherCard|null|undefined} EffectCard
         * @memberof DcgProto.S_PlayerChoose
         * @instance
         */
        S_PlayerChoose.prototype.EffectCard = null;

        /**
         * S_PlayerChoose Compare.
         * @member {DcgProto.E_COMPARE} Compare
         * @memberof DcgProto.S_PlayerChoose
         * @instance
         */
        S_PlayerChoose.prototype.Compare = 0;

        /**
         * S_PlayerChoose ChooseNums.
         * @member {number} ChooseNums
         * @memberof DcgProto.S_PlayerChoose
         * @instance
         */
        S_PlayerChoose.prototype.ChooseNums = 0;

        /**
         * S_PlayerChoose CheckCards.
         * @member {Array.<DcgProto.IS_OtherCard>} CheckCards
         * @memberof DcgProto.S_PlayerChoose
         * @instance
         */
        S_PlayerChoose.prototype.CheckCards = $util.emptyArray;

        /**
         * S_PlayerChoose CanCancel.
         * @member {boolean} CanCancel
         * @memberof DcgProto.S_PlayerChoose
         * @instance
         */
        S_PlayerChoose.prototype.CanCancel = false;

        /**
         * S_PlayerChoose EffectOriginInfo.
         * @member {DcgProto.IS_EffectOriginInfo|null|undefined} EffectOriginInfo
         * @memberof DcgProto.S_PlayerChoose
         * @instance
         */
        S_PlayerChoose.prototype.EffectOriginInfo = null;

        /**
         * S_PlayerChoose RequestId.
         * @member {number} RequestId
         * @memberof DcgProto.S_PlayerChoose
         * @instance
         */
        S_PlayerChoose.prototype.RequestId = 0;

        /**
         * S_PlayerChoose CompareExtend.
         * @member {number} CompareExtend
         * @memberof DcgProto.S_PlayerChoose
         * @instance
         */
        S_PlayerChoose.prototype.CompareExtend = 0;

        /**
         * Creates a new S_PlayerChoose instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PlayerChoose
         * @static
         * @param {DcgProto.IS_PlayerChoose=} [properties] Properties to set
         * @returns {DcgProto.S_PlayerChoose} S_PlayerChoose instance
         */
        S_PlayerChoose.create = function create(properties) {
            return new S_PlayerChoose(properties);
        };

        /**
         * Encodes the specified S_PlayerChoose message. Does not implicitly {@link DcgProto.S_PlayerChoose.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PlayerChoose
         * @static
         * @param {DcgProto.IS_PlayerChoose} m S_PlayerChoose message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PlayerChoose.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.EffectCard != null && Object.hasOwnProperty.call(m, "EffectCard"))
                $root.DcgProto.S_OtherCard.encode(m.EffectCard, w.uint32(18).fork()).ldelim();
            if (m.Compare != null && Object.hasOwnProperty.call(m, "Compare"))
                w.uint32(24).int32(m.Compare);
            if (m.ChooseNums != null && Object.hasOwnProperty.call(m, "ChooseNums"))
                w.uint32(32).int32(m.ChooseNums);
            if (m.CheckCards != null && m.CheckCards.length) {
                for (var i = 0; i < m.CheckCards.length; ++i)
                    $root.DcgProto.S_OtherCard.encode(m.CheckCards[i], w.uint32(42).fork()).ldelim();
            }
            if (m.CanCancel != null && Object.hasOwnProperty.call(m, "CanCancel"))
                w.uint32(48).bool(m.CanCancel);
            if (m.EffectOriginInfo != null && Object.hasOwnProperty.call(m, "EffectOriginInfo"))
                $root.DcgProto.S_EffectOriginInfo.encode(m.EffectOriginInfo, w.uint32(58).fork()).ldelim();
            if (m.RequestId != null && Object.hasOwnProperty.call(m, "RequestId"))
                w.uint32(64).int32(m.RequestId);
            if (m.CompareExtend != null && Object.hasOwnProperty.call(m, "CompareExtend"))
                w.uint32(72).int32(m.CompareExtend);
            return w;
        };

        /**
         * Decodes a S_PlayerChoose message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PlayerChoose
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PlayerChoose} S_PlayerChoose
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PlayerChoose.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PlayerChoose();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.EffectCard = $root.DcgProto.S_OtherCard.decode(r, r.uint32());
                    break;
                case 3:
                    m.Compare = r.int32();
                    break;
                case 4:
                    m.ChooseNums = r.int32();
                    break;
                case 5:
                    if (!(m.CheckCards && m.CheckCards.length))
                        m.CheckCards = [];
                    m.CheckCards.push($root.DcgProto.S_OtherCard.decode(r, r.uint32()));
                    break;
                case 6:
                    m.CanCancel = r.bool();
                    break;
                case 7:
                    m.EffectOriginInfo = $root.DcgProto.S_EffectOriginInfo.decode(r, r.uint32());
                    break;
                case 8:
                    m.RequestId = r.int32();
                    break;
                case 9:
                    m.CompareExtend = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PlayerChoose message.
         * @function verify
         * @memberof DcgProto.S_PlayerChoose
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PlayerChoose.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.EffectCard != null && m.hasOwnProperty("EffectCard")) {
                {
                    var e = $root.DcgProto.S_OtherCard.verify(m.EffectCard);
                    if (e)
                        return "EffectCard." + e;
                }
            }
            if (m.Compare != null && m.hasOwnProperty("Compare")) {
                switch (m.Compare) {
                default:
                    return "Compare: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.ChooseNums != null && m.hasOwnProperty("ChooseNums")) {
                if (!$util.isInteger(m.ChooseNums))
                    return "ChooseNums: integer expected";
            }
            if (m.CheckCards != null && m.hasOwnProperty("CheckCards")) {
                if (!Array.isArray(m.CheckCards))
                    return "CheckCards: array expected";
                for (var i = 0; i < m.CheckCards.length; ++i) {
                    {
                        var e = $root.DcgProto.S_OtherCard.verify(m.CheckCards[i]);
                        if (e)
                            return "CheckCards." + e;
                    }
                }
            }
            if (m.CanCancel != null && m.hasOwnProperty("CanCancel")) {
                if (typeof m.CanCancel !== "boolean")
                    return "CanCancel: boolean expected";
            }
            if (m.EffectOriginInfo != null && m.hasOwnProperty("EffectOriginInfo")) {
                {
                    var e = $root.DcgProto.S_EffectOriginInfo.verify(m.EffectOriginInfo);
                    if (e)
                        return "EffectOriginInfo." + e;
                }
            }
            if (m.RequestId != null && m.hasOwnProperty("RequestId")) {
                if (!$util.isInteger(m.RequestId))
                    return "RequestId: integer expected";
            }
            if (m.CompareExtend != null && m.hasOwnProperty("CompareExtend")) {
                if (!$util.isInteger(m.CompareExtend))
                    return "CompareExtend: integer expected";
            }
            return null;
        };

        return S_PlayerChoose;
    })();

    DcgProto.S_EffectOriginInfo = (function() {

        /**
         * Properties of a S_EffectOriginInfo.
         * @memberof DcgProto
         * @interface IS_EffectOriginInfo
         * @property {Long|null} [CardIID] S_EffectOriginInfo CardIID
         * @property {number|null} [EffectId] S_EffectOriginInfo EffectId
         * @property {number|null} [Index] S_EffectOriginInfo Index
         */

        /**
         * Constructs a new S_EffectOriginInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_EffectOriginInfo.
         * @implements IS_EffectOriginInfo
         * @constructor
         * @param {DcgProto.IS_EffectOriginInfo=} [p] Properties to set
         */
        function S_EffectOriginInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_EffectOriginInfo CardIID.
         * @member {Long} CardIID
         * @memberof DcgProto.S_EffectOriginInfo
         * @instance
         */
        S_EffectOriginInfo.prototype.CardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_EffectOriginInfo EffectId.
         * @member {number} EffectId
         * @memberof DcgProto.S_EffectOriginInfo
         * @instance
         */
        S_EffectOriginInfo.prototype.EffectId = 0;

        /**
         * S_EffectOriginInfo Index.
         * @member {number} Index
         * @memberof DcgProto.S_EffectOriginInfo
         * @instance
         */
        S_EffectOriginInfo.prototype.Index = 0;

        /**
         * Creates a new S_EffectOriginInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_EffectOriginInfo
         * @static
         * @param {DcgProto.IS_EffectOriginInfo=} [properties] Properties to set
         * @returns {DcgProto.S_EffectOriginInfo} S_EffectOriginInfo instance
         */
        S_EffectOriginInfo.create = function create(properties) {
            return new S_EffectOriginInfo(properties);
        };

        /**
         * Encodes the specified S_EffectOriginInfo message. Does not implicitly {@link DcgProto.S_EffectOriginInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_EffectOriginInfo
         * @static
         * @param {DcgProto.IS_EffectOriginInfo} m S_EffectOriginInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_EffectOriginInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardIID != null && Object.hasOwnProperty.call(m, "CardIID"))
                w.uint32(8).int64(m.CardIID);
            if (m.EffectId != null && Object.hasOwnProperty.call(m, "EffectId"))
                w.uint32(16).int32(m.EffectId);
            if (m.Index != null && Object.hasOwnProperty.call(m, "Index"))
                w.uint32(24).int32(m.Index);
            return w;
        };

        /**
         * Decodes a S_EffectOriginInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_EffectOriginInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_EffectOriginInfo} S_EffectOriginInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_EffectOriginInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_EffectOriginInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CardIID = r.int64();
                    break;
                case 2:
                    m.EffectId = r.int32();
                    break;
                case 3:
                    m.Index = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_EffectOriginInfo message.
         * @function verify
         * @memberof DcgProto.S_EffectOriginInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_EffectOriginInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardIID != null && m.hasOwnProperty("CardIID")) {
                if (!$util.isInteger(m.CardIID) && !(m.CardIID && $util.isInteger(m.CardIID.low) && $util.isInteger(m.CardIID.high)))
                    return "CardIID: integer|Long expected";
            }
            if (m.EffectId != null && m.hasOwnProperty("EffectId")) {
                if (!$util.isInteger(m.EffectId))
                    return "EffectId: integer expected";
            }
            if (m.Index != null && m.hasOwnProperty("Index")) {
                if (!$util.isInteger(m.Index))
                    return "Index: integer expected";
            }
            return null;
        };

        return S_EffectOriginInfo;
    })();

    DcgProto.S_PlayerExcavated = (function() {

        /**
         * Properties of a S_PlayerExcavated.
         * @memberof DcgProto
         * @interface IS_PlayerExcavated
         * @property {Long|null} [PlayerIID] S_PlayerExcavated PlayerIID
         * @property {DcgProto.IS_OtherCard|null} [EffectCard] S_PlayerExcavated EffectCard
         * @property {DcgProto.E_SHOW_TO_PLAYER_TYPE|null} [type] S_PlayerExcavated type
         * @property {Array.<DcgProto.IS_OtherCard>|null} [CheckCards] S_PlayerExcavated CheckCards
         * @property {DcgProto.E_AREA_TYPE|null} [From] S_PlayerExcavated From
         */

        /**
         * Constructs a new S_PlayerExcavated.
         * @memberof DcgProto
         * @classdesc Represents a S_PlayerExcavated.
         * @implements IS_PlayerExcavated
         * @constructor
         * @param {DcgProto.IS_PlayerExcavated=} [p] Properties to set
         */
        function S_PlayerExcavated(p) {
            this.CheckCards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PlayerExcavated PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_PlayerExcavated
         * @instance
         */
        S_PlayerExcavated.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PlayerExcavated EffectCard.
         * @member {DcgProto.IS_OtherCard|null|undefined} EffectCard
         * @memberof DcgProto.S_PlayerExcavated
         * @instance
         */
        S_PlayerExcavated.prototype.EffectCard = null;

        /**
         * S_PlayerExcavated type.
         * @member {DcgProto.E_SHOW_TO_PLAYER_TYPE} type
         * @memberof DcgProto.S_PlayerExcavated
         * @instance
         */
        S_PlayerExcavated.prototype.type = 0;

        /**
         * S_PlayerExcavated CheckCards.
         * @member {Array.<DcgProto.IS_OtherCard>} CheckCards
         * @memberof DcgProto.S_PlayerExcavated
         * @instance
         */
        S_PlayerExcavated.prototype.CheckCards = $util.emptyArray;

        /**
         * S_PlayerExcavated From.
         * @member {DcgProto.E_AREA_TYPE} From
         * @memberof DcgProto.S_PlayerExcavated
         * @instance
         */
        S_PlayerExcavated.prototype.From = 0;

        /**
         * Creates a new S_PlayerExcavated instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PlayerExcavated
         * @static
         * @param {DcgProto.IS_PlayerExcavated=} [properties] Properties to set
         * @returns {DcgProto.S_PlayerExcavated} S_PlayerExcavated instance
         */
        S_PlayerExcavated.create = function create(properties) {
            return new S_PlayerExcavated(properties);
        };

        /**
         * Encodes the specified S_PlayerExcavated message. Does not implicitly {@link DcgProto.S_PlayerExcavated.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PlayerExcavated
         * @static
         * @param {DcgProto.IS_PlayerExcavated} m S_PlayerExcavated message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PlayerExcavated.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.EffectCard != null && Object.hasOwnProperty.call(m, "EffectCard"))
                $root.DcgProto.S_OtherCard.encode(m.EffectCard, w.uint32(18).fork()).ldelim();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(24).int32(m.type);
            if (m.CheckCards != null && m.CheckCards.length) {
                for (var i = 0; i < m.CheckCards.length; ++i)
                    $root.DcgProto.S_OtherCard.encode(m.CheckCards[i], w.uint32(34).fork()).ldelim();
            }
            if (m.From != null && Object.hasOwnProperty.call(m, "From"))
                w.uint32(40).int32(m.From);
            return w;
        };

        /**
         * Decodes a S_PlayerExcavated message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PlayerExcavated
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PlayerExcavated} S_PlayerExcavated
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PlayerExcavated.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PlayerExcavated();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.EffectCard = $root.DcgProto.S_OtherCard.decode(r, r.uint32());
                    break;
                case 3:
                    m.type = r.int32();
                    break;
                case 4:
                    if (!(m.CheckCards && m.CheckCards.length))
                        m.CheckCards = [];
                    m.CheckCards.push($root.DcgProto.S_OtherCard.decode(r, r.uint32()));
                    break;
                case 5:
                    m.From = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PlayerExcavated message.
         * @function verify
         * @memberof DcgProto.S_PlayerExcavated
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PlayerExcavated.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.EffectCard != null && m.hasOwnProperty("EffectCard")) {
                {
                    var e = $root.DcgProto.S_OtherCard.verify(m.EffectCard);
                    if (e)
                        return "EffectCard." + e;
                }
            }
            if (m.type != null && m.hasOwnProperty("type")) {
                switch (m.type) {
                default:
                    return "type: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.CheckCards != null && m.hasOwnProperty("CheckCards")) {
                if (!Array.isArray(m.CheckCards))
                    return "CheckCards: array expected";
                for (var i = 0; i < m.CheckCards.length; ++i) {
                    {
                        var e = $root.DcgProto.S_OtherCard.verify(m.CheckCards[i]);
                        if (e)
                            return "CheckCards." + e;
                    }
                }
            }
            if (m.From != null && m.hasOwnProperty("From")) {
                switch (m.From) {
                default:
                    return "From: enum value expected";
                case 0:
                case 1:
                case 2:
                case 4:
                case 8:
                case 16:
                case 32:
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                    break;
                }
            }
            return null;
        };

        return S_PlayerExcavated;
    })();

    DcgProto.S_PlayerSceneEvent = (function() {

        /**
         * Properties of a S_PlayerSceneEvent.
         * @memberof DcgProto
         * @interface IS_PlayerSceneEvent
         * @property {number|null} [SCENE_EVENT_ID] S_PlayerSceneEvent SCENE_EVENT_ID
         */

        /**
         * Constructs a new S_PlayerSceneEvent.
         * @memberof DcgProto
         * @classdesc Represents a S_PlayerSceneEvent.
         * @implements IS_PlayerSceneEvent
         * @constructor
         * @param {DcgProto.IS_PlayerSceneEvent=} [p] Properties to set
         */
        function S_PlayerSceneEvent(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PlayerSceneEvent SCENE_EVENT_ID.
         * @member {number} SCENE_EVENT_ID
         * @memberof DcgProto.S_PlayerSceneEvent
         * @instance
         */
        S_PlayerSceneEvent.prototype.SCENE_EVENT_ID = 0;

        /**
         * Creates a new S_PlayerSceneEvent instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PlayerSceneEvent
         * @static
         * @param {DcgProto.IS_PlayerSceneEvent=} [properties] Properties to set
         * @returns {DcgProto.S_PlayerSceneEvent} S_PlayerSceneEvent instance
         */
        S_PlayerSceneEvent.create = function create(properties) {
            return new S_PlayerSceneEvent(properties);
        };

        /**
         * Encodes the specified S_PlayerSceneEvent message. Does not implicitly {@link DcgProto.S_PlayerSceneEvent.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PlayerSceneEvent
         * @static
         * @param {DcgProto.IS_PlayerSceneEvent} m S_PlayerSceneEvent message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PlayerSceneEvent.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.SCENE_EVENT_ID != null && Object.hasOwnProperty.call(m, "SCENE_EVENT_ID"))
                w.uint32(8).int32(m.SCENE_EVENT_ID);
            return w;
        };

        /**
         * Decodes a S_PlayerSceneEvent message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PlayerSceneEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PlayerSceneEvent} S_PlayerSceneEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PlayerSceneEvent.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PlayerSceneEvent();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.SCENE_EVENT_ID = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PlayerSceneEvent message.
         * @function verify
         * @memberof DcgProto.S_PlayerSceneEvent
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PlayerSceneEvent.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.SCENE_EVENT_ID != null && m.hasOwnProperty("SCENE_EVENT_ID")) {
                if (!$util.isInteger(m.SCENE_EVENT_ID))
                    return "SCENE_EVENT_ID: integer expected";
            }
            return null;
        };

        return S_PlayerSceneEvent;
    })();

    DcgProto.S_PlayerDefenseSelect = (function() {

        /**
         * Properties of a S_PlayerDefenseSelect.
         * @memberof DcgProto
         * @interface IS_PlayerDefenseSelect
         * @property {Long|null} [PlayerIID] S_PlayerDefenseSelect PlayerIID
         * @property {DcgProto.IS_OtherCard|null} [AtkCard] S_PlayerDefenseSelect AtkCard
         * @property {DcgProto.E_ATTACK_TYPE|null} [AtkType] S_PlayerDefenseSelect AtkType
         * @property {Array.<DcgProto.IS_OtherCard>|null} [ChooseDefenseCards] S_PlayerDefenseSelect ChooseDefenseCards
         * @property {number|null} [RequestId] S_PlayerDefenseSelect RequestId
         */

        /**
         * Constructs a new S_PlayerDefenseSelect.
         * @memberof DcgProto
         * @classdesc Represents a S_PlayerDefenseSelect.
         * @implements IS_PlayerDefenseSelect
         * @constructor
         * @param {DcgProto.IS_PlayerDefenseSelect=} [p] Properties to set
         */
        function S_PlayerDefenseSelect(p) {
            this.ChooseDefenseCards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PlayerDefenseSelect PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_PlayerDefenseSelect
         * @instance
         */
        S_PlayerDefenseSelect.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PlayerDefenseSelect AtkCard.
         * @member {DcgProto.IS_OtherCard|null|undefined} AtkCard
         * @memberof DcgProto.S_PlayerDefenseSelect
         * @instance
         */
        S_PlayerDefenseSelect.prototype.AtkCard = null;

        /**
         * S_PlayerDefenseSelect AtkType.
         * @member {DcgProto.E_ATTACK_TYPE} AtkType
         * @memberof DcgProto.S_PlayerDefenseSelect
         * @instance
         */
        S_PlayerDefenseSelect.prototype.AtkType = 0;

        /**
         * S_PlayerDefenseSelect ChooseDefenseCards.
         * @member {Array.<DcgProto.IS_OtherCard>} ChooseDefenseCards
         * @memberof DcgProto.S_PlayerDefenseSelect
         * @instance
         */
        S_PlayerDefenseSelect.prototype.ChooseDefenseCards = $util.emptyArray;

        /**
         * S_PlayerDefenseSelect RequestId.
         * @member {number} RequestId
         * @memberof DcgProto.S_PlayerDefenseSelect
         * @instance
         */
        S_PlayerDefenseSelect.prototype.RequestId = 0;

        /**
         * Creates a new S_PlayerDefenseSelect instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PlayerDefenseSelect
         * @static
         * @param {DcgProto.IS_PlayerDefenseSelect=} [properties] Properties to set
         * @returns {DcgProto.S_PlayerDefenseSelect} S_PlayerDefenseSelect instance
         */
        S_PlayerDefenseSelect.create = function create(properties) {
            return new S_PlayerDefenseSelect(properties);
        };

        /**
         * Encodes the specified S_PlayerDefenseSelect message. Does not implicitly {@link DcgProto.S_PlayerDefenseSelect.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PlayerDefenseSelect
         * @static
         * @param {DcgProto.IS_PlayerDefenseSelect} m S_PlayerDefenseSelect message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PlayerDefenseSelect.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.AtkCard != null && Object.hasOwnProperty.call(m, "AtkCard"))
                $root.DcgProto.S_OtherCard.encode(m.AtkCard, w.uint32(18).fork()).ldelim();
            if (m.AtkType != null && Object.hasOwnProperty.call(m, "AtkType"))
                w.uint32(24).int32(m.AtkType);
            if (m.ChooseDefenseCards != null && m.ChooseDefenseCards.length) {
                for (var i = 0; i < m.ChooseDefenseCards.length; ++i)
                    $root.DcgProto.S_OtherCard.encode(m.ChooseDefenseCards[i], w.uint32(34).fork()).ldelim();
            }
            if (m.RequestId != null && Object.hasOwnProperty.call(m, "RequestId"))
                w.uint32(40).int32(m.RequestId);
            return w;
        };

        /**
         * Decodes a S_PlayerDefenseSelect message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PlayerDefenseSelect
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PlayerDefenseSelect} S_PlayerDefenseSelect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PlayerDefenseSelect.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PlayerDefenseSelect();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.AtkCard = $root.DcgProto.S_OtherCard.decode(r, r.uint32());
                    break;
                case 3:
                    m.AtkType = r.int32();
                    break;
                case 4:
                    if (!(m.ChooseDefenseCards && m.ChooseDefenseCards.length))
                        m.ChooseDefenseCards = [];
                    m.ChooseDefenseCards.push($root.DcgProto.S_OtherCard.decode(r, r.uint32()));
                    break;
                case 5:
                    m.RequestId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PlayerDefenseSelect message.
         * @function verify
         * @memberof DcgProto.S_PlayerDefenseSelect
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PlayerDefenseSelect.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.AtkCard != null && m.hasOwnProperty("AtkCard")) {
                {
                    var e = $root.DcgProto.S_OtherCard.verify(m.AtkCard);
                    if (e)
                        return "AtkCard." + e;
                }
            }
            if (m.AtkType != null && m.hasOwnProperty("AtkType")) {
                switch (m.AtkType) {
                default:
                    return "AtkType: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            if (m.ChooseDefenseCards != null && m.hasOwnProperty("ChooseDefenseCards")) {
                if (!Array.isArray(m.ChooseDefenseCards))
                    return "ChooseDefenseCards: array expected";
                for (var i = 0; i < m.ChooseDefenseCards.length; ++i) {
                    {
                        var e = $root.DcgProto.S_OtherCard.verify(m.ChooseDefenseCards[i]);
                        if (e)
                            return "ChooseDefenseCards." + e;
                    }
                }
            }
            if (m.RequestId != null && m.hasOwnProperty("RequestId")) {
                if (!$util.isInteger(m.RequestId))
                    return "RequestId: integer expected";
            }
            return null;
        };

        return S_PlayerDefenseSelect;
    })();

    DcgProto.S_PlayerSelectOptions = (function() {

        /**
         * Properties of a S_PlayerSelectOptions.
         * @memberof DcgProto
         * @interface IS_PlayerSelectOptions
         * @property {Long|null} [PlayerIID] S_PlayerSelectOptions PlayerIID
         * @property {number|null} [Num] S_PlayerSelectOptions Num
         * @property {DcgProto.IS_EffectOriginInfo|null} [EffectOriginInfo] S_PlayerSelectOptions EffectOriginInfo
         * @property {number|null} [RequestId] S_PlayerSelectOptions RequestId
         */

        /**
         * Constructs a new S_PlayerSelectOptions.
         * @memberof DcgProto
         * @classdesc Represents a S_PlayerSelectOptions.
         * @implements IS_PlayerSelectOptions
         * @constructor
         * @param {DcgProto.IS_PlayerSelectOptions=} [p] Properties to set
         */
        function S_PlayerSelectOptions(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PlayerSelectOptions PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_PlayerSelectOptions
         * @instance
         */
        S_PlayerSelectOptions.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PlayerSelectOptions Num.
         * @member {number} Num
         * @memberof DcgProto.S_PlayerSelectOptions
         * @instance
         */
        S_PlayerSelectOptions.prototype.Num = 0;

        /**
         * S_PlayerSelectOptions EffectOriginInfo.
         * @member {DcgProto.IS_EffectOriginInfo|null|undefined} EffectOriginInfo
         * @memberof DcgProto.S_PlayerSelectOptions
         * @instance
         */
        S_PlayerSelectOptions.prototype.EffectOriginInfo = null;

        /**
         * S_PlayerSelectOptions RequestId.
         * @member {number} RequestId
         * @memberof DcgProto.S_PlayerSelectOptions
         * @instance
         */
        S_PlayerSelectOptions.prototype.RequestId = 0;

        /**
         * Creates a new S_PlayerSelectOptions instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PlayerSelectOptions
         * @static
         * @param {DcgProto.IS_PlayerSelectOptions=} [properties] Properties to set
         * @returns {DcgProto.S_PlayerSelectOptions} S_PlayerSelectOptions instance
         */
        S_PlayerSelectOptions.create = function create(properties) {
            return new S_PlayerSelectOptions(properties);
        };

        /**
         * Encodes the specified S_PlayerSelectOptions message. Does not implicitly {@link DcgProto.S_PlayerSelectOptions.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PlayerSelectOptions
         * @static
         * @param {DcgProto.IS_PlayerSelectOptions} m S_PlayerSelectOptions message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PlayerSelectOptions.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.Num != null && Object.hasOwnProperty.call(m, "Num"))
                w.uint32(16).int32(m.Num);
            if (m.EffectOriginInfo != null && Object.hasOwnProperty.call(m, "EffectOriginInfo"))
                $root.DcgProto.S_EffectOriginInfo.encode(m.EffectOriginInfo, w.uint32(26).fork()).ldelim();
            if (m.RequestId != null && Object.hasOwnProperty.call(m, "RequestId"))
                w.uint32(32).int32(m.RequestId);
            return w;
        };

        /**
         * Decodes a S_PlayerSelectOptions message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PlayerSelectOptions
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PlayerSelectOptions} S_PlayerSelectOptions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PlayerSelectOptions.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PlayerSelectOptions();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.Num = r.int32();
                    break;
                case 3:
                    m.EffectOriginInfo = $root.DcgProto.S_EffectOriginInfo.decode(r, r.uint32());
                    break;
                case 4:
                    m.RequestId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PlayerSelectOptions message.
         * @function verify
         * @memberof DcgProto.S_PlayerSelectOptions
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PlayerSelectOptions.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.Num != null && m.hasOwnProperty("Num")) {
                if (!$util.isInteger(m.Num))
                    return "Num: integer expected";
            }
            if (m.EffectOriginInfo != null && m.hasOwnProperty("EffectOriginInfo")) {
                {
                    var e = $root.DcgProto.S_EffectOriginInfo.verify(m.EffectOriginInfo);
                    if (e)
                        return "EffectOriginInfo." + e;
                }
            }
            if (m.RequestId != null && m.hasOwnProperty("RequestId")) {
                if (!$util.isInteger(m.RequestId))
                    return "RequestId: integer expected";
            }
            return null;
        };

        return S_PlayerSelectOptions;
    })();

    DcgProto.S_OtherCard = (function() {

        /**
         * Properties of a S_OtherCard.
         * @memberof DcgProto
         * @interface IS_OtherCard
         * @property {Long|null} [CardIID] S_OtherCard CardIID
         * @property {number|null} [CfgId] S_OtherCard CfgId
         * @property {DcgProto.E_CARD_BATTLE_STATE|null} [CardBattleState] S_OtherCard CardBattleState
         * @property {number|null} [CardSummonRound] S_OtherCard CardSummonRound
         * @property {Long|null} [EvoOriginPrevCardIID] S_OtherCard EvoOriginPrevCardIID
         * @property {Long|null} [PlayerIID] S_OtherCard PlayerIID
         */

        /**
         * Constructs a new S_OtherCard.
         * @memberof DcgProto
         * @classdesc Represents a S_OtherCard.
         * @implements IS_OtherCard
         * @constructor
         * @param {DcgProto.IS_OtherCard=} [p] Properties to set
         */
        function S_OtherCard(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_OtherCard CardIID.
         * @member {Long} CardIID
         * @memberof DcgProto.S_OtherCard
         * @instance
         */
        S_OtherCard.prototype.CardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_OtherCard CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_OtherCard
         * @instance
         */
        S_OtherCard.prototype.CfgId = 0;

        /**
         * S_OtherCard CardBattleState.
         * @member {DcgProto.E_CARD_BATTLE_STATE} CardBattleState
         * @memberof DcgProto.S_OtherCard
         * @instance
         */
        S_OtherCard.prototype.CardBattleState = 0;

        /**
         * S_OtherCard CardSummonRound.
         * @member {number} CardSummonRound
         * @memberof DcgProto.S_OtherCard
         * @instance
         */
        S_OtherCard.prototype.CardSummonRound = 0;

        /**
         * S_OtherCard EvoOriginPrevCardIID.
         * @member {Long} EvoOriginPrevCardIID
         * @memberof DcgProto.S_OtherCard
         * @instance
         */
        S_OtherCard.prototype.EvoOriginPrevCardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_OtherCard PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_OtherCard
         * @instance
         */
        S_OtherCard.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new S_OtherCard instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_OtherCard
         * @static
         * @param {DcgProto.IS_OtherCard=} [properties] Properties to set
         * @returns {DcgProto.S_OtherCard} S_OtherCard instance
         */
        S_OtherCard.create = function create(properties) {
            return new S_OtherCard(properties);
        };

        /**
         * Encodes the specified S_OtherCard message. Does not implicitly {@link DcgProto.S_OtherCard.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_OtherCard
         * @static
         * @param {DcgProto.IS_OtherCard} m S_OtherCard message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_OtherCard.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardIID != null && Object.hasOwnProperty.call(m, "CardIID"))
                w.uint32(8).int64(m.CardIID);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            if (m.CardBattleState != null && Object.hasOwnProperty.call(m, "CardBattleState"))
                w.uint32(24).int32(m.CardBattleState);
            if (m.CardSummonRound != null && Object.hasOwnProperty.call(m, "CardSummonRound"))
                w.uint32(32).int32(m.CardSummonRound);
            if (m.EvoOriginPrevCardIID != null && Object.hasOwnProperty.call(m, "EvoOriginPrevCardIID"))
                w.uint32(40).int64(m.EvoOriginPrevCardIID);
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(48).int64(m.PlayerIID);
            return w;
        };

        /**
         * Decodes a S_OtherCard message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_OtherCard
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_OtherCard} S_OtherCard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_OtherCard.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_OtherCard();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CardIID = r.int64();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                case 3:
                    m.CardBattleState = r.int32();
                    break;
                case 4:
                    m.CardSummonRound = r.int32();
                    break;
                case 5:
                    m.EvoOriginPrevCardIID = r.int64();
                    break;
                case 6:
                    m.PlayerIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_OtherCard message.
         * @function verify
         * @memberof DcgProto.S_OtherCard
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_OtherCard.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardIID != null && m.hasOwnProperty("CardIID")) {
                if (!$util.isInteger(m.CardIID) && !(m.CardIID && $util.isInteger(m.CardIID.low) && $util.isInteger(m.CardIID.high)))
                    return "CardIID: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.CardBattleState != null && m.hasOwnProperty("CardBattleState")) {
                switch (m.CardBattleState) {
                default:
                    return "CardBattleState: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            if (m.CardSummonRound != null && m.hasOwnProperty("CardSummonRound")) {
                if (!$util.isInteger(m.CardSummonRound))
                    return "CardSummonRound: integer expected";
            }
            if (m.EvoOriginPrevCardIID != null && m.hasOwnProperty("EvoOriginPrevCardIID")) {
                if (!$util.isInteger(m.EvoOriginPrevCardIID) && !(m.EvoOriginPrevCardIID && $util.isInteger(m.EvoOriginPrevCardIID.low) && $util.isInteger(m.EvoOriginPrevCardIID.high)))
                    return "EvoOriginPrevCardIID: integer|Long expected";
            }
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            return null;
        };

        return S_OtherCard;
    })();

    DcgProto.S_OtherCardDetail = (function() {

        /**
         * Properties of a S_OtherCardDetail.
         * @memberof DcgProto
         * @interface IS_OtherCardDetail
         * @property {DcgProto.E_AREA_TYPE|null} [AreaType] S_OtherCardDetail AreaType
         * @property {number|null} [LastDP] S_OtherCardDetail LastDP
         */

        /**
         * Constructs a new S_OtherCardDetail.
         * @memberof DcgProto
         * @classdesc Represents a S_OtherCardDetail.
         * @implements IS_OtherCardDetail
         * @constructor
         * @param {DcgProto.IS_OtherCardDetail=} [p] Properties to set
         */
        function S_OtherCardDetail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_OtherCardDetail AreaType.
         * @member {DcgProto.E_AREA_TYPE} AreaType
         * @memberof DcgProto.S_OtherCardDetail
         * @instance
         */
        S_OtherCardDetail.prototype.AreaType = 0;

        /**
         * S_OtherCardDetail LastDP.
         * @member {number} LastDP
         * @memberof DcgProto.S_OtherCardDetail
         * @instance
         */
        S_OtherCardDetail.prototype.LastDP = 0;

        /**
         * Creates a new S_OtherCardDetail instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_OtherCardDetail
         * @static
         * @param {DcgProto.IS_OtherCardDetail=} [properties] Properties to set
         * @returns {DcgProto.S_OtherCardDetail} S_OtherCardDetail instance
         */
        S_OtherCardDetail.create = function create(properties) {
            return new S_OtherCardDetail(properties);
        };

        /**
         * Encodes the specified S_OtherCardDetail message. Does not implicitly {@link DcgProto.S_OtherCardDetail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_OtherCardDetail
         * @static
         * @param {DcgProto.IS_OtherCardDetail} m S_OtherCardDetail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_OtherCardDetail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.AreaType != null && Object.hasOwnProperty.call(m, "AreaType"))
                w.uint32(8).int32(m.AreaType);
            if (m.LastDP != null && Object.hasOwnProperty.call(m, "LastDP"))
                w.uint32(16).int32(m.LastDP);
            return w;
        };

        /**
         * Decodes a S_OtherCardDetail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_OtherCardDetail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_OtherCardDetail} S_OtherCardDetail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_OtherCardDetail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_OtherCardDetail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.AreaType = r.int32();
                    break;
                case 2:
                    m.LastDP = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_OtherCardDetail message.
         * @function verify
         * @memberof DcgProto.S_OtherCardDetail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_OtherCardDetail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.AreaType != null && m.hasOwnProperty("AreaType")) {
                switch (m.AreaType) {
                default:
                    return "AreaType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 4:
                case 8:
                case 16:
                case 32:
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                    break;
                }
            }
            if (m.LastDP != null && m.hasOwnProperty("LastDP")) {
                if (!$util.isInteger(m.LastDP))
                    return "LastDP: integer expected";
            }
            return null;
        };

        return S_OtherCardDetail;
    })();

    DcgProto.S_ReconnectData = (function() {

        /**
         * Properties of a S_ReconnectData.
         * @memberof DcgProto
         * @interface IS_ReconnectData
         * @property {number|null} [CurRound] S_ReconnectData CurRound
         * @property {number|null} [CurCost] S_ReconnectData CurCost
         * @property {Long|null} [CurTurnPlayerIID] S_ReconnectData CurTurnPlayerIID
         * @property {DcgProto.E_BATTLE_PHASE|null} [BattlePhase] S_ReconnectData BattlePhase
         * @property {DcgProto.IS_ReconnectPlayer|null} [PlayerA] S_ReconnectData PlayerA
         * @property {DcgProto.IS_ReconnectPlayer|null} [PlayerB] S_ReconnectData PlayerB
         * @property {DcgProto.IS_RoomFight|null} [RoomFight] S_ReconnectData RoomFight
         * @property {number|null} [StartChangeCardState] S_ReconnectData StartChangeCardState
         * @property {DcgProto.IS_PlayerExcavated|null} [RoomBrowse] S_ReconnectData RoomBrowse
         * @property {Long|null} [CurActionPlayerId] S_ReconnectData CurActionPlayerId
         * @property {Array.<DcgProto.IS_ClientShow>|null} [ClientShowList] S_ReconnectData ClientShowList
         * @property {number|null} [TimeOutEndTime] S_ReconnectData TimeOutEndTime
         * @property {Array.<DcgProto.IS_ReconnectGlobalBuff>|null} [globalBuff] S_ReconnectData globalBuff
         * @property {boolean|null} [IsPause] S_ReconnectData IsPause
         */

        /**
         * Constructs a new S_ReconnectData.
         * @memberof DcgProto
         * @classdesc Represents a S_ReconnectData.
         * @implements IS_ReconnectData
         * @constructor
         * @param {DcgProto.IS_ReconnectData=} [p] Properties to set
         */
        function S_ReconnectData(p) {
            this.ClientShowList = [];
            this.globalBuff = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_ReconnectData CurRound.
         * @member {number} CurRound
         * @memberof DcgProto.S_ReconnectData
         * @instance
         */
        S_ReconnectData.prototype.CurRound = 0;

        /**
         * S_ReconnectData CurCost.
         * @member {number} CurCost
         * @memberof DcgProto.S_ReconnectData
         * @instance
         */
        S_ReconnectData.prototype.CurCost = 0;

        /**
         * S_ReconnectData CurTurnPlayerIID.
         * @member {Long} CurTurnPlayerIID
         * @memberof DcgProto.S_ReconnectData
         * @instance
         */
        S_ReconnectData.prototype.CurTurnPlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_ReconnectData BattlePhase.
         * @member {DcgProto.E_BATTLE_PHASE} BattlePhase
         * @memberof DcgProto.S_ReconnectData
         * @instance
         */
        S_ReconnectData.prototype.BattlePhase = 0;

        /**
         * S_ReconnectData PlayerA.
         * @member {DcgProto.IS_ReconnectPlayer|null|undefined} PlayerA
         * @memberof DcgProto.S_ReconnectData
         * @instance
         */
        S_ReconnectData.prototype.PlayerA = null;

        /**
         * S_ReconnectData PlayerB.
         * @member {DcgProto.IS_ReconnectPlayer|null|undefined} PlayerB
         * @memberof DcgProto.S_ReconnectData
         * @instance
         */
        S_ReconnectData.prototype.PlayerB = null;

        /**
         * S_ReconnectData RoomFight.
         * @member {DcgProto.IS_RoomFight|null|undefined} RoomFight
         * @memberof DcgProto.S_ReconnectData
         * @instance
         */
        S_ReconnectData.prototype.RoomFight = null;

        /**
         * S_ReconnectData StartChangeCardState.
         * @member {number} StartChangeCardState
         * @memberof DcgProto.S_ReconnectData
         * @instance
         */
        S_ReconnectData.prototype.StartChangeCardState = 0;

        /**
         * S_ReconnectData RoomBrowse.
         * @member {DcgProto.IS_PlayerExcavated|null|undefined} RoomBrowse
         * @memberof DcgProto.S_ReconnectData
         * @instance
         */
        S_ReconnectData.prototype.RoomBrowse = null;

        /**
         * S_ReconnectData CurActionPlayerId.
         * @member {Long} CurActionPlayerId
         * @memberof DcgProto.S_ReconnectData
         * @instance
         */
        S_ReconnectData.prototype.CurActionPlayerId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_ReconnectData ClientShowList.
         * @member {Array.<DcgProto.IS_ClientShow>} ClientShowList
         * @memberof DcgProto.S_ReconnectData
         * @instance
         */
        S_ReconnectData.prototype.ClientShowList = $util.emptyArray;

        /**
         * S_ReconnectData TimeOutEndTime.
         * @member {number} TimeOutEndTime
         * @memberof DcgProto.S_ReconnectData
         * @instance
         */
        S_ReconnectData.prototype.TimeOutEndTime = 0;

        /**
         * S_ReconnectData globalBuff.
         * @member {Array.<DcgProto.IS_ReconnectGlobalBuff>} globalBuff
         * @memberof DcgProto.S_ReconnectData
         * @instance
         */
        S_ReconnectData.prototype.globalBuff = $util.emptyArray;

        /**
         * S_ReconnectData IsPause.
         * @member {boolean} IsPause
         * @memberof DcgProto.S_ReconnectData
         * @instance
         */
        S_ReconnectData.prototype.IsPause = false;

        /**
         * Creates a new S_ReconnectData instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_ReconnectData
         * @static
         * @param {DcgProto.IS_ReconnectData=} [properties] Properties to set
         * @returns {DcgProto.S_ReconnectData} S_ReconnectData instance
         */
        S_ReconnectData.create = function create(properties) {
            return new S_ReconnectData(properties);
        };

        /**
         * Encodes the specified S_ReconnectData message. Does not implicitly {@link DcgProto.S_ReconnectData.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_ReconnectData
         * @static
         * @param {DcgProto.IS_ReconnectData} m S_ReconnectData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_ReconnectData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CurRound != null && Object.hasOwnProperty.call(m, "CurRound"))
                w.uint32(8).int32(m.CurRound);
            if (m.CurCost != null && Object.hasOwnProperty.call(m, "CurCost"))
                w.uint32(16).int32(m.CurCost);
            if (m.CurTurnPlayerIID != null && Object.hasOwnProperty.call(m, "CurTurnPlayerIID"))
                w.uint32(24).int64(m.CurTurnPlayerIID);
            if (m.BattlePhase != null && Object.hasOwnProperty.call(m, "BattlePhase"))
                w.uint32(32).int32(m.BattlePhase);
            if (m.PlayerA != null && Object.hasOwnProperty.call(m, "PlayerA"))
                $root.DcgProto.S_ReconnectPlayer.encode(m.PlayerA, w.uint32(42).fork()).ldelim();
            if (m.PlayerB != null && Object.hasOwnProperty.call(m, "PlayerB"))
                $root.DcgProto.S_ReconnectPlayer.encode(m.PlayerB, w.uint32(50).fork()).ldelim();
            if (m.RoomFight != null && Object.hasOwnProperty.call(m, "RoomFight"))
                $root.DcgProto.S_RoomFight.encode(m.RoomFight, w.uint32(58).fork()).ldelim();
            if (m.StartChangeCardState != null && Object.hasOwnProperty.call(m, "StartChangeCardState"))
                w.uint32(64).int32(m.StartChangeCardState);
            if (m.RoomBrowse != null && Object.hasOwnProperty.call(m, "RoomBrowse"))
                $root.DcgProto.S_PlayerExcavated.encode(m.RoomBrowse, w.uint32(74).fork()).ldelim();
            if (m.CurActionPlayerId != null && Object.hasOwnProperty.call(m, "CurActionPlayerId"))
                w.uint32(80).int64(m.CurActionPlayerId);
            if (m.ClientShowList != null && m.ClientShowList.length) {
                for (var i = 0; i < m.ClientShowList.length; ++i)
                    $root.DcgProto.S_ClientShow.encode(m.ClientShowList[i], w.uint32(90).fork()).ldelim();
            }
            if (m.TimeOutEndTime != null && Object.hasOwnProperty.call(m, "TimeOutEndTime"))
                w.uint32(96).int32(m.TimeOutEndTime);
            if (m.globalBuff != null && m.globalBuff.length) {
                for (var i = 0; i < m.globalBuff.length; ++i)
                    $root.DcgProto.S_ReconnectGlobalBuff.encode(m.globalBuff[i], w.uint32(106).fork()).ldelim();
            }
            if (m.IsPause != null && Object.hasOwnProperty.call(m, "IsPause"))
                w.uint32(112).bool(m.IsPause);
            return w;
        };

        /**
         * Decodes a S_ReconnectData message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_ReconnectData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_ReconnectData} S_ReconnectData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_ReconnectData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_ReconnectData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CurRound = r.int32();
                    break;
                case 2:
                    m.CurCost = r.int32();
                    break;
                case 3:
                    m.CurTurnPlayerIID = r.int64();
                    break;
                case 4:
                    m.BattlePhase = r.int32();
                    break;
                case 5:
                    m.PlayerA = $root.DcgProto.S_ReconnectPlayer.decode(r, r.uint32());
                    break;
                case 6:
                    m.PlayerB = $root.DcgProto.S_ReconnectPlayer.decode(r, r.uint32());
                    break;
                case 7:
                    m.RoomFight = $root.DcgProto.S_RoomFight.decode(r, r.uint32());
                    break;
                case 8:
                    m.StartChangeCardState = r.int32();
                    break;
                case 9:
                    m.RoomBrowse = $root.DcgProto.S_PlayerExcavated.decode(r, r.uint32());
                    break;
                case 10:
                    m.CurActionPlayerId = r.int64();
                    break;
                case 11:
                    if (!(m.ClientShowList && m.ClientShowList.length))
                        m.ClientShowList = [];
                    m.ClientShowList.push($root.DcgProto.S_ClientShow.decode(r, r.uint32()));
                    break;
                case 12:
                    m.TimeOutEndTime = r.int32();
                    break;
                case 13:
                    if (!(m.globalBuff && m.globalBuff.length))
                        m.globalBuff = [];
                    m.globalBuff.push($root.DcgProto.S_ReconnectGlobalBuff.decode(r, r.uint32()));
                    break;
                case 14:
                    m.IsPause = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_ReconnectData message.
         * @function verify
         * @memberof DcgProto.S_ReconnectData
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_ReconnectData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CurRound != null && m.hasOwnProperty("CurRound")) {
                if (!$util.isInteger(m.CurRound))
                    return "CurRound: integer expected";
            }
            if (m.CurCost != null && m.hasOwnProperty("CurCost")) {
                if (!$util.isInteger(m.CurCost))
                    return "CurCost: integer expected";
            }
            if (m.CurTurnPlayerIID != null && m.hasOwnProperty("CurTurnPlayerIID")) {
                if (!$util.isInteger(m.CurTurnPlayerIID) && !(m.CurTurnPlayerIID && $util.isInteger(m.CurTurnPlayerIID.low) && $util.isInteger(m.CurTurnPlayerIID.high)))
                    return "CurTurnPlayerIID: integer|Long expected";
            }
            if (m.BattlePhase != null && m.hasOwnProperty("BattlePhase")) {
                switch (m.BattlePhase) {
                default:
                    return "BattlePhase: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                    break;
                }
            }
            if (m.PlayerA != null && m.hasOwnProperty("PlayerA")) {
                {
                    var e = $root.DcgProto.S_ReconnectPlayer.verify(m.PlayerA);
                    if (e)
                        return "PlayerA." + e;
                }
            }
            if (m.PlayerB != null && m.hasOwnProperty("PlayerB")) {
                {
                    var e = $root.DcgProto.S_ReconnectPlayer.verify(m.PlayerB);
                    if (e)
                        return "PlayerB." + e;
                }
            }
            if (m.RoomFight != null && m.hasOwnProperty("RoomFight")) {
                {
                    var e = $root.DcgProto.S_RoomFight.verify(m.RoomFight);
                    if (e)
                        return "RoomFight." + e;
                }
            }
            if (m.StartChangeCardState != null && m.hasOwnProperty("StartChangeCardState")) {
                if (!$util.isInteger(m.StartChangeCardState))
                    return "StartChangeCardState: integer expected";
            }
            if (m.RoomBrowse != null && m.hasOwnProperty("RoomBrowse")) {
                {
                    var e = $root.DcgProto.S_PlayerExcavated.verify(m.RoomBrowse);
                    if (e)
                        return "RoomBrowse." + e;
                }
            }
            if (m.CurActionPlayerId != null && m.hasOwnProperty("CurActionPlayerId")) {
                if (!$util.isInteger(m.CurActionPlayerId) && !(m.CurActionPlayerId && $util.isInteger(m.CurActionPlayerId.low) && $util.isInteger(m.CurActionPlayerId.high)))
                    return "CurActionPlayerId: integer|Long expected";
            }
            if (m.ClientShowList != null && m.hasOwnProperty("ClientShowList")) {
                if (!Array.isArray(m.ClientShowList))
                    return "ClientShowList: array expected";
                for (var i = 0; i < m.ClientShowList.length; ++i) {
                    {
                        var e = $root.DcgProto.S_ClientShow.verify(m.ClientShowList[i]);
                        if (e)
                            return "ClientShowList." + e;
                    }
                }
            }
            if (m.TimeOutEndTime != null && m.hasOwnProperty("TimeOutEndTime")) {
                if (!$util.isInteger(m.TimeOutEndTime))
                    return "TimeOutEndTime: integer expected";
            }
            if (m.globalBuff != null && m.hasOwnProperty("globalBuff")) {
                if (!Array.isArray(m.globalBuff))
                    return "globalBuff: array expected";
                for (var i = 0; i < m.globalBuff.length; ++i) {
                    {
                        var e = $root.DcgProto.S_ReconnectGlobalBuff.verify(m.globalBuff[i]);
                        if (e)
                            return "globalBuff." + e;
                    }
                }
            }
            if (m.IsPause != null && m.hasOwnProperty("IsPause")) {
                if (typeof m.IsPause !== "boolean")
                    return "IsPause: boolean expected";
            }
            return null;
        };

        return S_ReconnectData;
    })();

    DcgProto.S_ReconnectCard = (function() {

        /**
         * Properties of a S_ReconnectCard.
         * @memberof DcgProto
         * @interface IS_ReconnectCard
         * @property {DcgProto.IS_OtherCard|null} [OtherCard] S_ReconnectCard OtherCard
         * @property {DcgProto.IS_OtherCardDetail|null} [OtherCardDetail] S_ReconnectCard OtherCardDetail
         * @property {DcgProto.IS_GameBattleCard|null} [LastBattleInfo] S_ReconnectCard LastBattleInfo
         * @property {DcgProto.IS_GameHandCard|null} [LastHandInfo] S_ReconnectCard LastHandInfo
         */

        /**
         * Constructs a new S_ReconnectCard.
         * @memberof DcgProto
         * @classdesc Represents a S_ReconnectCard.
         * @implements IS_ReconnectCard
         * @constructor
         * @param {DcgProto.IS_ReconnectCard=} [p] Properties to set
         */
        function S_ReconnectCard(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_ReconnectCard OtherCard.
         * @member {DcgProto.IS_OtherCard|null|undefined} OtherCard
         * @memberof DcgProto.S_ReconnectCard
         * @instance
         */
        S_ReconnectCard.prototype.OtherCard = null;

        /**
         * S_ReconnectCard OtherCardDetail.
         * @member {DcgProto.IS_OtherCardDetail|null|undefined} OtherCardDetail
         * @memberof DcgProto.S_ReconnectCard
         * @instance
         */
        S_ReconnectCard.prototype.OtherCardDetail = null;

        /**
         * S_ReconnectCard LastBattleInfo.
         * @member {DcgProto.IS_GameBattleCard|null|undefined} LastBattleInfo
         * @memberof DcgProto.S_ReconnectCard
         * @instance
         */
        S_ReconnectCard.prototype.LastBattleInfo = null;

        /**
         * S_ReconnectCard LastHandInfo.
         * @member {DcgProto.IS_GameHandCard|null|undefined} LastHandInfo
         * @memberof DcgProto.S_ReconnectCard
         * @instance
         */
        S_ReconnectCard.prototype.LastHandInfo = null;

        /**
         * Creates a new S_ReconnectCard instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_ReconnectCard
         * @static
         * @param {DcgProto.IS_ReconnectCard=} [properties] Properties to set
         * @returns {DcgProto.S_ReconnectCard} S_ReconnectCard instance
         */
        S_ReconnectCard.create = function create(properties) {
            return new S_ReconnectCard(properties);
        };

        /**
         * Encodes the specified S_ReconnectCard message. Does not implicitly {@link DcgProto.S_ReconnectCard.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_ReconnectCard
         * @static
         * @param {DcgProto.IS_ReconnectCard} m S_ReconnectCard message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_ReconnectCard.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.OtherCard != null && Object.hasOwnProperty.call(m, "OtherCard"))
                $root.DcgProto.S_OtherCard.encode(m.OtherCard, w.uint32(10).fork()).ldelim();
            if (m.OtherCardDetail != null && Object.hasOwnProperty.call(m, "OtherCardDetail"))
                $root.DcgProto.S_OtherCardDetail.encode(m.OtherCardDetail, w.uint32(18).fork()).ldelim();
            if (m.LastBattleInfo != null && Object.hasOwnProperty.call(m, "LastBattleInfo"))
                $root.DcgProto.S_GameBattleCard.encode(m.LastBattleInfo, w.uint32(26).fork()).ldelim();
            if (m.LastHandInfo != null && Object.hasOwnProperty.call(m, "LastHandInfo"))
                $root.DcgProto.S_GameHandCard.encode(m.LastHandInfo, w.uint32(34).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_ReconnectCard message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_ReconnectCard
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_ReconnectCard} S_ReconnectCard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_ReconnectCard.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_ReconnectCard();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.OtherCard = $root.DcgProto.S_OtherCard.decode(r, r.uint32());
                    break;
                case 2:
                    m.OtherCardDetail = $root.DcgProto.S_OtherCardDetail.decode(r, r.uint32());
                    break;
                case 3:
                    m.LastBattleInfo = $root.DcgProto.S_GameBattleCard.decode(r, r.uint32());
                    break;
                case 4:
                    m.LastHandInfo = $root.DcgProto.S_GameHandCard.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_ReconnectCard message.
         * @function verify
         * @memberof DcgProto.S_ReconnectCard
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_ReconnectCard.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.OtherCard != null && m.hasOwnProperty("OtherCard")) {
                {
                    var e = $root.DcgProto.S_OtherCard.verify(m.OtherCard);
                    if (e)
                        return "OtherCard." + e;
                }
            }
            if (m.OtherCardDetail != null && m.hasOwnProperty("OtherCardDetail")) {
                {
                    var e = $root.DcgProto.S_OtherCardDetail.verify(m.OtherCardDetail);
                    if (e)
                        return "OtherCardDetail." + e;
                }
            }
            if (m.LastBattleInfo != null && m.hasOwnProperty("LastBattleInfo")) {
                {
                    var e = $root.DcgProto.S_GameBattleCard.verify(m.LastBattleInfo);
                    if (e)
                        return "LastBattleInfo." + e;
                }
            }
            if (m.LastHandInfo != null && m.hasOwnProperty("LastHandInfo")) {
                {
                    var e = $root.DcgProto.S_GameHandCard.verify(m.LastHandInfo);
                    if (e)
                        return "LastHandInfo." + e;
                }
            }
            return null;
        };

        return S_ReconnectCard;
    })();

    DcgProto.S_ReconnectPlayer = (function() {

        /**
         * Properties of a S_ReconnectPlayer.
         * @memberof DcgProto
         * @interface IS_ReconnectPlayer
         * @property {number|null} [AreaDeck] S_ReconnectPlayer AreaDeck
         * @property {number|null} [AreaDefense] S_ReconnectPlayer AreaDefense
         * @property {number|null} [AreaDigitama] S_ReconnectPlayer AreaDigitama
         * @property {DcgProto.IS_ReconnectCard|null} [AreaDigitamaHatch] S_ReconnectPlayer AreaDigitamaHatch
         * @property {Array.<DcgProto.IS_ReconnectCard>|null} [AreaGraveyard] S_ReconnectPlayer AreaGraveyard
         * @property {Array.<DcgProto.IS_ReconnectCard>|null} [AreaHand] S_ReconnectPlayer AreaHand
         * @property {Array.<DcgProto.IS_ReconnectCard>|null} [AreaInBattle] S_ReconnectPlayer AreaInBattle
         * @property {Array.<DcgProto.IS_ReconnectCard>|null} [AreaEvo] S_ReconnectPlayer AreaEvo
         * @property {Array.<DcgProto.IS_ReconnectCard>|null} [AreaWait] S_ReconnectPlayer AreaWait
         * @property {Long|null} [PlayerIID] S_ReconnectPlayer PlayerIID
         * @property {Array.<DcgProto.IS_ReconnectCard>|null} [AreaBrowse] S_ReconnectPlayer AreaBrowse
         * @property {DcgProto.E_AREA_TYPE|null} [AreaWaitBefore] S_ReconnectPlayer AreaWaitBefore
         * @property {DcgProto.E_AREA_TYPE|null} [AreaBrowseBefore] S_ReconnectPlayer AreaBrowseBefore
         * @property {number|null} [RemainingTime] S_ReconnectPlayer RemainingTime
         */

        /**
         * Constructs a new S_ReconnectPlayer.
         * @memberof DcgProto
         * @classdesc Represents a S_ReconnectPlayer.
         * @implements IS_ReconnectPlayer
         * @constructor
         * @param {DcgProto.IS_ReconnectPlayer=} [p] Properties to set
         */
        function S_ReconnectPlayer(p) {
            this.AreaGraveyard = [];
            this.AreaHand = [];
            this.AreaInBattle = [];
            this.AreaEvo = [];
            this.AreaWait = [];
            this.AreaBrowse = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_ReconnectPlayer AreaDeck.
         * @member {number} AreaDeck
         * @memberof DcgProto.S_ReconnectPlayer
         * @instance
         */
        S_ReconnectPlayer.prototype.AreaDeck = 0;

        /**
         * S_ReconnectPlayer AreaDefense.
         * @member {number} AreaDefense
         * @memberof DcgProto.S_ReconnectPlayer
         * @instance
         */
        S_ReconnectPlayer.prototype.AreaDefense = 0;

        /**
         * S_ReconnectPlayer AreaDigitama.
         * @member {number} AreaDigitama
         * @memberof DcgProto.S_ReconnectPlayer
         * @instance
         */
        S_ReconnectPlayer.prototype.AreaDigitama = 0;

        /**
         * S_ReconnectPlayer AreaDigitamaHatch.
         * @member {DcgProto.IS_ReconnectCard|null|undefined} AreaDigitamaHatch
         * @memberof DcgProto.S_ReconnectPlayer
         * @instance
         */
        S_ReconnectPlayer.prototype.AreaDigitamaHatch = null;

        /**
         * S_ReconnectPlayer AreaGraveyard.
         * @member {Array.<DcgProto.IS_ReconnectCard>} AreaGraveyard
         * @memberof DcgProto.S_ReconnectPlayer
         * @instance
         */
        S_ReconnectPlayer.prototype.AreaGraveyard = $util.emptyArray;

        /**
         * S_ReconnectPlayer AreaHand.
         * @member {Array.<DcgProto.IS_ReconnectCard>} AreaHand
         * @memberof DcgProto.S_ReconnectPlayer
         * @instance
         */
        S_ReconnectPlayer.prototype.AreaHand = $util.emptyArray;

        /**
         * S_ReconnectPlayer AreaInBattle.
         * @member {Array.<DcgProto.IS_ReconnectCard>} AreaInBattle
         * @memberof DcgProto.S_ReconnectPlayer
         * @instance
         */
        S_ReconnectPlayer.prototype.AreaInBattle = $util.emptyArray;

        /**
         * S_ReconnectPlayer AreaEvo.
         * @member {Array.<DcgProto.IS_ReconnectCard>} AreaEvo
         * @memberof DcgProto.S_ReconnectPlayer
         * @instance
         */
        S_ReconnectPlayer.prototype.AreaEvo = $util.emptyArray;

        /**
         * S_ReconnectPlayer AreaWait.
         * @member {Array.<DcgProto.IS_ReconnectCard>} AreaWait
         * @memberof DcgProto.S_ReconnectPlayer
         * @instance
         */
        S_ReconnectPlayer.prototype.AreaWait = $util.emptyArray;

        /**
         * S_ReconnectPlayer PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_ReconnectPlayer
         * @instance
         */
        S_ReconnectPlayer.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_ReconnectPlayer AreaBrowse.
         * @member {Array.<DcgProto.IS_ReconnectCard>} AreaBrowse
         * @memberof DcgProto.S_ReconnectPlayer
         * @instance
         */
        S_ReconnectPlayer.prototype.AreaBrowse = $util.emptyArray;

        /**
         * S_ReconnectPlayer AreaWaitBefore.
         * @member {DcgProto.E_AREA_TYPE} AreaWaitBefore
         * @memberof DcgProto.S_ReconnectPlayer
         * @instance
         */
        S_ReconnectPlayer.prototype.AreaWaitBefore = 0;

        /**
         * S_ReconnectPlayer AreaBrowseBefore.
         * @member {DcgProto.E_AREA_TYPE} AreaBrowseBefore
         * @memberof DcgProto.S_ReconnectPlayer
         * @instance
         */
        S_ReconnectPlayer.prototype.AreaBrowseBefore = 0;

        /**
         * S_ReconnectPlayer RemainingTime.
         * @member {number} RemainingTime
         * @memberof DcgProto.S_ReconnectPlayer
         * @instance
         */
        S_ReconnectPlayer.prototype.RemainingTime = 0;

        /**
         * Creates a new S_ReconnectPlayer instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_ReconnectPlayer
         * @static
         * @param {DcgProto.IS_ReconnectPlayer=} [properties] Properties to set
         * @returns {DcgProto.S_ReconnectPlayer} S_ReconnectPlayer instance
         */
        S_ReconnectPlayer.create = function create(properties) {
            return new S_ReconnectPlayer(properties);
        };

        /**
         * Encodes the specified S_ReconnectPlayer message. Does not implicitly {@link DcgProto.S_ReconnectPlayer.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_ReconnectPlayer
         * @static
         * @param {DcgProto.IS_ReconnectPlayer} m S_ReconnectPlayer message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_ReconnectPlayer.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.AreaDeck != null && Object.hasOwnProperty.call(m, "AreaDeck"))
                w.uint32(8).int32(m.AreaDeck);
            if (m.AreaDefense != null && Object.hasOwnProperty.call(m, "AreaDefense"))
                w.uint32(16).int32(m.AreaDefense);
            if (m.AreaDigitama != null && Object.hasOwnProperty.call(m, "AreaDigitama"))
                w.uint32(24).int32(m.AreaDigitama);
            if (m.AreaDigitamaHatch != null && Object.hasOwnProperty.call(m, "AreaDigitamaHatch"))
                $root.DcgProto.S_ReconnectCard.encode(m.AreaDigitamaHatch, w.uint32(34).fork()).ldelim();
            if (m.AreaGraveyard != null && m.AreaGraveyard.length) {
                for (var i = 0; i < m.AreaGraveyard.length; ++i)
                    $root.DcgProto.S_ReconnectCard.encode(m.AreaGraveyard[i], w.uint32(42).fork()).ldelim();
            }
            if (m.AreaHand != null && m.AreaHand.length) {
                for (var i = 0; i < m.AreaHand.length; ++i)
                    $root.DcgProto.S_ReconnectCard.encode(m.AreaHand[i], w.uint32(50).fork()).ldelim();
            }
            if (m.AreaInBattle != null && m.AreaInBattle.length) {
                for (var i = 0; i < m.AreaInBattle.length; ++i)
                    $root.DcgProto.S_ReconnectCard.encode(m.AreaInBattle[i], w.uint32(58).fork()).ldelim();
            }
            if (m.AreaEvo != null && m.AreaEvo.length) {
                for (var i = 0; i < m.AreaEvo.length; ++i)
                    $root.DcgProto.S_ReconnectCard.encode(m.AreaEvo[i], w.uint32(66).fork()).ldelim();
            }
            if (m.AreaWait != null && m.AreaWait.length) {
                for (var i = 0; i < m.AreaWait.length; ++i)
                    $root.DcgProto.S_ReconnectCard.encode(m.AreaWait[i], w.uint32(74).fork()).ldelim();
            }
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(80).int64(m.PlayerIID);
            if (m.AreaBrowse != null && m.AreaBrowse.length) {
                for (var i = 0; i < m.AreaBrowse.length; ++i)
                    $root.DcgProto.S_ReconnectCard.encode(m.AreaBrowse[i], w.uint32(90).fork()).ldelim();
            }
            if (m.AreaWaitBefore != null && Object.hasOwnProperty.call(m, "AreaWaitBefore"))
                w.uint32(96).int32(m.AreaWaitBefore);
            if (m.AreaBrowseBefore != null && Object.hasOwnProperty.call(m, "AreaBrowseBefore"))
                w.uint32(104).int32(m.AreaBrowseBefore);
            if (m.RemainingTime != null && Object.hasOwnProperty.call(m, "RemainingTime"))
                w.uint32(112).int32(m.RemainingTime);
            return w;
        };

        /**
         * Decodes a S_ReconnectPlayer message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_ReconnectPlayer
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_ReconnectPlayer} S_ReconnectPlayer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_ReconnectPlayer.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_ReconnectPlayer();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.AreaDeck = r.int32();
                    break;
                case 2:
                    m.AreaDefense = r.int32();
                    break;
                case 3:
                    m.AreaDigitama = r.int32();
                    break;
                case 4:
                    m.AreaDigitamaHatch = $root.DcgProto.S_ReconnectCard.decode(r, r.uint32());
                    break;
                case 5:
                    if (!(m.AreaGraveyard && m.AreaGraveyard.length))
                        m.AreaGraveyard = [];
                    m.AreaGraveyard.push($root.DcgProto.S_ReconnectCard.decode(r, r.uint32()));
                    break;
                case 6:
                    if (!(m.AreaHand && m.AreaHand.length))
                        m.AreaHand = [];
                    m.AreaHand.push($root.DcgProto.S_ReconnectCard.decode(r, r.uint32()));
                    break;
                case 7:
                    if (!(m.AreaInBattle && m.AreaInBattle.length))
                        m.AreaInBattle = [];
                    m.AreaInBattle.push($root.DcgProto.S_ReconnectCard.decode(r, r.uint32()));
                    break;
                case 8:
                    if (!(m.AreaEvo && m.AreaEvo.length))
                        m.AreaEvo = [];
                    m.AreaEvo.push($root.DcgProto.S_ReconnectCard.decode(r, r.uint32()));
                    break;
                case 9:
                    if (!(m.AreaWait && m.AreaWait.length))
                        m.AreaWait = [];
                    m.AreaWait.push($root.DcgProto.S_ReconnectCard.decode(r, r.uint32()));
                    break;
                case 10:
                    m.PlayerIID = r.int64();
                    break;
                case 11:
                    if (!(m.AreaBrowse && m.AreaBrowse.length))
                        m.AreaBrowse = [];
                    m.AreaBrowse.push($root.DcgProto.S_ReconnectCard.decode(r, r.uint32()));
                    break;
                case 12:
                    m.AreaWaitBefore = r.int32();
                    break;
                case 13:
                    m.AreaBrowseBefore = r.int32();
                    break;
                case 14:
                    m.RemainingTime = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_ReconnectPlayer message.
         * @function verify
         * @memberof DcgProto.S_ReconnectPlayer
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_ReconnectPlayer.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.AreaDeck != null && m.hasOwnProperty("AreaDeck")) {
                if (!$util.isInteger(m.AreaDeck))
                    return "AreaDeck: integer expected";
            }
            if (m.AreaDefense != null && m.hasOwnProperty("AreaDefense")) {
                if (!$util.isInteger(m.AreaDefense))
                    return "AreaDefense: integer expected";
            }
            if (m.AreaDigitama != null && m.hasOwnProperty("AreaDigitama")) {
                if (!$util.isInteger(m.AreaDigitama))
                    return "AreaDigitama: integer expected";
            }
            if (m.AreaDigitamaHatch != null && m.hasOwnProperty("AreaDigitamaHatch")) {
                {
                    var e = $root.DcgProto.S_ReconnectCard.verify(m.AreaDigitamaHatch);
                    if (e)
                        return "AreaDigitamaHatch." + e;
                }
            }
            if (m.AreaGraveyard != null && m.hasOwnProperty("AreaGraveyard")) {
                if (!Array.isArray(m.AreaGraveyard))
                    return "AreaGraveyard: array expected";
                for (var i = 0; i < m.AreaGraveyard.length; ++i) {
                    {
                        var e = $root.DcgProto.S_ReconnectCard.verify(m.AreaGraveyard[i]);
                        if (e)
                            return "AreaGraveyard." + e;
                    }
                }
            }
            if (m.AreaHand != null && m.hasOwnProperty("AreaHand")) {
                if (!Array.isArray(m.AreaHand))
                    return "AreaHand: array expected";
                for (var i = 0; i < m.AreaHand.length; ++i) {
                    {
                        var e = $root.DcgProto.S_ReconnectCard.verify(m.AreaHand[i]);
                        if (e)
                            return "AreaHand." + e;
                    }
                }
            }
            if (m.AreaInBattle != null && m.hasOwnProperty("AreaInBattle")) {
                if (!Array.isArray(m.AreaInBattle))
                    return "AreaInBattle: array expected";
                for (var i = 0; i < m.AreaInBattle.length; ++i) {
                    {
                        var e = $root.DcgProto.S_ReconnectCard.verify(m.AreaInBattle[i]);
                        if (e)
                            return "AreaInBattle." + e;
                    }
                }
            }
            if (m.AreaEvo != null && m.hasOwnProperty("AreaEvo")) {
                if (!Array.isArray(m.AreaEvo))
                    return "AreaEvo: array expected";
                for (var i = 0; i < m.AreaEvo.length; ++i) {
                    {
                        var e = $root.DcgProto.S_ReconnectCard.verify(m.AreaEvo[i]);
                        if (e)
                            return "AreaEvo." + e;
                    }
                }
            }
            if (m.AreaWait != null && m.hasOwnProperty("AreaWait")) {
                if (!Array.isArray(m.AreaWait))
                    return "AreaWait: array expected";
                for (var i = 0; i < m.AreaWait.length; ++i) {
                    {
                        var e = $root.DcgProto.S_ReconnectCard.verify(m.AreaWait[i]);
                        if (e)
                            return "AreaWait." + e;
                    }
                }
            }
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.AreaBrowse != null && m.hasOwnProperty("AreaBrowse")) {
                if (!Array.isArray(m.AreaBrowse))
                    return "AreaBrowse: array expected";
                for (var i = 0; i < m.AreaBrowse.length; ++i) {
                    {
                        var e = $root.DcgProto.S_ReconnectCard.verify(m.AreaBrowse[i]);
                        if (e)
                            return "AreaBrowse." + e;
                    }
                }
            }
            if (m.AreaWaitBefore != null && m.hasOwnProperty("AreaWaitBefore")) {
                switch (m.AreaWaitBefore) {
                default:
                    return "AreaWaitBefore: enum value expected";
                case 0:
                case 1:
                case 2:
                case 4:
                case 8:
                case 16:
                case 32:
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                    break;
                }
            }
            if (m.AreaBrowseBefore != null && m.hasOwnProperty("AreaBrowseBefore")) {
                switch (m.AreaBrowseBefore) {
                default:
                    return "AreaBrowseBefore: enum value expected";
                case 0:
                case 1:
                case 2:
                case 4:
                case 8:
                case 16:
                case 32:
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                    break;
                }
            }
            if (m.RemainingTime != null && m.hasOwnProperty("RemainingTime")) {
                if (!$util.isInteger(m.RemainingTime))
                    return "RemainingTime: integer expected";
            }
            return null;
        };

        return S_ReconnectPlayer;
    })();

    DcgProto.S_ReconnectGlobalBuff = (function() {

        /**
         * Properties of a S_ReconnectGlobalBuff.
         * @memberof DcgProto
         * @interface IS_ReconnectGlobalBuff
         * @property {Long|null} [PlayerIID] S_ReconnectGlobalBuff PlayerIID
         * @property {Long|null} [CardIID] S_ReconnectGlobalBuff CardIID
         * @property {number|null} [EffectId] S_ReconnectGlobalBuff EffectId
         */

        /**
         * Constructs a new S_ReconnectGlobalBuff.
         * @memberof DcgProto
         * @classdesc Represents a S_ReconnectGlobalBuff.
         * @implements IS_ReconnectGlobalBuff
         * @constructor
         * @param {DcgProto.IS_ReconnectGlobalBuff=} [p] Properties to set
         */
        function S_ReconnectGlobalBuff(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_ReconnectGlobalBuff PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_ReconnectGlobalBuff
         * @instance
         */
        S_ReconnectGlobalBuff.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_ReconnectGlobalBuff CardIID.
         * @member {Long} CardIID
         * @memberof DcgProto.S_ReconnectGlobalBuff
         * @instance
         */
        S_ReconnectGlobalBuff.prototype.CardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_ReconnectGlobalBuff EffectId.
         * @member {number} EffectId
         * @memberof DcgProto.S_ReconnectGlobalBuff
         * @instance
         */
        S_ReconnectGlobalBuff.prototype.EffectId = 0;

        /**
         * Creates a new S_ReconnectGlobalBuff instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_ReconnectGlobalBuff
         * @static
         * @param {DcgProto.IS_ReconnectGlobalBuff=} [properties] Properties to set
         * @returns {DcgProto.S_ReconnectGlobalBuff} S_ReconnectGlobalBuff instance
         */
        S_ReconnectGlobalBuff.create = function create(properties) {
            return new S_ReconnectGlobalBuff(properties);
        };

        /**
         * Encodes the specified S_ReconnectGlobalBuff message. Does not implicitly {@link DcgProto.S_ReconnectGlobalBuff.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_ReconnectGlobalBuff
         * @static
         * @param {DcgProto.IS_ReconnectGlobalBuff} m S_ReconnectGlobalBuff message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_ReconnectGlobalBuff.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.CardIID != null && Object.hasOwnProperty.call(m, "CardIID"))
                w.uint32(16).int64(m.CardIID);
            if (m.EffectId != null && Object.hasOwnProperty.call(m, "EffectId"))
                w.uint32(24).int32(m.EffectId);
            return w;
        };

        /**
         * Decodes a S_ReconnectGlobalBuff message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_ReconnectGlobalBuff
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_ReconnectGlobalBuff} S_ReconnectGlobalBuff
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_ReconnectGlobalBuff.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_ReconnectGlobalBuff();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.CardIID = r.int64();
                    break;
                case 3:
                    m.EffectId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_ReconnectGlobalBuff message.
         * @function verify
         * @memberof DcgProto.S_ReconnectGlobalBuff
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_ReconnectGlobalBuff.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.CardIID != null && m.hasOwnProperty("CardIID")) {
                if (!$util.isInteger(m.CardIID) && !(m.CardIID && $util.isInteger(m.CardIID.low) && $util.isInteger(m.CardIID.high)))
                    return "CardIID: integer|Long expected";
            }
            if (m.EffectId != null && m.hasOwnProperty("EffectId")) {
                if (!$util.isInteger(m.EffectId))
                    return "EffectId: integer expected";
            }
            return null;
        };

        return S_ReconnectGlobalBuff;
    })();

    DcgProto.S_BattleResult = (function() {

        /**
         * Properties of a S_BattleResult.
         * @memberof DcgProto
         * @interface IS_BattleResult
         * @property {Array.<DcgProto.IS_PlayerResult>|null} [PlayerResult] S_BattleResult PlayerResult
         * @property {number|null} [TotalRound] S_BattleResult TotalRound
         * @property {number|null} [EndTime] S_BattleResult EndTime
         */

        /**
         * Constructs a new S_BattleResult.
         * @memberof DcgProto
         * @classdesc Represents a S_BattleResult.
         * @implements IS_BattleResult
         * @constructor
         * @param {DcgProto.IS_BattleResult=} [p] Properties to set
         */
        function S_BattleResult(p) {
            this.PlayerResult = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_BattleResult PlayerResult.
         * @member {Array.<DcgProto.IS_PlayerResult>} PlayerResult
         * @memberof DcgProto.S_BattleResult
         * @instance
         */
        S_BattleResult.prototype.PlayerResult = $util.emptyArray;

        /**
         * S_BattleResult TotalRound.
         * @member {number} TotalRound
         * @memberof DcgProto.S_BattleResult
         * @instance
         */
        S_BattleResult.prototype.TotalRound = 0;

        /**
         * S_BattleResult EndTime.
         * @member {number} EndTime
         * @memberof DcgProto.S_BattleResult
         * @instance
         */
        S_BattleResult.prototype.EndTime = 0;

        /**
         * Creates a new S_BattleResult instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_BattleResult
         * @static
         * @param {DcgProto.IS_BattleResult=} [properties] Properties to set
         * @returns {DcgProto.S_BattleResult} S_BattleResult instance
         */
        S_BattleResult.create = function create(properties) {
            return new S_BattleResult(properties);
        };

        /**
         * Encodes the specified S_BattleResult message. Does not implicitly {@link DcgProto.S_BattleResult.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_BattleResult
         * @static
         * @param {DcgProto.IS_BattleResult} m S_BattleResult message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_BattleResult.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerResult != null && m.PlayerResult.length) {
                for (var i = 0; i < m.PlayerResult.length; ++i)
                    $root.DcgProto.S_PlayerResult.encode(m.PlayerResult[i], w.uint32(10).fork()).ldelim();
            }
            if (m.TotalRound != null && Object.hasOwnProperty.call(m, "TotalRound"))
                w.uint32(16).int32(m.TotalRound);
            if (m.EndTime != null && Object.hasOwnProperty.call(m, "EndTime"))
                w.uint32(24).uint32(m.EndTime);
            return w;
        };

        /**
         * Decodes a S_BattleResult message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_BattleResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_BattleResult} S_BattleResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_BattleResult.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_BattleResult();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.PlayerResult && m.PlayerResult.length))
                        m.PlayerResult = [];
                    m.PlayerResult.push($root.DcgProto.S_PlayerResult.decode(r, r.uint32()));
                    break;
                case 2:
                    m.TotalRound = r.int32();
                    break;
                case 3:
                    m.EndTime = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_BattleResult message.
         * @function verify
         * @memberof DcgProto.S_BattleResult
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_BattleResult.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerResult != null && m.hasOwnProperty("PlayerResult")) {
                if (!Array.isArray(m.PlayerResult))
                    return "PlayerResult: array expected";
                for (var i = 0; i < m.PlayerResult.length; ++i) {
                    {
                        var e = $root.DcgProto.S_PlayerResult.verify(m.PlayerResult[i]);
                        if (e)
                            return "PlayerResult." + e;
                    }
                }
            }
            if (m.TotalRound != null && m.hasOwnProperty("TotalRound")) {
                if (!$util.isInteger(m.TotalRound))
                    return "TotalRound: integer expected";
            }
            if (m.EndTime != null && m.hasOwnProperty("EndTime")) {
                if (!$util.isInteger(m.EndTime))
                    return "EndTime: integer expected";
            }
            return null;
        };

        return S_BattleResult;
    })();

    DcgProto.S_PlayerResult = (function() {

        /**
         * Properties of a S_PlayerResult.
         * @memberof DcgProto
         * @interface IS_PlayerResult
         * @property {DcgProto.E_FightResult|null} [FightResult] S_PlayerResult FightResult
         * @property {Long|null} [PlayerIID] S_PlayerResult PlayerIID
         * @property {string|null} [NickName] S_PlayerResult NickName
         * @property {number|null} [Icon] S_PlayerResult Icon
         * @property {number|null} [MatchScore] S_PlayerResult MatchScore
         * @property {number|null} [RankedMatchScore] S_PlayerResult RankedMatchScore
         * @property {number|null} [RankedStars] S_PlayerResult RankedStars
         */

        /**
         * Constructs a new S_PlayerResult.
         * @memberof DcgProto
         * @classdesc Represents a S_PlayerResult.
         * @implements IS_PlayerResult
         * @constructor
         * @param {DcgProto.IS_PlayerResult=} [p] Properties to set
         */
        function S_PlayerResult(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PlayerResult FightResult.
         * @member {DcgProto.E_FightResult} FightResult
         * @memberof DcgProto.S_PlayerResult
         * @instance
         */
        S_PlayerResult.prototype.FightResult = 0;

        /**
         * S_PlayerResult PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_PlayerResult
         * @instance
         */
        S_PlayerResult.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PlayerResult NickName.
         * @member {string} NickName
         * @memberof DcgProto.S_PlayerResult
         * @instance
         */
        S_PlayerResult.prototype.NickName = "";

        /**
         * S_PlayerResult Icon.
         * @member {number} Icon
         * @memberof DcgProto.S_PlayerResult
         * @instance
         */
        S_PlayerResult.prototype.Icon = 0;

        /**
         * S_PlayerResult MatchScore.
         * @member {number} MatchScore
         * @memberof DcgProto.S_PlayerResult
         * @instance
         */
        S_PlayerResult.prototype.MatchScore = 0;

        /**
         * S_PlayerResult RankedMatchScore.
         * @member {number} RankedMatchScore
         * @memberof DcgProto.S_PlayerResult
         * @instance
         */
        S_PlayerResult.prototype.RankedMatchScore = 0;

        /**
         * S_PlayerResult RankedStars.
         * @member {number} RankedStars
         * @memberof DcgProto.S_PlayerResult
         * @instance
         */
        S_PlayerResult.prototype.RankedStars = 0;

        /**
         * Creates a new S_PlayerResult instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PlayerResult
         * @static
         * @param {DcgProto.IS_PlayerResult=} [properties] Properties to set
         * @returns {DcgProto.S_PlayerResult} S_PlayerResult instance
         */
        S_PlayerResult.create = function create(properties) {
            return new S_PlayerResult(properties);
        };

        /**
         * Encodes the specified S_PlayerResult message. Does not implicitly {@link DcgProto.S_PlayerResult.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PlayerResult
         * @static
         * @param {DcgProto.IS_PlayerResult} m S_PlayerResult message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PlayerResult.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.FightResult != null && Object.hasOwnProperty.call(m, "FightResult"))
                w.uint32(8).int32(m.FightResult);
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(16).int64(m.PlayerIID);
            if (m.NickName != null && Object.hasOwnProperty.call(m, "NickName"))
                w.uint32(26).string(m.NickName);
            if (m.Icon != null && Object.hasOwnProperty.call(m, "Icon"))
                w.uint32(32).int32(m.Icon);
            if (m.MatchScore != null && Object.hasOwnProperty.call(m, "MatchScore"))
                w.uint32(40).int32(m.MatchScore);
            if (m.RankedMatchScore != null && Object.hasOwnProperty.call(m, "RankedMatchScore"))
                w.uint32(48).int32(m.RankedMatchScore);
            if (m.RankedStars != null && Object.hasOwnProperty.call(m, "RankedStars"))
                w.uint32(56).int32(m.RankedStars);
            return w;
        };

        /**
         * Decodes a S_PlayerResult message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PlayerResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PlayerResult} S_PlayerResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PlayerResult.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PlayerResult();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.FightResult = r.int32();
                    break;
                case 2:
                    m.PlayerIID = r.int64();
                    break;
                case 3:
                    m.NickName = r.string();
                    break;
                case 4:
                    m.Icon = r.int32();
                    break;
                case 5:
                    m.MatchScore = r.int32();
                    break;
                case 6:
                    m.RankedMatchScore = r.int32();
                    break;
                case 7:
                    m.RankedStars = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PlayerResult message.
         * @function verify
         * @memberof DcgProto.S_PlayerResult
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PlayerResult.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.FightResult != null && m.hasOwnProperty("FightResult")) {
                switch (m.FightResult) {
                default:
                    return "FightResult: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            }
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.NickName != null && m.hasOwnProperty("NickName")) {
                if (!$util.isString(m.NickName))
                    return "NickName: string expected";
            }
            if (m.Icon != null && m.hasOwnProperty("Icon")) {
                if (!$util.isInteger(m.Icon))
                    return "Icon: integer expected";
            }
            if (m.MatchScore != null && m.hasOwnProperty("MatchScore")) {
                if (!$util.isInteger(m.MatchScore))
                    return "MatchScore: integer expected";
            }
            if (m.RankedMatchScore != null && m.hasOwnProperty("RankedMatchScore")) {
                if (!$util.isInteger(m.RankedMatchScore))
                    return "RankedMatchScore: integer expected";
            }
            if (m.RankedStars != null && m.hasOwnProperty("RankedStars")) {
                if (!$util.isInteger(m.RankedStars))
                    return "RankedStars: integer expected";
            }
            return null;
        };

        return S_PlayerResult;
    })();

    DcgProto.S_BattleTask = (function() {

        /**
         * Properties of a S_BattleTask.
         * @memberof DcgProto
         * @interface IS_BattleTask
         * @property {Array.<DcgProto.IS_BattlePlayerTask>|null} [PlayerTask] S_BattleTask PlayerTask
         */

        /**
         * Constructs a new S_BattleTask.
         * @memberof DcgProto
         * @classdesc Represents a S_BattleTask.
         * @implements IS_BattleTask
         * @constructor
         * @param {DcgProto.IS_BattleTask=} [p] Properties to set
         */
        function S_BattleTask(p) {
            this.PlayerTask = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_BattleTask PlayerTask.
         * @member {Array.<DcgProto.IS_BattlePlayerTask>} PlayerTask
         * @memberof DcgProto.S_BattleTask
         * @instance
         */
        S_BattleTask.prototype.PlayerTask = $util.emptyArray;

        /**
         * Creates a new S_BattleTask instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_BattleTask
         * @static
         * @param {DcgProto.IS_BattleTask=} [properties] Properties to set
         * @returns {DcgProto.S_BattleTask} S_BattleTask instance
         */
        S_BattleTask.create = function create(properties) {
            return new S_BattleTask(properties);
        };

        /**
         * Encodes the specified S_BattleTask message. Does not implicitly {@link DcgProto.S_BattleTask.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_BattleTask
         * @static
         * @param {DcgProto.IS_BattleTask} m S_BattleTask message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_BattleTask.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerTask != null && m.PlayerTask.length) {
                for (var i = 0; i < m.PlayerTask.length; ++i)
                    $root.DcgProto.S_BattlePlayerTask.encode(m.PlayerTask[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_BattleTask message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_BattleTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_BattleTask} S_BattleTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_BattleTask.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_BattleTask();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.PlayerTask && m.PlayerTask.length))
                        m.PlayerTask = [];
                    m.PlayerTask.push($root.DcgProto.S_BattlePlayerTask.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_BattleTask message.
         * @function verify
         * @memberof DcgProto.S_BattleTask
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_BattleTask.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerTask != null && m.hasOwnProperty("PlayerTask")) {
                if (!Array.isArray(m.PlayerTask))
                    return "PlayerTask: array expected";
                for (var i = 0; i < m.PlayerTask.length; ++i) {
                    {
                        var e = $root.DcgProto.S_BattlePlayerTask.verify(m.PlayerTask[i]);
                        if (e)
                            return "PlayerTask." + e;
                    }
                }
            }
            return null;
        };

        return S_BattleTask;
    })();

    DcgProto.S_BattlePlayerTask = (function() {

        /**
         * Properties of a S_BattlePlayerTask.
         * @memberof DcgProto
         * @interface IS_BattlePlayerTask
         * @property {Long|null} [PlayerIID] S_BattlePlayerTask PlayerIID
         * @property {number|null} [DrawCardNum] S_BattlePlayerTask DrawCardNum
         * @property {number|null} [BlockOppAttackCount] S_BattlePlayerTask BlockOppAttackCount
         * @property {number|null} [KillMonsterNum] S_BattlePlayerTask KillMonsterNum
         * @property {number|null} [AttackCount] S_BattlePlayerTask AttackCount
         * @property {number|null} [AttackDefenseCount] S_BattlePlayerTask AttackDefenseCount
         */

        /**
         * Constructs a new S_BattlePlayerTask.
         * @memberof DcgProto
         * @classdesc Represents a S_BattlePlayerTask.
         * @implements IS_BattlePlayerTask
         * @constructor
         * @param {DcgProto.IS_BattlePlayerTask=} [p] Properties to set
         */
        function S_BattlePlayerTask(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_BattlePlayerTask PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_BattlePlayerTask
         * @instance
         */
        S_BattlePlayerTask.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_BattlePlayerTask DrawCardNum.
         * @member {number} DrawCardNum
         * @memberof DcgProto.S_BattlePlayerTask
         * @instance
         */
        S_BattlePlayerTask.prototype.DrawCardNum = 0;

        /**
         * S_BattlePlayerTask BlockOppAttackCount.
         * @member {number} BlockOppAttackCount
         * @memberof DcgProto.S_BattlePlayerTask
         * @instance
         */
        S_BattlePlayerTask.prototype.BlockOppAttackCount = 0;

        /**
         * S_BattlePlayerTask KillMonsterNum.
         * @member {number} KillMonsterNum
         * @memberof DcgProto.S_BattlePlayerTask
         * @instance
         */
        S_BattlePlayerTask.prototype.KillMonsterNum = 0;

        /**
         * S_BattlePlayerTask AttackCount.
         * @member {number} AttackCount
         * @memberof DcgProto.S_BattlePlayerTask
         * @instance
         */
        S_BattlePlayerTask.prototype.AttackCount = 0;

        /**
         * S_BattlePlayerTask AttackDefenseCount.
         * @member {number} AttackDefenseCount
         * @memberof DcgProto.S_BattlePlayerTask
         * @instance
         */
        S_BattlePlayerTask.prototype.AttackDefenseCount = 0;

        /**
         * Creates a new S_BattlePlayerTask instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_BattlePlayerTask
         * @static
         * @param {DcgProto.IS_BattlePlayerTask=} [properties] Properties to set
         * @returns {DcgProto.S_BattlePlayerTask} S_BattlePlayerTask instance
         */
        S_BattlePlayerTask.create = function create(properties) {
            return new S_BattlePlayerTask(properties);
        };

        /**
         * Encodes the specified S_BattlePlayerTask message. Does not implicitly {@link DcgProto.S_BattlePlayerTask.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_BattlePlayerTask
         * @static
         * @param {DcgProto.IS_BattlePlayerTask} m S_BattlePlayerTask message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_BattlePlayerTask.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(8).int64(m.PlayerIID);
            if (m.DrawCardNum != null && Object.hasOwnProperty.call(m, "DrawCardNum"))
                w.uint32(16).int32(m.DrawCardNum);
            if (m.BlockOppAttackCount != null && Object.hasOwnProperty.call(m, "BlockOppAttackCount"))
                w.uint32(24).int32(m.BlockOppAttackCount);
            if (m.KillMonsterNum != null && Object.hasOwnProperty.call(m, "KillMonsterNum"))
                w.uint32(32).int32(m.KillMonsterNum);
            if (m.AttackCount != null && Object.hasOwnProperty.call(m, "AttackCount"))
                w.uint32(40).int32(m.AttackCount);
            if (m.AttackDefenseCount != null && Object.hasOwnProperty.call(m, "AttackDefenseCount"))
                w.uint32(48).int32(m.AttackDefenseCount);
            return w;
        };

        /**
         * Decodes a S_BattlePlayerTask message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_BattlePlayerTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_BattlePlayerTask} S_BattlePlayerTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_BattlePlayerTask.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_BattlePlayerTask();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerIID = r.int64();
                    break;
                case 2:
                    m.DrawCardNum = r.int32();
                    break;
                case 3:
                    m.BlockOppAttackCount = r.int32();
                    break;
                case 4:
                    m.KillMonsterNum = r.int32();
                    break;
                case 5:
                    m.AttackCount = r.int32();
                    break;
                case 6:
                    m.AttackDefenseCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_BattlePlayerTask message.
         * @function verify
         * @memberof DcgProto.S_BattlePlayerTask
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_BattlePlayerTask.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.DrawCardNum != null && m.hasOwnProperty("DrawCardNum")) {
                if (!$util.isInteger(m.DrawCardNum))
                    return "DrawCardNum: integer expected";
            }
            if (m.BlockOppAttackCount != null && m.hasOwnProperty("BlockOppAttackCount")) {
                if (!$util.isInteger(m.BlockOppAttackCount))
                    return "BlockOppAttackCount: integer expected";
            }
            if (m.KillMonsterNum != null && m.hasOwnProperty("KillMonsterNum")) {
                if (!$util.isInteger(m.KillMonsterNum))
                    return "KillMonsterNum: integer expected";
            }
            if (m.AttackCount != null && m.hasOwnProperty("AttackCount")) {
                if (!$util.isInteger(m.AttackCount))
                    return "AttackCount: integer expected";
            }
            if (m.AttackDefenseCount != null && m.hasOwnProperty("AttackDefenseCount")) {
                if (!$util.isInteger(m.AttackDefenseCount))
                    return "AttackDefenseCount: integer expected";
            }
            return null;
        };

        return S_BattlePlayerTask;
    })();

    DcgProto.S_DeckInfo = (function() {

        /**
         * Properties of a S_DeckInfo.
         * @memberof DcgProto
         * @interface IS_DeckInfo
         * @property {Long|null} [DeckIID] S_DeckInfo DeckIID
         * @property {string|null} [DeckName] S_DeckInfo DeckName
         * @property {Array.<DcgProto.IS_CardData>|null} [CardEgg] S_DeckInfo CardEgg
         * @property {Array.<DcgProto.IS_CardData>|null} [CardDeck] S_DeckInfo CardDeck
         * @property {Array.<DcgProto.IS_CardData>|null} [CardHand] S_DeckInfo CardHand
         * @property {DcgProto.E_DeckType|null} [DeckType] S_DeckInfo DeckType
         * @property {number|null} [CreateTime] S_DeckInfo CreateTime
         * @property {number|null} [CfgId] S_DeckInfo CfgId
         */

        /**
         * Constructs a new S_DeckInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_DeckInfo.
         * @implements IS_DeckInfo
         * @constructor
         * @param {DcgProto.IS_DeckInfo=} [p] Properties to set
         */
        function S_DeckInfo(p) {
            this.CardEgg = [];
            this.CardDeck = [];
            this.CardHand = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_DeckInfo DeckIID.
         * @member {Long} DeckIID
         * @memberof DcgProto.S_DeckInfo
         * @instance
         */
        S_DeckInfo.prototype.DeckIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_DeckInfo DeckName.
         * @member {string} DeckName
         * @memberof DcgProto.S_DeckInfo
         * @instance
         */
        S_DeckInfo.prototype.DeckName = "";

        /**
         * S_DeckInfo CardEgg.
         * @member {Array.<DcgProto.IS_CardData>} CardEgg
         * @memberof DcgProto.S_DeckInfo
         * @instance
         */
        S_DeckInfo.prototype.CardEgg = $util.emptyArray;

        /**
         * S_DeckInfo CardDeck.
         * @member {Array.<DcgProto.IS_CardData>} CardDeck
         * @memberof DcgProto.S_DeckInfo
         * @instance
         */
        S_DeckInfo.prototype.CardDeck = $util.emptyArray;

        /**
         * S_DeckInfo CardHand.
         * @member {Array.<DcgProto.IS_CardData>} CardHand
         * @memberof DcgProto.S_DeckInfo
         * @instance
         */
        S_DeckInfo.prototype.CardHand = $util.emptyArray;

        /**
         * S_DeckInfo DeckType.
         * @member {DcgProto.E_DeckType} DeckType
         * @memberof DcgProto.S_DeckInfo
         * @instance
         */
        S_DeckInfo.prototype.DeckType = 0;

        /**
         * S_DeckInfo CreateTime.
         * @member {number} CreateTime
         * @memberof DcgProto.S_DeckInfo
         * @instance
         */
        S_DeckInfo.prototype.CreateTime = 0;

        /**
         * S_DeckInfo CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_DeckInfo
         * @instance
         */
        S_DeckInfo.prototype.CfgId = 0;

        /**
         * Creates a new S_DeckInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_DeckInfo
         * @static
         * @param {DcgProto.IS_DeckInfo=} [properties] Properties to set
         * @returns {DcgProto.S_DeckInfo} S_DeckInfo instance
         */
        S_DeckInfo.create = function create(properties) {
            return new S_DeckInfo(properties);
        };

        /**
         * Encodes the specified S_DeckInfo message. Does not implicitly {@link DcgProto.S_DeckInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_DeckInfo
         * @static
         * @param {DcgProto.IS_DeckInfo} m S_DeckInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_DeckInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DeckIID != null && Object.hasOwnProperty.call(m, "DeckIID"))
                w.uint32(8).int64(m.DeckIID);
            if (m.DeckName != null && Object.hasOwnProperty.call(m, "DeckName"))
                w.uint32(18).string(m.DeckName);
            if (m.CardEgg != null && m.CardEgg.length) {
                for (var i = 0; i < m.CardEgg.length; ++i)
                    $root.DcgProto.S_CardData.encode(m.CardEgg[i], w.uint32(26).fork()).ldelim();
            }
            if (m.CardDeck != null && m.CardDeck.length) {
                for (var i = 0; i < m.CardDeck.length; ++i)
                    $root.DcgProto.S_CardData.encode(m.CardDeck[i], w.uint32(34).fork()).ldelim();
            }
            if (m.CardHand != null && m.CardHand.length) {
                for (var i = 0; i < m.CardHand.length; ++i)
                    $root.DcgProto.S_CardData.encode(m.CardHand[i], w.uint32(42).fork()).ldelim();
            }
            if (m.DeckType != null && Object.hasOwnProperty.call(m, "DeckType"))
                w.uint32(48).int32(m.DeckType);
            if (m.CreateTime != null && Object.hasOwnProperty.call(m, "CreateTime"))
                w.uint32(56).uint32(m.CreateTime);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(64).int32(m.CfgId);
            return w;
        };

        /**
         * Decodes a S_DeckInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_DeckInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_DeckInfo} S_DeckInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_DeckInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_DeckInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DeckIID = r.int64();
                    break;
                case 2:
                    m.DeckName = r.string();
                    break;
                case 3:
                    if (!(m.CardEgg && m.CardEgg.length))
                        m.CardEgg = [];
                    m.CardEgg.push($root.DcgProto.S_CardData.decode(r, r.uint32()));
                    break;
                case 4:
                    if (!(m.CardDeck && m.CardDeck.length))
                        m.CardDeck = [];
                    m.CardDeck.push($root.DcgProto.S_CardData.decode(r, r.uint32()));
                    break;
                case 5:
                    if (!(m.CardHand && m.CardHand.length))
                        m.CardHand = [];
                    m.CardHand.push($root.DcgProto.S_CardData.decode(r, r.uint32()));
                    break;
                case 6:
                    m.DeckType = r.int32();
                    break;
                case 7:
                    m.CreateTime = r.uint32();
                    break;
                case 8:
                    m.CfgId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_DeckInfo message.
         * @function verify
         * @memberof DcgProto.S_DeckInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_DeckInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.DeckIID != null && m.hasOwnProperty("DeckIID")) {
                if (!$util.isInteger(m.DeckIID) && !(m.DeckIID && $util.isInteger(m.DeckIID.low) && $util.isInteger(m.DeckIID.high)))
                    return "DeckIID: integer|Long expected";
            }
            if (m.DeckName != null && m.hasOwnProperty("DeckName")) {
                if (!$util.isString(m.DeckName))
                    return "DeckName: string expected";
            }
            if (m.CardEgg != null && m.hasOwnProperty("CardEgg")) {
                if (!Array.isArray(m.CardEgg))
                    return "CardEgg: array expected";
                for (var i = 0; i < m.CardEgg.length; ++i) {
                    {
                        var e = $root.DcgProto.S_CardData.verify(m.CardEgg[i]);
                        if (e)
                            return "CardEgg." + e;
                    }
                }
            }
            if (m.CardDeck != null && m.hasOwnProperty("CardDeck")) {
                if (!Array.isArray(m.CardDeck))
                    return "CardDeck: array expected";
                for (var i = 0; i < m.CardDeck.length; ++i) {
                    {
                        var e = $root.DcgProto.S_CardData.verify(m.CardDeck[i]);
                        if (e)
                            return "CardDeck." + e;
                    }
                }
            }
            if (m.CardHand != null && m.hasOwnProperty("CardHand")) {
                if (!Array.isArray(m.CardHand))
                    return "CardHand: array expected";
                for (var i = 0; i < m.CardHand.length; ++i) {
                    {
                        var e = $root.DcgProto.S_CardData.verify(m.CardHand[i]);
                        if (e)
                            return "CardHand." + e;
                    }
                }
            }
            if (m.DeckType != null && m.hasOwnProperty("DeckType")) {
                switch (m.DeckType) {
                default:
                    return "DeckType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            }
            if (m.CreateTime != null && m.hasOwnProperty("CreateTime")) {
                if (!$util.isInteger(m.CreateTime))
                    return "CreateTime: integer expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            return null;
        };

        return S_DeckInfo;
    })();

    DcgProto.S_DeckExtendInfo = (function() {

        /**
         * Properties of a S_DeckExtendInfo.
         * @memberof DcgProto
         * @interface IS_DeckExtendInfo
         * @property {Long|null} [DeckExtendIID] S_DeckExtendInfo DeckExtendIID
         * @property {Long|null} [DeckIID] S_DeckExtendInfo DeckIID
         * @property {number|null} [CardBoxCfgId] S_DeckExtendInfo CardBoxCfgId
         * @property {number|null} [CardCoverCfgId] S_DeckExtendInfo CardCoverCfgId
         * @property {number|null} [DuelCfgId] S_DeckExtendInfo DuelCfgId
         * @property {Array.<number>|null} [Pages] S_DeckExtendInfo Pages
         */

        /**
         * Constructs a new S_DeckExtendInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_DeckExtendInfo.
         * @implements IS_DeckExtendInfo
         * @constructor
         * @param {DcgProto.IS_DeckExtendInfo=} [p] Properties to set
         */
        function S_DeckExtendInfo(p) {
            this.Pages = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_DeckExtendInfo DeckExtendIID.
         * @member {Long} DeckExtendIID
         * @memberof DcgProto.S_DeckExtendInfo
         * @instance
         */
        S_DeckExtendInfo.prototype.DeckExtendIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_DeckExtendInfo DeckIID.
         * @member {Long} DeckIID
         * @memberof DcgProto.S_DeckExtendInfo
         * @instance
         */
        S_DeckExtendInfo.prototype.DeckIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_DeckExtendInfo CardBoxCfgId.
         * @member {number} CardBoxCfgId
         * @memberof DcgProto.S_DeckExtendInfo
         * @instance
         */
        S_DeckExtendInfo.prototype.CardBoxCfgId = 0;

        /**
         * S_DeckExtendInfo CardCoverCfgId.
         * @member {number} CardCoverCfgId
         * @memberof DcgProto.S_DeckExtendInfo
         * @instance
         */
        S_DeckExtendInfo.prototype.CardCoverCfgId = 0;

        /**
         * S_DeckExtendInfo DuelCfgId.
         * @member {number} DuelCfgId
         * @memberof DcgProto.S_DeckExtendInfo
         * @instance
         */
        S_DeckExtendInfo.prototype.DuelCfgId = 0;

        /**
         * S_DeckExtendInfo Pages.
         * @member {Array.<number>} Pages
         * @memberof DcgProto.S_DeckExtendInfo
         * @instance
         */
        S_DeckExtendInfo.prototype.Pages = $util.emptyArray;

        /**
         * Creates a new S_DeckExtendInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_DeckExtendInfo
         * @static
         * @param {DcgProto.IS_DeckExtendInfo=} [properties] Properties to set
         * @returns {DcgProto.S_DeckExtendInfo} S_DeckExtendInfo instance
         */
        S_DeckExtendInfo.create = function create(properties) {
            return new S_DeckExtendInfo(properties);
        };

        /**
         * Encodes the specified S_DeckExtendInfo message. Does not implicitly {@link DcgProto.S_DeckExtendInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_DeckExtendInfo
         * @static
         * @param {DcgProto.IS_DeckExtendInfo} m S_DeckExtendInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_DeckExtendInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DeckExtendIID != null && Object.hasOwnProperty.call(m, "DeckExtendIID"))
                w.uint32(8).int64(m.DeckExtendIID);
            if (m.DeckIID != null && Object.hasOwnProperty.call(m, "DeckIID"))
                w.uint32(16).int64(m.DeckIID);
            if (m.CardBoxCfgId != null && Object.hasOwnProperty.call(m, "CardBoxCfgId"))
                w.uint32(24).int32(m.CardBoxCfgId);
            if (m.CardCoverCfgId != null && Object.hasOwnProperty.call(m, "CardCoverCfgId"))
                w.uint32(32).int32(m.CardCoverCfgId);
            if (m.DuelCfgId != null && Object.hasOwnProperty.call(m, "DuelCfgId"))
                w.uint32(40).int32(m.DuelCfgId);
            if (m.Pages != null && m.Pages.length) {
                w.uint32(58).fork();
                for (var i = 0; i < m.Pages.length; ++i)
                    w.int32(m.Pages[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_DeckExtendInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_DeckExtendInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_DeckExtendInfo} S_DeckExtendInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_DeckExtendInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_DeckExtendInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DeckExtendIID = r.int64();
                    break;
                case 2:
                    m.DeckIID = r.int64();
                    break;
                case 3:
                    m.CardBoxCfgId = r.int32();
                    break;
                case 4:
                    m.CardCoverCfgId = r.int32();
                    break;
                case 5:
                    m.DuelCfgId = r.int32();
                    break;
                case 7:
                    if (!(m.Pages && m.Pages.length))
                        m.Pages = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Pages.push(r.int32());
                    } else
                        m.Pages.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_DeckExtendInfo message.
         * @function verify
         * @memberof DcgProto.S_DeckExtendInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_DeckExtendInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.DeckExtendIID != null && m.hasOwnProperty("DeckExtendIID")) {
                if (!$util.isInteger(m.DeckExtendIID) && !(m.DeckExtendIID && $util.isInteger(m.DeckExtendIID.low) && $util.isInteger(m.DeckExtendIID.high)))
                    return "DeckExtendIID: integer|Long expected";
            }
            if (m.DeckIID != null && m.hasOwnProperty("DeckIID")) {
                if (!$util.isInteger(m.DeckIID) && !(m.DeckIID && $util.isInteger(m.DeckIID.low) && $util.isInteger(m.DeckIID.high)))
                    return "DeckIID: integer|Long expected";
            }
            if (m.CardBoxCfgId != null && m.hasOwnProperty("CardBoxCfgId")) {
                if (!$util.isInteger(m.CardBoxCfgId))
                    return "CardBoxCfgId: integer expected";
            }
            if (m.CardCoverCfgId != null && m.hasOwnProperty("CardCoverCfgId")) {
                if (!$util.isInteger(m.CardCoverCfgId))
                    return "CardCoverCfgId: integer expected";
            }
            if (m.DuelCfgId != null && m.hasOwnProperty("DuelCfgId")) {
                if (!$util.isInteger(m.DuelCfgId))
                    return "DuelCfgId: integer expected";
            }
            if (m.Pages != null && m.hasOwnProperty("Pages")) {
                if (!Array.isArray(m.Pages))
                    return "Pages: array expected";
                for (var i = 0; i < m.Pages.length; ++i) {
                    if (!$util.isInteger(m.Pages[i]))
                        return "Pages: integer[] expected";
                }
            }
            return null;
        };

        return S_DeckExtendInfo;
    })();

    DcgProto.S_CardData = (function() {

        /**
         * Properties of a S_CardData.
         * @memberof DcgProto
         * @interface IS_CardData
         * @property {number|null} [CfgId] S_CardData CfgId
         * @property {number|null} [Num] S_CardData Num
         * @property {string|null} [Number] S_CardData Number
         */

        /**
         * Constructs a new S_CardData.
         * @memberof DcgProto
         * @classdesc Represents a S_CardData.
         * @implements IS_CardData
         * @constructor
         * @param {DcgProto.IS_CardData=} [p] Properties to set
         */
        function S_CardData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_CardData CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_CardData
         * @instance
         */
        S_CardData.prototype.CfgId = 0;

        /**
         * S_CardData Num.
         * @member {number} Num
         * @memberof DcgProto.S_CardData
         * @instance
         */
        S_CardData.prototype.Num = 0;

        /**
         * S_CardData Number.
         * @member {string} Number
         * @memberof DcgProto.S_CardData
         * @instance
         */
        S_CardData.prototype.Number = "";

        /**
         * Creates a new S_CardData instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_CardData
         * @static
         * @param {DcgProto.IS_CardData=} [properties] Properties to set
         * @returns {DcgProto.S_CardData} S_CardData instance
         */
        S_CardData.create = function create(properties) {
            return new S_CardData(properties);
        };

        /**
         * Encodes the specified S_CardData message. Does not implicitly {@link DcgProto.S_CardData.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_CardData
         * @static
         * @param {DcgProto.IS_CardData} m S_CardData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_CardData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(8).int32(m.CfgId);
            if (m.Num != null && Object.hasOwnProperty.call(m, "Num"))
                w.uint32(16).int32(m.Num);
            if (m.Number != null && Object.hasOwnProperty.call(m, "Number"))
                w.uint32(26).string(m.Number);
            return w;
        };

        /**
         * Decodes a S_CardData message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_CardData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_CardData} S_CardData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_CardData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_CardData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CfgId = r.int32();
                    break;
                case 2:
                    m.Num = r.int32();
                    break;
                case 3:
                    m.Number = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_CardData message.
         * @function verify
         * @memberof DcgProto.S_CardData
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_CardData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.Num != null && m.hasOwnProperty("Num")) {
                if (!$util.isInteger(m.Num))
                    return "Num: integer expected";
            }
            if (m.Number != null && m.hasOwnProperty("Number")) {
                if (!$util.isString(m.Number))
                    return "Number: string expected";
            }
            return null;
        };

        return S_CardData;
    })();

    DcgProto.S_CardInfo = (function() {

        /**
         * Properties of a S_CardInfo.
         * @memberof DcgProto
         * @interface IS_CardInfo
         * @property {Long|null} [CardIID] S_CardInfo CardIID
         * @property {number|null} [CfgId] S_CardInfo CfgId
         * @property {number|null} [Num] S_CardInfo Num
         */

        /**
         * Constructs a new S_CardInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_CardInfo.
         * @implements IS_CardInfo
         * @constructor
         * @param {DcgProto.IS_CardInfo=} [p] Properties to set
         */
        function S_CardInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_CardInfo CardIID.
         * @member {Long} CardIID
         * @memberof DcgProto.S_CardInfo
         * @instance
         */
        S_CardInfo.prototype.CardIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_CardInfo CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_CardInfo
         * @instance
         */
        S_CardInfo.prototype.CfgId = 0;

        /**
         * S_CardInfo Num.
         * @member {number} Num
         * @memberof DcgProto.S_CardInfo
         * @instance
         */
        S_CardInfo.prototype.Num = 0;

        /**
         * Creates a new S_CardInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_CardInfo
         * @static
         * @param {DcgProto.IS_CardInfo=} [properties] Properties to set
         * @returns {DcgProto.S_CardInfo} S_CardInfo instance
         */
        S_CardInfo.create = function create(properties) {
            return new S_CardInfo(properties);
        };

        /**
         * Encodes the specified S_CardInfo message. Does not implicitly {@link DcgProto.S_CardInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_CardInfo
         * @static
         * @param {DcgProto.IS_CardInfo} m S_CardInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_CardInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardIID != null && Object.hasOwnProperty.call(m, "CardIID"))
                w.uint32(8).int64(m.CardIID);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            if (m.Num != null && Object.hasOwnProperty.call(m, "Num"))
                w.uint32(24).int32(m.Num);
            return w;
        };

        /**
         * Decodes a S_CardInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_CardInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_CardInfo} S_CardInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_CardInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_CardInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CardIID = r.int64();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                case 3:
                    m.Num = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_CardInfo message.
         * @function verify
         * @memberof DcgProto.S_CardInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_CardInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardIID != null && m.hasOwnProperty("CardIID")) {
                if (!$util.isInteger(m.CardIID) && !(m.CardIID && $util.isInteger(m.CardIID.low) && $util.isInteger(m.CardIID.high)))
                    return "CardIID: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.Num != null && m.hasOwnProperty("Num")) {
                if (!$util.isInteger(m.Num))
                    return "Num: integer expected";
            }
            return null;
        };

        return S_CardInfo;
    })();

    DcgProto.S_ShelvesRefTime = (function() {

        /**
         * Properties of a S_ShelvesRefTime.
         * @memberof DcgProto
         * @interface IS_ShelvesRefTime
         * @property {number|null} [CfgTime] S_ShelvesRefTime CfgTime
         * @property {number|null} [Time] S_ShelvesRefTime Time
         */

        /**
         * Constructs a new S_ShelvesRefTime.
         * @memberof DcgProto
         * @classdesc Represents a S_ShelvesRefTime.
         * @implements IS_ShelvesRefTime
         * @constructor
         * @param {DcgProto.IS_ShelvesRefTime=} [p] Properties to set
         */
        function S_ShelvesRefTime(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_ShelvesRefTime CfgTime.
         * @member {number} CfgTime
         * @memberof DcgProto.S_ShelvesRefTime
         * @instance
         */
        S_ShelvesRefTime.prototype.CfgTime = 0;

        /**
         * S_ShelvesRefTime Time.
         * @member {number} Time
         * @memberof DcgProto.S_ShelvesRefTime
         * @instance
         */
        S_ShelvesRefTime.prototype.Time = 0;

        /**
         * Creates a new S_ShelvesRefTime instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_ShelvesRefTime
         * @static
         * @param {DcgProto.IS_ShelvesRefTime=} [properties] Properties to set
         * @returns {DcgProto.S_ShelvesRefTime} S_ShelvesRefTime instance
         */
        S_ShelvesRefTime.create = function create(properties) {
            return new S_ShelvesRefTime(properties);
        };

        /**
         * Encodes the specified S_ShelvesRefTime message. Does not implicitly {@link DcgProto.S_ShelvesRefTime.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_ShelvesRefTime
         * @static
         * @param {DcgProto.IS_ShelvesRefTime} m S_ShelvesRefTime message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_ShelvesRefTime.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Time != null && Object.hasOwnProperty.call(m, "Time"))
                w.uint32(8).uint32(m.Time);
            if (m.CfgTime != null && Object.hasOwnProperty.call(m, "CfgTime"))
                w.uint32(16).int32(m.CfgTime);
            return w;
        };

        /**
         * Decodes a S_ShelvesRefTime message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_ShelvesRefTime
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_ShelvesRefTime} S_ShelvesRefTime
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_ShelvesRefTime.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_ShelvesRefTime();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 2:
                    m.CfgTime = r.int32();
                    break;
                case 1:
                    m.Time = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_ShelvesRefTime message.
         * @function verify
         * @memberof DcgProto.S_ShelvesRefTime
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_ShelvesRefTime.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CfgTime != null && m.hasOwnProperty("CfgTime")) {
                if (!$util.isInteger(m.CfgTime))
                    return "CfgTime: integer expected";
            }
            if (m.Time != null && m.hasOwnProperty("Time")) {
                if (!$util.isInteger(m.Time))
                    return "Time: integer expected";
            }
            return null;
        };

        return S_ShelvesRefTime;
    })();

    DcgProto.S_Item = (function() {

        /**
         * Properties of a S_Item.
         * @memberof DcgProto
         * @interface IS_Item
         * @property {Long|null} [InstanceId] S_Item InstanceId
         * @property {Long|null} [Num] S_Item Num
         * @property {number|null} [CfgId] S_Item CfgId
         */

        /**
         * Constructs a new S_Item.
         * @memberof DcgProto
         * @classdesc Represents a S_Item.
         * @implements IS_Item
         * @constructor
         * @param {DcgProto.IS_Item=} [p] Properties to set
         */
        function S_Item(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_Item InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_Item
         * @instance
         */
        S_Item.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_Item Num.
         * @member {Long} Num
         * @memberof DcgProto.S_Item
         * @instance
         */
        S_Item.prototype.Num = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_Item CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_Item
         * @instance
         */
        S_Item.prototype.CfgId = 0;

        /**
         * Creates a new S_Item instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_Item
         * @static
         * @param {DcgProto.IS_Item=} [properties] Properties to set
         * @returns {DcgProto.S_Item} S_Item instance
         */
        S_Item.create = function create(properties) {
            return new S_Item(properties);
        };

        /**
         * Encodes the specified S_Item message. Does not implicitly {@link DcgProto.S_Item.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_Item
         * @static
         * @param {DcgProto.IS_Item} m S_Item message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_Item.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.Num != null && Object.hasOwnProperty.call(m, "Num"))
                w.uint32(16).int64(m.Num);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(24).int32(m.CfgId);
            return w;
        };

        /**
         * Decodes a S_Item message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_Item
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_Item} S_Item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_Item.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_Item();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.Num = r.int64();
                    break;
                case 3:
                    m.CfgId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_Item message.
         * @function verify
         * @memberof DcgProto.S_Item
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_Item.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.Num != null && m.hasOwnProperty("Num")) {
                if (!$util.isInteger(m.Num) && !(m.Num && $util.isInteger(m.Num.low) && $util.isInteger(m.Num.high)))
                    return "Num: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            return null;
        };

        return S_Item;
    })();

    DcgProto.S_Digimon = (function() {

        /**
         * Properties of a S_Digimon.
         * @memberof DcgProto
         * @interface IS_Digimon
         * @property {Long|null} [InstanceId] S_Digimon InstanceId
         * @property {number|null} [CfgId] S_Digimon CfgId
         * @property {number|null} [Exp] S_Digimon Exp
         */

        /**
         * Constructs a new S_Digimon.
         * @memberof DcgProto
         * @classdesc Represents a S_Digimon.
         * @implements IS_Digimon
         * @constructor
         * @param {DcgProto.IS_Digimon=} [p] Properties to set
         */
        function S_Digimon(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_Digimon InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_Digimon
         * @instance
         */
        S_Digimon.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_Digimon CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_Digimon
         * @instance
         */
        S_Digimon.prototype.CfgId = 0;

        /**
         * S_Digimon Exp.
         * @member {number} Exp
         * @memberof DcgProto.S_Digimon
         * @instance
         */
        S_Digimon.prototype.Exp = 0;

        /**
         * Creates a new S_Digimon instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_Digimon
         * @static
         * @param {DcgProto.IS_Digimon=} [properties] Properties to set
         * @returns {DcgProto.S_Digimon} S_Digimon instance
         */
        S_Digimon.create = function create(properties) {
            return new S_Digimon(properties);
        };

        /**
         * Encodes the specified S_Digimon message. Does not implicitly {@link DcgProto.S_Digimon.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_Digimon
         * @static
         * @param {DcgProto.IS_Digimon} m S_Digimon message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_Digimon.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            if (m.Exp != null && Object.hasOwnProperty.call(m, "Exp"))
                w.uint32(24).int32(m.Exp);
            return w;
        };

        /**
         * Decodes a S_Digimon message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_Digimon
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_Digimon} S_Digimon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_Digimon.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_Digimon();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                case 3:
                    m.Exp = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_Digimon message.
         * @function verify
         * @memberof DcgProto.S_Digimon
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_Digimon.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.Exp != null && m.hasOwnProperty("Exp")) {
                if (!$util.isInteger(m.Exp))
                    return "Exp: integer expected";
            }
            return null;
        };

        return S_Digimon;
    })();

    DcgProto.S_DigimonEvo = (function() {

        /**
         * Properties of a S_DigimonEvo.
         * @memberof DcgProto
         * @interface IS_DigimonEvo
         * @property {Long|null} [DigimonIID] S_DigimonEvo DigimonIID
         * @property {number|null} [TrainTime] S_DigimonEvo TrainTime
         */

        /**
         * Constructs a new S_DigimonEvo.
         * @memberof DcgProto
         * @classdesc Represents a S_DigimonEvo.
         * @implements IS_DigimonEvo
         * @constructor
         * @param {DcgProto.IS_DigimonEvo=} [p] Properties to set
         */
        function S_DigimonEvo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_DigimonEvo DigimonIID.
         * @member {Long} DigimonIID
         * @memberof DcgProto.S_DigimonEvo
         * @instance
         */
        S_DigimonEvo.prototype.DigimonIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_DigimonEvo TrainTime.
         * @member {number} TrainTime
         * @memberof DcgProto.S_DigimonEvo
         * @instance
         */
        S_DigimonEvo.prototype.TrainTime = 0;

        /**
         * Creates a new S_DigimonEvo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_DigimonEvo
         * @static
         * @param {DcgProto.IS_DigimonEvo=} [properties] Properties to set
         * @returns {DcgProto.S_DigimonEvo} S_DigimonEvo instance
         */
        S_DigimonEvo.create = function create(properties) {
            return new S_DigimonEvo(properties);
        };

        /**
         * Encodes the specified S_DigimonEvo message. Does not implicitly {@link DcgProto.S_DigimonEvo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_DigimonEvo
         * @static
         * @param {DcgProto.IS_DigimonEvo} m S_DigimonEvo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_DigimonEvo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DigimonIID != null && Object.hasOwnProperty.call(m, "DigimonIID"))
                w.uint32(8).int64(m.DigimonIID);
            if (m.TrainTime != null && Object.hasOwnProperty.call(m, "TrainTime"))
                w.uint32(16).uint32(m.TrainTime);
            return w;
        };

        /**
         * Decodes a S_DigimonEvo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_DigimonEvo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_DigimonEvo} S_DigimonEvo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_DigimonEvo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_DigimonEvo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DigimonIID = r.int64();
                    break;
                case 2:
                    m.TrainTime = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_DigimonEvo message.
         * @function verify
         * @memberof DcgProto.S_DigimonEvo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_DigimonEvo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.DigimonIID != null && m.hasOwnProperty("DigimonIID")) {
                if (!$util.isInteger(m.DigimonIID) && !(m.DigimonIID && $util.isInteger(m.DigimonIID.low) && $util.isInteger(m.DigimonIID.high)))
                    return "DigimonIID: integer|Long expected";
            }
            if (m.TrainTime != null && m.hasOwnProperty("TrainTime")) {
                if (!$util.isInteger(m.TrainTime))
                    return "TrainTime: integer expected";
            }
            return null;
        };

        return S_DigimonEvo;
    })();

    DcgProto.S_DigimonLogs = (function() {

        /**
         * Properties of a S_DigimonLogs.
         * @memberof DcgProto
         * @interface IS_DigimonLogs
         * @property {number|null} [CfgId] S_DigimonLogs CfgId
         * @property {number|null} [CardCfgId] S_DigimonLogs CardCfgId
         * @property {number|null} [CreateTime] S_DigimonLogs CreateTime
         */

        /**
         * Constructs a new S_DigimonLogs.
         * @memberof DcgProto
         * @classdesc Represents a S_DigimonLogs.
         * @implements IS_DigimonLogs
         * @constructor
         * @param {DcgProto.IS_DigimonLogs=} [p] Properties to set
         */
        function S_DigimonLogs(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_DigimonLogs CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_DigimonLogs
         * @instance
         */
        S_DigimonLogs.prototype.CfgId = 0;

        /**
         * S_DigimonLogs CardCfgId.
         * @member {number} CardCfgId
         * @memberof DcgProto.S_DigimonLogs
         * @instance
         */
        S_DigimonLogs.prototype.CardCfgId = 0;

        /**
         * S_DigimonLogs CreateTime.
         * @member {number} CreateTime
         * @memberof DcgProto.S_DigimonLogs
         * @instance
         */
        S_DigimonLogs.prototype.CreateTime = 0;

        /**
         * Creates a new S_DigimonLogs instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_DigimonLogs
         * @static
         * @param {DcgProto.IS_DigimonLogs=} [properties] Properties to set
         * @returns {DcgProto.S_DigimonLogs} S_DigimonLogs instance
         */
        S_DigimonLogs.create = function create(properties) {
            return new S_DigimonLogs(properties);
        };

        /**
         * Encodes the specified S_DigimonLogs message. Does not implicitly {@link DcgProto.S_DigimonLogs.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_DigimonLogs
         * @static
         * @param {DcgProto.IS_DigimonLogs} m S_DigimonLogs message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_DigimonLogs.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(8).int32(m.CfgId);
            if (m.CardCfgId != null && Object.hasOwnProperty.call(m, "CardCfgId"))
                w.uint32(16).int32(m.CardCfgId);
            if (m.CreateTime != null && Object.hasOwnProperty.call(m, "CreateTime"))
                w.uint32(24).uint32(m.CreateTime);
            return w;
        };

        /**
         * Decodes a S_DigimonLogs message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_DigimonLogs
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_DigimonLogs} S_DigimonLogs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_DigimonLogs.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_DigimonLogs();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CfgId = r.int32();
                    break;
                case 2:
                    m.CardCfgId = r.int32();
                    break;
                case 3:
                    m.CreateTime = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_DigimonLogs message.
         * @function verify
         * @memberof DcgProto.S_DigimonLogs
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_DigimonLogs.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.CardCfgId != null && m.hasOwnProperty("CardCfgId")) {
                if (!$util.isInteger(m.CardCfgId))
                    return "CardCfgId: integer expected";
            }
            if (m.CreateTime != null && m.hasOwnProperty("CreateTime")) {
                if (!$util.isInteger(m.CreateTime))
                    return "CreateTime: integer expected";
            }
            return null;
        };

        return S_DigimonLogs;
    })();

    DcgProto.S_Card = (function() {

        /**
         * Properties of a S_Card.
         * @memberof DcgProto
         * @interface IS_Card
         * @property {Long|null} [InstanceId] S_Card InstanceId
         * @property {Long|null} [Num] S_Card Num
         * @property {number|null} [CfgId] S_Card CfgId
         * @property {number|null} [CreateTime] S_Card CreateTime
         */

        /**
         * Constructs a new S_Card.
         * @memberof DcgProto
         * @classdesc Represents a S_Card.
         * @implements IS_Card
         * @constructor
         * @param {DcgProto.IS_Card=} [p] Properties to set
         */
        function S_Card(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_Card InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_Card
         * @instance
         */
        S_Card.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_Card Num.
         * @member {Long} Num
         * @memberof DcgProto.S_Card
         * @instance
         */
        S_Card.prototype.Num = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_Card CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_Card
         * @instance
         */
        S_Card.prototype.CfgId = 0;

        /**
         * S_Card CreateTime.
         * @member {number} CreateTime
         * @memberof DcgProto.S_Card
         * @instance
         */
        S_Card.prototype.CreateTime = 0;

        /**
         * Creates a new S_Card instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_Card
         * @static
         * @param {DcgProto.IS_Card=} [properties] Properties to set
         * @returns {DcgProto.S_Card} S_Card instance
         */
        S_Card.create = function create(properties) {
            return new S_Card(properties);
        };

        /**
         * Encodes the specified S_Card message. Does not implicitly {@link DcgProto.S_Card.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_Card
         * @static
         * @param {DcgProto.IS_Card} m S_Card message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_Card.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.Num != null && Object.hasOwnProperty.call(m, "Num"))
                w.uint32(16).int64(m.Num);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(24).int32(m.CfgId);
            if (m.CreateTime != null && Object.hasOwnProperty.call(m, "CreateTime"))
                w.uint32(32).uint32(m.CreateTime);
            return w;
        };

        /**
         * Decodes a S_Card message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_Card
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_Card} S_Card
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_Card.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_Card();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.Num = r.int64();
                    break;
                case 3:
                    m.CfgId = r.int32();
                    break;
                case 4:
                    m.CreateTime = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_Card message.
         * @function verify
         * @memberof DcgProto.S_Card
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_Card.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.Num != null && m.hasOwnProperty("Num")) {
                if (!$util.isInteger(m.Num) && !(m.Num && $util.isInteger(m.Num.low) && $util.isInteger(m.Num.high)))
                    return "Num: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.CreateTime != null && m.hasOwnProperty("CreateTime")) {
                if (!$util.isInteger(m.CreateTime))
                    return "CreateTime: integer expected";
            }
            return null;
        };

        return S_Card;
    })();

    DcgProto.S_Shop = (function() {

        /**
         * Properties of a S_Shop.
         * @memberof DcgProto
         * @interface IS_Shop
         * @property {Long|null} [InstanceId] S_Shop InstanceId
         * @property {number|null} [ShopCfgId] S_Shop ShopCfgId
         * @property {Array.<DcgProto.IS_ShopGoodsShelvesInfo>|null} [ShopDetail] S_Shop ShopDetail
         * @property {number|null} [CreateTime] S_Shop CreateTime
         */

        /**
         * Constructs a new S_Shop.
         * @memberof DcgProto
         * @classdesc Represents a S_Shop.
         * @implements IS_Shop
         * @constructor
         * @param {DcgProto.IS_Shop=} [p] Properties to set
         */
        function S_Shop(p) {
            this.ShopDetail = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_Shop InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_Shop
         * @instance
         */
        S_Shop.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_Shop ShopCfgId.
         * @member {number} ShopCfgId
         * @memberof DcgProto.S_Shop
         * @instance
         */
        S_Shop.prototype.ShopCfgId = 0;

        /**
         * S_Shop ShopDetail.
         * @member {Array.<DcgProto.IS_ShopGoodsShelvesInfo>} ShopDetail
         * @memberof DcgProto.S_Shop
         * @instance
         */
        S_Shop.prototype.ShopDetail = $util.emptyArray;

        /**
         * S_Shop CreateTime.
         * @member {number} CreateTime
         * @memberof DcgProto.S_Shop
         * @instance
         */
        S_Shop.prototype.CreateTime = 0;

        /**
         * Creates a new S_Shop instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_Shop
         * @static
         * @param {DcgProto.IS_Shop=} [properties] Properties to set
         * @returns {DcgProto.S_Shop} S_Shop instance
         */
        S_Shop.create = function create(properties) {
            return new S_Shop(properties);
        };

        /**
         * Encodes the specified S_Shop message. Does not implicitly {@link DcgProto.S_Shop.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_Shop
         * @static
         * @param {DcgProto.IS_Shop} m S_Shop message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_Shop.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.ShopCfgId != null && Object.hasOwnProperty.call(m, "ShopCfgId"))
                w.uint32(16).int32(m.ShopCfgId);
            if (m.ShopDetail != null && m.ShopDetail.length) {
                for (var i = 0; i < m.ShopDetail.length; ++i)
                    $root.DcgProto.S_ShopGoodsShelvesInfo.encode(m.ShopDetail[i], w.uint32(26).fork()).ldelim();
            }
            if (m.CreateTime != null && Object.hasOwnProperty.call(m, "CreateTime"))
                w.uint32(32).uint32(m.CreateTime);
            return w;
        };

        /**
         * Decodes a S_Shop message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_Shop
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_Shop} S_Shop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_Shop.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_Shop();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.ShopCfgId = r.int32();
                    break;
                case 3:
                    if (!(m.ShopDetail && m.ShopDetail.length))
                        m.ShopDetail = [];
                    m.ShopDetail.push($root.DcgProto.S_ShopGoodsShelvesInfo.decode(r, r.uint32()));
                    break;
                case 4:
                    m.CreateTime = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_Shop message.
         * @function verify
         * @memberof DcgProto.S_Shop
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_Shop.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.ShopCfgId != null && m.hasOwnProperty("ShopCfgId")) {
                if (!$util.isInteger(m.ShopCfgId))
                    return "ShopCfgId: integer expected";
            }
            if (m.ShopDetail != null && m.hasOwnProperty("ShopDetail")) {
                if (!Array.isArray(m.ShopDetail))
                    return "ShopDetail: array expected";
                for (var i = 0; i < m.ShopDetail.length; ++i) {
                    {
                        var e = $root.DcgProto.S_ShopGoodsShelvesInfo.verify(m.ShopDetail[i]);
                        if (e)
                            return "ShopDetail." + e;
                    }
                }
            }
            if (m.CreateTime != null && m.hasOwnProperty("CreateTime")) {
                if (!$util.isInteger(m.CreateTime))
                    return "CreateTime: integer expected";
            }
            return null;
        };

        return S_Shop;
    })();

    DcgProto.S_GoodsShelvesInfo = (function() {

        /**
         * Properties of a S_GoodsShelvesInfo.
         * @memberof DcgProto
         * @interface IS_GoodsShelvesInfo
         * @property {DcgProto.IS_ShopGoodsShelvesInfo|null} [Info] S_GoodsShelvesInfo Info
         */

        /**
         * Constructs a new S_GoodsShelvesInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_GoodsShelvesInfo.
         * @implements IS_GoodsShelvesInfo
         * @constructor
         * @param {DcgProto.IS_GoodsShelvesInfo=} [p] Properties to set
         */
        function S_GoodsShelvesInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_GoodsShelvesInfo Info.
         * @member {DcgProto.IS_ShopGoodsShelvesInfo|null|undefined} Info
         * @memberof DcgProto.S_GoodsShelvesInfo
         * @instance
         */
        S_GoodsShelvesInfo.prototype.Info = null;

        /**
         * Creates a new S_GoodsShelvesInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_GoodsShelvesInfo
         * @static
         * @param {DcgProto.IS_GoodsShelvesInfo=} [properties] Properties to set
         * @returns {DcgProto.S_GoodsShelvesInfo} S_GoodsShelvesInfo instance
         */
        S_GoodsShelvesInfo.create = function create(properties) {
            return new S_GoodsShelvesInfo(properties);
        };

        /**
         * Encodes the specified S_GoodsShelvesInfo message. Does not implicitly {@link DcgProto.S_GoodsShelvesInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_GoodsShelvesInfo
         * @static
         * @param {DcgProto.IS_GoodsShelvesInfo} m S_GoodsShelvesInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_GoodsShelvesInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Info != null && Object.hasOwnProperty.call(m, "Info"))
                $root.DcgProto.S_ShopGoodsShelvesInfo.encode(m.Info, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_GoodsShelvesInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_GoodsShelvesInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_GoodsShelvesInfo} S_GoodsShelvesInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_GoodsShelvesInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_GoodsShelvesInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Info = $root.DcgProto.S_ShopGoodsShelvesInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_GoodsShelvesInfo message.
         * @function verify
         * @memberof DcgProto.S_GoodsShelvesInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_GoodsShelvesInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Info != null && m.hasOwnProperty("Info")) {
                {
                    var e = $root.DcgProto.S_ShopGoodsShelvesInfo.verify(m.Info);
                    if (e)
                        return "Info." + e;
                }
            }
            return null;
        };

        return S_GoodsShelvesInfo;
    })();

    DcgProto.S_ShopGoodsShelvesInfo = (function() {

        /**
         * Properties of a S_ShopGoodsShelvesInfo.
         * @memberof DcgProto
         * @interface IS_ShopGoodsShelvesInfo
         * @property {number|null} [GoodsShelvesId] S_ShopGoodsShelvesInfo GoodsShelvesId
         * @property {number|null} [BuyNum] S_ShopGoodsShelvesInfo BuyNum
         * @property {number|null} [CfgId] S_ShopGoodsShelvesInfo CfgId
         * @property {number|null} [DetailCfgId] S_ShopGoodsShelvesInfo DetailCfgId
         * @property {number|null} [NextRefreshTime] S_ShopGoodsShelvesInfo NextRefreshTime
         */

        /**
         * Constructs a new S_ShopGoodsShelvesInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_ShopGoodsShelvesInfo.
         * @implements IS_ShopGoodsShelvesInfo
         * @constructor
         * @param {DcgProto.IS_ShopGoodsShelvesInfo=} [p] Properties to set
         */
        function S_ShopGoodsShelvesInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_ShopGoodsShelvesInfo GoodsShelvesId.
         * @member {number} GoodsShelvesId
         * @memberof DcgProto.S_ShopGoodsShelvesInfo
         * @instance
         */
        S_ShopGoodsShelvesInfo.prototype.GoodsShelvesId = 0;

        /**
         * S_ShopGoodsShelvesInfo BuyNum.
         * @member {number} BuyNum
         * @memberof DcgProto.S_ShopGoodsShelvesInfo
         * @instance
         */
        S_ShopGoodsShelvesInfo.prototype.BuyNum = 0;

        /**
         * S_ShopGoodsShelvesInfo CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_ShopGoodsShelvesInfo
         * @instance
         */
        S_ShopGoodsShelvesInfo.prototype.CfgId = 0;

        /**
         * S_ShopGoodsShelvesInfo DetailCfgId.
         * @member {number} DetailCfgId
         * @memberof DcgProto.S_ShopGoodsShelvesInfo
         * @instance
         */
        S_ShopGoodsShelvesInfo.prototype.DetailCfgId = 0;

        /**
         * S_ShopGoodsShelvesInfo NextRefreshTime.
         * @member {number} NextRefreshTime
         * @memberof DcgProto.S_ShopGoodsShelvesInfo
         * @instance
         */
        S_ShopGoodsShelvesInfo.prototype.NextRefreshTime = 0;

        /**
         * Creates a new S_ShopGoodsShelvesInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_ShopGoodsShelvesInfo
         * @static
         * @param {DcgProto.IS_ShopGoodsShelvesInfo=} [properties] Properties to set
         * @returns {DcgProto.S_ShopGoodsShelvesInfo} S_ShopGoodsShelvesInfo instance
         */
        S_ShopGoodsShelvesInfo.create = function create(properties) {
            return new S_ShopGoodsShelvesInfo(properties);
        };

        /**
         * Encodes the specified S_ShopGoodsShelvesInfo message. Does not implicitly {@link DcgProto.S_ShopGoodsShelvesInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_ShopGoodsShelvesInfo
         * @static
         * @param {DcgProto.IS_ShopGoodsShelvesInfo} m S_ShopGoodsShelvesInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_ShopGoodsShelvesInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.GoodsShelvesId != null && Object.hasOwnProperty.call(m, "GoodsShelvesId"))
                w.uint32(8).int32(m.GoodsShelvesId);
            if (m.BuyNum != null && Object.hasOwnProperty.call(m, "BuyNum"))
                w.uint32(16).int32(m.BuyNum);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(24).int32(m.CfgId);
            if (m.DetailCfgId != null && Object.hasOwnProperty.call(m, "DetailCfgId"))
                w.uint32(32).int32(m.DetailCfgId);
            if (m.NextRefreshTime != null && Object.hasOwnProperty.call(m, "NextRefreshTime"))
                w.uint32(40).uint32(m.NextRefreshTime);
            return w;
        };

        /**
         * Decodes a S_ShopGoodsShelvesInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_ShopGoodsShelvesInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_ShopGoodsShelvesInfo} S_ShopGoodsShelvesInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_ShopGoodsShelvesInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_ShopGoodsShelvesInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.GoodsShelvesId = r.int32();
                    break;
                case 2:
                    m.BuyNum = r.int32();
                    break;
                case 3:
                    m.CfgId = r.int32();
                    break;
                case 4:
                    m.DetailCfgId = r.int32();
                    break;
                case 5:
                    m.NextRefreshTime = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_ShopGoodsShelvesInfo message.
         * @function verify
         * @memberof DcgProto.S_ShopGoodsShelvesInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_ShopGoodsShelvesInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.GoodsShelvesId != null && m.hasOwnProperty("GoodsShelvesId")) {
                if (!$util.isInteger(m.GoodsShelvesId))
                    return "GoodsShelvesId: integer expected";
            }
            if (m.BuyNum != null && m.hasOwnProperty("BuyNum")) {
                if (!$util.isInteger(m.BuyNum))
                    return "BuyNum: integer expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.DetailCfgId != null && m.hasOwnProperty("DetailCfgId")) {
                if (!$util.isInteger(m.DetailCfgId))
                    return "DetailCfgId: integer expected";
            }
            if (m.NextRefreshTime != null && m.hasOwnProperty("NextRefreshTime")) {
                if (!$util.isInteger(m.NextRefreshTime))
                    return "NextRefreshTime: integer expected";
            }
            return null;
        };

        return S_ShopGoodsShelvesInfo;
    })();

    DcgProto.S_Parts = (function() {

        /**
         * Properties of a S_Parts.
         * @memberof DcgProto
         * @interface IS_Parts
         * @property {Long|null} [InstanceId] S_Parts InstanceId
         * @property {number|null} [CfgId] S_Parts CfgId
         */

        /**
         * Constructs a new S_Parts.
         * @memberof DcgProto
         * @classdesc Represents a S_Parts.
         * @implements IS_Parts
         * @constructor
         * @param {DcgProto.IS_Parts=} [p] Properties to set
         */
        function S_Parts(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_Parts InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_Parts
         * @instance
         */
        S_Parts.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_Parts CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_Parts
         * @instance
         */
        S_Parts.prototype.CfgId = 0;

        /**
         * Creates a new S_Parts instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_Parts
         * @static
         * @param {DcgProto.IS_Parts=} [properties] Properties to set
         * @returns {DcgProto.S_Parts} S_Parts instance
         */
        S_Parts.create = function create(properties) {
            return new S_Parts(properties);
        };

        /**
         * Encodes the specified S_Parts message. Does not implicitly {@link DcgProto.S_Parts.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_Parts
         * @static
         * @param {DcgProto.IS_Parts} m S_Parts message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_Parts.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            return w;
        };

        /**
         * Decodes a S_Parts message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_Parts
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_Parts} S_Parts
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_Parts.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_Parts();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_Parts message.
         * @function verify
         * @memberof DcgProto.S_Parts
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_Parts.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            return null;
        };

        return S_Parts;
    })();

    DcgProto.S_CardBag = (function() {

        /**
         * Properties of a S_CardBag.
         * @memberof DcgProto
         * @interface IS_CardBag
         * @property {Long|null} [InstanceId] S_CardBag InstanceId
         * @property {number|null} [CfgId] S_CardBag CfgId
         * @property {number|null} [TotalBuyCount] S_CardBag TotalBuyCount
         * @property {number|null} [BuyCount] S_CardBag BuyCount
         * @property {number|null} [TenBuyCount] S_CardBag TenBuyCount
         * @property {number|null} [NextRefreshTime] S_CardBag NextRefreshTime
         * @property {number|null} [CreateTime] S_CardBag CreateTime
         */

        /**
         * Constructs a new S_CardBag.
         * @memberof DcgProto
         * @classdesc Represents a S_CardBag.
         * @implements IS_CardBag
         * @constructor
         * @param {DcgProto.IS_CardBag=} [p] Properties to set
         */
        function S_CardBag(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_CardBag InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_CardBag
         * @instance
         */
        S_CardBag.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_CardBag CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_CardBag
         * @instance
         */
        S_CardBag.prototype.CfgId = 0;

        /**
         * S_CardBag TotalBuyCount.
         * @member {number} TotalBuyCount
         * @memberof DcgProto.S_CardBag
         * @instance
         */
        S_CardBag.prototype.TotalBuyCount = 0;

        /**
         * S_CardBag BuyCount.
         * @member {number} BuyCount
         * @memberof DcgProto.S_CardBag
         * @instance
         */
        S_CardBag.prototype.BuyCount = 0;

        /**
         * S_CardBag TenBuyCount.
         * @member {number} TenBuyCount
         * @memberof DcgProto.S_CardBag
         * @instance
         */
        S_CardBag.prototype.TenBuyCount = 0;

        /**
         * S_CardBag NextRefreshTime.
         * @member {number} NextRefreshTime
         * @memberof DcgProto.S_CardBag
         * @instance
         */
        S_CardBag.prototype.NextRefreshTime = 0;

        /**
         * S_CardBag CreateTime.
         * @member {number} CreateTime
         * @memberof DcgProto.S_CardBag
         * @instance
         */
        S_CardBag.prototype.CreateTime = 0;

        /**
         * Creates a new S_CardBag instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_CardBag
         * @static
         * @param {DcgProto.IS_CardBag=} [properties] Properties to set
         * @returns {DcgProto.S_CardBag} S_CardBag instance
         */
        S_CardBag.create = function create(properties) {
            return new S_CardBag(properties);
        };

        /**
         * Encodes the specified S_CardBag message. Does not implicitly {@link DcgProto.S_CardBag.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_CardBag
         * @static
         * @param {DcgProto.IS_CardBag} m S_CardBag message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_CardBag.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            if (m.TotalBuyCount != null && Object.hasOwnProperty.call(m, "TotalBuyCount"))
                w.uint32(24).int32(m.TotalBuyCount);
            if (m.BuyCount != null && Object.hasOwnProperty.call(m, "BuyCount"))
                w.uint32(32).int32(m.BuyCount);
            if (m.TenBuyCount != null && Object.hasOwnProperty.call(m, "TenBuyCount"))
                w.uint32(40).int32(m.TenBuyCount);
            if (m.NextRefreshTime != null && Object.hasOwnProperty.call(m, "NextRefreshTime"))
                w.uint32(48).uint32(m.NextRefreshTime);
            if (m.CreateTime != null && Object.hasOwnProperty.call(m, "CreateTime"))
                w.uint32(56).uint32(m.CreateTime);
            return w;
        };

        /**
         * Decodes a S_CardBag message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_CardBag
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_CardBag} S_CardBag
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_CardBag.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_CardBag();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                case 3:
                    m.TotalBuyCount = r.int32();
                    break;
                case 4:
                    m.BuyCount = r.int32();
                    break;
                case 5:
                    m.TenBuyCount = r.int32();
                    break;
                case 6:
                    m.NextRefreshTime = r.uint32();
                    break;
                case 7:
                    m.CreateTime = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_CardBag message.
         * @function verify
         * @memberof DcgProto.S_CardBag
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_CardBag.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.TotalBuyCount != null && m.hasOwnProperty("TotalBuyCount")) {
                if (!$util.isInteger(m.TotalBuyCount))
                    return "TotalBuyCount: integer expected";
            }
            if (m.BuyCount != null && m.hasOwnProperty("BuyCount")) {
                if (!$util.isInteger(m.BuyCount))
                    return "BuyCount: integer expected";
            }
            if (m.TenBuyCount != null && m.hasOwnProperty("TenBuyCount")) {
                if (!$util.isInteger(m.TenBuyCount))
                    return "TenBuyCount: integer expected";
            }
            if (m.NextRefreshTime != null && m.hasOwnProperty("NextRefreshTime")) {
                if (!$util.isInteger(m.NextRefreshTime))
                    return "NextRefreshTime: integer expected";
            }
            if (m.CreateTime != null && m.hasOwnProperty("CreateTime")) {
                if (!$util.isInteger(m.CreateTime))
                    return "CreateTime: integer expected";
            }
            return null;
        };

        return S_CardBag;
    })();

    DcgProto.S_CardCollect = (function() {

        /**
         * Properties of a S_CardCollect.
         * @memberof DcgProto
         * @interface IS_CardCollect
         * @property {Long|null} [InstanceId] S_CardCollect InstanceId
         * @property {Array.<number>|null} [CfgId] S_CardCollect CfgId
         */

        /**
         * Constructs a new S_CardCollect.
         * @memberof DcgProto
         * @classdesc Represents a S_CardCollect.
         * @implements IS_CardCollect
         * @constructor
         * @param {DcgProto.IS_CardCollect=} [p] Properties to set
         */
        function S_CardCollect(p) {
            this.CfgId = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_CardCollect InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_CardCollect
         * @instance
         */
        S_CardCollect.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_CardCollect CfgId.
         * @member {Array.<number>} CfgId
         * @memberof DcgProto.S_CardCollect
         * @instance
         */
        S_CardCollect.prototype.CfgId = $util.emptyArray;

        /**
         * Creates a new S_CardCollect instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_CardCollect
         * @static
         * @param {DcgProto.IS_CardCollect=} [properties] Properties to set
         * @returns {DcgProto.S_CardCollect} S_CardCollect instance
         */
        S_CardCollect.create = function create(properties) {
            return new S_CardCollect(properties);
        };

        /**
         * Encodes the specified S_CardCollect message. Does not implicitly {@link DcgProto.S_CardCollect.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_CardCollect
         * @static
         * @param {DcgProto.IS_CardCollect} m S_CardCollect message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_CardCollect.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.CfgId != null && m.CfgId.length) {
                w.uint32(18).fork();
                for (var i = 0; i < m.CfgId.length; ++i)
                    w.int32(m.CfgId[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_CardCollect message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_CardCollect
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_CardCollect} S_CardCollect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_CardCollect.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_CardCollect();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    if (!(m.CfgId && m.CfgId.length))
                        m.CfgId = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.CfgId.push(r.int32());
                    } else
                        m.CfgId.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_CardCollect message.
         * @function verify
         * @memberof DcgProto.S_CardCollect
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_CardCollect.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!Array.isArray(m.CfgId))
                    return "CfgId: array expected";
                for (var i = 0; i < m.CfgId.length; ++i) {
                    if (!$util.isInteger(m.CfgId[i]))
                        return "CfgId: integer[] expected";
                }
            }
            return null;
        };

        return S_CardCollect;
    })();

    DcgProto.S_MailNew = (function() {

        /**
         * Properties of a S_MailNew.
         * @memberof DcgProto
         * @interface IS_MailNew
         * @property {Long|null} [InstanceId] S_MailNew InstanceId
         * @property {DcgProto.E_MailNewType|null} [Type] S_MailNew Type
         * @property {DcgProto.E_MailNewStatus|null} [Status] S_MailNew Status
         * @property {number|null} [Collection] S_MailNew Collection
         * @property {string|null} [SendFrom] S_MailNew SendFrom
         * @property {Long|null} [SendFromIID] S_MailNew SendFromIID
         * @property {number|null} [ExpiredTime] S_MailNew ExpiredTime
         * @property {number|null} [CreateTime] S_MailNew CreateTime
         * @property {DcgProto.IS_MailParam|null} [TemplateParam] S_MailNew TemplateParam
         * @property {string|null} [Attach] S_MailNew Attach
         */

        /**
         * Constructs a new S_MailNew.
         * @memberof DcgProto
         * @classdesc Represents a S_MailNew.
         * @implements IS_MailNew
         * @constructor
         * @param {DcgProto.IS_MailNew=} [p] Properties to set
         */
        function S_MailNew(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_MailNew InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_MailNew
         * @instance
         */
        S_MailNew.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_MailNew Type.
         * @member {DcgProto.E_MailNewType} Type
         * @memberof DcgProto.S_MailNew
         * @instance
         */
        S_MailNew.prototype.Type = 0;

        /**
         * S_MailNew Status.
         * @member {DcgProto.E_MailNewStatus} Status
         * @memberof DcgProto.S_MailNew
         * @instance
         */
        S_MailNew.prototype.Status = 0;

        /**
         * S_MailNew Collection.
         * @member {number} Collection
         * @memberof DcgProto.S_MailNew
         * @instance
         */
        S_MailNew.prototype.Collection = 0;

        /**
         * S_MailNew SendFrom.
         * @member {string} SendFrom
         * @memberof DcgProto.S_MailNew
         * @instance
         */
        S_MailNew.prototype.SendFrom = "";

        /**
         * S_MailNew SendFromIID.
         * @member {Long} SendFromIID
         * @memberof DcgProto.S_MailNew
         * @instance
         */
        S_MailNew.prototype.SendFromIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_MailNew ExpiredTime.
         * @member {number} ExpiredTime
         * @memberof DcgProto.S_MailNew
         * @instance
         */
        S_MailNew.prototype.ExpiredTime = 0;

        /**
         * S_MailNew CreateTime.
         * @member {number} CreateTime
         * @memberof DcgProto.S_MailNew
         * @instance
         */
        S_MailNew.prototype.CreateTime = 0;

        /**
         * S_MailNew TemplateParam.
         * @member {DcgProto.IS_MailParam|null|undefined} TemplateParam
         * @memberof DcgProto.S_MailNew
         * @instance
         */
        S_MailNew.prototype.TemplateParam = null;

        /**
         * S_MailNew Attach.
         * @member {string} Attach
         * @memberof DcgProto.S_MailNew
         * @instance
         */
        S_MailNew.prototype.Attach = "";

        /**
         * Creates a new S_MailNew instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_MailNew
         * @static
         * @param {DcgProto.IS_MailNew=} [properties] Properties to set
         * @returns {DcgProto.S_MailNew} S_MailNew instance
         */
        S_MailNew.create = function create(properties) {
            return new S_MailNew(properties);
        };

        /**
         * Encodes the specified S_MailNew message. Does not implicitly {@link DcgProto.S_MailNew.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_MailNew
         * @static
         * @param {DcgProto.IS_MailNew} m S_MailNew message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_MailNew.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.Type != null && Object.hasOwnProperty.call(m, "Type"))
                w.uint32(16).int32(m.Type);
            if (m.Status != null && Object.hasOwnProperty.call(m, "Status"))
                w.uint32(24).int32(m.Status);
            if (m.Collection != null && Object.hasOwnProperty.call(m, "Collection"))
                w.uint32(32).int32(m.Collection);
            if (m.SendFrom != null && Object.hasOwnProperty.call(m, "SendFrom"))
                w.uint32(42).string(m.SendFrom);
            if (m.SendFromIID != null && Object.hasOwnProperty.call(m, "SendFromIID"))
                w.uint32(48).int64(m.SendFromIID);
            if (m.ExpiredTime != null && Object.hasOwnProperty.call(m, "ExpiredTime"))
                w.uint32(56).uint32(m.ExpiredTime);
            if (m.CreateTime != null && Object.hasOwnProperty.call(m, "CreateTime"))
                w.uint32(64).uint32(m.CreateTime);
            if (m.TemplateParam != null && Object.hasOwnProperty.call(m, "TemplateParam"))
                $root.DcgProto.S_MailParam.encode(m.TemplateParam, w.uint32(74).fork()).ldelim();
            if (m.Attach != null && Object.hasOwnProperty.call(m, "Attach"))
                w.uint32(82).string(m.Attach);
            return w;
        };

        /**
         * Decodes a S_MailNew message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_MailNew
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_MailNew} S_MailNew
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_MailNew.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_MailNew();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.Type = r.int32();
                    break;
                case 3:
                    m.Status = r.int32();
                    break;
                case 4:
                    m.Collection = r.int32();
                    break;
                case 5:
                    m.SendFrom = r.string();
                    break;
                case 6:
                    m.SendFromIID = r.int64();
                    break;
                case 7:
                    m.ExpiredTime = r.uint32();
                    break;
                case 8:
                    m.CreateTime = r.uint32();
                    break;
                case 9:
                    m.TemplateParam = $root.DcgProto.S_MailParam.decode(r, r.uint32());
                    break;
                case 10:
                    m.Attach = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_MailNew message.
         * @function verify
         * @memberof DcgProto.S_MailNew
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_MailNew.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.Type != null && m.hasOwnProperty("Type")) {
                switch (m.Type) {
                default:
                    return "Type: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    break;
                }
            }
            if (m.Status != null && m.hasOwnProperty("Status")) {
                switch (m.Status) {
                default:
                    return "Status: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.Collection != null && m.hasOwnProperty("Collection")) {
                if (!$util.isInteger(m.Collection))
                    return "Collection: integer expected";
            }
            if (m.SendFrom != null && m.hasOwnProperty("SendFrom")) {
                if (!$util.isString(m.SendFrom))
                    return "SendFrom: string expected";
            }
            if (m.SendFromIID != null && m.hasOwnProperty("SendFromIID")) {
                if (!$util.isInteger(m.SendFromIID) && !(m.SendFromIID && $util.isInteger(m.SendFromIID.low) && $util.isInteger(m.SendFromIID.high)))
                    return "SendFromIID: integer|Long expected";
            }
            if (m.ExpiredTime != null && m.hasOwnProperty("ExpiredTime")) {
                if (!$util.isInteger(m.ExpiredTime))
                    return "ExpiredTime: integer expected";
            }
            if (m.CreateTime != null && m.hasOwnProperty("CreateTime")) {
                if (!$util.isInteger(m.CreateTime))
                    return "CreateTime: integer expected";
            }
            if (m.TemplateParam != null && m.hasOwnProperty("TemplateParam")) {
                {
                    var e = $root.DcgProto.S_MailParam.verify(m.TemplateParam);
                    if (e)
                        return "TemplateParam." + e;
                }
            }
            if (m.Attach != null && m.hasOwnProperty("Attach")) {
                if (!$util.isString(m.Attach))
                    return "Attach: string expected";
            }
            return null;
        };

        return S_MailNew;
    })();

    DcgProto.S_MailParam = (function() {

        /**
         * Properties of a S_MailParam.
         * @memberof DcgProto
         * @interface IS_MailParam
         * @property {DcgProto.IS_MailSys|null} [MailSys] S_MailParam MailSys
         * @property {DcgProto.IS_MailPvpRoom|null} [PvpRoom] S_MailParam PvpRoom
         * @property {DcgProto.IS_MailMatchFight|null} [MatchFight] S_MailParam MatchFight
         * @property {DcgProto.IS_MailFriendFight|null} [FriendFight] S_MailParam FriendFight
         * @property {DcgProto.IS_MailTaskBox|null} [TaskBox] S_MailParam TaskBox
         * @property {DcgProto.IS_MailTaskLogin|null} [TaskLogin] S_MailParam TaskLogin
         */

        /**
         * Constructs a new S_MailParam.
         * @memberof DcgProto
         * @classdesc Represents a S_MailParam.
         * @implements IS_MailParam
         * @constructor
         * @param {DcgProto.IS_MailParam=} [p] Properties to set
         */
        function S_MailParam(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_MailParam MailSys.
         * @member {DcgProto.IS_MailSys|null|undefined} MailSys
         * @memberof DcgProto.S_MailParam
         * @instance
         */
        S_MailParam.prototype.MailSys = null;

        /**
         * S_MailParam PvpRoom.
         * @member {DcgProto.IS_MailPvpRoom|null|undefined} PvpRoom
         * @memberof DcgProto.S_MailParam
         * @instance
         */
        S_MailParam.prototype.PvpRoom = null;

        /**
         * S_MailParam MatchFight.
         * @member {DcgProto.IS_MailMatchFight|null|undefined} MatchFight
         * @memberof DcgProto.S_MailParam
         * @instance
         */
        S_MailParam.prototype.MatchFight = null;

        /**
         * S_MailParam FriendFight.
         * @member {DcgProto.IS_MailFriendFight|null|undefined} FriendFight
         * @memberof DcgProto.S_MailParam
         * @instance
         */
        S_MailParam.prototype.FriendFight = null;

        /**
         * S_MailParam TaskBox.
         * @member {DcgProto.IS_MailTaskBox|null|undefined} TaskBox
         * @memberof DcgProto.S_MailParam
         * @instance
         */
        S_MailParam.prototype.TaskBox = null;

        /**
         * S_MailParam TaskLogin.
         * @member {DcgProto.IS_MailTaskLogin|null|undefined} TaskLogin
         * @memberof DcgProto.S_MailParam
         * @instance
         */
        S_MailParam.prototype.TaskLogin = null;

        /**
         * Creates a new S_MailParam instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_MailParam
         * @static
         * @param {DcgProto.IS_MailParam=} [properties] Properties to set
         * @returns {DcgProto.S_MailParam} S_MailParam instance
         */
        S_MailParam.create = function create(properties) {
            return new S_MailParam(properties);
        };

        /**
         * Encodes the specified S_MailParam message. Does not implicitly {@link DcgProto.S_MailParam.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_MailParam
         * @static
         * @param {DcgProto.IS_MailParam} m S_MailParam message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_MailParam.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.MailSys != null && Object.hasOwnProperty.call(m, "MailSys"))
                $root.DcgProto.S_MailSys.encode(m.MailSys, w.uint32(10).fork()).ldelim();
            if (m.PvpRoom != null && Object.hasOwnProperty.call(m, "PvpRoom"))
                $root.DcgProto.S_MailPvpRoom.encode(m.PvpRoom, w.uint32(18).fork()).ldelim();
            if (m.MatchFight != null && Object.hasOwnProperty.call(m, "MatchFight"))
                $root.DcgProto.S_MailMatchFight.encode(m.MatchFight, w.uint32(26).fork()).ldelim();
            if (m.FriendFight != null && Object.hasOwnProperty.call(m, "FriendFight"))
                $root.DcgProto.S_MailFriendFight.encode(m.FriendFight, w.uint32(34).fork()).ldelim();
            if (m.TaskBox != null && Object.hasOwnProperty.call(m, "TaskBox"))
                $root.DcgProto.S_MailTaskBox.encode(m.TaskBox, w.uint32(42).fork()).ldelim();
            if (m.TaskLogin != null && Object.hasOwnProperty.call(m, "TaskLogin"))
                $root.DcgProto.S_MailTaskLogin.encode(m.TaskLogin, w.uint32(50).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_MailParam message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_MailParam
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_MailParam} S_MailParam
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_MailParam.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_MailParam();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.MailSys = $root.DcgProto.S_MailSys.decode(r, r.uint32());
                    break;
                case 2:
                    m.PvpRoom = $root.DcgProto.S_MailPvpRoom.decode(r, r.uint32());
                    break;
                case 3:
                    m.MatchFight = $root.DcgProto.S_MailMatchFight.decode(r, r.uint32());
                    break;
                case 4:
                    m.FriendFight = $root.DcgProto.S_MailFriendFight.decode(r, r.uint32());
                    break;
                case 5:
                    m.TaskBox = $root.DcgProto.S_MailTaskBox.decode(r, r.uint32());
                    break;
                case 6:
                    m.TaskLogin = $root.DcgProto.S_MailTaskLogin.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_MailParam message.
         * @function verify
         * @memberof DcgProto.S_MailParam
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_MailParam.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.MailSys != null && m.hasOwnProperty("MailSys")) {
                {
                    var e = $root.DcgProto.S_MailSys.verify(m.MailSys);
                    if (e)
                        return "MailSys." + e;
                }
            }
            if (m.PvpRoom != null && m.hasOwnProperty("PvpRoom")) {
                {
                    var e = $root.DcgProto.S_MailPvpRoom.verify(m.PvpRoom);
                    if (e)
                        return "PvpRoom." + e;
                }
            }
            if (m.MatchFight != null && m.hasOwnProperty("MatchFight")) {
                {
                    var e = $root.DcgProto.S_MailMatchFight.verify(m.MatchFight);
                    if (e)
                        return "MatchFight." + e;
                }
            }
            if (m.FriendFight != null && m.hasOwnProperty("FriendFight")) {
                {
                    var e = $root.DcgProto.S_MailFriendFight.verify(m.FriendFight);
                    if (e)
                        return "FriendFight." + e;
                }
            }
            if (m.TaskBox != null && m.hasOwnProperty("TaskBox")) {
                {
                    var e = $root.DcgProto.S_MailTaskBox.verify(m.TaskBox);
                    if (e)
                        return "TaskBox." + e;
                }
            }
            if (m.TaskLogin != null && m.hasOwnProperty("TaskLogin")) {
                {
                    var e = $root.DcgProto.S_MailTaskLogin.verify(m.TaskLogin);
                    if (e)
                        return "TaskLogin." + e;
                }
            }
            return null;
        };

        return S_MailParam;
    })();

    DcgProto.S_MailSys = (function() {

        /**
         * Properties of a S_MailSys.
         * @memberof DcgProto
         * @interface IS_MailSys
         * @property {string|null} [Title] S_MailSys Title
         * @property {string|null} [Sender] S_MailSys Sender
         * @property {string|null} [UpdateUrl] S_MailSys UpdateUrl
         * @property {Array.<Long>|null} [ReceiverIds] S_MailSys ReceiverIds
         * @property {string|null} [Content] S_MailSys Content
         */

        /**
         * Constructs a new S_MailSys.
         * @memberof DcgProto
         * @classdesc Represents a S_MailSys.
         * @implements IS_MailSys
         * @constructor
         * @param {DcgProto.IS_MailSys=} [p] Properties to set
         */
        function S_MailSys(p) {
            this.ReceiverIds = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_MailSys Title.
         * @member {string} Title
         * @memberof DcgProto.S_MailSys
         * @instance
         */
        S_MailSys.prototype.Title = "";

        /**
         * S_MailSys Sender.
         * @member {string} Sender
         * @memberof DcgProto.S_MailSys
         * @instance
         */
        S_MailSys.prototype.Sender = "";

        /**
         * S_MailSys UpdateUrl.
         * @member {string} UpdateUrl
         * @memberof DcgProto.S_MailSys
         * @instance
         */
        S_MailSys.prototype.UpdateUrl = "";

        /**
         * S_MailSys ReceiverIds.
         * @member {Array.<Long>} ReceiverIds
         * @memberof DcgProto.S_MailSys
         * @instance
         */
        S_MailSys.prototype.ReceiverIds = $util.emptyArray;

        /**
         * S_MailSys Content.
         * @member {string} Content
         * @memberof DcgProto.S_MailSys
         * @instance
         */
        S_MailSys.prototype.Content = "";

        /**
         * Creates a new S_MailSys instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_MailSys
         * @static
         * @param {DcgProto.IS_MailSys=} [properties] Properties to set
         * @returns {DcgProto.S_MailSys} S_MailSys instance
         */
        S_MailSys.create = function create(properties) {
            return new S_MailSys(properties);
        };

        /**
         * Encodes the specified S_MailSys message. Does not implicitly {@link DcgProto.S_MailSys.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_MailSys
         * @static
         * @param {DcgProto.IS_MailSys} m S_MailSys message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_MailSys.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Title != null && Object.hasOwnProperty.call(m, "Title"))
                w.uint32(10).string(m.Title);
            if (m.Sender != null && Object.hasOwnProperty.call(m, "Sender"))
                w.uint32(18).string(m.Sender);
            if (m.UpdateUrl != null && Object.hasOwnProperty.call(m, "UpdateUrl"))
                w.uint32(26).string(m.UpdateUrl);
            if (m.ReceiverIds != null && m.ReceiverIds.length) {
                w.uint32(34).fork();
                for (var i = 0; i < m.ReceiverIds.length; ++i)
                    w.int64(m.ReceiverIds[i]);
                w.ldelim();
            }
            if (m.Content != null && Object.hasOwnProperty.call(m, "Content"))
                w.uint32(42).string(m.Content);
            return w;
        };

        /**
         * Decodes a S_MailSys message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_MailSys
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_MailSys} S_MailSys
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_MailSys.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_MailSys();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Title = r.string();
                    break;
                case 2:
                    m.Sender = r.string();
                    break;
                case 3:
                    m.UpdateUrl = r.string();
                    break;
                case 4:
                    if (!(m.ReceiverIds && m.ReceiverIds.length))
                        m.ReceiverIds = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.ReceiverIds.push(r.int64());
                    } else
                        m.ReceiverIds.push(r.int64());
                    break;
                case 5:
                    m.Content = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_MailSys message.
         * @function verify
         * @memberof DcgProto.S_MailSys
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_MailSys.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Title != null && m.hasOwnProperty("Title")) {
                if (!$util.isString(m.Title))
                    return "Title: string expected";
            }
            if (m.Sender != null && m.hasOwnProperty("Sender")) {
                if (!$util.isString(m.Sender))
                    return "Sender: string expected";
            }
            if (m.UpdateUrl != null && m.hasOwnProperty("UpdateUrl")) {
                if (!$util.isString(m.UpdateUrl))
                    return "UpdateUrl: string expected";
            }
            if (m.ReceiverIds != null && m.hasOwnProperty("ReceiverIds")) {
                if (!Array.isArray(m.ReceiverIds))
                    return "ReceiverIds: array expected";
                for (var i = 0; i < m.ReceiverIds.length; ++i) {
                    if (!$util.isInteger(m.ReceiverIds[i]) && !(m.ReceiverIds[i] && $util.isInteger(m.ReceiverIds[i].low) && $util.isInteger(m.ReceiverIds[i].high)))
                        return "ReceiverIds: integer|Long[] expected";
                }
            }
            if (m.Content != null && m.hasOwnProperty("Content")) {
                if (!$util.isString(m.Content))
                    return "Content: string expected";
            }
            return null;
        };

        return S_MailSys;
    })();

    DcgProto.S_MailPvpRoom = (function() {

        /**
         * Properties of a S_MailPvpRoom.
         * @memberof DcgProto
         * @interface IS_MailPvpRoom
         * @property {string|null} [RoomName] S_MailPvpRoom RoomName
         * @property {number|null} [CfgId] S_MailPvpRoom CfgId
         * @property {number|null} [Rank] S_MailPvpRoom Rank
         */

        /**
         * Constructs a new S_MailPvpRoom.
         * @memberof DcgProto
         * @classdesc Represents a S_MailPvpRoom.
         * @implements IS_MailPvpRoom
         * @constructor
         * @param {DcgProto.IS_MailPvpRoom=} [p] Properties to set
         */
        function S_MailPvpRoom(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_MailPvpRoom RoomName.
         * @member {string} RoomName
         * @memberof DcgProto.S_MailPvpRoom
         * @instance
         */
        S_MailPvpRoom.prototype.RoomName = "";

        /**
         * S_MailPvpRoom CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_MailPvpRoom
         * @instance
         */
        S_MailPvpRoom.prototype.CfgId = 0;

        /**
         * S_MailPvpRoom Rank.
         * @member {number} Rank
         * @memberof DcgProto.S_MailPvpRoom
         * @instance
         */
        S_MailPvpRoom.prototype.Rank = 0;

        /**
         * Creates a new S_MailPvpRoom instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_MailPvpRoom
         * @static
         * @param {DcgProto.IS_MailPvpRoom=} [properties] Properties to set
         * @returns {DcgProto.S_MailPvpRoom} S_MailPvpRoom instance
         */
        S_MailPvpRoom.create = function create(properties) {
            return new S_MailPvpRoom(properties);
        };

        /**
         * Encodes the specified S_MailPvpRoom message. Does not implicitly {@link DcgProto.S_MailPvpRoom.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_MailPvpRoom
         * @static
         * @param {DcgProto.IS_MailPvpRoom} m S_MailPvpRoom message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_MailPvpRoom.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomName != null && Object.hasOwnProperty.call(m, "RoomName"))
                w.uint32(10).string(m.RoomName);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            if (m.Rank != null && Object.hasOwnProperty.call(m, "Rank"))
                w.uint32(24).int32(m.Rank);
            return w;
        };

        /**
         * Decodes a S_MailPvpRoom message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_MailPvpRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_MailPvpRoom} S_MailPvpRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_MailPvpRoom.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_MailPvpRoom();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomName = r.string();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                case 3:
                    m.Rank = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_MailPvpRoom message.
         * @function verify
         * @memberof DcgProto.S_MailPvpRoom
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_MailPvpRoom.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomName != null && m.hasOwnProperty("RoomName")) {
                if (!$util.isString(m.RoomName))
                    return "RoomName: string expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.Rank != null && m.hasOwnProperty("Rank")) {
                if (!$util.isInteger(m.Rank))
                    return "Rank: integer expected";
            }
            return null;
        };

        return S_MailPvpRoom;
    })();

    DcgProto.S_MailTaskBox = (function() {

        /**
         * Properties of a S_MailTaskBox.
         * @memberof DcgProto
         * @interface IS_MailTaskBox
         * @property {number|null} [Score] S_MailTaskBox Score
         */

        /**
         * Constructs a new S_MailTaskBox.
         * @memberof DcgProto
         * @classdesc Represents a S_MailTaskBox.
         * @implements IS_MailTaskBox
         * @constructor
         * @param {DcgProto.IS_MailTaskBox=} [p] Properties to set
         */
        function S_MailTaskBox(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_MailTaskBox Score.
         * @member {number} Score
         * @memberof DcgProto.S_MailTaskBox
         * @instance
         */
        S_MailTaskBox.prototype.Score = 0;

        /**
         * Creates a new S_MailTaskBox instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_MailTaskBox
         * @static
         * @param {DcgProto.IS_MailTaskBox=} [properties] Properties to set
         * @returns {DcgProto.S_MailTaskBox} S_MailTaskBox instance
         */
        S_MailTaskBox.create = function create(properties) {
            return new S_MailTaskBox(properties);
        };

        /**
         * Encodes the specified S_MailTaskBox message. Does not implicitly {@link DcgProto.S_MailTaskBox.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_MailTaskBox
         * @static
         * @param {DcgProto.IS_MailTaskBox} m S_MailTaskBox message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_MailTaskBox.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Score != null && Object.hasOwnProperty.call(m, "Score"))
                w.uint32(8).int32(m.Score);
            return w;
        };

        /**
         * Decodes a S_MailTaskBox message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_MailTaskBox
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_MailTaskBox} S_MailTaskBox
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_MailTaskBox.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_MailTaskBox();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Score = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_MailTaskBox message.
         * @function verify
         * @memberof DcgProto.S_MailTaskBox
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_MailTaskBox.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Score != null && m.hasOwnProperty("Score")) {
                if (!$util.isInteger(m.Score))
                    return "Score: integer expected";
            }
            return null;
        };

        return S_MailTaskBox;
    })();

    DcgProto.S_MailTaskLogin = (function() {

        /**
         * Properties of a S_MailTaskLogin.
         * @memberof DcgProto
         * @interface IS_MailTaskLogin
         * @property {number|null} [Episode] S_MailTaskLogin Episode
         * @property {number|null} [Days] S_MailTaskLogin Days
         */

        /**
         * Constructs a new S_MailTaskLogin.
         * @memberof DcgProto
         * @classdesc Represents a S_MailTaskLogin.
         * @implements IS_MailTaskLogin
         * @constructor
         * @param {DcgProto.IS_MailTaskLogin=} [p] Properties to set
         */
        function S_MailTaskLogin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_MailTaskLogin Episode.
         * @member {number} Episode
         * @memberof DcgProto.S_MailTaskLogin
         * @instance
         */
        S_MailTaskLogin.prototype.Episode = 0;

        /**
         * S_MailTaskLogin Days.
         * @member {number} Days
         * @memberof DcgProto.S_MailTaskLogin
         * @instance
         */
        S_MailTaskLogin.prototype.Days = 0;

        /**
         * Creates a new S_MailTaskLogin instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_MailTaskLogin
         * @static
         * @param {DcgProto.IS_MailTaskLogin=} [properties] Properties to set
         * @returns {DcgProto.S_MailTaskLogin} S_MailTaskLogin instance
         */
        S_MailTaskLogin.create = function create(properties) {
            return new S_MailTaskLogin(properties);
        };

        /**
         * Encodes the specified S_MailTaskLogin message. Does not implicitly {@link DcgProto.S_MailTaskLogin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_MailTaskLogin
         * @static
         * @param {DcgProto.IS_MailTaskLogin} m S_MailTaskLogin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_MailTaskLogin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Episode != null && Object.hasOwnProperty.call(m, "Episode"))
                w.uint32(8).int32(m.Episode);
            if (m.Days != null && Object.hasOwnProperty.call(m, "Days"))
                w.uint32(16).int32(m.Days);
            return w;
        };

        /**
         * Decodes a S_MailTaskLogin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_MailTaskLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_MailTaskLogin} S_MailTaskLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_MailTaskLogin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_MailTaskLogin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Episode = r.int32();
                    break;
                case 2:
                    m.Days = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_MailTaskLogin message.
         * @function verify
         * @memberof DcgProto.S_MailTaskLogin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_MailTaskLogin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Episode != null && m.hasOwnProperty("Episode")) {
                if (!$util.isInteger(m.Episode))
                    return "Episode: integer expected";
            }
            if (m.Days != null && m.hasOwnProperty("Days")) {
                if (!$util.isInteger(m.Days))
                    return "Days: integer expected";
            }
            return null;
        };

        return S_MailTaskLogin;
    })();

    DcgProto.S_BattlePlayerIO = (function() {

        /**
         * Properties of a S_BattlePlayerIO.
         * @memberof DcgProto
         * @interface IS_BattlePlayerIO
         * @property {DcgProto.E_FightResult|null} [FightResult] S_BattlePlayerIO FightResult
         * @property {Long|null} [PlayerIID] S_BattlePlayerIO PlayerIID
         * @property {string|null} [NickName] S_BattlePlayerIO NickName
         */

        /**
         * Constructs a new S_BattlePlayerIO.
         * @memberof DcgProto
         * @classdesc Represents a S_BattlePlayerIO.
         * @implements IS_BattlePlayerIO
         * @constructor
         * @param {DcgProto.IS_BattlePlayerIO=} [p] Properties to set
         */
        function S_BattlePlayerIO(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_BattlePlayerIO FightResult.
         * @member {DcgProto.E_FightResult} FightResult
         * @memberof DcgProto.S_BattlePlayerIO
         * @instance
         */
        S_BattlePlayerIO.prototype.FightResult = 0;

        /**
         * S_BattlePlayerIO PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.S_BattlePlayerIO
         * @instance
         */
        S_BattlePlayerIO.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_BattlePlayerIO NickName.
         * @member {string} NickName
         * @memberof DcgProto.S_BattlePlayerIO
         * @instance
         */
        S_BattlePlayerIO.prototype.NickName = "";

        /**
         * Creates a new S_BattlePlayerIO instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_BattlePlayerIO
         * @static
         * @param {DcgProto.IS_BattlePlayerIO=} [properties] Properties to set
         * @returns {DcgProto.S_BattlePlayerIO} S_BattlePlayerIO instance
         */
        S_BattlePlayerIO.create = function create(properties) {
            return new S_BattlePlayerIO(properties);
        };

        /**
         * Encodes the specified S_BattlePlayerIO message. Does not implicitly {@link DcgProto.S_BattlePlayerIO.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_BattlePlayerIO
         * @static
         * @param {DcgProto.IS_BattlePlayerIO} m S_BattlePlayerIO message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_BattlePlayerIO.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.FightResult != null && Object.hasOwnProperty.call(m, "FightResult"))
                w.uint32(8).int32(m.FightResult);
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(16).int64(m.PlayerIID);
            if (m.NickName != null && Object.hasOwnProperty.call(m, "NickName"))
                w.uint32(26).string(m.NickName);
            return w;
        };

        /**
         * Decodes a S_BattlePlayerIO message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_BattlePlayerIO
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_BattlePlayerIO} S_BattlePlayerIO
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_BattlePlayerIO.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_BattlePlayerIO();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.FightResult = r.int32();
                    break;
                case 2:
                    m.PlayerIID = r.int64();
                    break;
                case 3:
                    m.NickName = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_BattlePlayerIO message.
         * @function verify
         * @memberof DcgProto.S_BattlePlayerIO
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_BattlePlayerIO.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.FightResult != null && m.hasOwnProperty("FightResult")) {
                switch (m.FightResult) {
                default:
                    return "FightResult: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            }
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.NickName != null && m.hasOwnProperty("NickName")) {
                if (!$util.isString(m.NickName))
                    return "NickName: string expected";
            }
            return null;
        };

        return S_BattlePlayerIO;
    })();

    DcgProto.S_BattleIO = (function() {

        /**
         * Properties of a S_BattleIO.
         * @memberof DcgProto
         * @interface IS_BattleIO
         * @property {Array.<DcgProto.IS_BattlePlayerIO>|null} [PlayerIO] S_BattleIO PlayerIO
         */

        /**
         * Constructs a new S_BattleIO.
         * @memberof DcgProto
         * @classdesc Represents a S_BattleIO.
         * @implements IS_BattleIO
         * @constructor
         * @param {DcgProto.IS_BattleIO=} [p] Properties to set
         */
        function S_BattleIO(p) {
            this.PlayerIO = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_BattleIO PlayerIO.
         * @member {Array.<DcgProto.IS_BattlePlayerIO>} PlayerIO
         * @memberof DcgProto.S_BattleIO
         * @instance
         */
        S_BattleIO.prototype.PlayerIO = $util.emptyArray;

        /**
         * Creates a new S_BattleIO instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_BattleIO
         * @static
         * @param {DcgProto.IS_BattleIO=} [properties] Properties to set
         * @returns {DcgProto.S_BattleIO} S_BattleIO instance
         */
        S_BattleIO.create = function create(properties) {
            return new S_BattleIO(properties);
        };

        /**
         * Encodes the specified S_BattleIO message. Does not implicitly {@link DcgProto.S_BattleIO.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_BattleIO
         * @static
         * @param {DcgProto.IS_BattleIO} m S_BattleIO message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_BattleIO.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerIO != null && m.PlayerIO.length) {
                for (var i = 0; i < m.PlayerIO.length; ++i)
                    $root.DcgProto.S_BattlePlayerIO.encode(m.PlayerIO[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_BattleIO message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_BattleIO
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_BattleIO} S_BattleIO
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_BattleIO.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_BattleIO();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.PlayerIO && m.PlayerIO.length))
                        m.PlayerIO = [];
                    m.PlayerIO.push($root.DcgProto.S_BattlePlayerIO.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_BattleIO message.
         * @function verify
         * @memberof DcgProto.S_BattleIO
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_BattleIO.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerIO != null && m.hasOwnProperty("PlayerIO")) {
                if (!Array.isArray(m.PlayerIO))
                    return "PlayerIO: array expected";
                for (var i = 0; i < m.PlayerIO.length; ++i) {
                    {
                        var e = $root.DcgProto.S_BattlePlayerIO.verify(m.PlayerIO[i]);
                        if (e)
                            return "PlayerIO." + e;
                    }
                }
            }
            return null;
        };

        return S_BattleIO;
    })();

    DcgProto.S_MailMatchFight = (function() {

        /**
         * Properties of a S_MailMatchFight.
         * @memberof DcgProto
         * @interface IS_MailMatchFight
         * @property {DcgProto.IS_BattleIO|null} [BattleInfo] S_MailMatchFight BattleInfo
         */

        /**
         * Constructs a new S_MailMatchFight.
         * @memberof DcgProto
         * @classdesc Represents a S_MailMatchFight.
         * @implements IS_MailMatchFight
         * @constructor
         * @param {DcgProto.IS_MailMatchFight=} [p] Properties to set
         */
        function S_MailMatchFight(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_MailMatchFight BattleInfo.
         * @member {DcgProto.IS_BattleIO|null|undefined} BattleInfo
         * @memberof DcgProto.S_MailMatchFight
         * @instance
         */
        S_MailMatchFight.prototype.BattleInfo = null;

        /**
         * Creates a new S_MailMatchFight instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_MailMatchFight
         * @static
         * @param {DcgProto.IS_MailMatchFight=} [properties] Properties to set
         * @returns {DcgProto.S_MailMatchFight} S_MailMatchFight instance
         */
        S_MailMatchFight.create = function create(properties) {
            return new S_MailMatchFight(properties);
        };

        /**
         * Encodes the specified S_MailMatchFight message. Does not implicitly {@link DcgProto.S_MailMatchFight.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_MailMatchFight
         * @static
         * @param {DcgProto.IS_MailMatchFight} m S_MailMatchFight message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_MailMatchFight.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.BattleInfo != null && Object.hasOwnProperty.call(m, "BattleInfo"))
                $root.DcgProto.S_BattleIO.encode(m.BattleInfo, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_MailMatchFight message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_MailMatchFight
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_MailMatchFight} S_MailMatchFight
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_MailMatchFight.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_MailMatchFight();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.BattleInfo = $root.DcgProto.S_BattleIO.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_MailMatchFight message.
         * @function verify
         * @memberof DcgProto.S_MailMatchFight
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_MailMatchFight.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.BattleInfo != null && m.hasOwnProperty("BattleInfo")) {
                {
                    var e = $root.DcgProto.S_BattleIO.verify(m.BattleInfo);
                    if (e)
                        return "BattleInfo." + e;
                }
            }
            return null;
        };

        return S_MailMatchFight;
    })();

    DcgProto.S_MailFriendFight = (function() {

        /**
         * Properties of a S_MailFriendFight.
         * @memberof DcgProto
         * @interface IS_MailFriendFight
         * @property {DcgProto.IS_BattleIO|null} [BattleInfo] S_MailFriendFight BattleInfo
         */

        /**
         * Constructs a new S_MailFriendFight.
         * @memberof DcgProto
         * @classdesc Represents a S_MailFriendFight.
         * @implements IS_MailFriendFight
         * @constructor
         * @param {DcgProto.IS_MailFriendFight=} [p] Properties to set
         */
        function S_MailFriendFight(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_MailFriendFight BattleInfo.
         * @member {DcgProto.IS_BattleIO|null|undefined} BattleInfo
         * @memberof DcgProto.S_MailFriendFight
         * @instance
         */
        S_MailFriendFight.prototype.BattleInfo = null;

        /**
         * Creates a new S_MailFriendFight instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_MailFriendFight
         * @static
         * @param {DcgProto.IS_MailFriendFight=} [properties] Properties to set
         * @returns {DcgProto.S_MailFriendFight} S_MailFriendFight instance
         */
        S_MailFriendFight.create = function create(properties) {
            return new S_MailFriendFight(properties);
        };

        /**
         * Encodes the specified S_MailFriendFight message. Does not implicitly {@link DcgProto.S_MailFriendFight.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_MailFriendFight
         * @static
         * @param {DcgProto.IS_MailFriendFight} m S_MailFriendFight message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_MailFriendFight.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.BattleInfo != null && Object.hasOwnProperty.call(m, "BattleInfo"))
                $root.DcgProto.S_BattleIO.encode(m.BattleInfo, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_MailFriendFight message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_MailFriendFight
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_MailFriendFight} S_MailFriendFight
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_MailFriendFight.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_MailFriendFight();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.BattleInfo = $root.DcgProto.S_BattleIO.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_MailFriendFight message.
         * @function verify
         * @memberof DcgProto.S_MailFriendFight
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_MailFriendFight.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.BattleInfo != null && m.hasOwnProperty("BattleInfo")) {
                {
                    var e = $root.DcgProto.S_BattleIO.verify(m.BattleInfo);
                    if (e)
                        return "BattleInfo." + e;
                }
            }
            return null;
        };

        return S_MailFriendFight;
    })();

    DcgProto.S_FriendApply = (function() {

        /**
         * Properties of a S_FriendApply.
         * @memberof DcgProto
         * @interface IS_FriendApply
         * @property {Long|null} [ApplyIID] S_FriendApply ApplyIID
         * @property {number|null} [ApplyTime] S_FriendApply ApplyTime
         * @property {DcgProto.IS_OtherRole|null} [RoleInfo] S_FriendApply RoleInfo
         */

        /**
         * Constructs a new S_FriendApply.
         * @memberof DcgProto
         * @classdesc Represents a S_FriendApply.
         * @implements IS_FriendApply
         * @constructor
         * @param {DcgProto.IS_FriendApply=} [p] Properties to set
         */
        function S_FriendApply(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_FriendApply ApplyIID.
         * @member {Long} ApplyIID
         * @memberof DcgProto.S_FriendApply
         * @instance
         */
        S_FriendApply.prototype.ApplyIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_FriendApply ApplyTime.
         * @member {number} ApplyTime
         * @memberof DcgProto.S_FriendApply
         * @instance
         */
        S_FriendApply.prototype.ApplyTime = 0;

        /**
         * S_FriendApply RoleInfo.
         * @member {DcgProto.IS_OtherRole|null|undefined} RoleInfo
         * @memberof DcgProto.S_FriendApply
         * @instance
         */
        S_FriendApply.prototype.RoleInfo = null;

        /**
         * Creates a new S_FriendApply instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_FriendApply
         * @static
         * @param {DcgProto.IS_FriendApply=} [properties] Properties to set
         * @returns {DcgProto.S_FriendApply} S_FriendApply instance
         */
        S_FriendApply.create = function create(properties) {
            return new S_FriendApply(properties);
        };

        /**
         * Encodes the specified S_FriendApply message. Does not implicitly {@link DcgProto.S_FriendApply.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_FriendApply
         * @static
         * @param {DcgProto.IS_FriendApply} m S_FriendApply message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_FriendApply.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ApplyIID != null && Object.hasOwnProperty.call(m, "ApplyIID"))
                w.uint32(8).int64(m.ApplyIID);
            if (m.ApplyTime != null && Object.hasOwnProperty.call(m, "ApplyTime"))
                w.uint32(16).uint32(m.ApplyTime);
            if (m.RoleInfo != null && Object.hasOwnProperty.call(m, "RoleInfo"))
                $root.DcgProto.S_OtherRole.encode(m.RoleInfo, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_FriendApply message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_FriendApply
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_FriendApply} S_FriendApply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_FriendApply.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_FriendApply();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ApplyIID = r.int64();
                    break;
                case 2:
                    m.ApplyTime = r.uint32();
                    break;
                case 3:
                    m.RoleInfo = $root.DcgProto.S_OtherRole.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_FriendApply message.
         * @function verify
         * @memberof DcgProto.S_FriendApply
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_FriendApply.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ApplyIID != null && m.hasOwnProperty("ApplyIID")) {
                if (!$util.isInteger(m.ApplyIID) && !(m.ApplyIID && $util.isInteger(m.ApplyIID.low) && $util.isInteger(m.ApplyIID.high)))
                    return "ApplyIID: integer|Long expected";
            }
            if (m.ApplyTime != null && m.hasOwnProperty("ApplyTime")) {
                if (!$util.isInteger(m.ApplyTime))
                    return "ApplyTime: integer expected";
            }
            if (m.RoleInfo != null && m.hasOwnProperty("RoleInfo")) {
                {
                    var e = $root.DcgProto.S_OtherRole.verify(m.RoleInfo);
                    if (e)
                        return "RoleInfo." + e;
                }
            }
            return null;
        };

        return S_FriendApply;
    })();

    DcgProto.S_Friend = (function() {

        /**
         * Properties of a S_Friend.
         * @memberof DcgProto
         * @interface IS_Friend
         * @property {Long|null} [FriendIID] S_Friend FriendIID
         * @property {DcgProto.IS_OtherRole|null} [RoleInfo] S_Friend RoleInfo
         */

        /**
         * Constructs a new S_Friend.
         * @memberof DcgProto
         * @classdesc Represents a S_Friend.
         * @implements IS_Friend
         * @constructor
         * @param {DcgProto.IS_Friend=} [p] Properties to set
         */
        function S_Friend(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_Friend FriendIID.
         * @member {Long} FriendIID
         * @memberof DcgProto.S_Friend
         * @instance
         */
        S_Friend.prototype.FriendIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_Friend RoleInfo.
         * @member {DcgProto.IS_OtherRole|null|undefined} RoleInfo
         * @memberof DcgProto.S_Friend
         * @instance
         */
        S_Friend.prototype.RoleInfo = null;

        /**
         * Creates a new S_Friend instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_Friend
         * @static
         * @param {DcgProto.IS_Friend=} [properties] Properties to set
         * @returns {DcgProto.S_Friend} S_Friend instance
         */
        S_Friend.create = function create(properties) {
            return new S_Friend(properties);
        };

        /**
         * Encodes the specified S_Friend message. Does not implicitly {@link DcgProto.S_Friend.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_Friend
         * @static
         * @param {DcgProto.IS_Friend} m S_Friend message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_Friend.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.FriendIID != null && Object.hasOwnProperty.call(m, "FriendIID"))
                w.uint32(8).int64(m.FriendIID);
            if (m.RoleInfo != null && Object.hasOwnProperty.call(m, "RoleInfo"))
                $root.DcgProto.S_OtherRole.encode(m.RoleInfo, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_Friend message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_Friend
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_Friend} S_Friend
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_Friend.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_Friend();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.FriendIID = r.int64();
                    break;
                case 2:
                    m.RoleInfo = $root.DcgProto.S_OtherRole.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_Friend message.
         * @function verify
         * @memberof DcgProto.S_Friend
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_Friend.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.FriendIID != null && m.hasOwnProperty("FriendIID")) {
                if (!$util.isInteger(m.FriendIID) && !(m.FriendIID && $util.isInteger(m.FriendIID.low) && $util.isInteger(m.FriendIID.high)))
                    return "FriendIID: integer|Long expected";
            }
            if (m.RoleInfo != null && m.hasOwnProperty("RoleInfo")) {
                {
                    var e = $root.DcgProto.S_OtherRole.verify(m.RoleInfo);
                    if (e)
                        return "RoleInfo." + e;
                }
            }
            return null;
        };

        return S_Friend;
    })();

    DcgProto.S_PvpInvite = (function() {

        /**
         * Properties of a S_PvpInvite.
         * @memberof DcgProto
         * @interface IS_PvpInvite
         * @property {Long|null} [InviteIID] S_PvpInvite InviteIID
         * @property {number|null} [CreateTime] S_PvpInvite CreateTime
         * @property {number|null} [EndTime] S_PvpInvite EndTime
         * @property {DcgProto.IS_OtherRole|null} [RoleInfo] S_PvpInvite RoleInfo
         * @property {DcgProto.E_ROOM_MODE|null} [RoomMode] S_PvpInvite RoomMode
         * @property {Long|null} [RoomIID] S_PvpInvite RoomIID
         * @property {number|null} [RoomShortId] S_PvpInvite RoomShortId
         */

        /**
         * Constructs a new S_PvpInvite.
         * @memberof DcgProto
         * @classdesc Represents a S_PvpInvite.
         * @implements IS_PvpInvite
         * @constructor
         * @param {DcgProto.IS_PvpInvite=} [p] Properties to set
         */
        function S_PvpInvite(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PvpInvite InviteIID.
         * @member {Long} InviteIID
         * @memberof DcgProto.S_PvpInvite
         * @instance
         */
        S_PvpInvite.prototype.InviteIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PvpInvite CreateTime.
         * @member {number} CreateTime
         * @memberof DcgProto.S_PvpInvite
         * @instance
         */
        S_PvpInvite.prototype.CreateTime = 0;

        /**
         * S_PvpInvite EndTime.
         * @member {number} EndTime
         * @memberof DcgProto.S_PvpInvite
         * @instance
         */
        S_PvpInvite.prototype.EndTime = 0;

        /**
         * S_PvpInvite RoleInfo.
         * @member {DcgProto.IS_OtherRole|null|undefined} RoleInfo
         * @memberof DcgProto.S_PvpInvite
         * @instance
         */
        S_PvpInvite.prototype.RoleInfo = null;

        /**
         * S_PvpInvite RoomMode.
         * @member {DcgProto.E_ROOM_MODE} RoomMode
         * @memberof DcgProto.S_PvpInvite
         * @instance
         */
        S_PvpInvite.prototype.RoomMode = 0;

        /**
         * S_PvpInvite RoomIID.
         * @member {Long} RoomIID
         * @memberof DcgProto.S_PvpInvite
         * @instance
         */
        S_PvpInvite.prototype.RoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PvpInvite RoomShortId.
         * @member {number} RoomShortId
         * @memberof DcgProto.S_PvpInvite
         * @instance
         */
        S_PvpInvite.prototype.RoomShortId = 0;

        /**
         * Creates a new S_PvpInvite instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PvpInvite
         * @static
         * @param {DcgProto.IS_PvpInvite=} [properties] Properties to set
         * @returns {DcgProto.S_PvpInvite} S_PvpInvite instance
         */
        S_PvpInvite.create = function create(properties) {
            return new S_PvpInvite(properties);
        };

        /**
         * Encodes the specified S_PvpInvite message. Does not implicitly {@link DcgProto.S_PvpInvite.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PvpInvite
         * @static
         * @param {DcgProto.IS_PvpInvite} m S_PvpInvite message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PvpInvite.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InviteIID != null && Object.hasOwnProperty.call(m, "InviteIID"))
                w.uint32(8).int64(m.InviteIID);
            if (m.CreateTime != null && Object.hasOwnProperty.call(m, "CreateTime"))
                w.uint32(16).uint32(m.CreateTime);
            if (m.EndTime != null && Object.hasOwnProperty.call(m, "EndTime"))
                w.uint32(24).uint32(m.EndTime);
            if (m.RoleInfo != null && Object.hasOwnProperty.call(m, "RoleInfo"))
                $root.DcgProto.S_OtherRole.encode(m.RoleInfo, w.uint32(34).fork()).ldelim();
            if (m.RoomMode != null && Object.hasOwnProperty.call(m, "RoomMode"))
                w.uint32(40).int32(m.RoomMode);
            if (m.RoomIID != null && Object.hasOwnProperty.call(m, "RoomIID"))
                w.uint32(48).int64(m.RoomIID);
            if (m.RoomShortId != null && Object.hasOwnProperty.call(m, "RoomShortId"))
                w.uint32(56).int32(m.RoomShortId);
            return w;
        };

        /**
         * Decodes a S_PvpInvite message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PvpInvite
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PvpInvite} S_PvpInvite
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PvpInvite.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PvpInvite();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InviteIID = r.int64();
                    break;
                case 2:
                    m.CreateTime = r.uint32();
                    break;
                case 3:
                    m.EndTime = r.uint32();
                    break;
                case 4:
                    m.RoleInfo = $root.DcgProto.S_OtherRole.decode(r, r.uint32());
                    break;
                case 5:
                    m.RoomMode = r.int32();
                    break;
                case 6:
                    m.RoomIID = r.int64();
                    break;
                case 7:
                    m.RoomShortId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PvpInvite message.
         * @function verify
         * @memberof DcgProto.S_PvpInvite
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PvpInvite.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InviteIID != null && m.hasOwnProperty("InviteIID")) {
                if (!$util.isInteger(m.InviteIID) && !(m.InviteIID && $util.isInteger(m.InviteIID.low) && $util.isInteger(m.InviteIID.high)))
                    return "InviteIID: integer|Long expected";
            }
            if (m.CreateTime != null && m.hasOwnProperty("CreateTime")) {
                if (!$util.isInteger(m.CreateTime))
                    return "CreateTime: integer expected";
            }
            if (m.EndTime != null && m.hasOwnProperty("EndTime")) {
                if (!$util.isInteger(m.EndTime))
                    return "EndTime: integer expected";
            }
            if (m.RoleInfo != null && m.hasOwnProperty("RoleInfo")) {
                {
                    var e = $root.DcgProto.S_OtherRole.verify(m.RoleInfo);
                    if (e)
                        return "RoleInfo." + e;
                }
            }
            if (m.RoomMode != null && m.hasOwnProperty("RoomMode")) {
                switch (m.RoomMode) {
                default:
                    return "RoomMode: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            }
            if (m.RoomIID != null && m.hasOwnProperty("RoomIID")) {
                if (!$util.isInteger(m.RoomIID) && !(m.RoomIID && $util.isInteger(m.RoomIID.low) && $util.isInteger(m.RoomIID.high)))
                    return "RoomIID: integer|Long expected";
            }
            if (m.RoomShortId != null && m.hasOwnProperty("RoomShortId")) {
                if (!$util.isInteger(m.RoomShortId))
                    return "RoomShortId: integer expected";
            }
            return null;
        };

        return S_PvpInvite;
    })();

    DcgProto.S_Reward = (function() {

        /**
         * Properties of a S_Reward.
         * @memberof DcgProto
         * @interface IS_Reward
         * @property {number|null} [RewardId] S_Reward RewardId
         * @property {number|null} [RewardNum] S_Reward RewardNum
         */

        /**
         * Constructs a new S_Reward.
         * @memberof DcgProto
         * @classdesc Represents a S_Reward.
         * @implements IS_Reward
         * @constructor
         * @param {DcgProto.IS_Reward=} [p] Properties to set
         */
        function S_Reward(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_Reward RewardId.
         * @member {number} RewardId
         * @memberof DcgProto.S_Reward
         * @instance
         */
        S_Reward.prototype.RewardId = 0;

        /**
         * S_Reward RewardNum.
         * @member {number} RewardNum
         * @memberof DcgProto.S_Reward
         * @instance
         */
        S_Reward.prototype.RewardNum = 0;

        /**
         * Creates a new S_Reward instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_Reward
         * @static
         * @param {DcgProto.IS_Reward=} [properties] Properties to set
         * @returns {DcgProto.S_Reward} S_Reward instance
         */
        S_Reward.create = function create(properties) {
            return new S_Reward(properties);
        };

        /**
         * Encodes the specified S_Reward message. Does not implicitly {@link DcgProto.S_Reward.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_Reward
         * @static
         * @param {DcgProto.IS_Reward} m S_Reward message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_Reward.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RewardId != null && Object.hasOwnProperty.call(m, "RewardId"))
                w.uint32(8).int32(m.RewardId);
            if (m.RewardNum != null && Object.hasOwnProperty.call(m, "RewardNum"))
                w.uint32(16).int32(m.RewardNum);
            return w;
        };

        /**
         * Decodes a S_Reward message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_Reward
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_Reward} S_Reward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_Reward.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_Reward();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RewardId = r.int32();
                    break;
                case 2:
                    m.RewardNum = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_Reward message.
         * @function verify
         * @memberof DcgProto.S_Reward
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_Reward.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RewardId != null && m.hasOwnProperty("RewardId")) {
                if (!$util.isInteger(m.RewardId))
                    return "RewardId: integer expected";
            }
            if (m.RewardNum != null && m.hasOwnProperty("RewardNum")) {
                if (!$util.isInteger(m.RewardNum))
                    return "RewardNum: integer expected";
            }
            return null;
        };

        return S_Reward;
    })();

    DcgProto.S_PersonalRoom = (function() {

        /**
         * Properties of a S_PersonalRoom.
         * @memberof DcgProto
         * @interface IS_PersonalRoom
         * @property {Long|null} [InstanceId] S_PersonalRoom InstanceId
         * @property {boolean|null} [Viewer] S_PersonalRoom Viewer
         * @property {DcgProto.IS_OtherRole|null} [OP] S_PersonalRoom OP
         * @property {DcgProto.IS_OtherRole|null} [Rival] S_PersonalRoom Rival
         * @property {boolean|null} [RivalReady] S_PersonalRoom RivalReady
         */

        /**
         * Constructs a new S_PersonalRoom.
         * @memberof DcgProto
         * @classdesc Represents a S_PersonalRoom.
         * @implements IS_PersonalRoom
         * @constructor
         * @param {DcgProto.IS_PersonalRoom=} [p] Properties to set
         */
        function S_PersonalRoom(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PersonalRoom InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_PersonalRoom
         * @instance
         */
        S_PersonalRoom.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PersonalRoom Viewer.
         * @member {boolean} Viewer
         * @memberof DcgProto.S_PersonalRoom
         * @instance
         */
        S_PersonalRoom.prototype.Viewer = false;

        /**
         * S_PersonalRoom OP.
         * @member {DcgProto.IS_OtherRole|null|undefined} OP
         * @memberof DcgProto.S_PersonalRoom
         * @instance
         */
        S_PersonalRoom.prototype.OP = null;

        /**
         * S_PersonalRoom Rival.
         * @member {DcgProto.IS_OtherRole|null|undefined} Rival
         * @memberof DcgProto.S_PersonalRoom
         * @instance
         */
        S_PersonalRoom.prototype.Rival = null;

        /**
         * S_PersonalRoom RivalReady.
         * @member {boolean} RivalReady
         * @memberof DcgProto.S_PersonalRoom
         * @instance
         */
        S_PersonalRoom.prototype.RivalReady = false;

        /**
         * Creates a new S_PersonalRoom instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PersonalRoom
         * @static
         * @param {DcgProto.IS_PersonalRoom=} [properties] Properties to set
         * @returns {DcgProto.S_PersonalRoom} S_PersonalRoom instance
         */
        S_PersonalRoom.create = function create(properties) {
            return new S_PersonalRoom(properties);
        };

        /**
         * Encodes the specified S_PersonalRoom message. Does not implicitly {@link DcgProto.S_PersonalRoom.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PersonalRoom
         * @static
         * @param {DcgProto.IS_PersonalRoom} m S_PersonalRoom message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PersonalRoom.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.Viewer != null && Object.hasOwnProperty.call(m, "Viewer"))
                w.uint32(16).bool(m.Viewer);
            if (m.OP != null && Object.hasOwnProperty.call(m, "OP"))
                $root.DcgProto.S_OtherRole.encode(m.OP, w.uint32(26).fork()).ldelim();
            if (m.Rival != null && Object.hasOwnProperty.call(m, "Rival"))
                $root.DcgProto.S_OtherRole.encode(m.Rival, w.uint32(34).fork()).ldelim();
            if (m.RivalReady != null && Object.hasOwnProperty.call(m, "RivalReady"))
                w.uint32(40).bool(m.RivalReady);
            return w;
        };

        /**
         * Decodes a S_PersonalRoom message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PersonalRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PersonalRoom} S_PersonalRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PersonalRoom.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PersonalRoom();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.Viewer = r.bool();
                    break;
                case 3:
                    m.OP = $root.DcgProto.S_OtherRole.decode(r, r.uint32());
                    break;
                case 4:
                    m.Rival = $root.DcgProto.S_OtherRole.decode(r, r.uint32());
                    break;
                case 5:
                    m.RivalReady = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PersonalRoom message.
         * @function verify
         * @memberof DcgProto.S_PersonalRoom
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PersonalRoom.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.Viewer != null && m.hasOwnProperty("Viewer")) {
                if (typeof m.Viewer !== "boolean")
                    return "Viewer: boolean expected";
            }
            if (m.OP != null && m.hasOwnProperty("OP")) {
                {
                    var e = $root.DcgProto.S_OtherRole.verify(m.OP);
                    if (e)
                        return "OP." + e;
                }
            }
            if (m.Rival != null && m.hasOwnProperty("Rival")) {
                {
                    var e = $root.DcgProto.S_OtherRole.verify(m.Rival);
                    if (e)
                        return "Rival." + e;
                }
            }
            if (m.RivalReady != null && m.hasOwnProperty("RivalReady")) {
                if (typeof m.RivalReady !== "boolean")
                    return "RivalReady: boolean expected";
            }
            return null;
        };

        return S_PersonalRoom;
    })();

    DcgProto.S_PvpRoom = (function() {

        /**
         * Properties of a S_PvpRoom.
         * @memberof DcgProto
         * @interface IS_PvpRoom
         * @property {Long|null} [InstanceId] S_PvpRoom InstanceId
         * @property {number|null} [ShortId] S_PvpRoom ShortId
         * @property {string|null} [Name] S_PvpRoom Name
         * @property {number|null} [Level] S_PvpRoom Level
         * @property {number|null} [CurMemberNum] S_PvpRoom CurMemberNum
         * @property {DcgProto.E_ROOM_STATUS|null} [Status] S_PvpRoom Status
         * @property {DcgProto.E_ROOM_TYPE|null} [Type] S_PvpRoom Type
         * @property {Long|null} [RaceIID] S_PvpRoom RaceIID
         * @property {number|null} [CreateTime] S_PvpRoom CreateTime
         * @property {number|null} [CloseTime] S_PvpRoom CloseTime
         * @property {DcgProto.IS_OtherRole|null} [OP] S_PvpRoom OP
         */

        /**
         * Constructs a new S_PvpRoom.
         * @memberof DcgProto
         * @classdesc Represents a S_PvpRoom.
         * @implements IS_PvpRoom
         * @constructor
         * @param {DcgProto.IS_PvpRoom=} [p] Properties to set
         */
        function S_PvpRoom(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PvpRoom InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_PvpRoom
         * @instance
         */
        S_PvpRoom.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PvpRoom ShortId.
         * @member {number} ShortId
         * @memberof DcgProto.S_PvpRoom
         * @instance
         */
        S_PvpRoom.prototype.ShortId = 0;

        /**
         * S_PvpRoom Name.
         * @member {string} Name
         * @memberof DcgProto.S_PvpRoom
         * @instance
         */
        S_PvpRoom.prototype.Name = "";

        /**
         * S_PvpRoom Level.
         * @member {number} Level
         * @memberof DcgProto.S_PvpRoom
         * @instance
         */
        S_PvpRoom.prototype.Level = 0;

        /**
         * S_PvpRoom CurMemberNum.
         * @member {number} CurMemberNum
         * @memberof DcgProto.S_PvpRoom
         * @instance
         */
        S_PvpRoom.prototype.CurMemberNum = 0;

        /**
         * S_PvpRoom Status.
         * @member {DcgProto.E_ROOM_STATUS} Status
         * @memberof DcgProto.S_PvpRoom
         * @instance
         */
        S_PvpRoom.prototype.Status = 0;

        /**
         * S_PvpRoom Type.
         * @member {DcgProto.E_ROOM_TYPE} Type
         * @memberof DcgProto.S_PvpRoom
         * @instance
         */
        S_PvpRoom.prototype.Type = 0;

        /**
         * S_PvpRoom RaceIID.
         * @member {Long} RaceIID
         * @memberof DcgProto.S_PvpRoom
         * @instance
         */
        S_PvpRoom.prototype.RaceIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PvpRoom CreateTime.
         * @member {number} CreateTime
         * @memberof DcgProto.S_PvpRoom
         * @instance
         */
        S_PvpRoom.prototype.CreateTime = 0;

        /**
         * S_PvpRoom CloseTime.
         * @member {number} CloseTime
         * @memberof DcgProto.S_PvpRoom
         * @instance
         */
        S_PvpRoom.prototype.CloseTime = 0;

        /**
         * S_PvpRoom OP.
         * @member {DcgProto.IS_OtherRole|null|undefined} OP
         * @memberof DcgProto.S_PvpRoom
         * @instance
         */
        S_PvpRoom.prototype.OP = null;

        /**
         * Creates a new S_PvpRoom instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PvpRoom
         * @static
         * @param {DcgProto.IS_PvpRoom=} [properties] Properties to set
         * @returns {DcgProto.S_PvpRoom} S_PvpRoom instance
         */
        S_PvpRoom.create = function create(properties) {
            return new S_PvpRoom(properties);
        };

        /**
         * Encodes the specified S_PvpRoom message. Does not implicitly {@link DcgProto.S_PvpRoom.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PvpRoom
         * @static
         * @param {DcgProto.IS_PvpRoom} m S_PvpRoom message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PvpRoom.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.ShortId != null && Object.hasOwnProperty.call(m, "ShortId"))
                w.uint32(16).int32(m.ShortId);
            if (m.Name != null && Object.hasOwnProperty.call(m, "Name"))
                w.uint32(26).string(m.Name);
            if (m.Level != null && Object.hasOwnProperty.call(m, "Level"))
                w.uint32(32).int32(m.Level);
            if (m.CurMemberNum != null && Object.hasOwnProperty.call(m, "CurMemberNum"))
                w.uint32(40).int32(m.CurMemberNum);
            if (m.Status != null && Object.hasOwnProperty.call(m, "Status"))
                w.uint32(48).int32(m.Status);
            if (m.Type != null && Object.hasOwnProperty.call(m, "Type"))
                w.uint32(56).int32(m.Type);
            if (m.RaceIID != null && Object.hasOwnProperty.call(m, "RaceIID"))
                w.uint32(64).int64(m.RaceIID);
            if (m.CreateTime != null && Object.hasOwnProperty.call(m, "CreateTime"))
                w.uint32(72).uint32(m.CreateTime);
            if (m.CloseTime != null && Object.hasOwnProperty.call(m, "CloseTime"))
                w.uint32(80).uint32(m.CloseTime);
            if (m.OP != null && Object.hasOwnProperty.call(m, "OP"))
                $root.DcgProto.S_OtherRole.encode(m.OP, w.uint32(90).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_PvpRoom message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PvpRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PvpRoom} S_PvpRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PvpRoom.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PvpRoom();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.ShortId = r.int32();
                    break;
                case 3:
                    m.Name = r.string();
                    break;
                case 4:
                    m.Level = r.int32();
                    break;
                case 5:
                    m.CurMemberNum = r.int32();
                    break;
                case 6:
                    m.Status = r.int32();
                    break;
                case 7:
                    m.Type = r.int32();
                    break;
                case 8:
                    m.RaceIID = r.int64();
                    break;
                case 9:
                    m.CreateTime = r.uint32();
                    break;
                case 10:
                    m.CloseTime = r.uint32();
                    break;
                case 11:
                    m.OP = $root.DcgProto.S_OtherRole.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PvpRoom message.
         * @function verify
         * @memberof DcgProto.S_PvpRoom
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PvpRoom.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.ShortId != null && m.hasOwnProperty("ShortId")) {
                if (!$util.isInteger(m.ShortId))
                    return "ShortId: integer expected";
            }
            if (m.Name != null && m.hasOwnProperty("Name")) {
                if (!$util.isString(m.Name))
                    return "Name: string expected";
            }
            if (m.Level != null && m.hasOwnProperty("Level")) {
                if (!$util.isInteger(m.Level))
                    return "Level: integer expected";
            }
            if (m.CurMemberNum != null && m.hasOwnProperty("CurMemberNum")) {
                if (!$util.isInteger(m.CurMemberNum))
                    return "CurMemberNum: integer expected";
            }
            if (m.Status != null && m.hasOwnProperty("Status")) {
                switch (m.Status) {
                default:
                    return "Status: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            }
            if (m.Type != null && m.hasOwnProperty("Type")) {
                switch (m.Type) {
                default:
                    return "Type: enum value expected";
                case 0:
                case 1:
                    break;
                }
            }
            if (m.RaceIID != null && m.hasOwnProperty("RaceIID")) {
                if (!$util.isInteger(m.RaceIID) && !(m.RaceIID && $util.isInteger(m.RaceIID.low) && $util.isInteger(m.RaceIID.high)))
                    return "RaceIID: integer|Long expected";
            }
            if (m.CreateTime != null && m.hasOwnProperty("CreateTime")) {
                if (!$util.isInteger(m.CreateTime))
                    return "CreateTime: integer expected";
            }
            if (m.CloseTime != null && m.hasOwnProperty("CloseTime")) {
                if (!$util.isInteger(m.CloseTime))
                    return "CloseTime: integer expected";
            }
            if (m.OP != null && m.hasOwnProperty("OP")) {
                {
                    var e = $root.DcgProto.S_OtherRole.verify(m.OP);
                    if (e)
                        return "OP." + e;
                }
            }
            return null;
        };

        return S_PvpRoom;
    })();

    DcgProto.S_PvpRoomMember = (function() {

        /**
         * Properties of a S_PvpRoomMember.
         * @memberof DcgProto
         * @interface IS_PvpRoomMember
         * @property {DcgProto.IS_OtherRole|null} [RoleInfo] S_PvpRoomMember RoleInfo
         */

        /**
         * Constructs a new S_PvpRoomMember.
         * @memberof DcgProto
         * @classdesc Represents a S_PvpRoomMember.
         * @implements IS_PvpRoomMember
         * @constructor
         * @param {DcgProto.IS_PvpRoomMember=} [p] Properties to set
         */
        function S_PvpRoomMember(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PvpRoomMember RoleInfo.
         * @member {DcgProto.IS_OtherRole|null|undefined} RoleInfo
         * @memberof DcgProto.S_PvpRoomMember
         * @instance
         */
        S_PvpRoomMember.prototype.RoleInfo = null;

        /**
         * Creates a new S_PvpRoomMember instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PvpRoomMember
         * @static
         * @param {DcgProto.IS_PvpRoomMember=} [properties] Properties to set
         * @returns {DcgProto.S_PvpRoomMember} S_PvpRoomMember instance
         */
        S_PvpRoomMember.create = function create(properties) {
            return new S_PvpRoomMember(properties);
        };

        /**
         * Encodes the specified S_PvpRoomMember message. Does not implicitly {@link DcgProto.S_PvpRoomMember.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PvpRoomMember
         * @static
         * @param {DcgProto.IS_PvpRoomMember} m S_PvpRoomMember message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PvpRoomMember.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoleInfo != null && Object.hasOwnProperty.call(m, "RoleInfo"))
                $root.DcgProto.S_OtherRole.encode(m.RoleInfo, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_PvpRoomMember message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PvpRoomMember
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PvpRoomMember} S_PvpRoomMember
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PvpRoomMember.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PvpRoomMember();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoleInfo = $root.DcgProto.S_OtherRole.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PvpRoomMember message.
         * @function verify
         * @memberof DcgProto.S_PvpRoomMember
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PvpRoomMember.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoleInfo != null && m.hasOwnProperty("RoleInfo")) {
                {
                    var e = $root.DcgProto.S_OtherRole.verify(m.RoleInfo);
                    if (e)
                        return "RoleInfo." + e;
                }
            }
            return null;
        };

        return S_PvpRoomMember;
    })();

    DcgProto.S_PvpRoomRaceMember = (function() {

        /**
         * Properties of a S_PvpRoomRaceMember.
         * @memberof DcgProto
         * @interface IS_PvpRoomRaceMember
         * @property {Long|null} [RoleIID] S_PvpRoomRaceMember RoleIID
         * @property {number|null} [Icon] S_PvpRoomRaceMember Icon
         * @property {DcgProto.E_FightResult|null} [FightResult] S_PvpRoomRaceMember FightResult
         */

        /**
         * Constructs a new S_PvpRoomRaceMember.
         * @memberof DcgProto
         * @classdesc Represents a S_PvpRoomRaceMember.
         * @implements IS_PvpRoomRaceMember
         * @constructor
         * @param {DcgProto.IS_PvpRoomRaceMember=} [p] Properties to set
         */
        function S_PvpRoomRaceMember(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PvpRoomRaceMember RoleIID.
         * @member {Long} RoleIID
         * @memberof DcgProto.S_PvpRoomRaceMember
         * @instance
         */
        S_PvpRoomRaceMember.prototype.RoleIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PvpRoomRaceMember Icon.
         * @member {number} Icon
         * @memberof DcgProto.S_PvpRoomRaceMember
         * @instance
         */
        S_PvpRoomRaceMember.prototype.Icon = 0;

        /**
         * S_PvpRoomRaceMember FightResult.
         * @member {DcgProto.E_FightResult} FightResult
         * @memberof DcgProto.S_PvpRoomRaceMember
         * @instance
         */
        S_PvpRoomRaceMember.prototype.FightResult = 0;

        /**
         * Creates a new S_PvpRoomRaceMember instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PvpRoomRaceMember
         * @static
         * @param {DcgProto.IS_PvpRoomRaceMember=} [properties] Properties to set
         * @returns {DcgProto.S_PvpRoomRaceMember} S_PvpRoomRaceMember instance
         */
        S_PvpRoomRaceMember.create = function create(properties) {
            return new S_PvpRoomRaceMember(properties);
        };

        /**
         * Encodes the specified S_PvpRoomRaceMember message. Does not implicitly {@link DcgProto.S_PvpRoomRaceMember.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PvpRoomRaceMember
         * @static
         * @param {DcgProto.IS_PvpRoomRaceMember} m S_PvpRoomRaceMember message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PvpRoomRaceMember.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoleIID != null && Object.hasOwnProperty.call(m, "RoleIID"))
                w.uint32(8).int64(m.RoleIID);
            if (m.Icon != null && Object.hasOwnProperty.call(m, "Icon"))
                w.uint32(16).int32(m.Icon);
            if (m.FightResult != null && Object.hasOwnProperty.call(m, "FightResult"))
                w.uint32(24).int32(m.FightResult);
            return w;
        };

        /**
         * Decodes a S_PvpRoomRaceMember message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PvpRoomRaceMember
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PvpRoomRaceMember} S_PvpRoomRaceMember
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PvpRoomRaceMember.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PvpRoomRaceMember();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoleIID = r.int64();
                    break;
                case 2:
                    m.Icon = r.int32();
                    break;
                case 3:
                    m.FightResult = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PvpRoomRaceMember message.
         * @function verify
         * @memberof DcgProto.S_PvpRoomRaceMember
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PvpRoomRaceMember.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoleIID != null && m.hasOwnProperty("RoleIID")) {
                if (!$util.isInteger(m.RoleIID) && !(m.RoleIID && $util.isInteger(m.RoleIID.low) && $util.isInteger(m.RoleIID.high)))
                    return "RoleIID: integer|Long expected";
            }
            if (m.Icon != null && m.hasOwnProperty("Icon")) {
                if (!$util.isInteger(m.Icon))
                    return "Icon: integer expected";
            }
            if (m.FightResult != null && m.hasOwnProperty("FightResult")) {
                switch (m.FightResult) {
                default:
                    return "FightResult: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            }
            return null;
        };

        return S_PvpRoomRaceMember;
    })();

    DcgProto.S_PvpRoomRaceFight = (function() {

        /**
         * Properties of a S_PvpRoomRaceFight.
         * @memberof DcgProto
         * @interface IS_PvpRoomRaceFight
         * @property {Long|null} [RoomIID] S_PvpRoomRaceFight RoomIID
         * @property {DcgProto.E_ROOM_STATUS|null} [FightStatus] S_PvpRoomRaceFight FightStatus
         * @property {number|null} [EndTime] S_PvpRoomRaceFight EndTime
         * @property {DcgProto.IS_PvpRoomRaceMember|null} [MemberA] S_PvpRoomRaceFight MemberA
         * @property {DcgProto.IS_PvpRoomRaceMember|null} [MemberB] S_PvpRoomRaceFight MemberB
         */

        /**
         * Constructs a new S_PvpRoomRaceFight.
         * @memberof DcgProto
         * @classdesc Represents a S_PvpRoomRaceFight.
         * @implements IS_PvpRoomRaceFight
         * @constructor
         * @param {DcgProto.IS_PvpRoomRaceFight=} [p] Properties to set
         */
        function S_PvpRoomRaceFight(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PvpRoomRaceFight RoomIID.
         * @member {Long} RoomIID
         * @memberof DcgProto.S_PvpRoomRaceFight
         * @instance
         */
        S_PvpRoomRaceFight.prototype.RoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PvpRoomRaceFight FightStatus.
         * @member {DcgProto.E_ROOM_STATUS} FightStatus
         * @memberof DcgProto.S_PvpRoomRaceFight
         * @instance
         */
        S_PvpRoomRaceFight.prototype.FightStatus = 0;

        /**
         * S_PvpRoomRaceFight EndTime.
         * @member {number} EndTime
         * @memberof DcgProto.S_PvpRoomRaceFight
         * @instance
         */
        S_PvpRoomRaceFight.prototype.EndTime = 0;

        /**
         * S_PvpRoomRaceFight MemberA.
         * @member {DcgProto.IS_PvpRoomRaceMember|null|undefined} MemberA
         * @memberof DcgProto.S_PvpRoomRaceFight
         * @instance
         */
        S_PvpRoomRaceFight.prototype.MemberA = null;

        /**
         * S_PvpRoomRaceFight MemberB.
         * @member {DcgProto.IS_PvpRoomRaceMember|null|undefined} MemberB
         * @memberof DcgProto.S_PvpRoomRaceFight
         * @instance
         */
        S_PvpRoomRaceFight.prototype.MemberB = null;

        /**
         * Creates a new S_PvpRoomRaceFight instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PvpRoomRaceFight
         * @static
         * @param {DcgProto.IS_PvpRoomRaceFight=} [properties] Properties to set
         * @returns {DcgProto.S_PvpRoomRaceFight} S_PvpRoomRaceFight instance
         */
        S_PvpRoomRaceFight.create = function create(properties) {
            return new S_PvpRoomRaceFight(properties);
        };

        /**
         * Encodes the specified S_PvpRoomRaceFight message. Does not implicitly {@link DcgProto.S_PvpRoomRaceFight.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PvpRoomRaceFight
         * @static
         * @param {DcgProto.IS_PvpRoomRaceFight} m S_PvpRoomRaceFight message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PvpRoomRaceFight.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomIID != null && Object.hasOwnProperty.call(m, "RoomIID"))
                w.uint32(8).int64(m.RoomIID);
            if (m.FightStatus != null && Object.hasOwnProperty.call(m, "FightStatus"))
                w.uint32(16).int32(m.FightStatus);
            if (m.EndTime != null && Object.hasOwnProperty.call(m, "EndTime"))
                w.uint32(24).uint32(m.EndTime);
            if (m.MemberA != null && Object.hasOwnProperty.call(m, "MemberA"))
                $root.DcgProto.S_PvpRoomRaceMember.encode(m.MemberA, w.uint32(34).fork()).ldelim();
            if (m.MemberB != null && Object.hasOwnProperty.call(m, "MemberB"))
                $root.DcgProto.S_PvpRoomRaceMember.encode(m.MemberB, w.uint32(42).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_PvpRoomRaceFight message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PvpRoomRaceFight
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PvpRoomRaceFight} S_PvpRoomRaceFight
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PvpRoomRaceFight.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PvpRoomRaceFight();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomIID = r.int64();
                    break;
                case 2:
                    m.FightStatus = r.int32();
                    break;
                case 3:
                    m.EndTime = r.uint32();
                    break;
                case 4:
                    m.MemberA = $root.DcgProto.S_PvpRoomRaceMember.decode(r, r.uint32());
                    break;
                case 5:
                    m.MemberB = $root.DcgProto.S_PvpRoomRaceMember.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PvpRoomRaceFight message.
         * @function verify
         * @memberof DcgProto.S_PvpRoomRaceFight
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PvpRoomRaceFight.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomIID != null && m.hasOwnProperty("RoomIID")) {
                if (!$util.isInteger(m.RoomIID) && !(m.RoomIID && $util.isInteger(m.RoomIID.low) && $util.isInteger(m.RoomIID.high)))
                    return "RoomIID: integer|Long expected";
            }
            if (m.FightStatus != null && m.hasOwnProperty("FightStatus")) {
                switch (m.FightStatus) {
                default:
                    return "FightStatus: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            }
            if (m.EndTime != null && m.hasOwnProperty("EndTime")) {
                if (!$util.isInteger(m.EndTime))
                    return "EndTime: integer expected";
            }
            if (m.MemberA != null && m.hasOwnProperty("MemberA")) {
                {
                    var e = $root.DcgProto.S_PvpRoomRaceMember.verify(m.MemberA);
                    if (e)
                        return "MemberA." + e;
                }
            }
            if (m.MemberB != null && m.hasOwnProperty("MemberB")) {
                {
                    var e = $root.DcgProto.S_PvpRoomRaceMember.verify(m.MemberB);
                    if (e)
                        return "MemberB." + e;
                }
            }
            return null;
        };

        return S_PvpRoomRaceFight;
    })();

    DcgProto.S_PvpRoomRaceResult = (function() {

        /**
         * Properties of a S_PvpRoomRaceResult.
         * @memberof DcgProto
         * @interface IS_PvpRoomRaceResult
         * @property {number|null} [TurnCount] S_PvpRoomRaceResult TurnCount
         * @property {Array.<DcgProto.IS_PvpRoomRaceFight>|null} [Fight] S_PvpRoomRaceResult Fight
         * @property {number|null} [EndTime] S_PvpRoomRaceResult EndTime
         */

        /**
         * Constructs a new S_PvpRoomRaceResult.
         * @memberof DcgProto
         * @classdesc Represents a S_PvpRoomRaceResult.
         * @implements IS_PvpRoomRaceResult
         * @constructor
         * @param {DcgProto.IS_PvpRoomRaceResult=} [p] Properties to set
         */
        function S_PvpRoomRaceResult(p) {
            this.Fight = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PvpRoomRaceResult TurnCount.
         * @member {number} TurnCount
         * @memberof DcgProto.S_PvpRoomRaceResult
         * @instance
         */
        S_PvpRoomRaceResult.prototype.TurnCount = 0;

        /**
         * S_PvpRoomRaceResult Fight.
         * @member {Array.<DcgProto.IS_PvpRoomRaceFight>} Fight
         * @memberof DcgProto.S_PvpRoomRaceResult
         * @instance
         */
        S_PvpRoomRaceResult.prototype.Fight = $util.emptyArray;

        /**
         * S_PvpRoomRaceResult EndTime.
         * @member {number} EndTime
         * @memberof DcgProto.S_PvpRoomRaceResult
         * @instance
         */
        S_PvpRoomRaceResult.prototype.EndTime = 0;

        /**
         * Creates a new S_PvpRoomRaceResult instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PvpRoomRaceResult
         * @static
         * @param {DcgProto.IS_PvpRoomRaceResult=} [properties] Properties to set
         * @returns {DcgProto.S_PvpRoomRaceResult} S_PvpRoomRaceResult instance
         */
        S_PvpRoomRaceResult.create = function create(properties) {
            return new S_PvpRoomRaceResult(properties);
        };

        /**
         * Encodes the specified S_PvpRoomRaceResult message. Does not implicitly {@link DcgProto.S_PvpRoomRaceResult.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PvpRoomRaceResult
         * @static
         * @param {DcgProto.IS_PvpRoomRaceResult} m S_PvpRoomRaceResult message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PvpRoomRaceResult.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.TurnCount != null && Object.hasOwnProperty.call(m, "TurnCount"))
                w.uint32(8).int32(m.TurnCount);
            if (m.Fight != null && m.Fight.length) {
                for (var i = 0; i < m.Fight.length; ++i)
                    $root.DcgProto.S_PvpRoomRaceFight.encode(m.Fight[i], w.uint32(18).fork()).ldelim();
            }
            if (m.EndTime != null && Object.hasOwnProperty.call(m, "EndTime"))
                w.uint32(24).uint32(m.EndTime);
            return w;
        };

        /**
         * Decodes a S_PvpRoomRaceResult message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PvpRoomRaceResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PvpRoomRaceResult} S_PvpRoomRaceResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PvpRoomRaceResult.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PvpRoomRaceResult();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.TurnCount = r.int32();
                    break;
                case 2:
                    if (!(m.Fight && m.Fight.length))
                        m.Fight = [];
                    m.Fight.push($root.DcgProto.S_PvpRoomRaceFight.decode(r, r.uint32()));
                    break;
                case 3:
                    m.EndTime = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PvpRoomRaceResult message.
         * @function verify
         * @memberof DcgProto.S_PvpRoomRaceResult
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PvpRoomRaceResult.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.TurnCount != null && m.hasOwnProperty("TurnCount")) {
                if (!$util.isInteger(m.TurnCount))
                    return "TurnCount: integer expected";
            }
            if (m.Fight != null && m.hasOwnProperty("Fight")) {
                if (!Array.isArray(m.Fight))
                    return "Fight: array expected";
                for (var i = 0; i < m.Fight.length; ++i) {
                    {
                        var e = $root.DcgProto.S_PvpRoomRaceFight.verify(m.Fight[i]);
                        if (e)
                            return "Fight." + e;
                    }
                }
            }
            if (m.EndTime != null && m.hasOwnProperty("EndTime")) {
                if (!$util.isInteger(m.EndTime))
                    return "EndTime: integer expected";
            }
            return null;
        };

        return S_PvpRoomRaceResult;
    })();

    DcgProto.S_PvpRoomRace = (function() {

        /**
         * Properties of a S_PvpRoomRace.
         * @memberof DcgProto
         * @interface IS_PvpRoomRace
         * @property {Long|null} [RaceIID] S_PvpRoomRace RaceIID
         * @property {Array.<DcgProto.IS_PvpRoomRaceMember>|null} [RaceMembers] S_PvpRoomRace RaceMembers
         * @property {number|null} [TurnCount] S_PvpRoomRace TurnCount
         * @property {Array.<DcgProto.IS_PvpRoomRaceResult>|null} [RaceTurns] S_PvpRoomRace RaceTurns
         */

        /**
         * Constructs a new S_PvpRoomRace.
         * @memberof DcgProto
         * @classdesc Represents a S_PvpRoomRace.
         * @implements IS_PvpRoomRace
         * @constructor
         * @param {DcgProto.IS_PvpRoomRace=} [p] Properties to set
         */
        function S_PvpRoomRace(p) {
            this.RaceMembers = [];
            this.RaceTurns = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_PvpRoomRace RaceIID.
         * @member {Long} RaceIID
         * @memberof DcgProto.S_PvpRoomRace
         * @instance
         */
        S_PvpRoomRace.prototype.RaceIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_PvpRoomRace RaceMembers.
         * @member {Array.<DcgProto.IS_PvpRoomRaceMember>} RaceMembers
         * @memberof DcgProto.S_PvpRoomRace
         * @instance
         */
        S_PvpRoomRace.prototype.RaceMembers = $util.emptyArray;

        /**
         * S_PvpRoomRace TurnCount.
         * @member {number} TurnCount
         * @memberof DcgProto.S_PvpRoomRace
         * @instance
         */
        S_PvpRoomRace.prototype.TurnCount = 0;

        /**
         * S_PvpRoomRace RaceTurns.
         * @member {Array.<DcgProto.IS_PvpRoomRaceResult>} RaceTurns
         * @memberof DcgProto.S_PvpRoomRace
         * @instance
         */
        S_PvpRoomRace.prototype.RaceTurns = $util.emptyArray;

        /**
         * Creates a new S_PvpRoomRace instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_PvpRoomRace
         * @static
         * @param {DcgProto.IS_PvpRoomRace=} [properties] Properties to set
         * @returns {DcgProto.S_PvpRoomRace} S_PvpRoomRace instance
         */
        S_PvpRoomRace.create = function create(properties) {
            return new S_PvpRoomRace(properties);
        };

        /**
         * Encodes the specified S_PvpRoomRace message. Does not implicitly {@link DcgProto.S_PvpRoomRace.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_PvpRoomRace
         * @static
         * @param {DcgProto.IS_PvpRoomRace} m S_PvpRoomRace message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_PvpRoomRace.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RaceIID != null && Object.hasOwnProperty.call(m, "RaceIID"))
                w.uint32(8).int64(m.RaceIID);
            if (m.RaceMembers != null && m.RaceMembers.length) {
                for (var i = 0; i < m.RaceMembers.length; ++i)
                    $root.DcgProto.S_PvpRoomRaceMember.encode(m.RaceMembers[i], w.uint32(18).fork()).ldelim();
            }
            if (m.TurnCount != null && Object.hasOwnProperty.call(m, "TurnCount"))
                w.uint32(24).int32(m.TurnCount);
            if (m.RaceTurns != null && m.RaceTurns.length) {
                for (var i = 0; i < m.RaceTurns.length; ++i)
                    $root.DcgProto.S_PvpRoomRaceResult.encode(m.RaceTurns[i], w.uint32(34).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_PvpRoomRace message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_PvpRoomRace
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_PvpRoomRace} S_PvpRoomRace
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_PvpRoomRace.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_PvpRoomRace();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RaceIID = r.int64();
                    break;
                case 2:
                    if (!(m.RaceMembers && m.RaceMembers.length))
                        m.RaceMembers = [];
                    m.RaceMembers.push($root.DcgProto.S_PvpRoomRaceMember.decode(r, r.uint32()));
                    break;
                case 3:
                    m.TurnCount = r.int32();
                    break;
                case 4:
                    if (!(m.RaceTurns && m.RaceTurns.length))
                        m.RaceTurns = [];
                    m.RaceTurns.push($root.DcgProto.S_PvpRoomRaceResult.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_PvpRoomRace message.
         * @function verify
         * @memberof DcgProto.S_PvpRoomRace
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_PvpRoomRace.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RaceIID != null && m.hasOwnProperty("RaceIID")) {
                if (!$util.isInteger(m.RaceIID) && !(m.RaceIID && $util.isInteger(m.RaceIID.low) && $util.isInteger(m.RaceIID.high)))
                    return "RaceIID: integer|Long expected";
            }
            if (m.RaceMembers != null && m.hasOwnProperty("RaceMembers")) {
                if (!Array.isArray(m.RaceMembers))
                    return "RaceMembers: array expected";
                for (var i = 0; i < m.RaceMembers.length; ++i) {
                    {
                        var e = $root.DcgProto.S_PvpRoomRaceMember.verify(m.RaceMembers[i]);
                        if (e)
                            return "RaceMembers." + e;
                    }
                }
            }
            if (m.TurnCount != null && m.hasOwnProperty("TurnCount")) {
                if (!$util.isInteger(m.TurnCount))
                    return "TurnCount: integer expected";
            }
            if (m.RaceTurns != null && m.hasOwnProperty("RaceTurns")) {
                if (!Array.isArray(m.RaceTurns))
                    return "RaceTurns: array expected";
                for (var i = 0; i < m.RaceTurns.length; ++i) {
                    {
                        var e = $root.DcgProto.S_PvpRoomRaceResult.verify(m.RaceTurns[i]);
                        if (e)
                            return "RaceTurns." + e;
                    }
                }
            }
            return null;
        };

        return S_PvpRoomRace;
    })();

    DcgProto.S_Match = (function() {

        /**
         * Properties of a S_Match.
         * @memberof DcgProto
         * @interface IS_Match
         * @property {Long|null} [InstanceId] S_Match InstanceId
         * @property {DcgProto.E_ROOM_MODE|null} [RoomMode] S_Match RoomMode
         */

        /**
         * Constructs a new S_Match.
         * @memberof DcgProto
         * @classdesc Represents a S_Match.
         * @implements IS_Match
         * @constructor
         * @param {DcgProto.IS_Match=} [p] Properties to set
         */
        function S_Match(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_Match InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_Match
         * @instance
         */
        S_Match.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_Match RoomMode.
         * @member {DcgProto.E_ROOM_MODE} RoomMode
         * @memberof DcgProto.S_Match
         * @instance
         */
        S_Match.prototype.RoomMode = 0;

        /**
         * Creates a new S_Match instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_Match
         * @static
         * @param {DcgProto.IS_Match=} [properties] Properties to set
         * @returns {DcgProto.S_Match} S_Match instance
         */
        S_Match.create = function create(properties) {
            return new S_Match(properties);
        };

        /**
         * Encodes the specified S_Match message. Does not implicitly {@link DcgProto.S_Match.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_Match
         * @static
         * @param {DcgProto.IS_Match} m S_Match message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_Match.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.RoomMode != null && Object.hasOwnProperty.call(m, "RoomMode"))
                w.uint32(16).int32(m.RoomMode);
            return w;
        };

        /**
         * Decodes a S_Match message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_Match
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_Match} S_Match
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_Match.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_Match();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.RoomMode = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_Match message.
         * @function verify
         * @memberof DcgProto.S_Match
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_Match.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.RoomMode != null && m.hasOwnProperty("RoomMode")) {
                switch (m.RoomMode) {
                default:
                    return "RoomMode: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            }
            return null;
        };

        return S_Match;
    })();

    DcgProto.S_Fight = (function() {

        /**
         * Properties of a S_Fight.
         * @memberof DcgProto
         * @interface IS_Fight
         * @property {Long|null} [InstanceId] S_Fight InstanceId
         * @property {DcgProto.IS_RoomData|null} [RoomData] S_Fight RoomData
         */

        /**
         * Constructs a new S_Fight.
         * @memberof DcgProto
         * @classdesc Represents a S_Fight.
         * @implements IS_Fight
         * @constructor
         * @param {DcgProto.IS_Fight=} [p] Properties to set
         */
        function S_Fight(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_Fight InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_Fight
         * @instance
         */
        S_Fight.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_Fight RoomData.
         * @member {DcgProto.IS_RoomData|null|undefined} RoomData
         * @memberof DcgProto.S_Fight
         * @instance
         */
        S_Fight.prototype.RoomData = null;

        /**
         * Creates a new S_Fight instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_Fight
         * @static
         * @param {DcgProto.IS_Fight=} [properties] Properties to set
         * @returns {DcgProto.S_Fight} S_Fight instance
         */
        S_Fight.create = function create(properties) {
            return new S_Fight(properties);
        };

        /**
         * Encodes the specified S_Fight message. Does not implicitly {@link DcgProto.S_Fight.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_Fight
         * @static
         * @param {DcgProto.IS_Fight} m S_Fight message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_Fight.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.RoomData != null && Object.hasOwnProperty.call(m, "RoomData"))
                $root.DcgProto.S_RoomData.encode(m.RoomData, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_Fight message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_Fight
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_Fight} S_Fight
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_Fight.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_Fight();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.RoomData = $root.DcgProto.S_RoomData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_Fight message.
         * @function verify
         * @memberof DcgProto.S_Fight
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_Fight.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.RoomData != null && m.hasOwnProperty("RoomData")) {
                {
                    var e = $root.DcgProto.S_RoomData.verify(m.RoomData);
                    if (e)
                        return "RoomData." + e;
                }
            }
            return null;
        };

        return S_Fight;
    })();

    DcgProto.S_BattleParams = (function() {

        /**
         * Properties of a S_BattleParams.
         * @memberof DcgProto
         * @interface IS_BattleParams
         * @property {DcgProto.E_FIGHT_ACTION|null} [Action] S_BattleParams Action
         * @property {Long|null} [CardIIDA] S_BattleParams CardIIDA
         * @property {Long|null} [CardIIDB] S_BattleParams CardIIDB
         * @property {Array.<Long>|null} [IIDList] S_BattleParams IIDList
         * @property {number|null} [ParamNumber] S_BattleParams ParamNumber
         * @property {string|null} [Data] S_BattleParams Data
         * @property {number|null} [RequestId] S_BattleParams RequestId
         * @property {Array.<number>|null} [NumberListA] S_BattleParams NumberListA
         * @property {Array.<number>|null} [NumberListB] S_BattleParams NumberListB
         */

        /**
         * Constructs a new S_BattleParams.
         * @memberof DcgProto
         * @classdesc Represents a S_BattleParams.
         * @implements IS_BattleParams
         * @constructor
         * @param {DcgProto.IS_BattleParams=} [p] Properties to set
         */
        function S_BattleParams(p) {
            this.IIDList = [];
            this.NumberListA = [];
            this.NumberListB = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_BattleParams Action.
         * @member {DcgProto.E_FIGHT_ACTION} Action
         * @memberof DcgProto.S_BattleParams
         * @instance
         */
        S_BattleParams.prototype.Action = 0;

        /**
         * S_BattleParams CardIIDA.
         * @member {Long} CardIIDA
         * @memberof DcgProto.S_BattleParams
         * @instance
         */
        S_BattleParams.prototype.CardIIDA = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_BattleParams CardIIDB.
         * @member {Long} CardIIDB
         * @memberof DcgProto.S_BattleParams
         * @instance
         */
        S_BattleParams.prototype.CardIIDB = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_BattleParams IIDList.
         * @member {Array.<Long>} IIDList
         * @memberof DcgProto.S_BattleParams
         * @instance
         */
        S_BattleParams.prototype.IIDList = $util.emptyArray;

        /**
         * S_BattleParams ParamNumber.
         * @member {number} ParamNumber
         * @memberof DcgProto.S_BattleParams
         * @instance
         */
        S_BattleParams.prototype.ParamNumber = 0;

        /**
         * S_BattleParams Data.
         * @member {string} Data
         * @memberof DcgProto.S_BattleParams
         * @instance
         */
        S_BattleParams.prototype.Data = "";

        /**
         * S_BattleParams RequestId.
         * @member {number} RequestId
         * @memberof DcgProto.S_BattleParams
         * @instance
         */
        S_BattleParams.prototype.RequestId = 0;

        /**
         * S_BattleParams NumberListA.
         * @member {Array.<number>} NumberListA
         * @memberof DcgProto.S_BattleParams
         * @instance
         */
        S_BattleParams.prototype.NumberListA = $util.emptyArray;

        /**
         * S_BattleParams NumberListB.
         * @member {Array.<number>} NumberListB
         * @memberof DcgProto.S_BattleParams
         * @instance
         */
        S_BattleParams.prototype.NumberListB = $util.emptyArray;

        /**
         * Creates a new S_BattleParams instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_BattleParams
         * @static
         * @param {DcgProto.IS_BattleParams=} [properties] Properties to set
         * @returns {DcgProto.S_BattleParams} S_BattleParams instance
         */
        S_BattleParams.create = function create(properties) {
            return new S_BattleParams(properties);
        };

        /**
         * Encodes the specified S_BattleParams message. Does not implicitly {@link DcgProto.S_BattleParams.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_BattleParams
         * @static
         * @param {DcgProto.IS_BattleParams} m S_BattleParams message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_BattleParams.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Action != null && Object.hasOwnProperty.call(m, "Action"))
                w.uint32(8).int32(m.Action);
            if (m.CardIIDA != null && Object.hasOwnProperty.call(m, "CardIIDA"))
                w.uint32(16).int64(m.CardIIDA);
            if (m.CardIIDB != null && Object.hasOwnProperty.call(m, "CardIIDB"))
                w.uint32(24).int64(m.CardIIDB);
            if (m.IIDList != null && m.IIDList.length) {
                w.uint32(34).fork();
                for (var i = 0; i < m.IIDList.length; ++i)
                    w.int64(m.IIDList[i]);
                w.ldelim();
            }
            if (m.ParamNumber != null && Object.hasOwnProperty.call(m, "ParamNumber"))
                w.uint32(40).int32(m.ParamNumber);
            if (m.Data != null && Object.hasOwnProperty.call(m, "Data"))
                w.uint32(50).string(m.Data);
            if (m.RequestId != null && Object.hasOwnProperty.call(m, "RequestId"))
                w.uint32(56).int32(m.RequestId);
            if (m.NumberListA != null && m.NumberListA.length) {
                w.uint32(66).fork();
                for (var i = 0; i < m.NumberListA.length; ++i)
                    w.int32(m.NumberListA[i]);
                w.ldelim();
            }
            if (m.NumberListB != null && m.NumberListB.length) {
                w.uint32(74).fork();
                for (var i = 0; i < m.NumberListB.length; ++i)
                    w.int32(m.NumberListB[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_BattleParams message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_BattleParams
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_BattleParams} S_BattleParams
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_BattleParams.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_BattleParams();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Action = r.int32();
                    break;
                case 2:
                    m.CardIIDA = r.int64();
                    break;
                case 3:
                    m.CardIIDB = r.int64();
                    break;
                case 4:
                    if (!(m.IIDList && m.IIDList.length))
                        m.IIDList = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.IIDList.push(r.int64());
                    } else
                        m.IIDList.push(r.int64());
                    break;
                case 5:
                    m.ParamNumber = r.int32();
                    break;
                case 6:
                    m.Data = r.string();
                    break;
                case 7:
                    m.RequestId = r.int32();
                    break;
                case 8:
                    if (!(m.NumberListA && m.NumberListA.length))
                        m.NumberListA = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.NumberListA.push(r.int32());
                    } else
                        m.NumberListA.push(r.int32());
                    break;
                case 9:
                    if (!(m.NumberListB && m.NumberListB.length))
                        m.NumberListB = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.NumberListB.push(r.int32());
                    } else
                        m.NumberListB.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_BattleParams message.
         * @function verify
         * @memberof DcgProto.S_BattleParams
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_BattleParams.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Action != null && m.hasOwnProperty("Action")) {
                switch (m.Action) {
                default:
                    return "Action: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                    break;
                }
            }
            if (m.CardIIDA != null && m.hasOwnProperty("CardIIDA")) {
                if (!$util.isInteger(m.CardIIDA) && !(m.CardIIDA && $util.isInteger(m.CardIIDA.low) && $util.isInteger(m.CardIIDA.high)))
                    return "CardIIDA: integer|Long expected";
            }
            if (m.CardIIDB != null && m.hasOwnProperty("CardIIDB")) {
                if (!$util.isInteger(m.CardIIDB) && !(m.CardIIDB && $util.isInteger(m.CardIIDB.low) && $util.isInteger(m.CardIIDB.high)))
                    return "CardIIDB: integer|Long expected";
            }
            if (m.IIDList != null && m.hasOwnProperty("IIDList")) {
                if (!Array.isArray(m.IIDList))
                    return "IIDList: array expected";
                for (var i = 0; i < m.IIDList.length; ++i) {
                    if (!$util.isInteger(m.IIDList[i]) && !(m.IIDList[i] && $util.isInteger(m.IIDList[i].low) && $util.isInteger(m.IIDList[i].high)))
                        return "IIDList: integer|Long[] expected";
                }
            }
            if (m.ParamNumber != null && m.hasOwnProperty("ParamNumber")) {
                if (!$util.isInteger(m.ParamNumber))
                    return "ParamNumber: integer expected";
            }
            if (m.Data != null && m.hasOwnProperty("Data")) {
                if (!$util.isString(m.Data))
                    return "Data: string expected";
            }
            if (m.RequestId != null && m.hasOwnProperty("RequestId")) {
                if (!$util.isInteger(m.RequestId))
                    return "RequestId: integer expected";
            }
            if (m.NumberListA != null && m.hasOwnProperty("NumberListA")) {
                if (!Array.isArray(m.NumberListA))
                    return "NumberListA: array expected";
                for (var i = 0; i < m.NumberListA.length; ++i) {
                    if (!$util.isInteger(m.NumberListA[i]))
                        return "NumberListA: integer[] expected";
                }
            }
            if (m.NumberListB != null && m.hasOwnProperty("NumberListB")) {
                if (!Array.isArray(m.NumberListB))
                    return "NumberListB: array expected";
                for (var i = 0; i < m.NumberListB.length; ++i) {
                    if (!$util.isInteger(m.NumberListB[i]))
                        return "NumberListB: integer[] expected";
                }
            }
            return null;
        };

        return S_BattleParams;
    })();

    DcgProto.S_GmParams = (function() {

        /**
         * Properties of a S_GmParams.
         * @memberof DcgProto
         * @interface IS_GmParams
         * @property {Long|null} [RoomIID] S_GmParams RoomIID
         * @property {DcgProto.IS_DeckInfo|null} [DeckInfo] S_GmParams DeckInfo
         * @property {string|null} [Data] S_GmParams Data
         * @property {DcgProto.IS_MatchData|null} [MatchData] S_GmParams MatchData
         * @property {Long|null} [ExtIID] S_GmParams ExtIID
         * @property {Array.<string>|null} [Params] S_GmParams Params
         */

        /**
         * Constructs a new S_GmParams.
         * @memberof DcgProto
         * @classdesc Represents a S_GmParams.
         * @implements IS_GmParams
         * @constructor
         * @param {DcgProto.IS_GmParams=} [p] Properties to set
         */
        function S_GmParams(p) {
            this.Params = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_GmParams RoomIID.
         * @member {Long} RoomIID
         * @memberof DcgProto.S_GmParams
         * @instance
         */
        S_GmParams.prototype.RoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_GmParams DeckInfo.
         * @member {DcgProto.IS_DeckInfo|null|undefined} DeckInfo
         * @memberof DcgProto.S_GmParams
         * @instance
         */
        S_GmParams.prototype.DeckInfo = null;

        /**
         * S_GmParams Data.
         * @member {string} Data
         * @memberof DcgProto.S_GmParams
         * @instance
         */
        S_GmParams.prototype.Data = "";

        /**
         * S_GmParams MatchData.
         * @member {DcgProto.IS_MatchData|null|undefined} MatchData
         * @memberof DcgProto.S_GmParams
         * @instance
         */
        S_GmParams.prototype.MatchData = null;

        /**
         * S_GmParams ExtIID.
         * @member {Long} ExtIID
         * @memberof DcgProto.S_GmParams
         * @instance
         */
        S_GmParams.prototype.ExtIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_GmParams Params.
         * @member {Array.<string>} Params
         * @memberof DcgProto.S_GmParams
         * @instance
         */
        S_GmParams.prototype.Params = $util.emptyArray;

        /**
         * Creates a new S_GmParams instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_GmParams
         * @static
         * @param {DcgProto.IS_GmParams=} [properties] Properties to set
         * @returns {DcgProto.S_GmParams} S_GmParams instance
         */
        S_GmParams.create = function create(properties) {
            return new S_GmParams(properties);
        };

        /**
         * Encodes the specified S_GmParams message. Does not implicitly {@link DcgProto.S_GmParams.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_GmParams
         * @static
         * @param {DcgProto.IS_GmParams} m S_GmParams message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_GmParams.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomIID != null && Object.hasOwnProperty.call(m, "RoomIID"))
                w.uint32(8).int64(m.RoomIID);
            if (m.DeckInfo != null && Object.hasOwnProperty.call(m, "DeckInfo"))
                $root.DcgProto.S_DeckInfo.encode(m.DeckInfo, w.uint32(18).fork()).ldelim();
            if (m.Data != null && Object.hasOwnProperty.call(m, "Data"))
                w.uint32(26).string(m.Data);
            if (m.MatchData != null && Object.hasOwnProperty.call(m, "MatchData"))
                $root.DcgProto.S_MatchData.encode(m.MatchData, w.uint32(34).fork()).ldelim();
            if (m.ExtIID != null && Object.hasOwnProperty.call(m, "ExtIID"))
                w.uint32(40).int64(m.ExtIID);
            if (m.Params != null && m.Params.length) {
                for (var i = 0; i < m.Params.length; ++i)
                    w.uint32(50).string(m.Params[i]);
            }
            return w;
        };

        /**
         * Decodes a S_GmParams message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_GmParams
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_GmParams} S_GmParams
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_GmParams.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_GmParams();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomIID = r.int64();
                    break;
                case 2:
                    m.DeckInfo = $root.DcgProto.S_DeckInfo.decode(r, r.uint32());
                    break;
                case 3:
                    m.Data = r.string();
                    break;
                case 4:
                    m.MatchData = $root.DcgProto.S_MatchData.decode(r, r.uint32());
                    break;
                case 5:
                    m.ExtIID = r.int64();
                    break;
                case 6:
                    if (!(m.Params && m.Params.length))
                        m.Params = [];
                    m.Params.push(r.string());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_GmParams message.
         * @function verify
         * @memberof DcgProto.S_GmParams
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_GmParams.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomIID != null && m.hasOwnProperty("RoomIID")) {
                if (!$util.isInteger(m.RoomIID) && !(m.RoomIID && $util.isInteger(m.RoomIID.low) && $util.isInteger(m.RoomIID.high)))
                    return "RoomIID: integer|Long expected";
            }
            if (m.DeckInfo != null && m.hasOwnProperty("DeckInfo")) {
                {
                    var e = $root.DcgProto.S_DeckInfo.verify(m.DeckInfo);
                    if (e)
                        return "DeckInfo." + e;
                }
            }
            if (m.Data != null && m.hasOwnProperty("Data")) {
                if (!$util.isString(m.Data))
                    return "Data: string expected";
            }
            if (m.MatchData != null && m.hasOwnProperty("MatchData")) {
                {
                    var e = $root.DcgProto.S_MatchData.verify(m.MatchData);
                    if (e)
                        return "MatchData." + e;
                }
            }
            if (m.ExtIID != null && m.hasOwnProperty("ExtIID")) {
                if (!$util.isInteger(m.ExtIID) && !(m.ExtIID && $util.isInteger(m.ExtIID.low) && $util.isInteger(m.ExtIID.high)))
                    return "ExtIID: integer|Long expected";
            }
            if (m.Params != null && m.hasOwnProperty("Params")) {
                if (!Array.isArray(m.Params))
                    return "Params: array expected";
                for (var i = 0; i < m.Params.length; ++i) {
                    if (!$util.isString(m.Params[i]))
                        return "Params: string[] expected";
                }
            }
            return null;
        };

        return S_GmParams;
    })();

    DcgProto.S_MatchData = (function() {

        /**
         * Properties of a S_MatchData.
         * @memberof DcgProto
         * @interface IS_MatchData
         * @property {number|null} [Action] S_MatchData Action
         * @property {number|null} [Score] S_MatchData Score
         * @property {number|null} [BattleCount] S_MatchData BattleCount
         * @property {number|null} [ConWin] S_MatchData ConWin
         * @property {number|null} [ConLost] S_MatchData ConLost
         * @property {number|null} [RealScore] S_MatchData RealScore
         * @property {number|null} [GroupCfgId] S_MatchData GroupCfgId
         * @property {number|null} [LastTotalCount] S_MatchData LastTotalCount
         */

        /**
         * Constructs a new S_MatchData.
         * @memberof DcgProto
         * @classdesc Represents a S_MatchData.
         * @implements IS_MatchData
         * @constructor
         * @param {DcgProto.IS_MatchData=} [p] Properties to set
         */
        function S_MatchData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_MatchData Action.
         * @member {number} Action
         * @memberof DcgProto.S_MatchData
         * @instance
         */
        S_MatchData.prototype.Action = 0;

        /**
         * S_MatchData Score.
         * @member {number} Score
         * @memberof DcgProto.S_MatchData
         * @instance
         */
        S_MatchData.prototype.Score = 0;

        /**
         * S_MatchData BattleCount.
         * @member {number} BattleCount
         * @memberof DcgProto.S_MatchData
         * @instance
         */
        S_MatchData.prototype.BattleCount = 0;

        /**
         * S_MatchData ConWin.
         * @member {number} ConWin
         * @memberof DcgProto.S_MatchData
         * @instance
         */
        S_MatchData.prototype.ConWin = 0;

        /**
         * S_MatchData ConLost.
         * @member {number} ConLost
         * @memberof DcgProto.S_MatchData
         * @instance
         */
        S_MatchData.prototype.ConLost = 0;

        /**
         * S_MatchData RealScore.
         * @member {number} RealScore
         * @memberof DcgProto.S_MatchData
         * @instance
         */
        S_MatchData.prototype.RealScore = 0;

        /**
         * S_MatchData GroupCfgId.
         * @member {number} GroupCfgId
         * @memberof DcgProto.S_MatchData
         * @instance
         */
        S_MatchData.prototype.GroupCfgId = 0;

        /**
         * S_MatchData LastTotalCount.
         * @member {number} LastTotalCount
         * @memberof DcgProto.S_MatchData
         * @instance
         */
        S_MatchData.prototype.LastTotalCount = 0;

        /**
         * Creates a new S_MatchData instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_MatchData
         * @static
         * @param {DcgProto.IS_MatchData=} [properties] Properties to set
         * @returns {DcgProto.S_MatchData} S_MatchData instance
         */
        S_MatchData.create = function create(properties) {
            return new S_MatchData(properties);
        };

        /**
         * Encodes the specified S_MatchData message. Does not implicitly {@link DcgProto.S_MatchData.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_MatchData
         * @static
         * @param {DcgProto.IS_MatchData} m S_MatchData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_MatchData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Action != null && Object.hasOwnProperty.call(m, "Action"))
                w.uint32(8).int32(m.Action);
            if (m.Score != null && Object.hasOwnProperty.call(m, "Score"))
                w.uint32(16).int32(m.Score);
            if (m.BattleCount != null && Object.hasOwnProperty.call(m, "BattleCount"))
                w.uint32(24).int32(m.BattleCount);
            if (m.ConWin != null && Object.hasOwnProperty.call(m, "ConWin"))
                w.uint32(32).int32(m.ConWin);
            if (m.ConLost != null && Object.hasOwnProperty.call(m, "ConLost"))
                w.uint32(40).int32(m.ConLost);
            if (m.RealScore != null && Object.hasOwnProperty.call(m, "RealScore"))
                w.uint32(48).int32(m.RealScore);
            if (m.GroupCfgId != null && Object.hasOwnProperty.call(m, "GroupCfgId"))
                w.uint32(56).int32(m.GroupCfgId);
            if (m.LastTotalCount != null && Object.hasOwnProperty.call(m, "LastTotalCount"))
                w.uint32(64).int32(m.LastTotalCount);
            return w;
        };

        /**
         * Decodes a S_MatchData message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_MatchData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_MatchData} S_MatchData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_MatchData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_MatchData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Action = r.int32();
                    break;
                case 2:
                    m.Score = r.int32();
                    break;
                case 3:
                    m.BattleCount = r.int32();
                    break;
                case 4:
                    m.ConWin = r.int32();
                    break;
                case 5:
                    m.ConLost = r.int32();
                    break;
                case 6:
                    m.RealScore = r.int32();
                    break;
                case 7:
                    m.GroupCfgId = r.int32();
                    break;
                case 8:
                    m.LastTotalCount = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_MatchData message.
         * @function verify
         * @memberof DcgProto.S_MatchData
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_MatchData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Action != null && m.hasOwnProperty("Action")) {
                if (!$util.isInteger(m.Action))
                    return "Action: integer expected";
            }
            if (m.Score != null && m.hasOwnProperty("Score")) {
                if (!$util.isInteger(m.Score))
                    return "Score: integer expected";
            }
            if (m.BattleCount != null && m.hasOwnProperty("BattleCount")) {
                if (!$util.isInteger(m.BattleCount))
                    return "BattleCount: integer expected";
            }
            if (m.ConWin != null && m.hasOwnProperty("ConWin")) {
                if (!$util.isInteger(m.ConWin))
                    return "ConWin: integer expected";
            }
            if (m.ConLost != null && m.hasOwnProperty("ConLost")) {
                if (!$util.isInteger(m.ConLost))
                    return "ConLost: integer expected";
            }
            if (m.RealScore != null && m.hasOwnProperty("RealScore")) {
                if (!$util.isInteger(m.RealScore))
                    return "RealScore: integer expected";
            }
            if (m.GroupCfgId != null && m.hasOwnProperty("GroupCfgId")) {
                if (!$util.isInteger(m.GroupCfgId))
                    return "GroupCfgId: integer expected";
            }
            if (m.LastTotalCount != null && m.hasOwnProperty("LastTotalCount")) {
                if (!$util.isInteger(m.LastTotalCount))
                    return "LastTotalCount: integer expected";
            }
            return null;
        };

        return S_MatchData;
    })();

    DcgProto.S_RoomRecord = (function() {

        /**
         * Properties of a S_RoomRecord.
         * @memberof DcgProto
         * @interface IS_RoomRecord
         * @property {Long|null} [RoomIID] S_RoomRecord RoomIID
         * @property {DcgProto.E_ROOM_MODE|null} [RoomMode] S_RoomRecord RoomMode
         * @property {DcgProto.IS_BattleResult|null} [BattleResult] S_RoomRecord BattleResult
         */

        /**
         * Constructs a new S_RoomRecord.
         * @memberof DcgProto
         * @classdesc Represents a S_RoomRecord.
         * @implements IS_RoomRecord
         * @constructor
         * @param {DcgProto.IS_RoomRecord=} [p] Properties to set
         */
        function S_RoomRecord(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_RoomRecord RoomIID.
         * @member {Long} RoomIID
         * @memberof DcgProto.S_RoomRecord
         * @instance
         */
        S_RoomRecord.prototype.RoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_RoomRecord RoomMode.
         * @member {DcgProto.E_ROOM_MODE} RoomMode
         * @memberof DcgProto.S_RoomRecord
         * @instance
         */
        S_RoomRecord.prototype.RoomMode = 0;

        /**
         * S_RoomRecord BattleResult.
         * @member {DcgProto.IS_BattleResult|null|undefined} BattleResult
         * @memberof DcgProto.S_RoomRecord
         * @instance
         */
        S_RoomRecord.prototype.BattleResult = null;

        /**
         * Creates a new S_RoomRecord instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_RoomRecord
         * @static
         * @param {DcgProto.IS_RoomRecord=} [properties] Properties to set
         * @returns {DcgProto.S_RoomRecord} S_RoomRecord instance
         */
        S_RoomRecord.create = function create(properties) {
            return new S_RoomRecord(properties);
        };

        /**
         * Encodes the specified S_RoomRecord message. Does not implicitly {@link DcgProto.S_RoomRecord.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_RoomRecord
         * @static
         * @param {DcgProto.IS_RoomRecord} m S_RoomRecord message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_RoomRecord.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomIID != null && Object.hasOwnProperty.call(m, "RoomIID"))
                w.uint32(8).int64(m.RoomIID);
            if (m.RoomMode != null && Object.hasOwnProperty.call(m, "RoomMode"))
                w.uint32(16).int32(m.RoomMode);
            if (m.BattleResult != null && Object.hasOwnProperty.call(m, "BattleResult"))
                $root.DcgProto.S_BattleResult.encode(m.BattleResult, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_RoomRecord message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_RoomRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_RoomRecord} S_RoomRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_RoomRecord.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_RoomRecord();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomIID = r.int64();
                    break;
                case 2:
                    m.RoomMode = r.int32();
                    break;
                case 3:
                    m.BattleResult = $root.DcgProto.S_BattleResult.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_RoomRecord message.
         * @function verify
         * @memberof DcgProto.S_RoomRecord
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_RoomRecord.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomIID != null && m.hasOwnProperty("RoomIID")) {
                if (!$util.isInteger(m.RoomIID) && !(m.RoomIID && $util.isInteger(m.RoomIID.low) && $util.isInteger(m.RoomIID.high)))
                    return "RoomIID: integer|Long expected";
            }
            if (m.RoomMode != null && m.hasOwnProperty("RoomMode")) {
                switch (m.RoomMode) {
                default:
                    return "RoomMode: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            }
            if (m.BattleResult != null && m.hasOwnProperty("BattleResult")) {
                {
                    var e = $root.DcgProto.S_BattleResult.verify(m.BattleResult);
                    if (e)
                        return "BattleResult." + e;
                }
            }
            return null;
        };

        return S_RoomRecord;
    })();

    DcgProto.S_Task = (function() {

        /**
         * Properties of a S_Task.
         * @memberof DcgProto
         * @interface IS_Task
         * @property {Long|null} [InstanceId] S_Task InstanceId
         * @property {number|null} [CfgId] S_Task CfgId
         * @property {DcgProto.E_TaskStatus|null} [Status] S_Task Status
         * @property {number|null} [CurStep] S_Task CurStep
         * @property {number|null} [TotalStep] S_Task TotalStep
         */

        /**
         * Constructs a new S_Task.
         * @memberof DcgProto
         * @classdesc Represents a S_Task.
         * @implements IS_Task
         * @constructor
         * @param {DcgProto.IS_Task=} [p] Properties to set
         */
        function S_Task(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_Task InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_Task
         * @instance
         */
        S_Task.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_Task CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_Task
         * @instance
         */
        S_Task.prototype.CfgId = 0;

        /**
         * S_Task Status.
         * @member {DcgProto.E_TaskStatus} Status
         * @memberof DcgProto.S_Task
         * @instance
         */
        S_Task.prototype.Status = 0;

        /**
         * S_Task CurStep.
         * @member {number} CurStep
         * @memberof DcgProto.S_Task
         * @instance
         */
        S_Task.prototype.CurStep = 0;

        /**
         * S_Task TotalStep.
         * @member {number} TotalStep
         * @memberof DcgProto.S_Task
         * @instance
         */
        S_Task.prototype.TotalStep = 0;

        /**
         * Creates a new S_Task instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_Task
         * @static
         * @param {DcgProto.IS_Task=} [properties] Properties to set
         * @returns {DcgProto.S_Task} S_Task instance
         */
        S_Task.create = function create(properties) {
            return new S_Task(properties);
        };

        /**
         * Encodes the specified S_Task message. Does not implicitly {@link DcgProto.S_Task.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_Task
         * @static
         * @param {DcgProto.IS_Task} m S_Task message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_Task.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            if (m.Status != null && Object.hasOwnProperty.call(m, "Status"))
                w.uint32(24).int32(m.Status);
            if (m.CurStep != null && Object.hasOwnProperty.call(m, "CurStep"))
                w.uint32(32).int32(m.CurStep);
            if (m.TotalStep != null && Object.hasOwnProperty.call(m, "TotalStep"))
                w.uint32(40).int32(m.TotalStep);
            return w;
        };

        /**
         * Decodes a S_Task message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_Task
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_Task} S_Task
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_Task.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_Task();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                case 3:
                    m.Status = r.int32();
                    break;
                case 4:
                    m.CurStep = r.int32();
                    break;
                case 5:
                    m.TotalStep = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_Task message.
         * @function verify
         * @memberof DcgProto.S_Task
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_Task.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.Status != null && m.hasOwnProperty("Status")) {
                switch (m.Status) {
                default:
                    return "Status: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.CurStep != null && m.hasOwnProperty("CurStep")) {
                if (!$util.isInteger(m.CurStep))
                    return "CurStep: integer expected";
            }
            if (m.TotalStep != null && m.hasOwnProperty("TotalStep")) {
                if (!$util.isInteger(m.TotalStep))
                    return "TotalStep: integer expected";
            }
            return null;
        };

        return S_Task;
    })();

    DcgProto.S_StageTask = (function() {

        /**
         * Properties of a S_StageTask.
         * @memberof DcgProto
         * @interface IS_StageTask
         * @property {Long|null} [InstanceId] S_StageTask InstanceId
         * @property {number|null} [CfgId] S_StageTask CfgId
         * @property {number|null} [CurStep] S_StageTask CurStep
         * @property {Long|null} [RewardStatus] S_StageTask RewardStatus
         * @property {number|null} [EndTime] S_StageTask EndTime
         */

        /**
         * Constructs a new S_StageTask.
         * @memberof DcgProto
         * @classdesc Represents a S_StageTask.
         * @implements IS_StageTask
         * @constructor
         * @param {DcgProto.IS_StageTask=} [p] Properties to set
         */
        function S_StageTask(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_StageTask InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_StageTask
         * @instance
         */
        S_StageTask.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_StageTask CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.S_StageTask
         * @instance
         */
        S_StageTask.prototype.CfgId = 0;

        /**
         * S_StageTask CurStep.
         * @member {number} CurStep
         * @memberof DcgProto.S_StageTask
         * @instance
         */
        S_StageTask.prototype.CurStep = 0;

        /**
         * S_StageTask RewardStatus.
         * @member {Long} RewardStatus
         * @memberof DcgProto.S_StageTask
         * @instance
         */
        S_StageTask.prototype.RewardStatus = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_StageTask EndTime.
         * @member {number} EndTime
         * @memberof DcgProto.S_StageTask
         * @instance
         */
        S_StageTask.prototype.EndTime = 0;

        /**
         * Creates a new S_StageTask instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_StageTask
         * @static
         * @param {DcgProto.IS_StageTask=} [properties] Properties to set
         * @returns {DcgProto.S_StageTask} S_StageTask instance
         */
        S_StageTask.create = function create(properties) {
            return new S_StageTask(properties);
        };

        /**
         * Encodes the specified S_StageTask message. Does not implicitly {@link DcgProto.S_StageTask.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_StageTask
         * @static
         * @param {DcgProto.IS_StageTask} m S_StageTask message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_StageTask.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            if (m.CurStep != null && Object.hasOwnProperty.call(m, "CurStep"))
                w.uint32(24).int32(m.CurStep);
            if (m.RewardStatus != null && Object.hasOwnProperty.call(m, "RewardStatus"))
                w.uint32(32).int64(m.RewardStatus);
            if (m.EndTime != null && Object.hasOwnProperty.call(m, "EndTime"))
                w.uint32(40).uint32(m.EndTime);
            return w;
        };

        /**
         * Decodes a S_StageTask message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_StageTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_StageTask} S_StageTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_StageTask.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_StageTask();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                case 3:
                    m.CurStep = r.int32();
                    break;
                case 4:
                    m.RewardStatus = r.int64();
                    break;
                case 5:
                    m.EndTime = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_StageTask message.
         * @function verify
         * @memberof DcgProto.S_StageTask
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_StageTask.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.CurStep != null && m.hasOwnProperty("CurStep")) {
                if (!$util.isInteger(m.CurStep))
                    return "CurStep: integer expected";
            }
            if (m.RewardStatus != null && m.hasOwnProperty("RewardStatus")) {
                if (!$util.isInteger(m.RewardStatus) && !(m.RewardStatus && $util.isInteger(m.RewardStatus.low) && $util.isInteger(m.RewardStatus.high)))
                    return "RewardStatus: integer|Long expected";
            }
            if (m.EndTime != null && m.hasOwnProperty("EndTime")) {
                if (!$util.isInteger(m.EndTime))
                    return "EndTime: integer expected";
            }
            return null;
        };

        return S_StageTask;
    })();

    DcgProto.S_RoleExtra = (function() {

        /**
         * Properties of a S_RoleExtra.
         * @memberof DcgProto
         * @interface IS_RoleExtra
         * @property {DcgProto.IS_ExtraRecord|null} [Record] S_RoleExtra Record
         * @property {DcgProto.IS_ExtraGuide|null} [Guide] S_RoleExtra Guide
         */

        /**
         * Constructs a new S_RoleExtra.
         * @memberof DcgProto
         * @classdesc Represents a S_RoleExtra.
         * @implements IS_RoleExtra
         * @constructor
         * @param {DcgProto.IS_RoleExtra=} [p] Properties to set
         */
        function S_RoleExtra(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_RoleExtra Record.
         * @member {DcgProto.IS_ExtraRecord|null|undefined} Record
         * @memberof DcgProto.S_RoleExtra
         * @instance
         */
        S_RoleExtra.prototype.Record = null;

        /**
         * S_RoleExtra Guide.
         * @member {DcgProto.IS_ExtraGuide|null|undefined} Guide
         * @memberof DcgProto.S_RoleExtra
         * @instance
         */
        S_RoleExtra.prototype.Guide = null;

        /**
         * Creates a new S_RoleExtra instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_RoleExtra
         * @static
         * @param {DcgProto.IS_RoleExtra=} [properties] Properties to set
         * @returns {DcgProto.S_RoleExtra} S_RoleExtra instance
         */
        S_RoleExtra.create = function create(properties) {
            return new S_RoleExtra(properties);
        };

        /**
         * Encodes the specified S_RoleExtra message. Does not implicitly {@link DcgProto.S_RoleExtra.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_RoleExtra
         * @static
         * @param {DcgProto.IS_RoleExtra} m S_RoleExtra message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_RoleExtra.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Record != null && Object.hasOwnProperty.call(m, "Record"))
                $root.DcgProto.S_ExtraRecord.encode(m.Record, w.uint32(10).fork()).ldelim();
            if (m.Guide != null && Object.hasOwnProperty.call(m, "Guide"))
                $root.DcgProto.S_ExtraGuide.encode(m.Guide, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_RoleExtra message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_RoleExtra
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_RoleExtra} S_RoleExtra
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_RoleExtra.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_RoleExtra();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Record = $root.DcgProto.S_ExtraRecord.decode(r, r.uint32());
                    break;
                case 2:
                    m.Guide = $root.DcgProto.S_ExtraGuide.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_RoleExtra message.
         * @function verify
         * @memberof DcgProto.S_RoleExtra
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_RoleExtra.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Record != null && m.hasOwnProperty("Record")) {
                {
                    var e = $root.DcgProto.S_ExtraRecord.verify(m.Record);
                    if (e)
                        return "Record." + e;
                }
            }
            if (m.Guide != null && m.hasOwnProperty("Guide")) {
                {
                    var e = $root.DcgProto.S_ExtraGuide.verify(m.Guide);
                    if (e)
                        return "Guide." + e;
                }
            }
            return null;
        };

        return S_RoleExtra;
    })();

    DcgProto.S_ExtraRecord = (function() {

        /**
         * Properties of a S_ExtraRecord.
         * @memberof DcgProto
         * @interface IS_ExtraRecord
         * @property {Long|null} [CurrDeckIID] S_ExtraRecord CurrDeckIID
         */

        /**
         * Constructs a new S_ExtraRecord.
         * @memberof DcgProto
         * @classdesc Represents a S_ExtraRecord.
         * @implements IS_ExtraRecord
         * @constructor
         * @param {DcgProto.IS_ExtraRecord=} [p] Properties to set
         */
        function S_ExtraRecord(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_ExtraRecord CurrDeckIID.
         * @member {Long} CurrDeckIID
         * @memberof DcgProto.S_ExtraRecord
         * @instance
         */
        S_ExtraRecord.prototype.CurrDeckIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new S_ExtraRecord instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_ExtraRecord
         * @static
         * @param {DcgProto.IS_ExtraRecord=} [properties] Properties to set
         * @returns {DcgProto.S_ExtraRecord} S_ExtraRecord instance
         */
        S_ExtraRecord.create = function create(properties) {
            return new S_ExtraRecord(properties);
        };

        /**
         * Encodes the specified S_ExtraRecord message. Does not implicitly {@link DcgProto.S_ExtraRecord.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_ExtraRecord
         * @static
         * @param {DcgProto.IS_ExtraRecord} m S_ExtraRecord message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_ExtraRecord.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CurrDeckIID != null && Object.hasOwnProperty.call(m, "CurrDeckIID"))
                w.uint32(8).int64(m.CurrDeckIID);
            return w;
        };

        /**
         * Decodes a S_ExtraRecord message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_ExtraRecord
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_ExtraRecord} S_ExtraRecord
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_ExtraRecord.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_ExtraRecord();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CurrDeckIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_ExtraRecord message.
         * @function verify
         * @memberof DcgProto.S_ExtraRecord
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_ExtraRecord.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CurrDeckIID != null && m.hasOwnProperty("CurrDeckIID")) {
                if (!$util.isInteger(m.CurrDeckIID) && !(m.CurrDeckIID && $util.isInteger(m.CurrDeckIID.low) && $util.isInteger(m.CurrDeckIID.high)))
                    return "CurrDeckIID: integer|Long expected";
            }
            return null;
        };

        return S_ExtraRecord;
    })();

    DcgProto.S_ExtraGuide = (function() {

        /**
         * Properties of a S_ExtraGuide.
         * @memberof DcgProto
         * @interface IS_ExtraGuide
         * @property {Array.<number>|null} [FinishGuideCfgIds] S_ExtraGuide FinishGuideCfgIds
         */

        /**
         * Constructs a new S_ExtraGuide.
         * @memberof DcgProto
         * @classdesc Represents a S_ExtraGuide.
         * @implements IS_ExtraGuide
         * @constructor
         * @param {DcgProto.IS_ExtraGuide=} [p] Properties to set
         */
        function S_ExtraGuide(p) {
            this.FinishGuideCfgIds = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_ExtraGuide FinishGuideCfgIds.
         * @member {Array.<number>} FinishGuideCfgIds
         * @memberof DcgProto.S_ExtraGuide
         * @instance
         */
        S_ExtraGuide.prototype.FinishGuideCfgIds = $util.emptyArray;

        /**
         * Creates a new S_ExtraGuide instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_ExtraGuide
         * @static
         * @param {DcgProto.IS_ExtraGuide=} [properties] Properties to set
         * @returns {DcgProto.S_ExtraGuide} S_ExtraGuide instance
         */
        S_ExtraGuide.create = function create(properties) {
            return new S_ExtraGuide(properties);
        };

        /**
         * Encodes the specified S_ExtraGuide message. Does not implicitly {@link DcgProto.S_ExtraGuide.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_ExtraGuide
         * @static
         * @param {DcgProto.IS_ExtraGuide} m S_ExtraGuide message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_ExtraGuide.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.FinishGuideCfgIds != null && m.FinishGuideCfgIds.length) {
                w.uint32(10).fork();
                for (var i = 0; i < m.FinishGuideCfgIds.length; ++i)
                    w.int32(m.FinishGuideCfgIds[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_ExtraGuide message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_ExtraGuide
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_ExtraGuide} S_ExtraGuide
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_ExtraGuide.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_ExtraGuide();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.FinishGuideCfgIds && m.FinishGuideCfgIds.length))
                        m.FinishGuideCfgIds = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.FinishGuideCfgIds.push(r.int32());
                    } else
                        m.FinishGuideCfgIds.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_ExtraGuide message.
         * @function verify
         * @memberof DcgProto.S_ExtraGuide
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_ExtraGuide.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.FinishGuideCfgIds != null && m.hasOwnProperty("FinishGuideCfgIds")) {
                if (!Array.isArray(m.FinishGuideCfgIds))
                    return "FinishGuideCfgIds: array expected";
                for (var i = 0; i < m.FinishGuideCfgIds.length; ++i) {
                    if (!$util.isInteger(m.FinishGuideCfgIds[i]))
                        return "FinishGuideCfgIds: integer[] expected";
                }
            }
            return null;
        };

        return S_ExtraGuide;
    })();

    DcgProto.S_Story = (function() {

        /**
         * Properties of a S_Story.
         * @memberof DcgProto
         * @interface IS_Story
         * @property {Long|null} [InstanceId] S_Story InstanceId
         * @property {number|null} [ChapterCfgId] S_Story ChapterCfgId
         * @property {number|null} [TaskType] S_Story TaskType
         * @property {number|null} [StageCfgId] S_Story StageCfgId
         * @property {boolean|null} [IsFinish] S_Story IsFinish
         * @property {boolean|null} [IsChapterReward] S_Story IsChapterReward
         */

        /**
         * Constructs a new S_Story.
         * @memberof DcgProto
         * @classdesc Represents a S_Story.
         * @implements IS_Story
         * @constructor
         * @param {DcgProto.IS_Story=} [p] Properties to set
         */
        function S_Story(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_Story InstanceId.
         * @member {Long} InstanceId
         * @memberof DcgProto.S_Story
         * @instance
         */
        S_Story.prototype.InstanceId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_Story ChapterCfgId.
         * @member {number} ChapterCfgId
         * @memberof DcgProto.S_Story
         * @instance
         */
        S_Story.prototype.ChapterCfgId = 0;

        /**
         * S_Story TaskType.
         * @member {number} TaskType
         * @memberof DcgProto.S_Story
         * @instance
         */
        S_Story.prototype.TaskType = 0;

        /**
         * S_Story StageCfgId.
         * @member {number} StageCfgId
         * @memberof DcgProto.S_Story
         * @instance
         */
        S_Story.prototype.StageCfgId = 0;

        /**
         * S_Story IsFinish.
         * @member {boolean} IsFinish
         * @memberof DcgProto.S_Story
         * @instance
         */
        S_Story.prototype.IsFinish = false;

        /**
         * S_Story IsChapterReward.
         * @member {boolean} IsChapterReward
         * @memberof DcgProto.S_Story
         * @instance
         */
        S_Story.prototype.IsChapterReward = false;

        /**
         * Creates a new S_Story instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_Story
         * @static
         * @param {DcgProto.IS_Story=} [properties] Properties to set
         * @returns {DcgProto.S_Story} S_Story instance
         */
        S_Story.create = function create(properties) {
            return new S_Story(properties);
        };

        /**
         * Encodes the specified S_Story message. Does not implicitly {@link DcgProto.S_Story.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_Story
         * @static
         * @param {DcgProto.IS_Story} m S_Story message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_Story.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InstanceId != null && Object.hasOwnProperty.call(m, "InstanceId"))
                w.uint32(8).int64(m.InstanceId);
            if (m.ChapterCfgId != null && Object.hasOwnProperty.call(m, "ChapterCfgId"))
                w.uint32(16).int32(m.ChapterCfgId);
            if (m.TaskType != null && Object.hasOwnProperty.call(m, "TaskType"))
                w.uint32(24).int32(m.TaskType);
            if (m.StageCfgId != null && Object.hasOwnProperty.call(m, "StageCfgId"))
                w.uint32(32).int32(m.StageCfgId);
            if (m.IsFinish != null && Object.hasOwnProperty.call(m, "IsFinish"))
                w.uint32(40).bool(m.IsFinish);
            if (m.IsChapterReward != null && Object.hasOwnProperty.call(m, "IsChapterReward"))
                w.uint32(48).bool(m.IsChapterReward);
            return w;
        };

        /**
         * Decodes a S_Story message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_Story
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_Story} S_Story
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_Story.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_Story();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InstanceId = r.int64();
                    break;
                case 2:
                    m.ChapterCfgId = r.int32();
                    break;
                case 3:
                    m.TaskType = r.int32();
                    break;
                case 4:
                    m.StageCfgId = r.int32();
                    break;
                case 5:
                    m.IsFinish = r.bool();
                    break;
                case 6:
                    m.IsChapterReward = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_Story message.
         * @function verify
         * @memberof DcgProto.S_Story
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_Story.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InstanceId != null && m.hasOwnProperty("InstanceId")) {
                if (!$util.isInteger(m.InstanceId) && !(m.InstanceId && $util.isInteger(m.InstanceId.low) && $util.isInteger(m.InstanceId.high)))
                    return "InstanceId: integer|Long expected";
            }
            if (m.ChapterCfgId != null && m.hasOwnProperty("ChapterCfgId")) {
                if (!$util.isInteger(m.ChapterCfgId))
                    return "ChapterCfgId: integer expected";
            }
            if (m.TaskType != null && m.hasOwnProperty("TaskType")) {
                if (!$util.isInteger(m.TaskType))
                    return "TaskType: integer expected";
            }
            if (m.StageCfgId != null && m.hasOwnProperty("StageCfgId")) {
                if (!$util.isInteger(m.StageCfgId))
                    return "StageCfgId: integer expected";
            }
            if (m.IsFinish != null && m.hasOwnProperty("IsFinish")) {
                if (typeof m.IsFinish !== "boolean")
                    return "IsFinish: boolean expected";
            }
            if (m.IsChapterReward != null && m.hasOwnProperty("IsChapterReward")) {
                if (typeof m.IsChapterReward !== "boolean")
                    return "IsChapterReward: boolean expected";
            }
            return null;
        };

        return S_Story;
    })();

    DcgProto.S_Ranked = (function() {

        /**
         * Properties of a S_Ranked.
         * @memberof DcgProto
         * @interface IS_Ranked
         * @property {Array.<DcgProto.IS_RankedSeason>|null} [HistorySeasons] S_Ranked HistorySeasons
         */

        /**
         * Constructs a new S_Ranked.
         * @memberof DcgProto
         * @classdesc Represents a S_Ranked.
         * @implements IS_Ranked
         * @constructor
         * @param {DcgProto.IS_Ranked=} [p] Properties to set
         */
        function S_Ranked(p) {
            this.HistorySeasons = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_Ranked HistorySeasons.
         * @member {Array.<DcgProto.IS_RankedSeason>} HistorySeasons
         * @memberof DcgProto.S_Ranked
         * @instance
         */
        S_Ranked.prototype.HistorySeasons = $util.emptyArray;

        /**
         * Creates a new S_Ranked instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_Ranked
         * @static
         * @param {DcgProto.IS_Ranked=} [properties] Properties to set
         * @returns {DcgProto.S_Ranked} S_Ranked instance
         */
        S_Ranked.create = function create(properties) {
            return new S_Ranked(properties);
        };

        /**
         * Encodes the specified S_Ranked message. Does not implicitly {@link DcgProto.S_Ranked.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_Ranked
         * @static
         * @param {DcgProto.IS_Ranked} m S_Ranked message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_Ranked.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.HistorySeasons != null && m.HistorySeasons.length) {
                for (var i = 0; i < m.HistorySeasons.length; ++i)
                    $root.DcgProto.S_RankedSeason.encode(m.HistorySeasons[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a S_Ranked message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_Ranked
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_Ranked} S_Ranked
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_Ranked.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_Ranked();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.HistorySeasons && m.HistorySeasons.length))
                        m.HistorySeasons = [];
                    m.HistorySeasons.push($root.DcgProto.S_RankedSeason.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_Ranked message.
         * @function verify
         * @memberof DcgProto.S_Ranked
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_Ranked.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.HistorySeasons != null && m.hasOwnProperty("HistorySeasons")) {
                if (!Array.isArray(m.HistorySeasons))
                    return "HistorySeasons: array expected";
                for (var i = 0; i < m.HistorySeasons.length; ++i) {
                    {
                        var e = $root.DcgProto.S_RankedSeason.verify(m.HistorySeasons[i]);
                        if (e)
                            return "HistorySeasons." + e;
                    }
                }
            }
            return null;
        };

        return S_Ranked;
    })();

    DcgProto.S_RankedSeason = (function() {

        /**
         * Properties of a S_RankedSeason.
         * @memberof DcgProto
         * @interface IS_RankedSeason
         * @property {number|null} [SeasonCount] S_RankedSeason SeasonCount
         * @property {number|null} [Stars] S_RankedSeason Stars
         */

        /**
         * Constructs a new S_RankedSeason.
         * @memberof DcgProto
         * @classdesc Represents a S_RankedSeason.
         * @implements IS_RankedSeason
         * @constructor
         * @param {DcgProto.IS_RankedSeason=} [p] Properties to set
         */
        function S_RankedSeason(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_RankedSeason SeasonCount.
         * @member {number} SeasonCount
         * @memberof DcgProto.S_RankedSeason
         * @instance
         */
        S_RankedSeason.prototype.SeasonCount = 0;

        /**
         * S_RankedSeason Stars.
         * @member {number} Stars
         * @memberof DcgProto.S_RankedSeason
         * @instance
         */
        S_RankedSeason.prototype.Stars = 0;

        /**
         * Creates a new S_RankedSeason instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_RankedSeason
         * @static
         * @param {DcgProto.IS_RankedSeason=} [properties] Properties to set
         * @returns {DcgProto.S_RankedSeason} S_RankedSeason instance
         */
        S_RankedSeason.create = function create(properties) {
            return new S_RankedSeason(properties);
        };

        /**
         * Encodes the specified S_RankedSeason message. Does not implicitly {@link DcgProto.S_RankedSeason.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_RankedSeason
         * @static
         * @param {DcgProto.IS_RankedSeason} m S_RankedSeason message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_RankedSeason.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.SeasonCount != null && Object.hasOwnProperty.call(m, "SeasonCount"))
                w.uint32(8).int32(m.SeasonCount);
            if (m.Stars != null && Object.hasOwnProperty.call(m, "Stars"))
                w.uint32(16).int32(m.Stars);
            return w;
        };

        /**
         * Decodes a S_RankedSeason message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_RankedSeason
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_RankedSeason} S_RankedSeason
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_RankedSeason.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_RankedSeason();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.SeasonCount = r.int32();
                    break;
                case 2:
                    m.Stars = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_RankedSeason message.
         * @function verify
         * @memberof DcgProto.S_RankedSeason
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_RankedSeason.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.SeasonCount != null && m.hasOwnProperty("SeasonCount")) {
                if (!$util.isInteger(m.SeasonCount))
                    return "SeasonCount: integer expected";
            }
            if (m.Stars != null && m.hasOwnProperty("Stars")) {
                if (!$util.isInteger(m.Stars))
                    return "Stars: integer expected";
            }
            return null;
        };

        return S_RankedSeason;
    })();

    DcgProto.S_FightReplay = (function() {

        /**
         * Properties of a S_FightReplay.
         * @memberof DcgProto
         * @interface IS_FightReplay
         * @property {Long|null} [RoomIID] S_FightReplay RoomIID
         * @property {DcgProto.E_ROOM_MODE|null} [RoomMode] S_FightReplay RoomMode
         * @property {number|null} [CreateTime] S_FightReplay CreateTime
         * @property {DcgProto.IS_ReplayBattleData|null} [BattleData] S_FightReplay BattleData
         * @property {Array.<DcgProto.IS_ReplayPlayerOperate>|null} [PlayerOperates] S_FightReplay PlayerOperates
         * @property {number|null} [Version] S_FightReplay Version
         */

        /**
         * Constructs a new S_FightReplay.
         * @memberof DcgProto
         * @classdesc Represents a S_FightReplay.
         * @implements IS_FightReplay
         * @constructor
         * @param {DcgProto.IS_FightReplay=} [p] Properties to set
         */
        function S_FightReplay(p) {
            this.PlayerOperates = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_FightReplay RoomIID.
         * @member {Long} RoomIID
         * @memberof DcgProto.S_FightReplay
         * @instance
         */
        S_FightReplay.prototype.RoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_FightReplay RoomMode.
         * @member {DcgProto.E_ROOM_MODE} RoomMode
         * @memberof DcgProto.S_FightReplay
         * @instance
         */
        S_FightReplay.prototype.RoomMode = 0;

        /**
         * S_FightReplay CreateTime.
         * @member {number} CreateTime
         * @memberof DcgProto.S_FightReplay
         * @instance
         */
        S_FightReplay.prototype.CreateTime = 0;

        /**
         * S_FightReplay BattleData.
         * @member {DcgProto.IS_ReplayBattleData|null|undefined} BattleData
         * @memberof DcgProto.S_FightReplay
         * @instance
         */
        S_FightReplay.prototype.BattleData = null;

        /**
         * S_FightReplay PlayerOperates.
         * @member {Array.<DcgProto.IS_ReplayPlayerOperate>} PlayerOperates
         * @memberof DcgProto.S_FightReplay
         * @instance
         */
        S_FightReplay.prototype.PlayerOperates = $util.emptyArray;

        /**
         * S_FightReplay Version.
         * @member {number} Version
         * @memberof DcgProto.S_FightReplay
         * @instance
         */
        S_FightReplay.prototype.Version = 0;

        /**
         * Creates a new S_FightReplay instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_FightReplay
         * @static
         * @param {DcgProto.IS_FightReplay=} [properties] Properties to set
         * @returns {DcgProto.S_FightReplay} S_FightReplay instance
         */
        S_FightReplay.create = function create(properties) {
            return new S_FightReplay(properties);
        };

        /**
         * Encodes the specified S_FightReplay message. Does not implicitly {@link DcgProto.S_FightReplay.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_FightReplay
         * @static
         * @param {DcgProto.IS_FightReplay} m S_FightReplay message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_FightReplay.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomIID != null && Object.hasOwnProperty.call(m, "RoomIID"))
                w.uint32(8).int64(m.RoomIID);
            if (m.RoomMode != null && Object.hasOwnProperty.call(m, "RoomMode"))
                w.uint32(16).int32(m.RoomMode);
            if (m.CreateTime != null && Object.hasOwnProperty.call(m, "CreateTime"))
                w.uint32(24).uint32(m.CreateTime);
            if (m.BattleData != null && Object.hasOwnProperty.call(m, "BattleData"))
                $root.DcgProto.S_ReplayBattleData.encode(m.BattleData, w.uint32(34).fork()).ldelim();
            if (m.PlayerOperates != null && m.PlayerOperates.length) {
                for (var i = 0; i < m.PlayerOperates.length; ++i)
                    $root.DcgProto.S_ReplayPlayerOperate.encode(m.PlayerOperates[i], w.uint32(42).fork()).ldelim();
            }
            if (m.Version != null && Object.hasOwnProperty.call(m, "Version"))
                w.uint32(48).int32(m.Version);
            return w;
        };

        /**
         * Decodes a S_FightReplay message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_FightReplay
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_FightReplay} S_FightReplay
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_FightReplay.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_FightReplay();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomIID = r.int64();
                    break;
                case 2:
                    m.RoomMode = r.int32();
                    break;
                case 3:
                    m.CreateTime = r.uint32();
                    break;
                case 4:
                    m.BattleData = $root.DcgProto.S_ReplayBattleData.decode(r, r.uint32());
                    break;
                case 5:
                    if (!(m.PlayerOperates && m.PlayerOperates.length))
                        m.PlayerOperates = [];
                    m.PlayerOperates.push($root.DcgProto.S_ReplayPlayerOperate.decode(r, r.uint32()));
                    break;
                case 6:
                    m.Version = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_FightReplay message.
         * @function verify
         * @memberof DcgProto.S_FightReplay
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_FightReplay.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomIID != null && m.hasOwnProperty("RoomIID")) {
                if (!$util.isInteger(m.RoomIID) && !(m.RoomIID && $util.isInteger(m.RoomIID.low) && $util.isInteger(m.RoomIID.high)))
                    return "RoomIID: integer|Long expected";
            }
            if (m.RoomMode != null && m.hasOwnProperty("RoomMode")) {
                switch (m.RoomMode) {
                default:
                    return "RoomMode: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            }
            if (m.CreateTime != null && m.hasOwnProperty("CreateTime")) {
                if (!$util.isInteger(m.CreateTime))
                    return "CreateTime: integer expected";
            }
            if (m.BattleData != null && m.hasOwnProperty("BattleData")) {
                {
                    var e = $root.DcgProto.S_ReplayBattleData.verify(m.BattleData);
                    if (e)
                        return "BattleData." + e;
                }
            }
            if (m.PlayerOperates != null && m.hasOwnProperty("PlayerOperates")) {
                if (!Array.isArray(m.PlayerOperates))
                    return "PlayerOperates: array expected";
                for (var i = 0; i < m.PlayerOperates.length; ++i) {
                    {
                        var e = $root.DcgProto.S_ReplayPlayerOperate.verify(m.PlayerOperates[i]);
                        if (e)
                            return "PlayerOperates." + e;
                    }
                }
            }
            if (m.Version != null && m.hasOwnProperty("Version")) {
                if (!$util.isInteger(m.Version))
                    return "Version: integer expected";
            }
            return null;
        };

        return S_FightReplay;
    })();

    DcgProto.S_ReplayBattleData = (function() {

        /**
         * Properties of a S_ReplayBattleData.
         * @memberof DcgProto
         * @interface IS_ReplayBattleData
         * @property {Long|null} [ActionPlayerId] S_ReplayBattleData ActionPlayerId
         * @property {number|null} [RoomType] S_ReplayBattleData RoomType
         * @property {DcgProto.IS_ReplayPlayerData|null} [PlayerA] S_ReplayBattleData PlayerA
         * @property {DcgProto.IS_ReplayPlayerData|null} [PlayerB] S_ReplayBattleData PlayerB
         * @property {number|null} [Cost] S_ReplayBattleData Cost
         * @property {number|null} [Round] S_ReplayBattleData Round
         * @property {DcgProto.IS_ReplayCustomRule|null} [CustomRule] S_ReplayBattleData CustomRule
         * @property {Long|null} [Seed] S_ReplayBattleData Seed
         */

        /**
         * Constructs a new S_ReplayBattleData.
         * @memberof DcgProto
         * @classdesc Represents a S_ReplayBattleData.
         * @implements IS_ReplayBattleData
         * @constructor
         * @param {DcgProto.IS_ReplayBattleData=} [p] Properties to set
         */
        function S_ReplayBattleData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_ReplayBattleData ActionPlayerId.
         * @member {Long} ActionPlayerId
         * @memberof DcgProto.S_ReplayBattleData
         * @instance
         */
        S_ReplayBattleData.prototype.ActionPlayerId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_ReplayBattleData RoomType.
         * @member {number} RoomType
         * @memberof DcgProto.S_ReplayBattleData
         * @instance
         */
        S_ReplayBattleData.prototype.RoomType = 0;

        /**
         * S_ReplayBattleData PlayerA.
         * @member {DcgProto.IS_ReplayPlayerData|null|undefined} PlayerA
         * @memberof DcgProto.S_ReplayBattleData
         * @instance
         */
        S_ReplayBattleData.prototype.PlayerA = null;

        /**
         * S_ReplayBattleData PlayerB.
         * @member {DcgProto.IS_ReplayPlayerData|null|undefined} PlayerB
         * @memberof DcgProto.S_ReplayBattleData
         * @instance
         */
        S_ReplayBattleData.prototype.PlayerB = null;

        /**
         * S_ReplayBattleData Cost.
         * @member {number} Cost
         * @memberof DcgProto.S_ReplayBattleData
         * @instance
         */
        S_ReplayBattleData.prototype.Cost = 0;

        /**
         * S_ReplayBattleData Round.
         * @member {number} Round
         * @memberof DcgProto.S_ReplayBattleData
         * @instance
         */
        S_ReplayBattleData.prototype.Round = 0;

        /**
         * S_ReplayBattleData CustomRule.
         * @member {DcgProto.IS_ReplayCustomRule|null|undefined} CustomRule
         * @memberof DcgProto.S_ReplayBattleData
         * @instance
         */
        S_ReplayBattleData.prototype.CustomRule = null;

        /**
         * S_ReplayBattleData Seed.
         * @member {Long} Seed
         * @memberof DcgProto.S_ReplayBattleData
         * @instance
         */
        S_ReplayBattleData.prototype.Seed = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new S_ReplayBattleData instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_ReplayBattleData
         * @static
         * @param {DcgProto.IS_ReplayBattleData=} [properties] Properties to set
         * @returns {DcgProto.S_ReplayBattleData} S_ReplayBattleData instance
         */
        S_ReplayBattleData.create = function create(properties) {
            return new S_ReplayBattleData(properties);
        };

        /**
         * Encodes the specified S_ReplayBattleData message. Does not implicitly {@link DcgProto.S_ReplayBattleData.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_ReplayBattleData
         * @static
         * @param {DcgProto.IS_ReplayBattleData} m S_ReplayBattleData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_ReplayBattleData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ActionPlayerId != null && Object.hasOwnProperty.call(m, "ActionPlayerId"))
                w.uint32(8).int64(m.ActionPlayerId);
            if (m.RoomType != null && Object.hasOwnProperty.call(m, "RoomType"))
                w.uint32(16).int32(m.RoomType);
            if (m.PlayerA != null && Object.hasOwnProperty.call(m, "PlayerA"))
                $root.DcgProto.S_ReplayPlayerData.encode(m.PlayerA, w.uint32(26).fork()).ldelim();
            if (m.PlayerB != null && Object.hasOwnProperty.call(m, "PlayerB"))
                $root.DcgProto.S_ReplayPlayerData.encode(m.PlayerB, w.uint32(34).fork()).ldelim();
            if (m.Cost != null && Object.hasOwnProperty.call(m, "Cost"))
                w.uint32(40).int32(m.Cost);
            if (m.Round != null && Object.hasOwnProperty.call(m, "Round"))
                w.uint32(48).int32(m.Round);
            if (m.CustomRule != null && Object.hasOwnProperty.call(m, "CustomRule"))
                $root.DcgProto.S_ReplayCustomRule.encode(m.CustomRule, w.uint32(58).fork()).ldelim();
            if (m.Seed != null && Object.hasOwnProperty.call(m, "Seed"))
                w.uint32(64).int64(m.Seed);
            return w;
        };

        /**
         * Decodes a S_ReplayBattleData message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_ReplayBattleData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_ReplayBattleData} S_ReplayBattleData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_ReplayBattleData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_ReplayBattleData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ActionPlayerId = r.int64();
                    break;
                case 2:
                    m.RoomType = r.int32();
                    break;
                case 3:
                    m.PlayerA = $root.DcgProto.S_ReplayPlayerData.decode(r, r.uint32());
                    break;
                case 4:
                    m.PlayerB = $root.DcgProto.S_ReplayPlayerData.decode(r, r.uint32());
                    break;
                case 5:
                    m.Cost = r.int32();
                    break;
                case 6:
                    m.Round = r.int32();
                    break;
                case 7:
                    m.CustomRule = $root.DcgProto.S_ReplayCustomRule.decode(r, r.uint32());
                    break;
                case 8:
                    m.Seed = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_ReplayBattleData message.
         * @function verify
         * @memberof DcgProto.S_ReplayBattleData
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_ReplayBattleData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ActionPlayerId != null && m.hasOwnProperty("ActionPlayerId")) {
                if (!$util.isInteger(m.ActionPlayerId) && !(m.ActionPlayerId && $util.isInteger(m.ActionPlayerId.low) && $util.isInteger(m.ActionPlayerId.high)))
                    return "ActionPlayerId: integer|Long expected";
            }
            if (m.RoomType != null && m.hasOwnProperty("RoomType")) {
                if (!$util.isInteger(m.RoomType))
                    return "RoomType: integer expected";
            }
            if (m.PlayerA != null && m.hasOwnProperty("PlayerA")) {
                {
                    var e = $root.DcgProto.S_ReplayPlayerData.verify(m.PlayerA);
                    if (e)
                        return "PlayerA." + e;
                }
            }
            if (m.PlayerB != null && m.hasOwnProperty("PlayerB")) {
                {
                    var e = $root.DcgProto.S_ReplayPlayerData.verify(m.PlayerB);
                    if (e)
                        return "PlayerB." + e;
                }
            }
            if (m.Cost != null && m.hasOwnProperty("Cost")) {
                if (!$util.isInteger(m.Cost))
                    return "Cost: integer expected";
            }
            if (m.Round != null && m.hasOwnProperty("Round")) {
                if (!$util.isInteger(m.Round))
                    return "Round: integer expected";
            }
            if (m.CustomRule != null && m.hasOwnProperty("CustomRule")) {
                {
                    var e = $root.DcgProto.S_ReplayCustomRule.verify(m.CustomRule);
                    if (e)
                        return "CustomRule." + e;
                }
            }
            if (m.Seed != null && m.hasOwnProperty("Seed")) {
                if (!$util.isInteger(m.Seed) && !(m.Seed && $util.isInteger(m.Seed.low) && $util.isInteger(m.Seed.high)))
                    return "Seed: integer|Long expected";
            }
            return null;
        };

        return S_ReplayBattleData;
    })();

    DcgProto.S_ReplayCustomRule = (function() {

        /**
         * Properties of a S_ReplayCustomRule.
         * @memberof DcgProto
         * @interface IS_ReplayCustomRule
         * @property {number|null} [PlayerADefenseCount] S_ReplayCustomRule PlayerADefenseCount
         * @property {number|null} [PlayerAHandCount] S_ReplayCustomRule PlayerAHandCount
         * @property {Array.<number>|null} [PlayerABattle] S_ReplayCustomRule PlayerABattle
         * @property {number|null} [PlayerBDefenseCount] S_ReplayCustomRule PlayerBDefenseCount
         * @property {number|null} [PlayerBHandCount] S_ReplayCustomRule PlayerBHandCount
         * @property {Array.<number>|null} [PlayerBBattle] S_ReplayCustomRule PlayerBBattle
         * @property {number|null} [PlayerAHatch] S_ReplayCustomRule PlayerAHatch
         * @property {number|null} [PlayerADiscardDeck] S_ReplayCustomRule PlayerADiscardDeck
         * @property {string|null} [PlayerAGM] S_ReplayCustomRule PlayerAGM
         * @property {number|null} [PlayerBHatch] S_ReplayCustomRule PlayerBHatch
         * @property {number|null} [PlayerBDiscardDeck] S_ReplayCustomRule PlayerBDiscardDeck
         * @property {string|null} [PlayerBGM] S_ReplayCustomRule PlayerBGM
         */

        /**
         * Constructs a new S_ReplayCustomRule.
         * @memberof DcgProto
         * @classdesc Represents a S_ReplayCustomRule.
         * @implements IS_ReplayCustomRule
         * @constructor
         * @param {DcgProto.IS_ReplayCustomRule=} [p] Properties to set
         */
        function S_ReplayCustomRule(p) {
            this.PlayerABattle = [];
            this.PlayerBBattle = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_ReplayCustomRule PlayerADefenseCount.
         * @member {number} PlayerADefenseCount
         * @memberof DcgProto.S_ReplayCustomRule
         * @instance
         */
        S_ReplayCustomRule.prototype.PlayerADefenseCount = 0;

        /**
         * S_ReplayCustomRule PlayerAHandCount.
         * @member {number} PlayerAHandCount
         * @memberof DcgProto.S_ReplayCustomRule
         * @instance
         */
        S_ReplayCustomRule.prototype.PlayerAHandCount = 0;

        /**
         * S_ReplayCustomRule PlayerABattle.
         * @member {Array.<number>} PlayerABattle
         * @memberof DcgProto.S_ReplayCustomRule
         * @instance
         */
        S_ReplayCustomRule.prototype.PlayerABattle = $util.emptyArray;

        /**
         * S_ReplayCustomRule PlayerBDefenseCount.
         * @member {number} PlayerBDefenseCount
         * @memberof DcgProto.S_ReplayCustomRule
         * @instance
         */
        S_ReplayCustomRule.prototype.PlayerBDefenseCount = 0;

        /**
         * S_ReplayCustomRule PlayerBHandCount.
         * @member {number} PlayerBHandCount
         * @memberof DcgProto.S_ReplayCustomRule
         * @instance
         */
        S_ReplayCustomRule.prototype.PlayerBHandCount = 0;

        /**
         * S_ReplayCustomRule PlayerBBattle.
         * @member {Array.<number>} PlayerBBattle
         * @memberof DcgProto.S_ReplayCustomRule
         * @instance
         */
        S_ReplayCustomRule.prototype.PlayerBBattle = $util.emptyArray;

        /**
         * S_ReplayCustomRule PlayerAHatch.
         * @member {number} PlayerAHatch
         * @memberof DcgProto.S_ReplayCustomRule
         * @instance
         */
        S_ReplayCustomRule.prototype.PlayerAHatch = 0;

        /**
         * S_ReplayCustomRule PlayerADiscardDeck.
         * @member {number} PlayerADiscardDeck
         * @memberof DcgProto.S_ReplayCustomRule
         * @instance
         */
        S_ReplayCustomRule.prototype.PlayerADiscardDeck = 0;

        /**
         * S_ReplayCustomRule PlayerAGM.
         * @member {string} PlayerAGM
         * @memberof DcgProto.S_ReplayCustomRule
         * @instance
         */
        S_ReplayCustomRule.prototype.PlayerAGM = "";

        /**
         * S_ReplayCustomRule PlayerBHatch.
         * @member {number} PlayerBHatch
         * @memberof DcgProto.S_ReplayCustomRule
         * @instance
         */
        S_ReplayCustomRule.prototype.PlayerBHatch = 0;

        /**
         * S_ReplayCustomRule PlayerBDiscardDeck.
         * @member {number} PlayerBDiscardDeck
         * @memberof DcgProto.S_ReplayCustomRule
         * @instance
         */
        S_ReplayCustomRule.prototype.PlayerBDiscardDeck = 0;

        /**
         * S_ReplayCustomRule PlayerBGM.
         * @member {string} PlayerBGM
         * @memberof DcgProto.S_ReplayCustomRule
         * @instance
         */
        S_ReplayCustomRule.prototype.PlayerBGM = "";

        /**
         * Creates a new S_ReplayCustomRule instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_ReplayCustomRule
         * @static
         * @param {DcgProto.IS_ReplayCustomRule=} [properties] Properties to set
         * @returns {DcgProto.S_ReplayCustomRule} S_ReplayCustomRule instance
         */
        S_ReplayCustomRule.create = function create(properties) {
            return new S_ReplayCustomRule(properties);
        };

        /**
         * Encodes the specified S_ReplayCustomRule message. Does not implicitly {@link DcgProto.S_ReplayCustomRule.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_ReplayCustomRule
         * @static
         * @param {DcgProto.IS_ReplayCustomRule} m S_ReplayCustomRule message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_ReplayCustomRule.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerADefenseCount != null && Object.hasOwnProperty.call(m, "PlayerADefenseCount"))
                w.uint32(8).int32(m.PlayerADefenseCount);
            if (m.PlayerAHandCount != null && Object.hasOwnProperty.call(m, "PlayerAHandCount"))
                w.uint32(16).int32(m.PlayerAHandCount);
            if (m.PlayerABattle != null && m.PlayerABattle.length) {
                w.uint32(26).fork();
                for (var i = 0; i < m.PlayerABattle.length; ++i)
                    w.int32(m.PlayerABattle[i]);
                w.ldelim();
            }
            if (m.PlayerBDefenseCount != null && Object.hasOwnProperty.call(m, "PlayerBDefenseCount"))
                w.uint32(32).int32(m.PlayerBDefenseCount);
            if (m.PlayerBHandCount != null && Object.hasOwnProperty.call(m, "PlayerBHandCount"))
                w.uint32(40).int32(m.PlayerBHandCount);
            if (m.PlayerBBattle != null && m.PlayerBBattle.length) {
                w.uint32(50).fork();
                for (var i = 0; i < m.PlayerBBattle.length; ++i)
                    w.int32(m.PlayerBBattle[i]);
                w.ldelim();
            }
            if (m.PlayerAHatch != null && Object.hasOwnProperty.call(m, "PlayerAHatch"))
                w.uint32(56).int32(m.PlayerAHatch);
            if (m.PlayerADiscardDeck != null && Object.hasOwnProperty.call(m, "PlayerADiscardDeck"))
                w.uint32(64).int32(m.PlayerADiscardDeck);
            if (m.PlayerAGM != null && Object.hasOwnProperty.call(m, "PlayerAGM"))
                w.uint32(74).string(m.PlayerAGM);
            if (m.PlayerBHatch != null && Object.hasOwnProperty.call(m, "PlayerBHatch"))
                w.uint32(80).int32(m.PlayerBHatch);
            if (m.PlayerBDiscardDeck != null && Object.hasOwnProperty.call(m, "PlayerBDiscardDeck"))
                w.uint32(88).int32(m.PlayerBDiscardDeck);
            if (m.PlayerBGM != null && Object.hasOwnProperty.call(m, "PlayerBGM"))
                w.uint32(98).string(m.PlayerBGM);
            return w;
        };

        /**
         * Decodes a S_ReplayCustomRule message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_ReplayCustomRule
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_ReplayCustomRule} S_ReplayCustomRule
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_ReplayCustomRule.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_ReplayCustomRule();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerADefenseCount = r.int32();
                    break;
                case 2:
                    m.PlayerAHandCount = r.int32();
                    break;
                case 3:
                    if (!(m.PlayerABattle && m.PlayerABattle.length))
                        m.PlayerABattle = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.PlayerABattle.push(r.int32());
                    } else
                        m.PlayerABattle.push(r.int32());
                    break;
                case 4:
                    m.PlayerBDefenseCount = r.int32();
                    break;
                case 5:
                    m.PlayerBHandCount = r.int32();
                    break;
                case 6:
                    if (!(m.PlayerBBattle && m.PlayerBBattle.length))
                        m.PlayerBBattle = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.PlayerBBattle.push(r.int32());
                    } else
                        m.PlayerBBattle.push(r.int32());
                    break;
                case 7:
                    m.PlayerAHatch = r.int32();
                    break;
                case 8:
                    m.PlayerADiscardDeck = r.int32();
                    break;
                case 9:
                    m.PlayerAGM = r.string();
                    break;
                case 10:
                    m.PlayerBHatch = r.int32();
                    break;
                case 11:
                    m.PlayerBDiscardDeck = r.int32();
                    break;
                case 12:
                    m.PlayerBGM = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_ReplayCustomRule message.
         * @function verify
         * @memberof DcgProto.S_ReplayCustomRule
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_ReplayCustomRule.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerADefenseCount != null && m.hasOwnProperty("PlayerADefenseCount")) {
                if (!$util.isInteger(m.PlayerADefenseCount))
                    return "PlayerADefenseCount: integer expected";
            }
            if (m.PlayerAHandCount != null && m.hasOwnProperty("PlayerAHandCount")) {
                if (!$util.isInteger(m.PlayerAHandCount))
                    return "PlayerAHandCount: integer expected";
            }
            if (m.PlayerABattle != null && m.hasOwnProperty("PlayerABattle")) {
                if (!Array.isArray(m.PlayerABattle))
                    return "PlayerABattle: array expected";
                for (var i = 0; i < m.PlayerABattle.length; ++i) {
                    if (!$util.isInteger(m.PlayerABattle[i]))
                        return "PlayerABattle: integer[] expected";
                }
            }
            if (m.PlayerBDefenseCount != null && m.hasOwnProperty("PlayerBDefenseCount")) {
                if (!$util.isInteger(m.PlayerBDefenseCount))
                    return "PlayerBDefenseCount: integer expected";
            }
            if (m.PlayerBHandCount != null && m.hasOwnProperty("PlayerBHandCount")) {
                if (!$util.isInteger(m.PlayerBHandCount))
                    return "PlayerBHandCount: integer expected";
            }
            if (m.PlayerBBattle != null && m.hasOwnProperty("PlayerBBattle")) {
                if (!Array.isArray(m.PlayerBBattle))
                    return "PlayerBBattle: array expected";
                for (var i = 0; i < m.PlayerBBattle.length; ++i) {
                    if (!$util.isInteger(m.PlayerBBattle[i]))
                        return "PlayerBBattle: integer[] expected";
                }
            }
            if (m.PlayerAHatch != null && m.hasOwnProperty("PlayerAHatch")) {
                if (!$util.isInteger(m.PlayerAHatch))
                    return "PlayerAHatch: integer expected";
            }
            if (m.PlayerADiscardDeck != null && m.hasOwnProperty("PlayerADiscardDeck")) {
                if (!$util.isInteger(m.PlayerADiscardDeck))
                    return "PlayerADiscardDeck: integer expected";
            }
            if (m.PlayerAGM != null && m.hasOwnProperty("PlayerAGM")) {
                if (!$util.isString(m.PlayerAGM))
                    return "PlayerAGM: string expected";
            }
            if (m.PlayerBHatch != null && m.hasOwnProperty("PlayerBHatch")) {
                if (!$util.isInteger(m.PlayerBHatch))
                    return "PlayerBHatch: integer expected";
            }
            if (m.PlayerBDiscardDeck != null && m.hasOwnProperty("PlayerBDiscardDeck")) {
                if (!$util.isInteger(m.PlayerBDiscardDeck))
                    return "PlayerBDiscardDeck: integer expected";
            }
            if (m.PlayerBGM != null && m.hasOwnProperty("PlayerBGM")) {
                if (!$util.isString(m.PlayerBGM))
                    return "PlayerBGM: string expected";
            }
            return null;
        };

        return S_ReplayCustomRule;
    })();

    DcgProto.S_ReplayPlayerData = (function() {

        /**
         * Properties of a S_ReplayPlayerData.
         * @memberof DcgProto
         * @interface IS_ReplayPlayerData
         * @property {Long|null} [PlayerId] S_ReplayPlayerData PlayerId
         * @property {Long|null} [StartCardId] S_ReplayPlayerData StartCardId
         * @property {string|null} [NickName] S_ReplayPlayerData NickName
         * @property {Array.<number>|null} [Deck] S_ReplayPlayerData Deck
         * @property {Array.<number>|null} [Digitama] S_ReplayPlayerData Digitama
         * @property {number|null} [Level] S_ReplayPlayerData Level
         * @property {number|null} [Icon] S_ReplayPlayerData Icon
         * @property {number|null} [IconFrame] S_ReplayPlayerData IconFrame
         * @property {number|null} [Paper] S_ReplayPlayerData Paper
         * @property {number|null} [TitleIds] S_ReplayPlayerData TitleIds
         */

        /**
         * Constructs a new S_ReplayPlayerData.
         * @memberof DcgProto
         * @classdesc Represents a S_ReplayPlayerData.
         * @implements IS_ReplayPlayerData
         * @constructor
         * @param {DcgProto.IS_ReplayPlayerData=} [p] Properties to set
         */
        function S_ReplayPlayerData(p) {
            this.Deck = [];
            this.Digitama = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_ReplayPlayerData PlayerId.
         * @member {Long} PlayerId
         * @memberof DcgProto.S_ReplayPlayerData
         * @instance
         */
        S_ReplayPlayerData.prototype.PlayerId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_ReplayPlayerData StartCardId.
         * @member {Long} StartCardId
         * @memberof DcgProto.S_ReplayPlayerData
         * @instance
         */
        S_ReplayPlayerData.prototype.StartCardId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_ReplayPlayerData NickName.
         * @member {string} NickName
         * @memberof DcgProto.S_ReplayPlayerData
         * @instance
         */
        S_ReplayPlayerData.prototype.NickName = "";

        /**
         * S_ReplayPlayerData Deck.
         * @member {Array.<number>} Deck
         * @memberof DcgProto.S_ReplayPlayerData
         * @instance
         */
        S_ReplayPlayerData.prototype.Deck = $util.emptyArray;

        /**
         * S_ReplayPlayerData Digitama.
         * @member {Array.<number>} Digitama
         * @memberof DcgProto.S_ReplayPlayerData
         * @instance
         */
        S_ReplayPlayerData.prototype.Digitama = $util.emptyArray;

        /**
         * S_ReplayPlayerData Level.
         * @member {number} Level
         * @memberof DcgProto.S_ReplayPlayerData
         * @instance
         */
        S_ReplayPlayerData.prototype.Level = 0;

        /**
         * S_ReplayPlayerData Icon.
         * @member {number} Icon
         * @memberof DcgProto.S_ReplayPlayerData
         * @instance
         */
        S_ReplayPlayerData.prototype.Icon = 0;

        /**
         * S_ReplayPlayerData IconFrame.
         * @member {number} IconFrame
         * @memberof DcgProto.S_ReplayPlayerData
         * @instance
         */
        S_ReplayPlayerData.prototype.IconFrame = 0;

        /**
         * S_ReplayPlayerData Paper.
         * @member {number} Paper
         * @memberof DcgProto.S_ReplayPlayerData
         * @instance
         */
        S_ReplayPlayerData.prototype.Paper = 0;

        /**
         * S_ReplayPlayerData TitleIds.
         * @member {number} TitleIds
         * @memberof DcgProto.S_ReplayPlayerData
         * @instance
         */
        S_ReplayPlayerData.prototype.TitleIds = 0;

        /**
         * Creates a new S_ReplayPlayerData instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_ReplayPlayerData
         * @static
         * @param {DcgProto.IS_ReplayPlayerData=} [properties] Properties to set
         * @returns {DcgProto.S_ReplayPlayerData} S_ReplayPlayerData instance
         */
        S_ReplayPlayerData.create = function create(properties) {
            return new S_ReplayPlayerData(properties);
        };

        /**
         * Encodes the specified S_ReplayPlayerData message. Does not implicitly {@link DcgProto.S_ReplayPlayerData.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_ReplayPlayerData
         * @static
         * @param {DcgProto.IS_ReplayPlayerData} m S_ReplayPlayerData message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_ReplayPlayerData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerId != null && Object.hasOwnProperty.call(m, "PlayerId"))
                w.uint32(8).int64(m.PlayerId);
            if (m.StartCardId != null && Object.hasOwnProperty.call(m, "StartCardId"))
                w.uint32(16).int64(m.StartCardId);
            if (m.NickName != null && Object.hasOwnProperty.call(m, "NickName"))
                w.uint32(26).string(m.NickName);
            if (m.Deck != null && m.Deck.length) {
                w.uint32(34).fork();
                for (var i = 0; i < m.Deck.length; ++i)
                    w.int32(m.Deck[i]);
                w.ldelim();
            }
            if (m.Digitama != null && m.Digitama.length) {
                w.uint32(42).fork();
                for (var i = 0; i < m.Digitama.length; ++i)
                    w.int32(m.Digitama[i]);
                w.ldelim();
            }
            if (m.Level != null && Object.hasOwnProperty.call(m, "Level"))
                w.uint32(48).int32(m.Level);
            if (m.Icon != null && Object.hasOwnProperty.call(m, "Icon"))
                w.uint32(56).int32(m.Icon);
            if (m.IconFrame != null && Object.hasOwnProperty.call(m, "IconFrame"))
                w.uint32(64).int32(m.IconFrame);
            if (m.Paper != null && Object.hasOwnProperty.call(m, "Paper"))
                w.uint32(72).int32(m.Paper);
            if (m.TitleIds != null && Object.hasOwnProperty.call(m, "TitleIds"))
                w.uint32(80).int32(m.TitleIds);
            return w;
        };

        /**
         * Decodes a S_ReplayPlayerData message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_ReplayPlayerData
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_ReplayPlayerData} S_ReplayPlayerData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_ReplayPlayerData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_ReplayPlayerData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerId = r.int64();
                    break;
                case 2:
                    m.StartCardId = r.int64();
                    break;
                case 3:
                    m.NickName = r.string();
                    break;
                case 4:
                    if (!(m.Deck && m.Deck.length))
                        m.Deck = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Deck.push(r.int32());
                    } else
                        m.Deck.push(r.int32());
                    break;
                case 5:
                    if (!(m.Digitama && m.Digitama.length))
                        m.Digitama = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Digitama.push(r.int32());
                    } else
                        m.Digitama.push(r.int32());
                    break;
                case 6:
                    m.Level = r.int32();
                    break;
                case 7:
                    m.Icon = r.int32();
                    break;
                case 8:
                    m.IconFrame = r.int32();
                    break;
                case 9:
                    m.Paper = r.int32();
                    break;
                case 10:
                    m.TitleIds = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_ReplayPlayerData message.
         * @function verify
         * @memberof DcgProto.S_ReplayPlayerData
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_ReplayPlayerData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerId != null && m.hasOwnProperty("PlayerId")) {
                if (!$util.isInteger(m.PlayerId) && !(m.PlayerId && $util.isInteger(m.PlayerId.low) && $util.isInteger(m.PlayerId.high)))
                    return "PlayerId: integer|Long expected";
            }
            if (m.StartCardId != null && m.hasOwnProperty("StartCardId")) {
                if (!$util.isInteger(m.StartCardId) && !(m.StartCardId && $util.isInteger(m.StartCardId.low) && $util.isInteger(m.StartCardId.high)))
                    return "StartCardId: integer|Long expected";
            }
            if (m.NickName != null && m.hasOwnProperty("NickName")) {
                if (!$util.isString(m.NickName))
                    return "NickName: string expected";
            }
            if (m.Deck != null && m.hasOwnProperty("Deck")) {
                if (!Array.isArray(m.Deck))
                    return "Deck: array expected";
                for (var i = 0; i < m.Deck.length; ++i) {
                    if (!$util.isInteger(m.Deck[i]))
                        return "Deck: integer[] expected";
                }
            }
            if (m.Digitama != null && m.hasOwnProperty("Digitama")) {
                if (!Array.isArray(m.Digitama))
                    return "Digitama: array expected";
                for (var i = 0; i < m.Digitama.length; ++i) {
                    if (!$util.isInteger(m.Digitama[i]))
                        return "Digitama: integer[] expected";
                }
            }
            if (m.Level != null && m.hasOwnProperty("Level")) {
                if (!$util.isInteger(m.Level))
                    return "Level: integer expected";
            }
            if (m.Icon != null && m.hasOwnProperty("Icon")) {
                if (!$util.isInteger(m.Icon))
                    return "Icon: integer expected";
            }
            if (m.IconFrame != null && m.hasOwnProperty("IconFrame")) {
                if (!$util.isInteger(m.IconFrame))
                    return "IconFrame: integer expected";
            }
            if (m.Paper != null && m.hasOwnProperty("Paper")) {
                if (!$util.isInteger(m.Paper))
                    return "Paper: integer expected";
            }
            if (m.TitleIds != null && m.hasOwnProperty("TitleIds")) {
                if (!$util.isInteger(m.TitleIds))
                    return "TitleIds: integer expected";
            }
            return null;
        };

        return S_ReplayPlayerData;
    })();

    DcgProto.S_ReplayPlayerOperate = (function() {

        /**
         * Properties of a S_ReplayPlayerOperate.
         * @memberof DcgProto
         * @interface IS_ReplayPlayerOperate
         * @property {Long|null} [PlayerId] S_ReplayPlayerOperate PlayerId
         * @property {number|null} [Type] S_ReplayPlayerOperate Type
         * @property {DcgProto.IS_BattleParams|null} [Operate] S_ReplayPlayerOperate Operate
         */

        /**
         * Constructs a new S_ReplayPlayerOperate.
         * @memberof DcgProto
         * @classdesc Represents a S_ReplayPlayerOperate.
         * @implements IS_ReplayPlayerOperate
         * @constructor
         * @param {DcgProto.IS_ReplayPlayerOperate=} [p] Properties to set
         */
        function S_ReplayPlayerOperate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_ReplayPlayerOperate PlayerId.
         * @member {Long} PlayerId
         * @memberof DcgProto.S_ReplayPlayerOperate
         * @instance
         */
        S_ReplayPlayerOperate.prototype.PlayerId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_ReplayPlayerOperate Type.
         * @member {number} Type
         * @memberof DcgProto.S_ReplayPlayerOperate
         * @instance
         */
        S_ReplayPlayerOperate.prototype.Type = 0;

        /**
         * S_ReplayPlayerOperate Operate.
         * @member {DcgProto.IS_BattleParams|null|undefined} Operate
         * @memberof DcgProto.S_ReplayPlayerOperate
         * @instance
         */
        S_ReplayPlayerOperate.prototype.Operate = null;

        /**
         * Creates a new S_ReplayPlayerOperate instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_ReplayPlayerOperate
         * @static
         * @param {DcgProto.IS_ReplayPlayerOperate=} [properties] Properties to set
         * @returns {DcgProto.S_ReplayPlayerOperate} S_ReplayPlayerOperate instance
         */
        S_ReplayPlayerOperate.create = function create(properties) {
            return new S_ReplayPlayerOperate(properties);
        };

        /**
         * Encodes the specified S_ReplayPlayerOperate message. Does not implicitly {@link DcgProto.S_ReplayPlayerOperate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_ReplayPlayerOperate
         * @static
         * @param {DcgProto.IS_ReplayPlayerOperate} m S_ReplayPlayerOperate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_ReplayPlayerOperate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PlayerId != null && Object.hasOwnProperty.call(m, "PlayerId"))
                w.uint32(8).int64(m.PlayerId);
            if (m.Type != null && Object.hasOwnProperty.call(m, "Type"))
                w.uint32(16).int32(m.Type);
            if (m.Operate != null && Object.hasOwnProperty.call(m, "Operate"))
                $root.DcgProto.S_BattleParams.encode(m.Operate, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a S_ReplayPlayerOperate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_ReplayPlayerOperate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_ReplayPlayerOperate} S_ReplayPlayerOperate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_ReplayPlayerOperate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_ReplayPlayerOperate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PlayerId = r.int64();
                    break;
                case 2:
                    m.Type = r.int32();
                    break;
                case 3:
                    m.Operate = $root.DcgProto.S_BattleParams.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_ReplayPlayerOperate message.
         * @function verify
         * @memberof DcgProto.S_ReplayPlayerOperate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_ReplayPlayerOperate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PlayerId != null && m.hasOwnProperty("PlayerId")) {
                if (!$util.isInteger(m.PlayerId) && !(m.PlayerId && $util.isInteger(m.PlayerId.low) && $util.isInteger(m.PlayerId.high)))
                    return "PlayerId: integer|Long expected";
            }
            if (m.Type != null && m.hasOwnProperty("Type")) {
                if (!$util.isInteger(m.Type))
                    return "Type: integer expected";
            }
            if (m.Operate != null && m.hasOwnProperty("Operate")) {
                {
                    var e = $root.DcgProto.S_BattleParams.verify(m.Operate);
                    if (e)
                        return "Operate." + e;
                }
            }
            return null;
        };

        return S_ReplayPlayerOperate;
    })();

    /**
     * E_Platform enum.
     * @name DcgProto.E_Platform
     * @enum {number}
     * @property {number} VISITOR=0 VISITOR value
     * @property {number} OFFICIAL=1 OFFICIAL value
     * @property {number} GOOGLE_PLAY=2 GOOGLE_PLAY value
     * @property {number} APP_STORE=3 APP_STORE value
     * @property {number} FACEBOOK=4 FACEBOOK value
     * @property {number} WX=5 WX value
     * @property {number} WU_FAN=6 WU_FAN value
     * @property {number} BAN_DAI=7 BAN_DAI value
     */
    DcgProto.E_Platform = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "VISITOR"] = 0;
        values[valuesById[1] = "OFFICIAL"] = 1;
        values[valuesById[2] = "GOOGLE_PLAY"] = 2;
        values[valuesById[3] = "APP_STORE"] = 3;
        values[valuesById[4] = "FACEBOOK"] = 4;
        values[valuesById[5] = "WX"] = 5;
        values[valuesById[6] = "WU_FAN"] = 6;
        values[valuesById[7] = "BAN_DAI"] = 7;
        return values;
    })();

    /**
     * E_ProductLine enum.
     * @name DcgProto.E_ProductLine
     * @enum {number}
     * @property {number} PL_NONE=0 PL_NONE value
     * @property {number} PL_TEST=1 PL_TEST value
     * @property {number} PL_VERSION=2 PL_VERSION value
     * @property {number} PL_VERIFY=3 PL_VERIFY value
     * @property {number} PL_40000=9 PL_40000 value
     * @property {number} PL_10000=10 PL_10000 value
     */
    DcgProto.E_ProductLine = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "PL_NONE"] = 0;
        values[valuesById[1] = "PL_TEST"] = 1;
        values[valuesById[2] = "PL_VERSION"] = 2;
        values[valuesById[3] = "PL_VERIFY"] = 3;
        values[valuesById[9] = "PL_40000"] = 9;
        values[valuesById[10] = "PL_10000"] = 10;
        return values;
    })();

    /**
     * E_ServerStatus enum.
     * @name DcgProto.E_ServerStatus
     * @enum {number}
     * @property {number} NOT_OPEN=0 NOT_OPEN value
     * @property {number} NORMAL=1 NORMAL value
     * @property {number} HIGH=2 HIGH value
     * @property {number} OVERLOAD=3 OVERLOAD value
     * @property {number} MAINTAINING=4 MAINTAINING value
     */
    DcgProto.E_ServerStatus = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NOT_OPEN"] = 0;
        values[valuesById[1] = "NORMAL"] = 1;
        values[valuesById[2] = "HIGH"] = 2;
        values[valuesById[3] = "OVERLOAD"] = 3;
        values[valuesById[4] = "MAINTAINING"] = 4;
        return values;
    })();

    /**
     * E_GM_CMD enum.
     * @name DcgProto.E_GM_CMD
     * @enum {number}
     * @property {number} GGC_NONE=0 GGC_NONE value
     * @property {number} GGC_SET_DECK=1 GGC_SET_DECK value
     * @property {number} GGC_ADD_ALL_CARD=2 GGC_ADD_ALL_CARD value
     * @property {number} GGC_FIGHT=3 GGC_FIGHT value
     * @property {number} GGC_MATCH=4 GGC_MATCH value
     * @property {number} GGC_DIGIMON_ADD_EXP=5 GGC_DIGIMON_ADD_EXP value
     * @property {number} GGC_CUSTOM=6 GGC_CUSTOM value
     */
    DcgProto.E_GM_CMD = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "GGC_NONE"] = 0;
        values[valuesById[1] = "GGC_SET_DECK"] = 1;
        values[valuesById[2] = "GGC_ADD_ALL_CARD"] = 2;
        values[valuesById[3] = "GGC_FIGHT"] = 3;
        values[valuesById[4] = "GGC_MATCH"] = 4;
        values[valuesById[5] = "GGC_DIGIMON_ADD_EXP"] = 5;
        values[valuesById[6] = "GGC_CUSTOM"] = 6;
        return values;
    })();

    /**
     * E_PLAYER_STATUS enum.
     * @name DcgProto.E_PLAYER_STATUS
     * @enum {number}
     * @property {number} PS_NONE=0 PS_NONE value
     * @property {number} PS_MATCH=1 PS_MATCH value
     * @property {number} PS_ROOM_JOIN=2 PS_ROOM_JOIN value
     * @property {number} PS_ROOM_FIGHT=3 PS_ROOM_FIGHT value
     * @property {number} PS_PVP_WATCH=4 PS_PVP_WATCH value
     * @property {number} PS_PERSONAL_ROOM=5 PS_PERSONAL_ROOM value
     * @property {number} PS_PVP_ROOM_RACE=6 PS_PVP_ROOM_RACE value
     */
    DcgProto.E_PLAYER_STATUS = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "PS_NONE"] = 0;
        values[valuesById[1] = "PS_MATCH"] = 1;
        values[valuesById[2] = "PS_ROOM_JOIN"] = 2;
        values[valuesById[3] = "PS_ROOM_FIGHT"] = 3;
        values[valuesById[4] = "PS_PVP_WATCH"] = 4;
        values[valuesById[5] = "PS_PERSONAL_ROOM"] = 5;
        values[valuesById[6] = "PS_PVP_ROOM_RACE"] = 6;
        return values;
    })();

    /**
     * E_ROOM_STATUS enum.
     * @name DcgProto.E_ROOM_STATUS
     * @enum {number}
     * @property {number} RS_IDLE=0 RS_IDLE value
     * @property {number} RS_CREATE=1 RS_CREATE value
     * @property {number} RS_INIT=2 RS_INIT value
     * @property {number} RS_READY=3 RS_READY value
     * @property {number} RS_FIGHT=4 RS_FIGHT value
     * @property {number} RS_END=5 RS_END value
     * @property {number} RS_CLOSE=6 RS_CLOSE value
     */
    DcgProto.E_ROOM_STATUS = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "RS_IDLE"] = 0;
        values[valuesById[1] = "RS_CREATE"] = 1;
        values[valuesById[2] = "RS_INIT"] = 2;
        values[valuesById[3] = "RS_READY"] = 3;
        values[valuesById[4] = "RS_FIGHT"] = 4;
        values[valuesById[5] = "RS_END"] = 5;
        values[valuesById[6] = "RS_CLOSE"] = 6;
        return values;
    })();

    /**
     * E_ROOM_TYPE enum.
     * @name DcgProto.E_ROOM_TYPE
     * @enum {number}
     * @property {number} RT_NORMAL=0 RT_NORMAL value
     * @property {number} RT_HIGH=1 RT_HIGH value
     */
    DcgProto.E_ROOM_TYPE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "RT_NORMAL"] = 0;
        values[valuesById[1] = "RT_HIGH"] = 1;
        return values;
    })();

    /**
     * E_ROOM_MODE enum.
     * @name DcgProto.E_ROOM_MODE
     * @enum {number}
     * @property {number} ROOM_MODE_NONE=0 ROOM_MODE_NONE value
     * @property {number} ROOM_MODE_MATCH=1 ROOM_MODE_MATCH value
     * @property {number} ROOM_MODE_FRIEND=2 ROOM_MODE_FRIEND value
     * @property {number} ROOM_MODE_RANKED=3 ROOM_MODE_RANKED value
     * @property {number} ROOM_MODE_PVP=4 ROOM_MODE_PVP value
     * @property {number} ROOM_MODE_PVP_HISTORY=5 ROOM_MODE_PVP_HISTORY value
     */
    DcgProto.E_ROOM_MODE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "ROOM_MODE_NONE"] = 0;
        values[valuesById[1] = "ROOM_MODE_MATCH"] = 1;
        values[valuesById[2] = "ROOM_MODE_FRIEND"] = 2;
        values[valuesById[3] = "ROOM_MODE_RANKED"] = 3;
        values[valuesById[4] = "ROOM_MODE_PVP"] = 4;
        values[valuesById[5] = "ROOM_MODE_PVP_HISTORY"] = 5;
        return values;
    })();

    /**
     * E_BATTLE_PHASE enum.
     * @name DcgProto.E_BATTLE_PHASE
     * @enum {number}
     * @property {number} BP_NONE=0 BP_NONE value
     * @property {number} BP_INIT=1 BP_INIT value
     * @property {number} BP_BATTLE=2 BP_BATTLE value
     * @property {number} BP_ROUND_START=3 BP_ROUND_START value
     * @property {number} BP_ACTIVE=4 BP_ACTIVE value
     * @property {number} BP_DRAW_CARD=5 BP_DRAW_CARD value
     * @property {number} BP_FOSTER=6 BP_FOSTER value
     * @property {number} BP_MAIN=7 BP_MAIN value
     * @property {number} BP_OVER=8 BP_OVER value
     */
    DcgProto.E_BATTLE_PHASE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "BP_NONE"] = 0;
        values[valuesById[1] = "BP_INIT"] = 1;
        values[valuesById[2] = "BP_BATTLE"] = 2;
        values[valuesById[3] = "BP_ROUND_START"] = 3;
        values[valuesById[4] = "BP_ACTIVE"] = 4;
        values[valuesById[5] = "BP_DRAW_CARD"] = 5;
        values[valuesById[6] = "BP_FOSTER"] = 6;
        values[valuesById[7] = "BP_MAIN"] = 7;
        values[valuesById[8] = "BP_OVER"] = 8;
        return values;
    })();

    /**
     * E_AREA_TYPE enum.
     * @name DcgProto.E_AREA_TYPE
     * @enum {number}
     * @property {number} AT_NONE=0 AT_NONE value
     * @property {number} AT_DECK=1 AT_DECK value
     * @property {number} AT_HAND=2 AT_HAND value
     * @property {number} AT_DEFENSE=4 AT_DEFENSE value
     * @property {number} AT_GY=8 AT_GY value
     * @property {number} AT_DIGITAMA=16 AT_DIGITAMA value
     * @property {number} AT_DIGITAMA_HATCH=32 AT_DIGITAMA_HATCH value
     * @property {number} AT_IN_BATTLE=64 AT_IN_BATTLE value
     * @property {number} AT_EVO=128 AT_EVO value
     * @property {number} AT_TOKEN=256 AT_TOKEN value
     * @property {number} AT_WAIT=512 AT_WAIT value
     * @property {number} AT_BROWSE=1024 AT_BROWSE value
     * @property {number} AT_GLOBAL=2048 AT_GLOBAL value
     */
    DcgProto.E_AREA_TYPE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "AT_NONE"] = 0;
        values[valuesById[1] = "AT_DECK"] = 1;
        values[valuesById[2] = "AT_HAND"] = 2;
        values[valuesById[4] = "AT_DEFENSE"] = 4;
        values[valuesById[8] = "AT_GY"] = 8;
        values[valuesById[16] = "AT_DIGITAMA"] = 16;
        values[valuesById[32] = "AT_DIGITAMA_HATCH"] = 32;
        values[valuesById[64] = "AT_IN_BATTLE"] = 64;
        values[valuesById[128] = "AT_EVO"] = 128;
        values[valuesById[256] = "AT_TOKEN"] = 256;
        values[valuesById[512] = "AT_WAIT"] = 512;
        values[valuesById[1024] = "AT_BROWSE"] = 1024;
        values[valuesById[2048] = "AT_GLOBAL"] = 2048;
        return values;
    })();

    /**
     * E_ACTION_EFFECT_TYPE enum.
     * @name DcgProto.E_ACTION_EFFECT_TYPE
     * @enum {number}
     * @property {number} AET_NONE=0 AET_NONE value
     * @property {number} AET_ATTACK_DESTROY=1 AET_ATTACK_DESTROY value
     * @property {number} AET_EFFECT_DESTROY=2 AET_EFFECT_DESTROY value
     * @property {number} AET_ATK_ZERO_DESTROY=3 AET_ATK_ZERO_DESTROY value
     * @property {number} AET_BATTLE_RETURN_HAND=4 AET_BATTLE_RETURN_HAND value
     * @property {number} AET_BATTLE_RETURN_DECK=5 AET_BATTLE_RETURN_DECK value
     * @property {number} AET_BATTLE_RETURN_DEFENSE=6 AET_BATTLE_RETURN_DEFENSE value
     * @property {number} AET_DEGENERATE=7 AET_DEGENERATE value
     * @property {number} AET_CARD_NOT_IN_BATTLE=8 AET_CARD_NOT_IN_BATTLE value
     */
    DcgProto.E_ACTION_EFFECT_TYPE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "AET_NONE"] = 0;
        values[valuesById[1] = "AET_ATTACK_DESTROY"] = 1;
        values[valuesById[2] = "AET_EFFECT_DESTROY"] = 2;
        values[valuesById[3] = "AET_ATK_ZERO_DESTROY"] = 3;
        values[valuesById[4] = "AET_BATTLE_RETURN_HAND"] = 4;
        values[valuesById[5] = "AET_BATTLE_RETURN_DECK"] = 5;
        values[valuesById[6] = "AET_BATTLE_RETURN_DEFENSE"] = 6;
        values[valuesById[7] = "AET_DEGENERATE"] = 7;
        values[valuesById[8] = "AET_CARD_NOT_IN_BATTLE"] = 8;
        return values;
    })();

    /**
     * E_CARD_BATTLE_STATE enum.
     * @name DcgProto.E_CARD_BATTLE_STATE
     * @enum {number}
     * @property {number} CBS_NONE=0 CBS_NONE value
     * @property {number} CBS_RESET=1 CBS_RESET value
     * @property {number} CBS_ACTIVATE=2 CBS_ACTIVATE value
     */
    DcgProto.E_CARD_BATTLE_STATE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "CBS_NONE"] = 0;
        values[valuesById[1] = "CBS_RESET"] = 1;
        values[valuesById[2] = "CBS_ACTIVATE"] = 2;
        return values;
    })();

    /**
     * E_EVOLUTION_TYPE enum.
     * @name DcgProto.E_EVOLUTION_TYPE
     * @enum {number}
     * @property {number} ET_NONE=0 ET_NONE value
     * @property {number} ET_NORMAL=1 ET_NORMAL value
     * @property {number} ET_FUSION=2 ET_FUSION value
     */
    DcgProto.E_EVOLUTION_TYPE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "ET_NONE"] = 0;
        values[valuesById[1] = "ET_NORMAL"] = 1;
        values[valuesById[2] = "ET_FUSION"] = 2;
        return values;
    })();

    /**
     * E_CHOOSE_DECIDE_TYPE enum.
     * @name DcgProto.E_CHOOSE_DECIDE_TYPE
     * @enum {number}
     * @property {number} CD_NONE=0 CD_NONE value
     * @property {number} CD_IF_USE=1 CD_IF_USE value
     * @property {number} CD_UP_OR_DOWN=2 CD_UP_OR_DOWN value
     * @property {number} CD_EFFECT_INDEX=3 CD_EFFECT_INDEX value
     * @property {number} CD_DEGENERATE=4 CD_DEGENERATE value
     * @property {number} CD_CHOOSE_NUM=5 CD_CHOOSE_NUM value
     */
    DcgProto.E_CHOOSE_DECIDE_TYPE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "CD_NONE"] = 0;
        values[valuesById[1] = "CD_IF_USE"] = 1;
        values[valuesById[2] = "CD_UP_OR_DOWN"] = 2;
        values[valuesById[3] = "CD_EFFECT_INDEX"] = 3;
        values[valuesById[4] = "CD_DEGENERATE"] = 4;
        values[valuesById[5] = "CD_CHOOSE_NUM"] = 5;
        return values;
    })();

    /**
     * E_MOVE_REASON enum.
     * @name DcgProto.E_MOVE_REASON
     * @enum {number}
     * @property {number} MR_NONE=0 MR_NONE value
     * @property {number} MR_DRAW=1 MR_DRAW value
     * @property {number} MR_APPOINT_DRAW=2 MR_APPOINT_DRAW value
     * @property {number} MR_SET_DEFENSE=3 MR_SET_DEFENSE value
     * @property {number} MR_HATCH=4 MR_HATCH value
     * @property {number} MR_HATCH_BATTLE=5 MR_HATCH_BATTLE value
     * @property {number} MR_PLAY_TO_BATTLE=6 MR_PLAY_TO_BATTLE value
     * @property {number} MR_EFFECT_BATTLE=7 MR_EFFECT_BATTLE value
     * @property {number} MR_EFFECT_TO_BATTLE_AND_REST=8 MR_EFFECT_TO_BATTLE_AND_REST value
     * @property {number} MR_CARD_EFFECT=9 MR_CARD_EFFECT value
     * @property {number} MR_DISCARD=10 MR_DISCARD value
     * @property {number} MR_DISCARD_EVOORIGIN=11 MR_DISCARD_EVOORIGIN value
     * @property {number} MR_DEGENERATE=12 MR_DEGENERATE value
     * @property {number} MR_BATTLE_DESTORY=13 MR_BATTLE_DESTORY value
     * @property {number} MR_OTHER=14 MR_OTHER value
     * @property {number} MR_EFFECT_DRAW=15 MR_EFFECT_DRAW value
     * @property {number} MR_EVO_DRAW=16 MR_EVO_DRAW value
     * @property {number} MR_RESTORE=17 MR_RESTORE value
     * @property {number} MR_BODY_LEAVE_BATTLE=18 MR_BODY_LEAVE_BATTLE value
     */
    DcgProto.E_MOVE_REASON = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "MR_NONE"] = 0;
        values[valuesById[1] = "MR_DRAW"] = 1;
        values[valuesById[2] = "MR_APPOINT_DRAW"] = 2;
        values[valuesById[3] = "MR_SET_DEFENSE"] = 3;
        values[valuesById[4] = "MR_HATCH"] = 4;
        values[valuesById[5] = "MR_HATCH_BATTLE"] = 5;
        values[valuesById[6] = "MR_PLAY_TO_BATTLE"] = 6;
        values[valuesById[7] = "MR_EFFECT_BATTLE"] = 7;
        values[valuesById[8] = "MR_EFFECT_TO_BATTLE_AND_REST"] = 8;
        values[valuesById[9] = "MR_CARD_EFFECT"] = 9;
        values[valuesById[10] = "MR_DISCARD"] = 10;
        values[valuesById[11] = "MR_DISCARD_EVOORIGIN"] = 11;
        values[valuesById[12] = "MR_DEGENERATE"] = 12;
        values[valuesById[13] = "MR_BATTLE_DESTORY"] = 13;
        values[valuesById[14] = "MR_OTHER"] = 14;
        values[valuesById[15] = "MR_EFFECT_DRAW"] = 15;
        values[valuesById[16] = "MR_EVO_DRAW"] = 16;
        values[valuesById[17] = "MR_RESTORE"] = 17;
        values[valuesById[18] = "MR_BODY_LEAVE_BATTLE"] = 18;
        return values;
    })();

    /**
     * E_ATTACK_TYPE enum.
     * @name DcgProto.E_ATTACK_TYPE
     * @enum {number}
     * @property {number} ATK_NONE=0 ATK_NONE value
     * @property {number} AT_DEFENSE_ATTACK=1 AT_DEFENSE_ATTACK value
     * @property {number} AT_MONSTER_ATTACK=2 AT_MONSTER_ATTACK value
     */
    DcgProto.E_ATTACK_TYPE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "ATK_NONE"] = 0;
        values[valuesById[1] = "AT_DEFENSE_ATTACK"] = 1;
        values[valuesById[2] = "AT_MONSTER_ATTACK"] = 2;
        return values;
    })();

    /**
     * E_FIGHT_ACTION enum.
     * @name DcgProto.E_FIGHT_ACTION
     * @enum {number}
     * @property {number} FC_NONE=0 FC_NONE value
     * @property {number} FC_ON_PLAYER_HATCH_DIGIMON=1 FC_ON_PLAYER_HATCH_DIGIMON value
     * @property {number} FC_ON_DIGIMON_CARD_PLAY=2 FC_ON_DIGIMON_CARD_PLAY value
     * @property {number} FC_ON_PLAYER_SET_NEXT_TURN=3 FC_ON_PLAYER_SET_NEXT_TURN value
     * @property {number} FC_ON_DIGIMON_BATTLE=4 FC_ON_DIGIMON_BATTLE value
     * @property {number} FC_ON_DIGIMON_ATTACK_DEFENSE=5 FC_ON_DIGIMON_ATTACK_DEFENSE value
     * @property {number} FC_ON_DIGIMON_EVO=6 FC_ON_DIGIMON_EVO value
     * @property {number} FC_ON_PLAYER_CHOOSE_ONE=7 FC_ON_PLAYER_CHOOSE_ONE value
     * @property {number} FC_ON_PLAYER_CHOOSE_MUL=8 FC_ON_PLAYER_CHOOSE_MUL value
     * @property {number} FC_ON_PLAYER_USE_DIGIMON_EFFECT_IN_BATTLE=9 FC_ON_PLAYER_USE_DIGIMON_EFFECT_IN_BATTLE value
     * @property {number} FC_ON_PLAYER_USE_FUSION_EVO=10 FC_ON_PLAYER_USE_FUSION_EVO value
     * @property {number} FC_ON_PLAYER_SCENE_EVENT_PREPARED=11 FC_ON_PLAYER_SCENE_EVENT_PREPARED value
     * @property {number} FC_ON_PLAYER_PLAYER_ACTIVATE_EFFECT=12 FC_ON_PLAYER_PLAYER_ACTIVATE_EFFECT value
     */
    DcgProto.E_FIGHT_ACTION = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "FC_NONE"] = 0;
        values[valuesById[1] = "FC_ON_PLAYER_HATCH_DIGIMON"] = 1;
        values[valuesById[2] = "FC_ON_DIGIMON_CARD_PLAY"] = 2;
        values[valuesById[3] = "FC_ON_PLAYER_SET_NEXT_TURN"] = 3;
        values[valuesById[4] = "FC_ON_DIGIMON_BATTLE"] = 4;
        values[valuesById[5] = "FC_ON_DIGIMON_ATTACK_DEFENSE"] = 5;
        values[valuesById[6] = "FC_ON_DIGIMON_EVO"] = 6;
        values[valuesById[7] = "FC_ON_PLAYER_CHOOSE_ONE"] = 7;
        values[valuesById[8] = "FC_ON_PLAYER_CHOOSE_MUL"] = 8;
        values[valuesById[9] = "FC_ON_PLAYER_USE_DIGIMON_EFFECT_IN_BATTLE"] = 9;
        values[valuesById[10] = "FC_ON_PLAYER_USE_FUSION_EVO"] = 10;
        values[valuesById[11] = "FC_ON_PLAYER_SCENE_EVENT_PREPARED"] = 11;
        values[valuesById[12] = "FC_ON_PLAYER_PLAYER_ACTIVATE_EFFECT"] = 12;
        return values;
    })();

    /**
     * E_COMPARE enum.
     * @name DcgProto.E_COMPARE
     * @enum {number}
     * @property {number} C_EQUAL_CARD_COUNT=0 C_EQUAL_CARD_COUNT value
     * @property {number} C_SORT=1 C_SORT value
     * @property {number} C_LESS_THAN_OR_EQUAL=2 C_LESS_THAN_OR_EQUAL value
     * @property {number} GREATE_EQUAL=3 GREATE_EQUAL value
     * @property {number} C_OVER_ATTACK=4 C_OVER_ATTACK value
     */
    DcgProto.E_COMPARE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "C_EQUAL_CARD_COUNT"] = 0;
        values[valuesById[1] = "C_SORT"] = 1;
        values[valuesById[2] = "C_LESS_THAN_OR_EQUAL"] = 2;
        values[valuesById[3] = "GREATE_EQUAL"] = 3;
        values[valuesById[4] = "C_OVER_ATTACK"] = 4;
        return values;
    })();

    /**
     * E_SHOW_TO_PLAYER_TYPE enum.
     * @name DcgProto.E_SHOW_TO_PLAYER_TYPE
     * @enum {number}
     * @property {number} STPT_NONE=0 STPT_NONE value
     * @property {number} STPT_SELF=1 STPT_SELF value
     * @property {number} STPT_OPPONENT=2 STPT_OPPONENT value
     * @property {number} STPT_BOTH=3 STPT_BOTH value
     * @property {number} SIPT_BOTH_CHECK=4 SIPT_BOTH_CHECK value
     */
    DcgProto.E_SHOW_TO_PLAYER_TYPE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "STPT_NONE"] = 0;
        values[valuesById[1] = "STPT_SELF"] = 1;
        values[valuesById[2] = "STPT_OPPONENT"] = 2;
        values[valuesById[3] = "STPT_BOTH"] = 3;
        values[valuesById[4] = "SIPT_BOTH_CHECK"] = 4;
        return values;
    })();

    /**
     * E_CLIENT_SHOW_TYPE enum.
     * @name DcgProto.E_CLIENT_SHOW_TYPE
     * @enum {number}
     * @property {number} CST_NONE=0 CST_NONE value
     * @property {number} CST_CARD_EFFECT=1 CST_CARD_EFFECT value
     * @property {number} CST_CARD_EFFECT_OVER=2 CST_CARD_EFFECT_OVER value
     * @property {number} CST_CARD_ATTACK=3 CST_CARD_ATTACK value
     * @property {number} CST_CARD_ATTACK_OVER=4 CST_CARD_ATTACK_OVER value
     * @property {number} CST_CARD_ATTACK_JUDGE=5 CST_CARD_ATTACK_JUDGE value
     * @property {number} CST_CARD_SHOW_DEFENSE=6 CST_CARD_SHOW_DEFENSE value
     * @property {number} CST_OVER_BROWSE=7 CST_OVER_BROWSE value
     * @property {number} CST_CARD_EFFECT_DISTURB=8 CST_CARD_EFFECT_DISTURB value
     * @property {number} CST_CARD_EFFECT_PENETRATE=9 CST_CARD_EFFECT_PENETRATE value
     * @property {number} CST_CARD_DEF_BE_PENETRATE=10 CST_CARD_DEF_BE_PENETRATE value
     * @property {number} CST_START_GAME_PLAYER_IF_CHANGE_CARDS=11 CST_START_GAME_PLAYER_IF_CHANGE_CARDS value
     */
    DcgProto.E_CLIENT_SHOW_TYPE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "CST_NONE"] = 0;
        values[valuesById[1] = "CST_CARD_EFFECT"] = 1;
        values[valuesById[2] = "CST_CARD_EFFECT_OVER"] = 2;
        values[valuesById[3] = "CST_CARD_ATTACK"] = 3;
        values[valuesById[4] = "CST_CARD_ATTACK_OVER"] = 4;
        values[valuesById[5] = "CST_CARD_ATTACK_JUDGE"] = 5;
        values[valuesById[6] = "CST_CARD_SHOW_DEFENSE"] = 6;
        values[valuesById[7] = "CST_OVER_BROWSE"] = 7;
        values[valuesById[8] = "CST_CARD_EFFECT_DISTURB"] = 8;
        values[valuesById[9] = "CST_CARD_EFFECT_PENETRATE"] = 9;
        values[valuesById[10] = "CST_CARD_DEF_BE_PENETRATE"] = 10;
        values[valuesById[11] = "CST_START_GAME_PLAYER_IF_CHANGE_CARDS"] = 11;
        return values;
    })();

    /**
     * E_CHANGE_DIGIMON_BATTLE_STATE_REASON enum.
     * @name DcgProto.E_CHANGE_DIGIMON_BATTLE_STATE_REASON
     * @enum {number}
     * @property {number} CDBSR_NONE=0 CDBSR_NONE value
     * @property {number} CDBSR_BLOCK=1 CDBSR_BLOCK value
     */
    DcgProto.E_CHANGE_DIGIMON_BATTLE_STATE_REASON = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "CDBSR_NONE"] = 0;
        values[valuesById[1] = "CDBSR_BLOCK"] = 1;
        return values;
    })();

    /**
     * E_CARD_ATTRIBUTE enum.
     * @name DcgProto.E_CARD_ATTRIBUTE
     * @enum {number}
     * @property {number} CA_NONE=0 CA_NONE value
     * @property {number} CA_VACCINE=1 CA_VACCINE value
     * @property {number} CA_VIRUS=2 CA_VIRUS value
     * @property {number} CA_DATA=3 CA_DATA value
     * @property {number} CA_UNKNOWN=4 CA_UNKNOWN value
     * @property {number} CA_FREEDOM=5 CA_FREEDOM value
     */
    DcgProto.E_CARD_ATTRIBUTE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "CA_NONE"] = 0;
        values[valuesById[1] = "CA_VACCINE"] = 1;
        values[valuesById[2] = "CA_VIRUS"] = 2;
        values[valuesById[3] = "CA_DATA"] = 3;
        values[valuesById[4] = "CA_UNKNOWN"] = 4;
        values[valuesById[5] = "CA_FREEDOM"] = 5;
        return values;
    })();

    /**
     * E_CARD_TYPE enum.
     * @name DcgProto.E_CARD_TYPE
     * @enum {number}
     * @property {number} CT_NONE=0 CT_NONE value
     * @property {number} CT_MONSTER=1 CT_MONSTER value
     * @property {number} CT_ROLE=2 CT_ROLE value
     * @property {number} CT_MAGIC=3 CT_MAGIC value
     * @property {number} CT_DIGITAMA=4 CT_DIGITAMA value
     */
    DcgProto.E_CARD_TYPE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "CT_NONE"] = 0;
        values[valuesById[1] = "CT_MONSTER"] = 1;
        values[valuesById[2] = "CT_ROLE"] = 2;
        values[valuesById[3] = "CT_MAGIC"] = 3;
        values[valuesById[4] = "CT_DIGITAMA"] = 4;
        return values;
    })();

    /**
     * E_YesOrNo enum.
     * @name DcgProto.E_YesOrNo
     * @enum {number}
     * @property {number} NO=0 NO value
     * @property {number} YES=1 YES value
     */
    DcgProto.E_YesOrNo = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NO"] = 0;
        values[valuesById[1] = "YES"] = 1;
        return values;
    })();

    /**
     * E_ItemType enum.
     * @name DcgProto.E_ItemType
     * @enum {number}
     * @property {number} ITEM_TYPE_NONE=0 ITEM_TYPE_NONE value
     * @property {number} ITEM_TYPE_RESOURCE=1 ITEM_TYPE_RESOURCE value
     * @property {number} ITEM_TYPE_RESOURCE_BAG=2 ITEM_TYPE_RESOURCE_BAG value
     * @property {number} ITEM_TYPE_DIGIMON_EGG=3 ITEM_TYPE_DIGIMON_EGG value
     * @property {number} ITEM_TYPE_SELECT_BAG=4 ITEM_TYPE_SELECT_BAG value
     */
    DcgProto.E_ItemType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "ITEM_TYPE_NONE"] = 0;
        values[valuesById[1] = "ITEM_TYPE_RESOURCE"] = 1;
        values[valuesById[2] = "ITEM_TYPE_RESOURCE_BAG"] = 2;
        values[valuesById[3] = "ITEM_TYPE_DIGIMON_EGG"] = 3;
        values[valuesById[4] = "ITEM_TYPE_SELECT_BAG"] = 4;
        return values;
    })();

    /**
     * E_DeckType enum.
     * @name DcgProto.E_DeckType
     * @enum {number}
     * @property {number} DECK_TYPE_NONE=0 DECK_TYPE_NONE value
     * @property {number} DECK_TYPE_NORMAL=1 DECK_TYPE_NORMAL value
     * @property {number} DECK_TYPE_ACTIVITY=2 DECK_TYPE_ACTIVITY value
     * @property {number} DECK_TYPE_GM=3 DECK_TYPE_GM value
     */
    DcgProto.E_DeckType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "DECK_TYPE_NONE"] = 0;
        values[valuesById[1] = "DECK_TYPE_NORMAL"] = 1;
        values[valuesById[2] = "DECK_TYPE_ACTIVITY"] = 2;
        values[valuesById[3] = "DECK_TYPE_GM"] = 3;
        return values;
    })();

    /**
     * E_CurrencyType enum.
     * @name DcgProto.E_CurrencyType
     * @enum {number}
     * @property {number} CURRENCY_TYPE_NONE=0 CURRENCY_TYPE_NONE value
     * @property {number} CURRENCY_TYPE_DIAMOND=1 CURRENCY_TYPE_DIAMOND value
     * @property {number} CURRENCY_TYPE_CARD_TICKET=2 CURRENCY_TYPE_CARD_TICKET value
     * @property {number} CURRENCY_TYPE_MEMORY_MODULE=3 CURRENCY_TYPE_MEMORY_MODULE value
     * @property {number} CURRENCY_TYPE_MAGNETIC_CARD=4 CURRENCY_TYPE_MAGNETIC_CARD value
     * @property {number} CURRENCY_TYPE_DATA_CHIP=5 CURRENCY_TYPE_DATA_CHIP value
     */
    DcgProto.E_CurrencyType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "CURRENCY_TYPE_NONE"] = 0;
        values[valuesById[1] = "CURRENCY_TYPE_DIAMOND"] = 1;
        values[valuesById[2] = "CURRENCY_TYPE_CARD_TICKET"] = 2;
        values[valuesById[3] = "CURRENCY_TYPE_MEMORY_MODULE"] = 3;
        values[valuesById[4] = "CURRENCY_TYPE_MAGNETIC_CARD"] = 4;
        values[valuesById[5] = "CURRENCY_TYPE_DATA_CHIP"] = 5;
        return values;
    })();

    /**
     * E_CardBagType enum.
     * @name DcgProto.E_CardBagType
     * @enum {number}
     * @property {number} CARD_BAG_TYPE_NONE=0 CARD_BAG_TYPE_NONE value
     * @property {number} CARD_BAG_TYPE_NORMAL=1 CARD_BAG_TYPE_NORMAL value
     * @property {number} CARD_BAG_TYPE_SECRET=2 CARD_BAG_TYPE_SECRET value
     * @property {number} CARD_BAG_TYPE_REWARD=3 CARD_BAG_TYPE_REWARD value
     */
    DcgProto.E_CardBagType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "CARD_BAG_TYPE_NONE"] = 0;
        values[valuesById[1] = "CARD_BAG_TYPE_NORMAL"] = 1;
        values[valuesById[2] = "CARD_BAG_TYPE_SECRET"] = 2;
        values[valuesById[3] = "CARD_BAG_TYPE_REWARD"] = 3;
        return values;
    })();

    /**
     * E_MailNewStatus enum.
     * @name DcgProto.E_MailNewStatus
     * @enum {number}
     * @property {number} MAIL_NEW_STATUS_NONE=0 MAIL_NEW_STATUS_NONE value
     * @property {number} MAIL_NEW_STATUS_UNREAD=1 MAIL_NEW_STATUS_UNREAD value
     * @property {number} MAIL_NEW_STATUS_READ=2 MAIL_NEW_STATUS_READ value
     * @property {number} MAIL_NEW_STATUS_RECEIVE=3 MAIL_NEW_STATUS_RECEIVE value
     * @property {number} MAIL_NEW_STATUS_DEL=4 MAIL_NEW_STATUS_DEL value
     */
    DcgProto.E_MailNewStatus = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "MAIL_NEW_STATUS_NONE"] = 0;
        values[valuesById[1] = "MAIL_NEW_STATUS_UNREAD"] = 1;
        values[valuesById[2] = "MAIL_NEW_STATUS_READ"] = 2;
        values[valuesById[3] = "MAIL_NEW_STATUS_RECEIVE"] = 3;
        values[valuesById[4] = "MAIL_NEW_STATUS_DEL"] = 4;
        return values;
    })();

    /**
     * E_MailNewType enum.
     * @name DcgProto.E_MailNewType
     * @enum {number}
     * @property {number} MAIL_NEW_TYPE_NONE=0 MAIL_NEW_TYPE_NONE value
     * @property {number} MAIL_NEW_TYPE_SYS_NOTICE=1 MAIL_NEW_TYPE_SYS_NOTICE value
     * @property {number} MAIL_NEW_TYPE_MATCH_FIGHT=2 MAIL_NEW_TYPE_MATCH_FIGHT value
     * @property {number} MAIL_NEW_TYPE_FRIEND_FIGHT=3 MAIL_NEW_TYPE_FRIEND_FIGHT value
     * @property {number} MAIL_NEW_TYPE_PVP_ROOM_RANK=5 MAIL_NEW_TYPE_PVP_ROOM_RANK value
     * @property {number} MAIL_NEW_TYPE_CARD_OVERFLOW=6 MAIL_NEW_TYPE_CARD_OVERFLOW value
     * @property {number} MAIL_NEW_TYPE_BOX_TASK_REWARD=7 MAIL_NEW_TYPE_BOX_TASK_REWARD value
     * @property {number} MAIL_NEW_TYPE_LOGIN_TASK_REWARD=8 MAIL_NEW_TYPE_LOGIN_TASK_REWARD value
     * @property {number} MAIL_NEW_TYPE_DIGIMON_OVERFLOW=9 MAIL_NEW_TYPE_DIGIMON_OVERFLOW value
     */
    DcgProto.E_MailNewType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "MAIL_NEW_TYPE_NONE"] = 0;
        values[valuesById[1] = "MAIL_NEW_TYPE_SYS_NOTICE"] = 1;
        values[valuesById[2] = "MAIL_NEW_TYPE_MATCH_FIGHT"] = 2;
        values[valuesById[3] = "MAIL_NEW_TYPE_FRIEND_FIGHT"] = 3;
        values[valuesById[5] = "MAIL_NEW_TYPE_PVP_ROOM_RANK"] = 5;
        values[valuesById[6] = "MAIL_NEW_TYPE_CARD_OVERFLOW"] = 6;
        values[valuesById[7] = "MAIL_NEW_TYPE_BOX_TASK_REWARD"] = 7;
        values[valuesById[8] = "MAIL_NEW_TYPE_LOGIN_TASK_REWARD"] = 8;
        values[valuesById[9] = "MAIL_NEW_TYPE_DIGIMON_OVERFLOW"] = 9;
        return values;
    })();

    /**
     * E_MailNewSender enum.
     * @name DcgProto.E_MailNewSender
     * @enum {number}
     * @property {number} MAIL_NEW_SENDER_NONE=0 MAIL_NEW_SENDER_NONE value
     * @property {number} MAIL_NEW_SENDER_SYS=1 MAIL_NEW_SENDER_SYS value
     */
    DcgProto.E_MailNewSender = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "MAIL_NEW_SENDER_NONE"] = 0;
        values[valuesById[1] = "MAIL_NEW_SENDER_SYS"] = 1;
        return values;
    })();

    /**
     * E_MailTab enum.
     * @name DcgProto.E_MailTab
     * @enum {number}
     * @property {number} MAIL_TAB_NONE=0 MAIL_TAB_NONE value
     * @property {number} MAIL_TAB_SYS=1 MAIL_TAB_SYS value
     */
    DcgProto.E_MailTab = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "MAIL_TAB_NONE"] = 0;
        values[valuesById[1] = "MAIL_TAB_SYS"] = 1;
        return values;
    })();

    /**
     * E_FightResult enum.
     * @name DcgProto.E_FightResult
     * @enum {number}
     * @property {number} FIGHT_RESULT_NONE=0 FIGHT_RESULT_NONE value
     * @property {number} FIGHT_RESULT_WIN=1 FIGHT_RESULT_WIN value
     * @property {number} FIGHT_RESULT_FAIL=2 FIGHT_RESULT_FAIL value
     * @property {number} FIGHT_RESULT_TIE=3 FIGHT_RESULT_TIE value
     */
    DcgProto.E_FightResult = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "FIGHT_RESULT_NONE"] = 0;
        values[valuesById[1] = "FIGHT_RESULT_WIN"] = 1;
        values[valuesById[2] = "FIGHT_RESULT_FAIL"] = 2;
        values[valuesById[3] = "FIGHT_RESULT_TIE"] = 3;
        return values;
    })();

    /**
     * E_SearchType enum.
     * @name DcgProto.E_SearchType
     * @enum {number}
     * @property {number} SEARCH_NONE=0 SEARCH_NONE value
     * @property {number} SEARCH_INSTANCE_IID=1 SEARCH_INSTANCE_IID value
     * @property {number} SEARCH_NAME=2 SEARCH_NAME value
     * @property {number} SEARCH_TITLE=3 SEARCH_TITLE value
     * @property {number} SEARCH_SHORT_ID=4 SEARCH_SHORT_ID value
     */
    DcgProto.E_SearchType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "SEARCH_NONE"] = 0;
        values[valuesById[1] = "SEARCH_INSTANCE_IID"] = 1;
        values[valuesById[2] = "SEARCH_NAME"] = 2;
        values[valuesById[3] = "SEARCH_TITLE"] = 3;
        values[valuesById[4] = "SEARCH_SHORT_ID"] = 4;
        return values;
    })();

    /**
     * E_Ope enum.
     * @name DcgProto.E_Ope
     * @enum {number}
     * @property {number} OPE_NONE=0 OPE_NONE value
     * @property {number} OPE_AGREE=1 OPE_AGREE value
     * @property {number} OPE_REFUSE=2 OPE_REFUSE value
     */
    DcgProto.E_Ope = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "OPE_NONE"] = 0;
        values[valuesById[1] = "OPE_AGREE"] = 1;
        values[valuesById[2] = "OPE_REFUSE"] = 2;
        return values;
    })();

    /**
     * E_SystemMsgType enum.
     * @name DcgProto.E_SystemMsgType
     * @enum {number}
     * @property {number} SYSTEM_MSG_TYPE_NONE=0 SYSTEM_MSG_TYPE_NONE value
     */
    DcgProto.E_SystemMsgType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "SYSTEM_MSG_TYPE_NONE"] = 0;
        return values;
    })();

    /**
     * E_ACTIVITY_STATUS enum.
     * @name DcgProto.E_ACTIVITY_STATUS
     * @enum {number}
     * @property {number} ES_NONE=0 ES_NONE value
     * @property {number} ES_CREATE=1 ES_CREATE value
     * @property {number} ES_INIT=2 ES_INIT value
     * @property {number} ES_READY=3 ES_READY value
     * @property {number} ES_START=4 ES_START value
     * @property {number} ES_END=5 ES_END value
     * @property {number} ES_CLOSE=6 ES_CLOSE value
     */
    DcgProto.E_ACTIVITY_STATUS = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "ES_NONE"] = 0;
        values[valuesById[1] = "ES_CREATE"] = 1;
        values[valuesById[2] = "ES_INIT"] = 2;
        values[valuesById[3] = "ES_READY"] = 3;
        values[valuesById[4] = "ES_START"] = 4;
        values[valuesById[5] = "ES_END"] = 5;
        values[valuesById[6] = "ES_CLOSE"] = 6;
        return values;
    })();

    /**
     * E_GUESS_FIST enum.
     * @name DcgProto.E_GUESS_FIST
     * @enum {number}
     * @property {number} GF_ROCK=0 GF_ROCK value
     * @property {number} GF_SCISSOR=1 GF_SCISSOR value
     * @property {number} GF_CLOTH=2 GF_CLOTH value
     */
    DcgProto.E_GUESS_FIST = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "GF_ROCK"] = 0;
        values[valuesById[1] = "GF_SCISSOR"] = 1;
        values[valuesById[2] = "GF_CLOTH"] = 2;
        return values;
    })();

    /**
     * E_TaskStatus enum.
     * @name DcgProto.E_TaskStatus
     * @enum {number}
     * @property {number} TASK_STATUS_NONE=0 TASK_STATUS_NONE value
     * @property {number} TASK_STATUS_DOING=1 TASK_STATUS_DOING value
     * @property {number} TASK_STATUS_FINISH=2 TASK_STATUS_FINISH value
     * @property {number} TASK_STATUS_HAS_GOT=3 TASK_STATUS_HAS_GOT value
     * @property {number} TASK_STATUS_NOT_UNLOCK=4 TASK_STATUS_NOT_UNLOCK value
     */
    DcgProto.E_TaskStatus = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "TASK_STATUS_NONE"] = 0;
        values[valuesById[1] = "TASK_STATUS_DOING"] = 1;
        values[valuesById[2] = "TASK_STATUS_FINISH"] = 2;
        values[valuesById[3] = "TASK_STATUS_HAS_GOT"] = 3;
        values[valuesById[4] = "TASK_STATUS_NOT_UNLOCK"] = 4;
        return values;
    })();

    /**
     * E_TaskType enum.
     * @name DcgProto.E_TaskType
     * @enum {number}
     * @property {number} TASK_TYPE_NONE=0 TASK_TYPE_NONE value
     * @property {number} TASK_TYPE_MASTER=1 TASK_TYPE_MASTER value
     * @property {number} TASK_TYPE_DAILY=2 TASK_TYPE_DAILY value
     * @property {number} TASK_TYPE_BOX=3 TASK_TYPE_BOX value
     * @property {number} TASK_TYPE_LOGIN=4 TASK_TYPE_LOGIN value
     * @property {number} TASK_TYPE_GROWTH=5 TASK_TYPE_GROWTH value
     */
    DcgProto.E_TaskType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "TASK_TYPE_NONE"] = 0;
        values[valuesById[1] = "TASK_TYPE_MASTER"] = 1;
        values[valuesById[2] = "TASK_TYPE_DAILY"] = 2;
        values[valuesById[3] = "TASK_TYPE_BOX"] = 3;
        values[valuesById[4] = "TASK_TYPE_LOGIN"] = 4;
        values[valuesById[5] = "TASK_TYPE_GROWTH"] = 5;
        return values;
    })();

    /**
     * E_TaskCondType enum.
     * @name DcgProto.E_TaskCondType
     * @enum {number}
     * @property {number} TC_TYPE_NONE=0 TC_TYPE_NONE value
     * @property {number} TC_TYPE_FIGHT_NUM_X=1 TC_TYPE_FIGHT_NUM_X value
     * @property {number} TC_TYPE_CARD_COMPOSE_NUM_X=2 TC_TYPE_CARD_COMPOSE_NUM_X value
     * @property {number} TC_TYPE_CARD_DECOMPOSE_NUM_X=3 TC_TYPE_CARD_DECOMPOSE_NUM_X value
     * @property {number} TC_TYPE_COST_MEMORY_MODULE_NUM_X=4 TC_TYPE_COST_MEMORY_MODULE_NUM_X value
     * @property {number} TC_TYPE_CREATE_FRIEND_ROOM_NUM_X=5 TC_TYPE_CREATE_FRIEND_ROOM_NUM_X value
     * @property {number} TC_TYPE_FIGHTING_DRAW_CARD_NUM_X_MODE_Y=6 TC_TYPE_FIGHTING_DRAW_CARD_NUM_X_MODE_Y value
     * @property {number} TC_TYPE_FIGHTING_BLOCK_NUM_X=7 TC_TYPE_FIGHTING_BLOCK_NUM_X value
     * @property {number} TC_TYPE_FIGHTING_DEFENSE_NUM_X=8 TC_TYPE_FIGHTING_DEFENSE_NUM_X value
     * @property {number} TC_TYPE_FIGHTING_KILL_NUM_X=9 TC_TYPE_FIGHTING_KILL_NUM_X value
     * @property {number} TC_TYPE_CURRENT_FIGHTING_DRAW_CARD_NUM_X=10 TC_TYPE_CURRENT_FIGHTING_DRAW_CARD_NUM_X value
     * @property {number} TC_TYPE_CURRENT_FIGHTING_ATTACK_NUM_X=11 TC_TYPE_CURRENT_FIGHTING_ATTACK_NUM_X value
     * @property {number} TC_TYPE_TASK_POINTS_NUM_X=100 TC_TYPE_TASK_POINTS_NUM_X value
     * @property {number} TC_TYPE_LOGIN_NUM_X=101 TC_TYPE_LOGIN_NUM_X value
     * @property {number} TC_TYPE_HISTORY_FRIEND_NUM_X=102 TC_TYPE_HISTORY_FRIEND_NUM_X value
     * @property {number} TC_TYPE_SHOP_DRAW_CARD_BAG_NUM_X=103 TC_TYPE_SHOP_DRAW_CARD_BAG_NUM_X value
     * @property {number} TC_TYPE_HISTORY_CARD_NUM_X=104 TC_TYPE_HISTORY_CARD_NUM_X value
     * @property {number} TC_TYPE_FIGHT_WIN_NUM_X=105 TC_TYPE_FIGHT_WIN_NUM_X value
     */
    DcgProto.E_TaskCondType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "TC_TYPE_NONE"] = 0;
        values[valuesById[1] = "TC_TYPE_FIGHT_NUM_X"] = 1;
        values[valuesById[2] = "TC_TYPE_CARD_COMPOSE_NUM_X"] = 2;
        values[valuesById[3] = "TC_TYPE_CARD_DECOMPOSE_NUM_X"] = 3;
        values[valuesById[4] = "TC_TYPE_COST_MEMORY_MODULE_NUM_X"] = 4;
        values[valuesById[5] = "TC_TYPE_CREATE_FRIEND_ROOM_NUM_X"] = 5;
        values[valuesById[6] = "TC_TYPE_FIGHTING_DRAW_CARD_NUM_X_MODE_Y"] = 6;
        values[valuesById[7] = "TC_TYPE_FIGHTING_BLOCK_NUM_X"] = 7;
        values[valuesById[8] = "TC_TYPE_FIGHTING_DEFENSE_NUM_X"] = 8;
        values[valuesById[9] = "TC_TYPE_FIGHTING_KILL_NUM_X"] = 9;
        values[valuesById[10] = "TC_TYPE_CURRENT_FIGHTING_DRAW_CARD_NUM_X"] = 10;
        values[valuesById[11] = "TC_TYPE_CURRENT_FIGHTING_ATTACK_NUM_X"] = 11;
        values[valuesById[100] = "TC_TYPE_TASK_POINTS_NUM_X"] = 100;
        values[valuesById[101] = "TC_TYPE_LOGIN_NUM_X"] = 101;
        values[valuesById[102] = "TC_TYPE_HISTORY_FRIEND_NUM_X"] = 102;
        values[valuesById[103] = "TC_TYPE_SHOP_DRAW_CARD_BAG_NUM_X"] = 103;
        values[valuesById[104] = "TC_TYPE_HISTORY_CARD_NUM_X"] = 104;
        values[valuesById[105] = "TC_TYPE_FIGHT_WIN_NUM_X"] = 105;
        return values;
    })();

    /**
     * E_ExtraType enum.
     * @name DcgProto.E_ExtraType
     * @enum {number}
     * @property {number} ET_TYPE_NONE=0 ET_TYPE_NONE value
     * @property {number} ET_TYPE_RECORD=1 ET_TYPE_RECORD value
     * @property {number} ET_TYPE_GUIDE=2 ET_TYPE_GUIDE value
     */
    DcgProto.E_ExtraType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "ET_TYPE_NONE"] = 0;
        values[valuesById[1] = "ET_TYPE_RECORD"] = 1;
        values[valuesById[2] = "ET_TYPE_GUIDE"] = 2;
        return values;
    })();

    /**
     * E_EmoJiMode enum.
     * @name DcgProto.E_EmoJiMode
     * @enum {number}
     * @property {number} EMOJI_MODE_NONE=0 EMOJI_MODE_NONE value
     * @property {number} EMOJI_MODE_PERSONAL_ROOM=1 EMOJI_MODE_PERSONAL_ROOM value
     * @property {number} EMOJI_MODE_MULTI_ROOM=2 EMOJI_MODE_MULTI_ROOM value
     */
    DcgProto.E_EmoJiMode = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "EMOJI_MODE_NONE"] = 0;
        values[valuesById[1] = "EMOJI_MODE_PERSONAL_ROOM"] = 1;
        values[valuesById[2] = "EMOJI_MODE_MULTI_ROOM"] = 2;
        return values;
    })();

    /**
     * E_ActiveState enum.
     * @name DcgProto.E_ActiveState
     * @enum {number}
     * @property {number} ACTIVE_STATE_NONE=0 ACTIVE_STATE_NONE value
     * @property {number} ACTIVE_STATE_INIT=1 ACTIVE_STATE_INIT value
     * @property {number} ACTIVE_STATE_ENROLL=2 ACTIVE_STATE_ENROLL value
     * @property {number} ACTIVE_STATE_READY=3 ACTIVE_STATE_READY value
     * @property {number} ACTIVE_STATE_OPEN=4 ACTIVE_STATE_OPEN value
     * @property {number} ACTIVE_STATE_END=5 ACTIVE_STATE_END value
     * @property {number} ACTIVE_STATE_CLOSE=6 ACTIVE_STATE_CLOSE value
     */
    DcgProto.E_ActiveState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "ACTIVE_STATE_NONE"] = 0;
        values[valuesById[1] = "ACTIVE_STATE_INIT"] = 1;
        values[valuesById[2] = "ACTIVE_STATE_ENROLL"] = 2;
        values[valuesById[3] = "ACTIVE_STATE_READY"] = 3;
        values[valuesById[4] = "ACTIVE_STATE_OPEN"] = 4;
        values[valuesById[5] = "ACTIVE_STATE_END"] = 5;
        values[valuesById[6] = "ACTIVE_STATE_CLOSE"] = 6;
        return values;
    })();

    /**
     * E_MATCH_MODULE enum.
     * @name DcgProto.E_MATCH_MODULE
     * @enum {number}
     * @property {number} MATCH_MODULE_NONE=0 MATCH_MODULE_NONE value
     * @property {number} MATCH_MODULE_STREAK=1 MATCH_MODULE_STREAK value
     * @property {number} MATCH_MODULE_ELO=2 MATCH_MODULE_ELO value
     * @property {number} MATCH_MODULE_DDP=3 MATCH_MODULE_DDP value
     * @property {number} MATCH_MODULE_VAR=4 MATCH_MODULE_VAR value
     */
    DcgProto.E_MATCH_MODULE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "MATCH_MODULE_NONE"] = 0;
        values[valuesById[1] = "MATCH_MODULE_STREAK"] = 1;
        values[valuesById[2] = "MATCH_MODULE_ELO"] = 2;
        values[valuesById[3] = "MATCH_MODULE_DDP"] = 3;
        values[valuesById[4] = "MATCH_MODULE_VAR"] = 4;
        return values;
    })();

    /**
     * E_ErrorCode enum.
     * @name DcgProto.E_ErrorCode
     * @enum {number}
     * @property {number} SUCCESS=0 SUCCESS value
     * @property {number} ERROR_UNKNOWN=-1 ERROR_UNKNOWN value
     * @property {number} ERROR_LEN_NAME_OR_PWD=101 ERROR_LEN_NAME_OR_PWD value
     * @property {number} ERROR_NAME_IS_EXIST=102 ERROR_NAME_IS_EXIST value
     * @property {number} ERROR_ACCOUNT_IS_NOT_EXIST=103 ERROR_ACCOUNT_IS_NOT_EXIST value
     * @property {number} ERROR_NAME_OR_PWD=104 ERROR_NAME_OR_PWD value
     * @property {number} ERROR_BANDAI_GAME_ACCOUNT_EXISTS=105 ERROR_BANDAI_GAME_ACCOUNT_EXISTS value
     * @property {number} ERROR_BANDAI_ACCOUNT_IS_NOT_EXIST=106 ERROR_BANDAI_ACCOUNT_IS_NOT_EXIST value
     * @property {number} ERROR_TOKEN_NOT_FIT=107 ERROR_TOKEN_NOT_FIT value
     * @property {number} ERROR_FRAMEWORK_BAD_REQUEST=400 ERROR_FRAMEWORK_BAD_REQUEST value
     * @property {number} ERROR_FRAMEWORK_NOT_FOUND=404 ERROR_FRAMEWORK_NOT_FOUND value
     * @property {number} ERROR_FRAMEWORK_UNKNOWN_CODE=450 ERROR_FRAMEWORK_UNKNOWN_CODE value
     * @property {number} ERROR_FRAMEWORK_CLIENT_CLOSE_REQUEST=499 ERROR_FRAMEWORK_CLIENT_CLOSE_REQUEST value
     * @property {number} ERROR_FRAMEWORK_INTERNAL_CODE=500 ERROR_FRAMEWORK_INTERNAL_CODE value
     * @property {number} ERROR_RPC_REQUEST_INTERNAL_CODE=700 ERROR_RPC_REQUEST_INTERNAL_CODE value
     * @property {number} ERROR_RPC_REQUEST_SERVER_CLOSE=701 ERROR_RPC_REQUEST_SERVER_CLOSE value
     * @property {number} ERROR_DATA_EXCEPTION=1000 ERROR_DATA_EXCEPTION value
     * @property {number} ERROR_FORMAT_PARAM=1001 ERROR_FORMAT_PARAM value
     * @property {number} ERROR_LOST_PARAM=1002 ERROR_LOST_PARAM value
     * @property {number} ERROR_PARAM_VALUE=1003 ERROR_PARAM_VALUE value
     * @property {number} ERROR_DECRYPT=1004 ERROR_DECRYPT value
     * @property {number} ERROR_ENCRYPT=1005 ERROR_ENCRYPT value
     * @property {number} ERROR_DATA_EXPIRATION=1006 ERROR_DATA_EXPIRATION value
     * @property {number} ERROR_SERVER_STATUS=1100 ERROR_SERVER_STATUS value
     * @property {number} ERROR_ROLE_NOT_FOUND_IN_DB=1101 ERROR_ROLE_NOT_FOUND_IN_DB value
     * @property {number} ERROR_ROLE_NOT_IN_THIS_GAME=1102 ERROR_ROLE_NOT_IN_THIS_GAME value
     * @property {number} ERROR_SERVER_BUSY=1103 ERROR_SERVER_BUSY value
     * @property {number} ERROR_ROLE_NOT_LOGIN=10000 ERROR_ROLE_NOT_LOGIN value
     * @property {number} ERROR_ROLE_OFFLINE=10001 ERROR_ROLE_OFFLINE value
     * @property {number} ERROR_ROLE_ACTION_LIMIT=10002 ERROR_ROLE_ACTION_LIMIT value
     * @property {number} ERROR_ROLE_BATTLE=10003 ERROR_ROLE_BATTLE value
     * @property {number} ERROR_ROLE_FREQUENT_OPERATION=10004 ERROR_ROLE_FREQUENT_OPERATION value
     * @property {number} ERROR_PLAN_CONFIG=10100 ERROR_PLAN_CONFIG value
     * @property {number} ERROR_DIAMOND_NOT_ENOUGH=10101 ERROR_DIAMOND_NOT_ENOUGH value
     * @property {number} ERROR_MATERIAL_NOT_ENOUGH=10102 ERROR_MATERIAL_NOT_ENOUGH value
     * @property {number} ERROR_NOT_ILLEGAL_NAME=10103 ERROR_NOT_ILLEGAL_NAME value
     * @property {number} ERROR_STORY_DATA_TOO_LONG=10104 ERROR_STORY_DATA_TOO_LONG value
     * @property {number} ERROR_GM_CONDITIONS_NOT_MET=10105 ERROR_GM_CONDITIONS_NOT_MET value
     * @property {number} ERROR_ROLE_NICKNAME_TOO_LONG=10200 ERROR_ROLE_NICKNAME_TOO_LONG value
     * @property {number} ERROR_ROOM_NOT_FOUND=10300 ERROR_ROOM_NOT_FOUND value
     * @property {number} ERROR_MATCHING=10301 ERROR_MATCHING value
     * @property {number} ERROR_NOT_MATCHING=10302 ERROR_NOT_MATCHING value
     * @property {number} ERROR_ROOM_NOT_QUIT=10303 ERROR_ROOM_NOT_QUIT value
     * @property {number} ERROR_ROOM_NOT_FIGHT=10304 ERROR_ROOM_NOT_FIGHT value
     * @property {number} ERROR_ROOM_END=10305 ERROR_ROOM_END value
     * @property {number} ERROR_ROOM_NOT_START_FIGHT=10306 ERROR_ROOM_NOT_START_FIGHT value
     * @property {number} ERROR_ROOM_NOT_WATCH=10307 ERROR_ROOM_NOT_WATCH value
     * @property {number} ERROR_ROOM_WATCH_NUM_LIMIT=10308 ERROR_ROOM_WATCH_NUM_LIMIT value
     * @property {number} ERROR_DECK_NOT_EXIST=10400 ERROR_DECK_NOT_EXIST value
     * @property {number} ERROR_DECK_ILLEGAL_NAME=10401 ERROR_DECK_ILLEGAL_NAME value
     * @property {number} ERROR_DECK_NUM_LIMIT=10402 ERROR_DECK_NUM_LIMIT value
     * @property {number} ERROR_DECK_SAME_CARD_NUM_LIMIT=10403 ERROR_DECK_SAME_CARD_NUM_LIMIT value
     * @property {number} ERROR_DECK_PARTS_NOT_EXIST=10404 ERROR_DECK_PARTS_NOT_EXIST value
     * @property {number} ERROR_DECK_CARD_NUM_NOT_ENOUGH=10405 ERROR_DECK_CARD_NUM_NOT_ENOUGH value
     * @property {number} ERROR_DECK_PARTS_EXIST=10406 ERROR_DECK_PARTS_EXIST value
     * @property {number} ERROR_REWARD_CFG_NOT_FOUND=10500 ERROR_REWARD_CFG_NOT_FOUND value
     * @property {number} ERROR_CARD_NOT_EXIST=10600 ERROR_CARD_NOT_EXIST value
     * @property {number} ERROR_CARD_NUM_NOT_ENOUGH=10601 ERROR_CARD_NUM_NOT_ENOUGH value
     * @property {number} ERROR_ITEM_NOT_ENOUGH=10700 ERROR_ITEM_NOT_ENOUGH value
     * @property {number} ERROR_ITEM_CFG_NOT_FOUND=10701 ERROR_ITEM_CFG_NOT_FOUND value
     * @property {number} ERROR_ITEM_NO_USE=10702 ERROR_ITEM_NO_USE value
     * @property {number} ERROR_ITEM_NOT_BATCH_USE=10703 ERROR_ITEM_NOT_BATCH_USE value
     * @property {number} ERROR_SHOP_NOT_FOUND=10800 ERROR_SHOP_NOT_FOUND value
     * @property {number} ERROR_SHOP_BUY_NUM_IS_MAX=10801 ERROR_SHOP_BUY_NUM_IS_MAX value
     * @property {number} ERROR_SHOP_NO_GOODS_SHELVES=10802 ERROR_SHOP_NO_GOODS_SHELVES value
     * @property {number} ERROR_CARD_BAG_NOT_EXIST=10900 ERROR_CARD_BAG_NOT_EXIST value
     * @property {number} ERROR_CARD_BAG_NO_ACTIVATE=10901 ERROR_CARD_BAG_NO_ACTIVATE value
     * @property {number} ERROR_CARD_BAG_EXPIRE=10902 ERROR_CARD_BAG_EXPIRE value
     * @property {number} ERROR_CARD_BAG_BUY_MAX_LIMIT=10903 ERROR_CARD_BAG_BUY_MAX_LIMIT value
     * @property {number} ERROR_MAIL_NOT_FOUND=11000 ERROR_MAIL_NOT_FOUND value
     * @property {number} ERROR_MAIL_CFG_NOT_FOUND=11001 ERROR_MAIL_CFG_NOT_FOUND value
     * @property {number} ERROR_MAIL_NOT_DEL=11002 ERROR_MAIL_NOT_DEL value
     * @property {number} ERROR_MAIL_NOT_SHARE=11003 ERROR_MAIL_NOT_SHARE value
     * @property {number} ERROR_MAIL_NOT_COLLECT=11004 ERROR_MAIL_NOT_COLLECT value
     * @property {number} ERROR_MAIL_NOT_COLLECT_STATUS=11005 ERROR_MAIL_NOT_COLLECT_STATUS value
     * @property {number} ERROR_MAIL_COLLECT_STATUS=11006 ERROR_MAIL_COLLECT_STATUS value
     * @property {number} ERROR_MAIL_UN_RECEIVE_ATTACH=11007 ERROR_MAIL_UN_RECEIVE_ATTACH value
     * @property {number} ERROR_MAIL_UNREAD=11008 ERROR_MAIL_UNREAD value
     * @property {number} ERROR_MAIL_NO_UNREAD_STATUS=11009 ERROR_MAIL_NO_UNREAD_STATUS value
     * @property {number} ERROR_MAIL_RECEIVE_ATTACH_STATUS=11010 ERROR_MAIL_RECEIVE_ATTACH_STATUS value
     * @property {number} ERROR_MAIL_NO_ATTACH=11011 ERROR_MAIL_NO_ATTACH value
     * @property {number} ERROR_MAIL_SEND_FAIL=11012 ERROR_MAIL_SEND_FAIL value
     * @property {number} ERROR_MAIL_NOT_ONE_KEY_DEL_FAVORITE=11013 ERROR_MAIL_NOT_ONE_KEY_DEL_FAVORITE value
     * @property {number} ERROR_MAIL_NOT_RECEIVE_ATTACH_CARD_LIMIT=11014 ERROR_MAIL_NOT_RECEIVE_ATTACH_CARD_LIMIT value
     * @property {number} ERROR_MAIL_NOT_RECEIVE_ATTACH_NUM_LIMIT=11015 ERROR_MAIL_NOT_RECEIVE_ATTACH_NUM_LIMIT value
     * @property {number} ERROR_MAIL_NOT_RECEIVE_ATTACH_DIGIMON_LIMIT=11016 ERROR_MAIL_NOT_RECEIVE_ATTACH_DIGIMON_LIMIT value
     * @property {number} ERROR_FRIEND_SEARCH_ROLE_NOT_EXIST=11100 ERROR_FRIEND_SEARCH_ROLE_NOT_EXIST value
     * @property {number} ERROR_FRIEND_SEARCH_INVALID_NAME=11101 ERROR_FRIEND_SEARCH_INVALID_NAME value
     * @property {number} ERROR_FRIEND_NOT_EXIST=11102 ERROR_FRIEND_NOT_EXIST value
     * @property {number} ERROR_FRIEND_EXIST=11103 ERROR_FRIEND_EXIST value
     * @property {number} ERROR_FRIEND_APPLY_NOT_REPEAT=11104 ERROR_FRIEND_APPLY_NOT_REPEAT value
     * @property {number} ERROR_FRIEND_BE_APPLY=11105 ERROR_FRIEND_BE_APPLY value
     * @property {number} ERROR_FRIEND_APPLY_NOT_SELF=11106 ERROR_FRIEND_APPLY_NOT_SELF value
     * @property {number} ERROR_FRIEND_APPLY_NOT_CANCEL=11107 ERROR_FRIEND_APPLY_NOT_CANCEL value
     * @property {number} ERROR_FRIEND_APPLY_INVALID=11108 ERROR_FRIEND_APPLY_INVALID value
     * @property {number} ERROR_FRIEND_APPLY_NOT_AGREE_REFUSE=11109 ERROR_FRIEND_APPLY_NOT_AGREE_REFUSE value
     * @property {number} ERROR_FRIEND_MEMBER_LIMIT=11110 ERROR_FRIEND_MEMBER_LIMIT value
     * @property {number} ERROR_FRIEND_APPLY_LIMIT=11111 ERROR_FRIEND_APPLY_LIMIT value
     * @property {number} ERROR_FRIEND_APPLY_MEMBER_LIMIT=11112 ERROR_FRIEND_APPLY_MEMBER_LIMIT value
     * @property {number} ERROR_PVP_INVITE_STATUS_ERR=11300 ERROR_PVP_INVITE_STATUS_ERR value
     * @property {number} ERROR_PVP_INVITE_NOT_MANY_TIMES=11301 ERROR_PVP_INVITE_NOT_MANY_TIMES value
     * @property {number} ERROR_PVP_INVITE_BE_APPLY=11302 ERROR_PVP_INVITE_BE_APPLY value
     * @property {number} ERROR_PVP_INVITE_EXPIRE=11303 ERROR_PVP_INVITE_EXPIRE value
     * @property {number} ERROR_PVP_INVITE_FAIL_BATTLE=11304 ERROR_PVP_INVITE_FAIL_BATTLE value
     * @property {number} ERROR_PVP_INVITE_NOT_REPEAT=11305 ERROR_PVP_INVITE_NOT_REPEAT value
     * @property {number} ERROR_PVP_INVITE_NO_ACCESS=11306 ERROR_PVP_INVITE_NO_ACCESS value
     * @property {number} ERROR_PVP_ROOM_NUM_LIMIT=11400 ERROR_PVP_ROOM_NUM_LIMIT value
     * @property {number} ERROR_PVP_ROOM_HAVE_CREATE=11401 ERROR_PVP_ROOM_HAVE_CREATE value
     * @property {number} ERROR_PVP_ROOM_NOT_EXIST=11402 ERROR_PVP_ROOM_NOT_EXIST value
     * @property {number} ERROR_PVP_ROOM_NO_ACCESS=11403 ERROR_PVP_ROOM_NO_ACCESS value
     * @property {number} ERROR_PVP_ROOM_NOT_MODIFY=11404 ERROR_PVP_ROOM_NOT_MODIFY value
     * @property {number} ERROR_PVP_ROOM_JOIN_NUM_FULL=11405 ERROR_PVP_ROOM_JOIN_NUM_FULL value
     * @property {number} ERROR_PVP_ROOM_JOIN_NO_ACCESS=11406 ERROR_PVP_ROOM_JOIN_NO_ACCESS value
     * @property {number} ERROR_PVP_ROOM_JOIN_NOT_REPEAT=11407 ERROR_PVP_ROOM_JOIN_NOT_REPEAT value
     * @property {number} ERROR_PVP_ROOM_MATCH=11408 ERROR_PVP_ROOM_MATCH value
     * @property {number} ERROR_PVP_ROOM_BEGIN_RACE=11409 ERROR_PVP_ROOM_BEGIN_RACE value
     * @property {number} ERROR_PVP_ROOM_RACE_MISS=11410 ERROR_PVP_ROOM_RACE_MISS value
     * @property {number} ERROR_PVP_ROOM_NOT_RACE=11411 ERROR_PVP_ROOM_NOT_RACE value
     * @property {number} ERROR_PVP_ROOM_NOT_JOIN_RACE=11412 ERROR_PVP_ROOM_NOT_JOIN_RACE value
     * @property {number} ERROR_PVP_ROOM_NOT_QUIT_RACE=11413 ERROR_PVP_ROOM_NOT_QUIT_RACE value
     * @property {number} ERROR_PVP_ROOM_HAVE_JOIN=11414 ERROR_PVP_ROOM_HAVE_JOIN value
     * @property {number} ERROR_PVP_ROOM_CREATE_CD=11415 ERROR_PVP_ROOM_CREATE_CD value
     * @property {number} ERROR_PERSONAL_ROOM_STATUS_ERR=11500 ERROR_PERSONAL_ROOM_STATUS_ERR value
     * @property {number} ERROR_PERSONAL_ROOM_NOT_EXIST=11501 ERROR_PERSONAL_ROOM_NOT_EXIST value
     * @property {number} ERROR_PERSONAL_ROOM_JOIN_NUM_FULL=11502 ERROR_PERSONAL_ROOM_JOIN_NUM_FULL value
     * @property {number} ERROR_PERSONAL_ROOM_QUIT=11503 ERROR_PERSONAL_ROOM_QUIT value
     * @property {number} ERROR_PERSONAL_ROOM_NOT_BATTLE=11504 ERROR_PERSONAL_ROOM_NOT_BATTLE value
     * @property {number} ERROR_PERSONAL_ROOM_CREATE_CD=11505 ERROR_PERSONAL_ROOM_CREATE_CD value
     * @property {number} ERROR_PERSONAL_ROOM_NOT_READY=11506 ERROR_PERSONAL_ROOM_NOT_READY value
     * @property {number} ERROR_PERSONAL_ROOM_NO_ACCESS=11507 ERROR_PERSONAL_ROOM_NO_ACCESS value
     * @property {number} ERROR_TASK_NOT_FOUND=11600 ERROR_TASK_NOT_FOUND value
     * @property {number} ERROR_TASK_NOT_FINISH=11601 ERROR_TASK_NOT_FINISH value
     * @property {number} ERROR_TASK_REWARD_HAS_GOT=11602 ERROR_TASK_REWARD_HAS_GOT value
     * @property {number} ERROR_TASK_IS_EXIST=11603 ERROR_TASK_IS_EXIST value
     * @property {number} ERROR_TASK_CFG_NOT_FOUND=11604 ERROR_TASK_CFG_NOT_FOUND value
     * @property {number} ERROR_TASK_POINTS_NOT_ENOUGH=11605 ERROR_TASK_POINTS_NOT_ENOUGH value
     * @property {number} ERROR_TASK_BOX_REWARD_HAS_GOT=11606 ERROR_TASK_BOX_REWARD_HAS_GOT value
     * @property {number} ERROR_TASK_REFRESH_LIMIT=11607 ERROR_TASK_REFRESH_LIMIT value
     * @property {number} ERROR_TASK_NO_REWARD=11608 ERROR_TASK_NO_REWARD value
     * @property {number} ERROR_STORY_CFG_NOT_FOUND=11700 ERROR_STORY_CFG_NOT_FOUND value
     * @property {number} ERROR_STORY_NOT_FINISH=11701 ERROR_STORY_NOT_FINISH value
     * @property {number} ERROR_STORY_STAGE_FINISH=11702 ERROR_STORY_STAGE_FINISH value
     * @property {number} ERROR_STORY_REWARD=11703 ERROR_STORY_REWARD value
     * @property {number} ERROR_DIGIMON_CFG_NOT_FOUND=11800 ERROR_DIGIMON_CFG_NOT_FOUND value
     * @property {number} ERROR_DIGIMON_SAME_NOT_TRAIN=11801 ERROR_DIGIMON_SAME_NOT_TRAIN value
     * @property {number} ERROR_DIGIMON_NOT_EVO=11802 ERROR_DIGIMON_NOT_EVO value
     * @property {number} ERROR_DIGIMON_LEVEL_LIMIT=11803 ERROR_DIGIMON_LEVEL_LIMIT value
     * @property {number} ERROR_BAG_LIMIT_DIGIMON=11900 ERROR_BAG_LIMIT_DIGIMON value
     * @property {number} ERROR_RANKED_PHASE_REWARD=12000 ERROR_RANKED_PHASE_REWARD value
     * @property {number} ERROR_RANKED_SEASON_END=12001 ERROR_RANKED_SEASON_END value
     */
    DcgProto.E_ErrorCode = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "SUCCESS"] = 0;
        values[valuesById[-1] = "ERROR_UNKNOWN"] = -1;
        values[valuesById[101] = "ERROR_LEN_NAME_OR_PWD"] = 101;
        values[valuesById[102] = "ERROR_NAME_IS_EXIST"] = 102;
        values[valuesById[103] = "ERROR_ACCOUNT_IS_NOT_EXIST"] = 103;
        values[valuesById[104] = "ERROR_NAME_OR_PWD"] = 104;
        values[valuesById[105] = "ERROR_BANDAI_GAME_ACCOUNT_EXISTS"] = 105;
        values[valuesById[106] = "ERROR_BANDAI_ACCOUNT_IS_NOT_EXIST"] = 106;
        values[valuesById[107] = "ERROR_TOKEN_NOT_FIT"] = 107;
        values[valuesById[400] = "ERROR_FRAMEWORK_BAD_REQUEST"] = 400;
        values[valuesById[404] = "ERROR_FRAMEWORK_NOT_FOUND"] = 404;
        values[valuesById[450] = "ERROR_FRAMEWORK_UNKNOWN_CODE"] = 450;
        values[valuesById[499] = "ERROR_FRAMEWORK_CLIENT_CLOSE_REQUEST"] = 499;
        values[valuesById[500] = "ERROR_FRAMEWORK_INTERNAL_CODE"] = 500;
        values[valuesById[700] = "ERROR_RPC_REQUEST_INTERNAL_CODE"] = 700;
        values[valuesById[701] = "ERROR_RPC_REQUEST_SERVER_CLOSE"] = 701;
        values[valuesById[1000] = "ERROR_DATA_EXCEPTION"] = 1000;
        values[valuesById[1001] = "ERROR_FORMAT_PARAM"] = 1001;
        values[valuesById[1002] = "ERROR_LOST_PARAM"] = 1002;
        values[valuesById[1003] = "ERROR_PARAM_VALUE"] = 1003;
        values[valuesById[1004] = "ERROR_DECRYPT"] = 1004;
        values[valuesById[1005] = "ERROR_ENCRYPT"] = 1005;
        values[valuesById[1006] = "ERROR_DATA_EXPIRATION"] = 1006;
        values[valuesById[1100] = "ERROR_SERVER_STATUS"] = 1100;
        values[valuesById[1101] = "ERROR_ROLE_NOT_FOUND_IN_DB"] = 1101;
        values[valuesById[1102] = "ERROR_ROLE_NOT_IN_THIS_GAME"] = 1102;
        values[valuesById[1103] = "ERROR_SERVER_BUSY"] = 1103;
        values[valuesById[10000] = "ERROR_ROLE_NOT_LOGIN"] = 10000;
        values[valuesById[10001] = "ERROR_ROLE_OFFLINE"] = 10001;
        values[valuesById[10002] = "ERROR_ROLE_ACTION_LIMIT"] = 10002;
        values[valuesById[10003] = "ERROR_ROLE_BATTLE"] = 10003;
        values[valuesById[10004] = "ERROR_ROLE_FREQUENT_OPERATION"] = 10004;
        values[valuesById[10100] = "ERROR_PLAN_CONFIG"] = 10100;
        values[valuesById[10101] = "ERROR_DIAMOND_NOT_ENOUGH"] = 10101;
        values[valuesById[10102] = "ERROR_MATERIAL_NOT_ENOUGH"] = 10102;
        values[valuesById[10103] = "ERROR_NOT_ILLEGAL_NAME"] = 10103;
        values[valuesById[10104] = "ERROR_STORY_DATA_TOO_LONG"] = 10104;
        values[valuesById[10105] = "ERROR_GM_CONDITIONS_NOT_MET"] = 10105;
        values[valuesById[10200] = "ERROR_ROLE_NICKNAME_TOO_LONG"] = 10200;
        values[valuesById[10300] = "ERROR_ROOM_NOT_FOUND"] = 10300;
        values[valuesById[10301] = "ERROR_MATCHING"] = 10301;
        values[valuesById[10302] = "ERROR_NOT_MATCHING"] = 10302;
        values[valuesById[10303] = "ERROR_ROOM_NOT_QUIT"] = 10303;
        values[valuesById[10304] = "ERROR_ROOM_NOT_FIGHT"] = 10304;
        values[valuesById[10305] = "ERROR_ROOM_END"] = 10305;
        values[valuesById[10306] = "ERROR_ROOM_NOT_START_FIGHT"] = 10306;
        values[valuesById[10307] = "ERROR_ROOM_NOT_WATCH"] = 10307;
        values[valuesById[10308] = "ERROR_ROOM_WATCH_NUM_LIMIT"] = 10308;
        values[valuesById[10400] = "ERROR_DECK_NOT_EXIST"] = 10400;
        values[valuesById[10401] = "ERROR_DECK_ILLEGAL_NAME"] = 10401;
        values[valuesById[10402] = "ERROR_DECK_NUM_LIMIT"] = 10402;
        values[valuesById[10403] = "ERROR_DECK_SAME_CARD_NUM_LIMIT"] = 10403;
        values[valuesById[10404] = "ERROR_DECK_PARTS_NOT_EXIST"] = 10404;
        values[valuesById[10405] = "ERROR_DECK_CARD_NUM_NOT_ENOUGH"] = 10405;
        values[valuesById[10406] = "ERROR_DECK_PARTS_EXIST"] = 10406;
        values[valuesById[10500] = "ERROR_REWARD_CFG_NOT_FOUND"] = 10500;
        values[valuesById[10600] = "ERROR_CARD_NOT_EXIST"] = 10600;
        values[valuesById[10601] = "ERROR_CARD_NUM_NOT_ENOUGH"] = 10601;
        values[valuesById[10700] = "ERROR_ITEM_NOT_ENOUGH"] = 10700;
        values[valuesById[10701] = "ERROR_ITEM_CFG_NOT_FOUND"] = 10701;
        values[valuesById[10702] = "ERROR_ITEM_NO_USE"] = 10702;
        values[valuesById[10703] = "ERROR_ITEM_NOT_BATCH_USE"] = 10703;
        values[valuesById[10800] = "ERROR_SHOP_NOT_FOUND"] = 10800;
        values[valuesById[10801] = "ERROR_SHOP_BUY_NUM_IS_MAX"] = 10801;
        values[valuesById[10802] = "ERROR_SHOP_NO_GOODS_SHELVES"] = 10802;
        values[valuesById[10900] = "ERROR_CARD_BAG_NOT_EXIST"] = 10900;
        values[valuesById[10901] = "ERROR_CARD_BAG_NO_ACTIVATE"] = 10901;
        values[valuesById[10902] = "ERROR_CARD_BAG_EXPIRE"] = 10902;
        values[valuesById[10903] = "ERROR_CARD_BAG_BUY_MAX_LIMIT"] = 10903;
        values[valuesById[11000] = "ERROR_MAIL_NOT_FOUND"] = 11000;
        values[valuesById[11001] = "ERROR_MAIL_CFG_NOT_FOUND"] = 11001;
        values[valuesById[11002] = "ERROR_MAIL_NOT_DEL"] = 11002;
        values[valuesById[11003] = "ERROR_MAIL_NOT_SHARE"] = 11003;
        values[valuesById[11004] = "ERROR_MAIL_NOT_COLLECT"] = 11004;
        values[valuesById[11005] = "ERROR_MAIL_NOT_COLLECT_STATUS"] = 11005;
        values[valuesById[11006] = "ERROR_MAIL_COLLECT_STATUS"] = 11006;
        values[valuesById[11007] = "ERROR_MAIL_UN_RECEIVE_ATTACH"] = 11007;
        values[valuesById[11008] = "ERROR_MAIL_UNREAD"] = 11008;
        values[valuesById[11009] = "ERROR_MAIL_NO_UNREAD_STATUS"] = 11009;
        values[valuesById[11010] = "ERROR_MAIL_RECEIVE_ATTACH_STATUS"] = 11010;
        values[valuesById[11011] = "ERROR_MAIL_NO_ATTACH"] = 11011;
        values[valuesById[11012] = "ERROR_MAIL_SEND_FAIL"] = 11012;
        values[valuesById[11013] = "ERROR_MAIL_NOT_ONE_KEY_DEL_FAVORITE"] = 11013;
        values[valuesById[11014] = "ERROR_MAIL_NOT_RECEIVE_ATTACH_CARD_LIMIT"] = 11014;
        values[valuesById[11015] = "ERROR_MAIL_NOT_RECEIVE_ATTACH_NUM_LIMIT"] = 11015;
        values[valuesById[11016] = "ERROR_MAIL_NOT_RECEIVE_ATTACH_DIGIMON_LIMIT"] = 11016;
        values[valuesById[11100] = "ERROR_FRIEND_SEARCH_ROLE_NOT_EXIST"] = 11100;
        values[valuesById[11101] = "ERROR_FRIEND_SEARCH_INVALID_NAME"] = 11101;
        values[valuesById[11102] = "ERROR_FRIEND_NOT_EXIST"] = 11102;
        values[valuesById[11103] = "ERROR_FRIEND_EXIST"] = 11103;
        values[valuesById[11104] = "ERROR_FRIEND_APPLY_NOT_REPEAT"] = 11104;
        values[valuesById[11105] = "ERROR_FRIEND_BE_APPLY"] = 11105;
        values[valuesById[11106] = "ERROR_FRIEND_APPLY_NOT_SELF"] = 11106;
        values[valuesById[11107] = "ERROR_FRIEND_APPLY_NOT_CANCEL"] = 11107;
        values[valuesById[11108] = "ERROR_FRIEND_APPLY_INVALID"] = 11108;
        values[valuesById[11109] = "ERROR_FRIEND_APPLY_NOT_AGREE_REFUSE"] = 11109;
        values[valuesById[11110] = "ERROR_FRIEND_MEMBER_LIMIT"] = 11110;
        values[valuesById[11111] = "ERROR_FRIEND_APPLY_LIMIT"] = 11111;
        values[valuesById[11112] = "ERROR_FRIEND_APPLY_MEMBER_LIMIT"] = 11112;
        values[valuesById[11300] = "ERROR_PVP_INVITE_STATUS_ERR"] = 11300;
        values[valuesById[11301] = "ERROR_PVP_INVITE_NOT_MANY_TIMES"] = 11301;
        values[valuesById[11302] = "ERROR_PVP_INVITE_BE_APPLY"] = 11302;
        values[valuesById[11303] = "ERROR_PVP_INVITE_EXPIRE"] = 11303;
        values[valuesById[11304] = "ERROR_PVP_INVITE_FAIL_BATTLE"] = 11304;
        values[valuesById[11305] = "ERROR_PVP_INVITE_NOT_REPEAT"] = 11305;
        values[valuesById[11306] = "ERROR_PVP_INVITE_NO_ACCESS"] = 11306;
        values[valuesById[11400] = "ERROR_PVP_ROOM_NUM_LIMIT"] = 11400;
        values[valuesById[11401] = "ERROR_PVP_ROOM_HAVE_CREATE"] = 11401;
        values[valuesById[11402] = "ERROR_PVP_ROOM_NOT_EXIST"] = 11402;
        values[valuesById[11403] = "ERROR_PVP_ROOM_NO_ACCESS"] = 11403;
        values[valuesById[11404] = "ERROR_PVP_ROOM_NOT_MODIFY"] = 11404;
        values[valuesById[11405] = "ERROR_PVP_ROOM_JOIN_NUM_FULL"] = 11405;
        values[valuesById[11406] = "ERROR_PVP_ROOM_JOIN_NO_ACCESS"] = 11406;
        values[valuesById[11407] = "ERROR_PVP_ROOM_JOIN_NOT_REPEAT"] = 11407;
        values[valuesById[11408] = "ERROR_PVP_ROOM_MATCH"] = 11408;
        values[valuesById[11409] = "ERROR_PVP_ROOM_BEGIN_RACE"] = 11409;
        values[valuesById[11410] = "ERROR_PVP_ROOM_RACE_MISS"] = 11410;
        values[valuesById[11411] = "ERROR_PVP_ROOM_NOT_RACE"] = 11411;
        values[valuesById[11412] = "ERROR_PVP_ROOM_NOT_JOIN_RACE"] = 11412;
        values[valuesById[11413] = "ERROR_PVP_ROOM_NOT_QUIT_RACE"] = 11413;
        values[valuesById[11414] = "ERROR_PVP_ROOM_HAVE_JOIN"] = 11414;
        values[valuesById[11415] = "ERROR_PVP_ROOM_CREATE_CD"] = 11415;
        values[valuesById[11500] = "ERROR_PERSONAL_ROOM_STATUS_ERR"] = 11500;
        values[valuesById[11501] = "ERROR_PERSONAL_ROOM_NOT_EXIST"] = 11501;
        values[valuesById[11502] = "ERROR_PERSONAL_ROOM_JOIN_NUM_FULL"] = 11502;
        values[valuesById[11503] = "ERROR_PERSONAL_ROOM_QUIT"] = 11503;
        values[valuesById[11504] = "ERROR_PERSONAL_ROOM_NOT_BATTLE"] = 11504;
        values[valuesById[11505] = "ERROR_PERSONAL_ROOM_CREATE_CD"] = 11505;
        values[valuesById[11506] = "ERROR_PERSONAL_ROOM_NOT_READY"] = 11506;
        values[valuesById[11507] = "ERROR_PERSONAL_ROOM_NO_ACCESS"] = 11507;
        values[valuesById[11600] = "ERROR_TASK_NOT_FOUND"] = 11600;
        values[valuesById[11601] = "ERROR_TASK_NOT_FINISH"] = 11601;
        values[valuesById[11602] = "ERROR_TASK_REWARD_HAS_GOT"] = 11602;
        values[valuesById[11603] = "ERROR_TASK_IS_EXIST"] = 11603;
        values[valuesById[11604] = "ERROR_TASK_CFG_NOT_FOUND"] = 11604;
        values[valuesById[11605] = "ERROR_TASK_POINTS_NOT_ENOUGH"] = 11605;
        values[valuesById[11606] = "ERROR_TASK_BOX_REWARD_HAS_GOT"] = 11606;
        values[valuesById[11607] = "ERROR_TASK_REFRESH_LIMIT"] = 11607;
        values[valuesById[11608] = "ERROR_TASK_NO_REWARD"] = 11608;
        values[valuesById[11700] = "ERROR_STORY_CFG_NOT_FOUND"] = 11700;
        values[valuesById[11701] = "ERROR_STORY_NOT_FINISH"] = 11701;
        values[valuesById[11702] = "ERROR_STORY_STAGE_FINISH"] = 11702;
        values[valuesById[11703] = "ERROR_STORY_REWARD"] = 11703;
        values[valuesById[11800] = "ERROR_DIGIMON_CFG_NOT_FOUND"] = 11800;
        values[valuesById[11801] = "ERROR_DIGIMON_SAME_NOT_TRAIN"] = 11801;
        values[valuesById[11802] = "ERROR_DIGIMON_NOT_EVO"] = 11802;
        values[valuesById[11803] = "ERROR_DIGIMON_LEVEL_LIMIT"] = 11803;
        values[valuesById[11900] = "ERROR_BAG_LIMIT_DIGIMON"] = 11900;
        values[valuesById[12000] = "ERROR_RANKED_PHASE_REWARD"] = 12000;
        values[valuesById[12001] = "ERROR_RANKED_SEASON_END"] = 12001;
        return values;
    })();

    DcgProto.Req_DigimonTrain = (function() {

        /**
         * Properties of a Req_DigimonTrain.
         * @memberof DcgProto
         * @interface IReq_DigimonTrain
         * @property {Long|null} [DigimonIID] Req_DigimonTrain DigimonIID
         */

        /**
         * Constructs a new Req_DigimonTrain.
         * @memberof DcgProto
         * @classdesc Represents a Req_DigimonTrain.
         * @implements IReq_DigimonTrain
         * @constructor
         * @param {DcgProto.IReq_DigimonTrain=} [p] Properties to set
         */
        function Req_DigimonTrain(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_DigimonTrain DigimonIID.
         * @member {Long} DigimonIID
         * @memberof DcgProto.Req_DigimonTrain
         * @instance
         */
        Req_DigimonTrain.prototype.DigimonIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_DigimonTrain instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_DigimonTrain
         * @static
         * @param {DcgProto.IReq_DigimonTrain=} [properties] Properties to set
         * @returns {DcgProto.Req_DigimonTrain} Req_DigimonTrain instance
         */
        Req_DigimonTrain.create = function create(properties) {
            return new Req_DigimonTrain(properties);
        };

        /**
         * Encodes the specified Req_DigimonTrain message. Does not implicitly {@link DcgProto.Req_DigimonTrain.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_DigimonTrain
         * @static
         * @param {DcgProto.IReq_DigimonTrain} m Req_DigimonTrain message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_DigimonTrain.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DigimonIID != null && Object.hasOwnProperty.call(m, "DigimonIID"))
                w.uint32(8).int64(m.DigimonIID);
            return w;
        };

        /**
         * Decodes a Req_DigimonTrain message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_DigimonTrain
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_DigimonTrain} Req_DigimonTrain
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_DigimonTrain.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_DigimonTrain();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DigimonIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_DigimonTrain message.
         * @function verify
         * @memberof DcgProto.Req_DigimonTrain
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_DigimonTrain.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.DigimonIID != null && m.hasOwnProperty("DigimonIID")) {
                if (!$util.isInteger(m.DigimonIID) && !(m.DigimonIID && $util.isInteger(m.DigimonIID.low) && $util.isInteger(m.DigimonIID.high)))
                    return "DigimonIID: integer|Long expected";
            }
            return null;
        };

        return Req_DigimonTrain;
    })();

    DcgProto.Resp_DigimonTrain = (function() {

        /**
         * Properties of a Resp_DigimonTrain.
         * @memberof DcgProto
         * @interface IResp_DigimonTrain
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_DigimonTrain ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_DigimonTrain Cmn
         */

        /**
         * Constructs a new Resp_DigimonTrain.
         * @memberof DcgProto
         * @classdesc Represents a Resp_DigimonTrain.
         * @implements IResp_DigimonTrain
         * @constructor
         * @param {DcgProto.IResp_DigimonTrain=} [p] Properties to set
         */
        function Resp_DigimonTrain(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_DigimonTrain ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_DigimonTrain
         * @instance
         */
        Resp_DigimonTrain.prototype.ErrorCode = 0;

        /**
         * Resp_DigimonTrain Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_DigimonTrain
         * @instance
         */
        Resp_DigimonTrain.prototype.Cmn = null;

        /**
         * Creates a new Resp_DigimonTrain instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_DigimonTrain
         * @static
         * @param {DcgProto.IResp_DigimonTrain=} [properties] Properties to set
         * @returns {DcgProto.Resp_DigimonTrain} Resp_DigimonTrain instance
         */
        Resp_DigimonTrain.create = function create(properties) {
            return new Resp_DigimonTrain(properties);
        };

        /**
         * Encodes the specified Resp_DigimonTrain message. Does not implicitly {@link DcgProto.Resp_DigimonTrain.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_DigimonTrain
         * @static
         * @param {DcgProto.IResp_DigimonTrain} m Resp_DigimonTrain message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_DigimonTrain.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_DigimonTrain message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_DigimonTrain
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_DigimonTrain} Resp_DigimonTrain
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_DigimonTrain.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_DigimonTrain();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_DigimonTrain message.
         * @function verify
         * @memberof DcgProto.Resp_DigimonTrain
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_DigimonTrain.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_DigimonTrain;
    })();

    DcgProto.Req_DigimonEvo = (function() {

        /**
         * Properties of a Req_DigimonEvo.
         * @memberof DcgProto
         * @interface IReq_DigimonEvo
         */

        /**
         * Constructs a new Req_DigimonEvo.
         * @memberof DcgProto
         * @classdesc Represents a Req_DigimonEvo.
         * @implements IReq_DigimonEvo
         * @constructor
         * @param {DcgProto.IReq_DigimonEvo=} [p] Properties to set
         */
        function Req_DigimonEvo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Req_DigimonEvo instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_DigimonEvo
         * @static
         * @param {DcgProto.IReq_DigimonEvo=} [properties] Properties to set
         * @returns {DcgProto.Req_DigimonEvo} Req_DigimonEvo instance
         */
        Req_DigimonEvo.create = function create(properties) {
            return new Req_DigimonEvo(properties);
        };

        /**
         * Encodes the specified Req_DigimonEvo message. Does not implicitly {@link DcgProto.Req_DigimonEvo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_DigimonEvo
         * @static
         * @param {DcgProto.IReq_DigimonEvo} m Req_DigimonEvo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_DigimonEvo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Req_DigimonEvo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_DigimonEvo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_DigimonEvo} Req_DigimonEvo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_DigimonEvo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_DigimonEvo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_DigimonEvo message.
         * @function verify
         * @memberof DcgProto.Req_DigimonEvo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_DigimonEvo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Req_DigimonEvo;
    })();

    DcgProto.Resp_DigimonEvo = (function() {

        /**
         * Properties of a Resp_DigimonEvo.
         * @memberof DcgProto
         * @interface IResp_DigimonEvo
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_DigimonEvo ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_DigimonEvo Cmn
         */

        /**
         * Constructs a new Resp_DigimonEvo.
         * @memberof DcgProto
         * @classdesc Represents a Resp_DigimonEvo.
         * @implements IResp_DigimonEvo
         * @constructor
         * @param {DcgProto.IResp_DigimonEvo=} [p] Properties to set
         */
        function Resp_DigimonEvo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_DigimonEvo ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_DigimonEvo
         * @instance
         */
        Resp_DigimonEvo.prototype.ErrorCode = 0;

        /**
         * Resp_DigimonEvo Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_DigimonEvo
         * @instance
         */
        Resp_DigimonEvo.prototype.Cmn = null;

        /**
         * Creates a new Resp_DigimonEvo instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_DigimonEvo
         * @static
         * @param {DcgProto.IResp_DigimonEvo=} [properties] Properties to set
         * @returns {DcgProto.Resp_DigimonEvo} Resp_DigimonEvo instance
         */
        Resp_DigimonEvo.create = function create(properties) {
            return new Resp_DigimonEvo(properties);
        };

        /**
         * Encodes the specified Resp_DigimonEvo message. Does not implicitly {@link DcgProto.Resp_DigimonEvo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_DigimonEvo
         * @static
         * @param {DcgProto.IResp_DigimonEvo} m Resp_DigimonEvo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_DigimonEvo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_DigimonEvo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_DigimonEvo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_DigimonEvo} Resp_DigimonEvo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_DigimonEvo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_DigimonEvo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_DigimonEvo message.
         * @function verify
         * @memberof DcgProto.Resp_DigimonEvo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_DigimonEvo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_DigimonEvo;
    })();

    DcgProto.Req_DigimonExchange = (function() {

        /**
         * Properties of a Req_DigimonExchange.
         * @memberof DcgProto
         * @interface IReq_DigimonExchange
         * @property {Long|null} [DigimonIID] Req_DigimonExchange DigimonIID
         * @property {number|null} [CfgId] Req_DigimonExchange CfgId
         */

        /**
         * Constructs a new Req_DigimonExchange.
         * @memberof DcgProto
         * @classdesc Represents a Req_DigimonExchange.
         * @implements IReq_DigimonExchange
         * @constructor
         * @param {DcgProto.IReq_DigimonExchange=} [p] Properties to set
         */
        function Req_DigimonExchange(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_DigimonExchange DigimonIID.
         * @member {Long} DigimonIID
         * @memberof DcgProto.Req_DigimonExchange
         * @instance
         */
        Req_DigimonExchange.prototype.DigimonIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_DigimonExchange CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.Req_DigimonExchange
         * @instance
         */
        Req_DigimonExchange.prototype.CfgId = 0;

        /**
         * Creates a new Req_DigimonExchange instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_DigimonExchange
         * @static
         * @param {DcgProto.IReq_DigimonExchange=} [properties] Properties to set
         * @returns {DcgProto.Req_DigimonExchange} Req_DigimonExchange instance
         */
        Req_DigimonExchange.create = function create(properties) {
            return new Req_DigimonExchange(properties);
        };

        /**
         * Encodes the specified Req_DigimonExchange message. Does not implicitly {@link DcgProto.Req_DigimonExchange.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_DigimonExchange
         * @static
         * @param {DcgProto.IReq_DigimonExchange} m Req_DigimonExchange message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_DigimonExchange.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DigimonIID != null && Object.hasOwnProperty.call(m, "DigimonIID"))
                w.uint32(8).int64(m.DigimonIID);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            return w;
        };

        /**
         * Decodes a Req_DigimonExchange message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_DigimonExchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_DigimonExchange} Req_DigimonExchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_DigimonExchange.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_DigimonExchange();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DigimonIID = r.int64();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_DigimonExchange message.
         * @function verify
         * @memberof DcgProto.Req_DigimonExchange
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_DigimonExchange.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.DigimonIID != null && m.hasOwnProperty("DigimonIID")) {
                if (!$util.isInteger(m.DigimonIID) && !(m.DigimonIID && $util.isInteger(m.DigimonIID.low) && $util.isInteger(m.DigimonIID.high)))
                    return "DigimonIID: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            return null;
        };

        return Req_DigimonExchange;
    })();

    DcgProto.Resp_DigimonExchange = (function() {

        /**
         * Properties of a Resp_DigimonExchange.
         * @memberof DcgProto
         * @interface IResp_DigimonExchange
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_DigimonExchange ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_DigimonExchange Cmn
         */

        /**
         * Constructs a new Resp_DigimonExchange.
         * @memberof DcgProto
         * @classdesc Represents a Resp_DigimonExchange.
         * @implements IResp_DigimonExchange
         * @constructor
         * @param {DcgProto.IResp_DigimonExchange=} [p] Properties to set
         */
        function Resp_DigimonExchange(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_DigimonExchange ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_DigimonExchange
         * @instance
         */
        Resp_DigimonExchange.prototype.ErrorCode = 0;

        /**
         * Resp_DigimonExchange Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_DigimonExchange
         * @instance
         */
        Resp_DigimonExchange.prototype.Cmn = null;

        /**
         * Creates a new Resp_DigimonExchange instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_DigimonExchange
         * @static
         * @param {DcgProto.IResp_DigimonExchange=} [properties] Properties to set
         * @returns {DcgProto.Resp_DigimonExchange} Resp_DigimonExchange instance
         */
        Resp_DigimonExchange.create = function create(properties) {
            return new Resp_DigimonExchange(properties);
        };

        /**
         * Encodes the specified Resp_DigimonExchange message. Does not implicitly {@link DcgProto.Resp_DigimonExchange.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_DigimonExchange
         * @static
         * @param {DcgProto.IResp_DigimonExchange} m Resp_DigimonExchange message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_DigimonExchange.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_DigimonExchange message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_DigimonExchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_DigimonExchange} Resp_DigimonExchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_DigimonExchange.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_DigimonExchange();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_DigimonExchange message.
         * @function verify
         * @memberof DcgProto.Resp_DigimonExchange
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_DigimonExchange.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_DigimonExchange;
    })();

    DcgProto.Req_DigimonLogs = (function() {

        /**
         * Properties of a Req_DigimonLogs.
         * @memberof DcgProto
         * @interface IReq_DigimonLogs
         */

        /**
         * Constructs a new Req_DigimonLogs.
         * @memberof DcgProto
         * @classdesc Represents a Req_DigimonLogs.
         * @implements IReq_DigimonLogs
         * @constructor
         * @param {DcgProto.IReq_DigimonLogs=} [p] Properties to set
         */
        function Req_DigimonLogs(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Req_DigimonLogs instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_DigimonLogs
         * @static
         * @param {DcgProto.IReq_DigimonLogs=} [properties] Properties to set
         * @returns {DcgProto.Req_DigimonLogs} Req_DigimonLogs instance
         */
        Req_DigimonLogs.create = function create(properties) {
            return new Req_DigimonLogs(properties);
        };

        /**
         * Encodes the specified Req_DigimonLogs message. Does not implicitly {@link DcgProto.Req_DigimonLogs.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_DigimonLogs
         * @static
         * @param {DcgProto.IReq_DigimonLogs} m Req_DigimonLogs message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_DigimonLogs.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Req_DigimonLogs message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_DigimonLogs
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_DigimonLogs} Req_DigimonLogs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_DigimonLogs.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_DigimonLogs();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_DigimonLogs message.
         * @function verify
         * @memberof DcgProto.Req_DigimonLogs
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_DigimonLogs.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Req_DigimonLogs;
    })();

    DcgProto.Resp_DigimonLogs = (function() {

        /**
         * Properties of a Resp_DigimonLogs.
         * @memberof DcgProto
         * @interface IResp_DigimonLogs
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_DigimonLogs ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_DigimonLogs Cmn
         * @property {Array.<DcgProto.IS_DigimonLogs>|null} [Logs] Resp_DigimonLogs Logs
         */

        /**
         * Constructs a new Resp_DigimonLogs.
         * @memberof DcgProto
         * @classdesc Represents a Resp_DigimonLogs.
         * @implements IResp_DigimonLogs
         * @constructor
         * @param {DcgProto.IResp_DigimonLogs=} [p] Properties to set
         */
        function Resp_DigimonLogs(p) {
            this.Logs = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_DigimonLogs ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_DigimonLogs
         * @instance
         */
        Resp_DigimonLogs.prototype.ErrorCode = 0;

        /**
         * Resp_DigimonLogs Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_DigimonLogs
         * @instance
         */
        Resp_DigimonLogs.prototype.Cmn = null;

        /**
         * Resp_DigimonLogs Logs.
         * @member {Array.<DcgProto.IS_DigimonLogs>} Logs
         * @memberof DcgProto.Resp_DigimonLogs
         * @instance
         */
        Resp_DigimonLogs.prototype.Logs = $util.emptyArray;

        /**
         * Creates a new Resp_DigimonLogs instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_DigimonLogs
         * @static
         * @param {DcgProto.IResp_DigimonLogs=} [properties] Properties to set
         * @returns {DcgProto.Resp_DigimonLogs} Resp_DigimonLogs instance
         */
        Resp_DigimonLogs.create = function create(properties) {
            return new Resp_DigimonLogs(properties);
        };

        /**
         * Encodes the specified Resp_DigimonLogs message. Does not implicitly {@link DcgProto.Resp_DigimonLogs.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_DigimonLogs
         * @static
         * @param {DcgProto.IResp_DigimonLogs} m Resp_DigimonLogs message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_DigimonLogs.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.Logs != null && m.Logs.length) {
                for (var i = 0; i < m.Logs.length; ++i)
                    $root.DcgProto.S_DigimonLogs.encode(m.Logs[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Resp_DigimonLogs message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_DigimonLogs
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_DigimonLogs} Resp_DigimonLogs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_DigimonLogs.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_DigimonLogs();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.Logs && m.Logs.length))
                        m.Logs = [];
                    m.Logs.push($root.DcgProto.S_DigimonLogs.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_DigimonLogs message.
         * @function verify
         * @memberof DcgProto.Resp_DigimonLogs
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_DigimonLogs.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.Logs != null && m.hasOwnProperty("Logs")) {
                if (!Array.isArray(m.Logs))
                    return "Logs: array expected";
                for (var i = 0; i < m.Logs.length; ++i) {
                    {
                        var e = $root.DcgProto.S_DigimonLogs.verify(m.Logs[i]);
                        if (e)
                            return "Logs." + e;
                    }
                }
            }
            return null;
        };

        return Resp_DigimonLogs;
    })();

    DcgProto.Req_FriendList = (function() {

        /**
         * Properties of a Req_FriendList.
         * @memberof DcgProto
         * @interface IReq_FriendList
         */

        /**
         * Constructs a new Req_FriendList.
         * @memberof DcgProto
         * @classdesc Represents a Req_FriendList.
         * @implements IReq_FriendList
         * @constructor
         * @param {DcgProto.IReq_FriendList=} [p] Properties to set
         */
        function Req_FriendList(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Req_FriendList instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_FriendList
         * @static
         * @param {DcgProto.IReq_FriendList=} [properties] Properties to set
         * @returns {DcgProto.Req_FriendList} Req_FriendList instance
         */
        Req_FriendList.create = function create(properties) {
            return new Req_FriendList(properties);
        };

        /**
         * Encodes the specified Req_FriendList message. Does not implicitly {@link DcgProto.Req_FriendList.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_FriendList
         * @static
         * @param {DcgProto.IReq_FriendList} m Req_FriendList message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_FriendList.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Req_FriendList message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_FriendList
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_FriendList} Req_FriendList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_FriendList.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_FriendList();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_FriendList message.
         * @function verify
         * @memberof DcgProto.Req_FriendList
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_FriendList.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Req_FriendList;
    })();

    DcgProto.Resp_FriendList = (function() {

        /**
         * Properties of a Resp_FriendList.
         * @memberof DcgProto
         * @interface IResp_FriendList
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_FriendList ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_FriendList Cmn
         */

        /**
         * Constructs a new Resp_FriendList.
         * @memberof DcgProto
         * @classdesc Represents a Resp_FriendList.
         * @implements IResp_FriendList
         * @constructor
         * @param {DcgProto.IResp_FriendList=} [p] Properties to set
         */
        function Resp_FriendList(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_FriendList ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_FriendList
         * @instance
         */
        Resp_FriendList.prototype.ErrorCode = 0;

        /**
         * Resp_FriendList Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_FriendList
         * @instance
         */
        Resp_FriendList.prototype.Cmn = null;

        /**
         * Creates a new Resp_FriendList instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_FriendList
         * @static
         * @param {DcgProto.IResp_FriendList=} [properties] Properties to set
         * @returns {DcgProto.Resp_FriendList} Resp_FriendList instance
         */
        Resp_FriendList.create = function create(properties) {
            return new Resp_FriendList(properties);
        };

        /**
         * Encodes the specified Resp_FriendList message. Does not implicitly {@link DcgProto.Resp_FriendList.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_FriendList
         * @static
         * @param {DcgProto.IResp_FriendList} m Resp_FriendList message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_FriendList.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_FriendList message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_FriendList
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_FriendList} Resp_FriendList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_FriendList.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_FriendList();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_FriendList message.
         * @function verify
         * @memberof DcgProto.Resp_FriendList
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_FriendList.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_FriendList;
    })();

    DcgProto.Req_FriendApply = (function() {

        /**
         * Properties of a Req_FriendApply.
         * @memberof DcgProto
         * @interface IReq_FriendApply
         * @property {Long|null} [RoleIID] Req_FriendApply RoleIID
         */

        /**
         * Constructs a new Req_FriendApply.
         * @memberof DcgProto
         * @classdesc Represents a Req_FriendApply.
         * @implements IReq_FriendApply
         * @constructor
         * @param {DcgProto.IReq_FriendApply=} [p] Properties to set
         */
        function Req_FriendApply(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_FriendApply RoleIID.
         * @member {Long} RoleIID
         * @memberof DcgProto.Req_FriendApply
         * @instance
         */
        Req_FriendApply.prototype.RoleIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_FriendApply instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_FriendApply
         * @static
         * @param {DcgProto.IReq_FriendApply=} [properties] Properties to set
         * @returns {DcgProto.Req_FriendApply} Req_FriendApply instance
         */
        Req_FriendApply.create = function create(properties) {
            return new Req_FriendApply(properties);
        };

        /**
         * Encodes the specified Req_FriendApply message. Does not implicitly {@link DcgProto.Req_FriendApply.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_FriendApply
         * @static
         * @param {DcgProto.IReq_FriendApply} m Req_FriendApply message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_FriendApply.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoleIID != null && Object.hasOwnProperty.call(m, "RoleIID"))
                w.uint32(8).int64(m.RoleIID);
            return w;
        };

        /**
         * Decodes a Req_FriendApply message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_FriendApply
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_FriendApply} Req_FriendApply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_FriendApply.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_FriendApply();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoleIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_FriendApply message.
         * @function verify
         * @memberof DcgProto.Req_FriendApply
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_FriendApply.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoleIID != null && m.hasOwnProperty("RoleIID")) {
                if (!$util.isInteger(m.RoleIID) && !(m.RoleIID && $util.isInteger(m.RoleIID.low) && $util.isInteger(m.RoleIID.high)))
                    return "RoleIID: integer|Long expected";
            }
            return null;
        };

        return Req_FriendApply;
    })();

    DcgProto.Resp_FriendApply = (function() {

        /**
         * Properties of a Resp_FriendApply.
         * @memberof DcgProto
         * @interface IResp_FriendApply
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_FriendApply ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_FriendApply Cmn
         */

        /**
         * Constructs a new Resp_FriendApply.
         * @memberof DcgProto
         * @classdesc Represents a Resp_FriendApply.
         * @implements IResp_FriendApply
         * @constructor
         * @param {DcgProto.IResp_FriendApply=} [p] Properties to set
         */
        function Resp_FriendApply(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_FriendApply ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_FriendApply
         * @instance
         */
        Resp_FriendApply.prototype.ErrorCode = 0;

        /**
         * Resp_FriendApply Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_FriendApply
         * @instance
         */
        Resp_FriendApply.prototype.Cmn = null;

        /**
         * Creates a new Resp_FriendApply instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_FriendApply
         * @static
         * @param {DcgProto.IResp_FriendApply=} [properties] Properties to set
         * @returns {DcgProto.Resp_FriendApply} Resp_FriendApply instance
         */
        Resp_FriendApply.create = function create(properties) {
            return new Resp_FriendApply(properties);
        };

        /**
         * Encodes the specified Resp_FriendApply message. Does not implicitly {@link DcgProto.Resp_FriendApply.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_FriendApply
         * @static
         * @param {DcgProto.IResp_FriendApply} m Resp_FriendApply message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_FriendApply.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_FriendApply message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_FriendApply
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_FriendApply} Resp_FriendApply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_FriendApply.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_FriendApply();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_FriendApply message.
         * @function verify
         * @memberof DcgProto.Resp_FriendApply
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_FriendApply.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_FriendApply;
    })();

    DcgProto.Push_FriendApply = (function() {

        /**
         * Properties of a Push_FriendApply.
         * @memberof DcgProto
         * @interface IPush_FriendApply
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Push_FriendApply Cmn
         */

        /**
         * Constructs a new Push_FriendApply.
         * @memberof DcgProto
         * @classdesc Represents a Push_FriendApply.
         * @implements IPush_FriendApply
         * @constructor
         * @param {DcgProto.IPush_FriendApply=} [p] Properties to set
         */
        function Push_FriendApply(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Push_FriendApply Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Push_FriendApply
         * @instance
         */
        Push_FriendApply.prototype.Cmn = null;

        /**
         * Creates a new Push_FriendApply instance using the specified properties.
         * @function create
         * @memberof DcgProto.Push_FriendApply
         * @static
         * @param {DcgProto.IPush_FriendApply=} [properties] Properties to set
         * @returns {DcgProto.Push_FriendApply} Push_FriendApply instance
         */
        Push_FriendApply.create = function create(properties) {
            return new Push_FriendApply(properties);
        };

        /**
         * Encodes the specified Push_FriendApply message. Does not implicitly {@link DcgProto.Push_FriendApply.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Push_FriendApply
         * @static
         * @param {DcgProto.IPush_FriendApply} m Push_FriendApply message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Push_FriendApply.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Push_FriendApply message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Push_FriendApply
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Push_FriendApply} Push_FriendApply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Push_FriendApply.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Push_FriendApply();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Push_FriendApply message.
         * @function verify
         * @memberof DcgProto.Push_FriendApply
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Push_FriendApply.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Push_FriendApply;
    })();

    DcgProto.Req_FriendApplyCancel = (function() {

        /**
         * Properties of a Req_FriendApplyCancel.
         * @memberof DcgProto
         * @interface IReq_FriendApplyCancel
         * @property {Long|null} [ApplyIID] Req_FriendApplyCancel ApplyIID
         */

        /**
         * Constructs a new Req_FriendApplyCancel.
         * @memberof DcgProto
         * @classdesc Represents a Req_FriendApplyCancel.
         * @implements IReq_FriendApplyCancel
         * @constructor
         * @param {DcgProto.IReq_FriendApplyCancel=} [p] Properties to set
         */
        function Req_FriendApplyCancel(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_FriendApplyCancel ApplyIID.
         * @member {Long} ApplyIID
         * @memberof DcgProto.Req_FriendApplyCancel
         * @instance
         */
        Req_FriendApplyCancel.prototype.ApplyIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_FriendApplyCancel instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_FriendApplyCancel
         * @static
         * @param {DcgProto.IReq_FriendApplyCancel=} [properties] Properties to set
         * @returns {DcgProto.Req_FriendApplyCancel} Req_FriendApplyCancel instance
         */
        Req_FriendApplyCancel.create = function create(properties) {
            return new Req_FriendApplyCancel(properties);
        };

        /**
         * Encodes the specified Req_FriendApplyCancel message. Does not implicitly {@link DcgProto.Req_FriendApplyCancel.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_FriendApplyCancel
         * @static
         * @param {DcgProto.IReq_FriendApplyCancel} m Req_FriendApplyCancel message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_FriendApplyCancel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ApplyIID != null && Object.hasOwnProperty.call(m, "ApplyIID"))
                w.uint32(8).int64(m.ApplyIID);
            return w;
        };

        /**
         * Decodes a Req_FriendApplyCancel message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_FriendApplyCancel
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_FriendApplyCancel} Req_FriendApplyCancel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_FriendApplyCancel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_FriendApplyCancel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ApplyIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_FriendApplyCancel message.
         * @function verify
         * @memberof DcgProto.Req_FriendApplyCancel
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_FriendApplyCancel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ApplyIID != null && m.hasOwnProperty("ApplyIID")) {
                if (!$util.isInteger(m.ApplyIID) && !(m.ApplyIID && $util.isInteger(m.ApplyIID.low) && $util.isInteger(m.ApplyIID.high)))
                    return "ApplyIID: integer|Long expected";
            }
            return null;
        };

        return Req_FriendApplyCancel;
    })();

    DcgProto.Resp_FriendApplyCancel = (function() {

        /**
         * Properties of a Resp_FriendApplyCancel.
         * @memberof DcgProto
         * @interface IResp_FriendApplyCancel
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_FriendApplyCancel ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_FriendApplyCancel Cmn
         */

        /**
         * Constructs a new Resp_FriendApplyCancel.
         * @memberof DcgProto
         * @classdesc Represents a Resp_FriendApplyCancel.
         * @implements IResp_FriendApplyCancel
         * @constructor
         * @param {DcgProto.IResp_FriendApplyCancel=} [p] Properties to set
         */
        function Resp_FriendApplyCancel(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_FriendApplyCancel ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_FriendApplyCancel
         * @instance
         */
        Resp_FriendApplyCancel.prototype.ErrorCode = 0;

        /**
         * Resp_FriendApplyCancel Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_FriendApplyCancel
         * @instance
         */
        Resp_FriendApplyCancel.prototype.Cmn = null;

        /**
         * Creates a new Resp_FriendApplyCancel instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_FriendApplyCancel
         * @static
         * @param {DcgProto.IResp_FriendApplyCancel=} [properties] Properties to set
         * @returns {DcgProto.Resp_FriendApplyCancel} Resp_FriendApplyCancel instance
         */
        Resp_FriendApplyCancel.create = function create(properties) {
            return new Resp_FriendApplyCancel(properties);
        };

        /**
         * Encodes the specified Resp_FriendApplyCancel message. Does not implicitly {@link DcgProto.Resp_FriendApplyCancel.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_FriendApplyCancel
         * @static
         * @param {DcgProto.IResp_FriendApplyCancel} m Resp_FriendApplyCancel message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_FriendApplyCancel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_FriendApplyCancel message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_FriendApplyCancel
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_FriendApplyCancel} Resp_FriendApplyCancel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_FriendApplyCancel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_FriendApplyCancel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_FriendApplyCancel message.
         * @function verify
         * @memberof DcgProto.Resp_FriendApplyCancel
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_FriendApplyCancel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_FriendApplyCancel;
    })();

    DcgProto.Push_FriendApplyCancel = (function() {

        /**
         * Properties of a Push_FriendApplyCancel.
         * @memberof DcgProto
         * @interface IPush_FriendApplyCancel
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Push_FriendApplyCancel Cmn
         */

        /**
         * Constructs a new Push_FriendApplyCancel.
         * @memberof DcgProto
         * @classdesc Represents a Push_FriendApplyCancel.
         * @implements IPush_FriendApplyCancel
         * @constructor
         * @param {DcgProto.IPush_FriendApplyCancel=} [p] Properties to set
         */
        function Push_FriendApplyCancel(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Push_FriendApplyCancel Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Push_FriendApplyCancel
         * @instance
         */
        Push_FriendApplyCancel.prototype.Cmn = null;

        /**
         * Creates a new Push_FriendApplyCancel instance using the specified properties.
         * @function create
         * @memberof DcgProto.Push_FriendApplyCancel
         * @static
         * @param {DcgProto.IPush_FriendApplyCancel=} [properties] Properties to set
         * @returns {DcgProto.Push_FriendApplyCancel} Push_FriendApplyCancel instance
         */
        Push_FriendApplyCancel.create = function create(properties) {
            return new Push_FriendApplyCancel(properties);
        };

        /**
         * Encodes the specified Push_FriendApplyCancel message. Does not implicitly {@link DcgProto.Push_FriendApplyCancel.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Push_FriendApplyCancel
         * @static
         * @param {DcgProto.IPush_FriendApplyCancel} m Push_FriendApplyCancel message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Push_FriendApplyCancel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Push_FriendApplyCancel message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Push_FriendApplyCancel
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Push_FriendApplyCancel} Push_FriendApplyCancel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Push_FriendApplyCancel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Push_FriendApplyCancel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Push_FriendApplyCancel message.
         * @function verify
         * @memberof DcgProto.Push_FriendApplyCancel
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Push_FriendApplyCancel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Push_FriendApplyCancel;
    })();

    DcgProto.Req_FriendApplyAgreeOrRefuse = (function() {

        /**
         * Properties of a Req_FriendApplyAgreeOrRefuse.
         * @memberof DcgProto
         * @interface IReq_FriendApplyAgreeOrRefuse
         * @property {Long|null} [ApplyIID] Req_FriendApplyAgreeOrRefuse ApplyIID
         * @property {DcgProto.E_Ope|null} [Ope] Req_FriendApplyAgreeOrRefuse Ope
         */

        /**
         * Constructs a new Req_FriendApplyAgreeOrRefuse.
         * @memberof DcgProto
         * @classdesc Represents a Req_FriendApplyAgreeOrRefuse.
         * @implements IReq_FriendApplyAgreeOrRefuse
         * @constructor
         * @param {DcgProto.IReq_FriendApplyAgreeOrRefuse=} [p] Properties to set
         */
        function Req_FriendApplyAgreeOrRefuse(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_FriendApplyAgreeOrRefuse ApplyIID.
         * @member {Long} ApplyIID
         * @memberof DcgProto.Req_FriendApplyAgreeOrRefuse
         * @instance
         */
        Req_FriendApplyAgreeOrRefuse.prototype.ApplyIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_FriendApplyAgreeOrRefuse Ope.
         * @member {DcgProto.E_Ope} Ope
         * @memberof DcgProto.Req_FriendApplyAgreeOrRefuse
         * @instance
         */
        Req_FriendApplyAgreeOrRefuse.prototype.Ope = 0;

        /**
         * Creates a new Req_FriendApplyAgreeOrRefuse instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_FriendApplyAgreeOrRefuse
         * @static
         * @param {DcgProto.IReq_FriendApplyAgreeOrRefuse=} [properties] Properties to set
         * @returns {DcgProto.Req_FriendApplyAgreeOrRefuse} Req_FriendApplyAgreeOrRefuse instance
         */
        Req_FriendApplyAgreeOrRefuse.create = function create(properties) {
            return new Req_FriendApplyAgreeOrRefuse(properties);
        };

        /**
         * Encodes the specified Req_FriendApplyAgreeOrRefuse message. Does not implicitly {@link DcgProto.Req_FriendApplyAgreeOrRefuse.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_FriendApplyAgreeOrRefuse
         * @static
         * @param {DcgProto.IReq_FriendApplyAgreeOrRefuse} m Req_FriendApplyAgreeOrRefuse message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_FriendApplyAgreeOrRefuse.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ApplyIID != null && Object.hasOwnProperty.call(m, "ApplyIID"))
                w.uint32(8).int64(m.ApplyIID);
            if (m.Ope != null && Object.hasOwnProperty.call(m, "Ope"))
                w.uint32(16).int32(m.Ope);
            return w;
        };

        /**
         * Decodes a Req_FriendApplyAgreeOrRefuse message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_FriendApplyAgreeOrRefuse
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_FriendApplyAgreeOrRefuse} Req_FriendApplyAgreeOrRefuse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_FriendApplyAgreeOrRefuse.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_FriendApplyAgreeOrRefuse();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ApplyIID = r.int64();
                    break;
                case 2:
                    m.Ope = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_FriendApplyAgreeOrRefuse message.
         * @function verify
         * @memberof DcgProto.Req_FriendApplyAgreeOrRefuse
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_FriendApplyAgreeOrRefuse.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ApplyIID != null && m.hasOwnProperty("ApplyIID")) {
                if (!$util.isInteger(m.ApplyIID) && !(m.ApplyIID && $util.isInteger(m.ApplyIID.low) && $util.isInteger(m.ApplyIID.high)))
                    return "ApplyIID: integer|Long expected";
            }
            if (m.Ope != null && m.hasOwnProperty("Ope")) {
                switch (m.Ope) {
                default:
                    return "Ope: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            return null;
        };

        return Req_FriendApplyAgreeOrRefuse;
    })();

    DcgProto.Resp_FriendApplyAgreeOrRefuse = (function() {

        /**
         * Properties of a Resp_FriendApplyAgreeOrRefuse.
         * @memberof DcgProto
         * @interface IResp_FriendApplyAgreeOrRefuse
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_FriendApplyAgreeOrRefuse ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_FriendApplyAgreeOrRefuse Cmn
         */

        /**
         * Constructs a new Resp_FriendApplyAgreeOrRefuse.
         * @memberof DcgProto
         * @classdesc Represents a Resp_FriendApplyAgreeOrRefuse.
         * @implements IResp_FriendApplyAgreeOrRefuse
         * @constructor
         * @param {DcgProto.IResp_FriendApplyAgreeOrRefuse=} [p] Properties to set
         */
        function Resp_FriendApplyAgreeOrRefuse(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_FriendApplyAgreeOrRefuse ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_FriendApplyAgreeOrRefuse
         * @instance
         */
        Resp_FriendApplyAgreeOrRefuse.prototype.ErrorCode = 0;

        /**
         * Resp_FriendApplyAgreeOrRefuse Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_FriendApplyAgreeOrRefuse
         * @instance
         */
        Resp_FriendApplyAgreeOrRefuse.prototype.Cmn = null;

        /**
         * Creates a new Resp_FriendApplyAgreeOrRefuse instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_FriendApplyAgreeOrRefuse
         * @static
         * @param {DcgProto.IResp_FriendApplyAgreeOrRefuse=} [properties] Properties to set
         * @returns {DcgProto.Resp_FriendApplyAgreeOrRefuse} Resp_FriendApplyAgreeOrRefuse instance
         */
        Resp_FriendApplyAgreeOrRefuse.create = function create(properties) {
            return new Resp_FriendApplyAgreeOrRefuse(properties);
        };

        /**
         * Encodes the specified Resp_FriendApplyAgreeOrRefuse message. Does not implicitly {@link DcgProto.Resp_FriendApplyAgreeOrRefuse.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_FriendApplyAgreeOrRefuse
         * @static
         * @param {DcgProto.IResp_FriendApplyAgreeOrRefuse} m Resp_FriendApplyAgreeOrRefuse message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_FriendApplyAgreeOrRefuse.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_FriendApplyAgreeOrRefuse message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_FriendApplyAgreeOrRefuse
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_FriendApplyAgreeOrRefuse} Resp_FriendApplyAgreeOrRefuse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_FriendApplyAgreeOrRefuse.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_FriendApplyAgreeOrRefuse();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_FriendApplyAgreeOrRefuse message.
         * @function verify
         * @memberof DcgProto.Resp_FriendApplyAgreeOrRefuse
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_FriendApplyAgreeOrRefuse.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_FriendApplyAgreeOrRefuse;
    })();

    DcgProto.Push_FriendApplyAgreeOrRefuse = (function() {

        /**
         * Properties of a Push_FriendApplyAgreeOrRefuse.
         * @memberof DcgProto
         * @interface IPush_FriendApplyAgreeOrRefuse
         * @property {DcgProto.E_Ope|null} [Ope] Push_FriendApplyAgreeOrRefuse Ope
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Push_FriendApplyAgreeOrRefuse Cmn
         */

        /**
         * Constructs a new Push_FriendApplyAgreeOrRefuse.
         * @memberof DcgProto
         * @classdesc Represents a Push_FriendApplyAgreeOrRefuse.
         * @implements IPush_FriendApplyAgreeOrRefuse
         * @constructor
         * @param {DcgProto.IPush_FriendApplyAgreeOrRefuse=} [p] Properties to set
         */
        function Push_FriendApplyAgreeOrRefuse(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Push_FriendApplyAgreeOrRefuse Ope.
         * @member {DcgProto.E_Ope} Ope
         * @memberof DcgProto.Push_FriendApplyAgreeOrRefuse
         * @instance
         */
        Push_FriendApplyAgreeOrRefuse.prototype.Ope = 0;

        /**
         * Push_FriendApplyAgreeOrRefuse Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Push_FriendApplyAgreeOrRefuse
         * @instance
         */
        Push_FriendApplyAgreeOrRefuse.prototype.Cmn = null;

        /**
         * Creates a new Push_FriendApplyAgreeOrRefuse instance using the specified properties.
         * @function create
         * @memberof DcgProto.Push_FriendApplyAgreeOrRefuse
         * @static
         * @param {DcgProto.IPush_FriendApplyAgreeOrRefuse=} [properties] Properties to set
         * @returns {DcgProto.Push_FriendApplyAgreeOrRefuse} Push_FriendApplyAgreeOrRefuse instance
         */
        Push_FriendApplyAgreeOrRefuse.create = function create(properties) {
            return new Push_FriendApplyAgreeOrRefuse(properties);
        };

        /**
         * Encodes the specified Push_FriendApplyAgreeOrRefuse message. Does not implicitly {@link DcgProto.Push_FriendApplyAgreeOrRefuse.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Push_FriendApplyAgreeOrRefuse
         * @static
         * @param {DcgProto.IPush_FriendApplyAgreeOrRefuse} m Push_FriendApplyAgreeOrRefuse message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Push_FriendApplyAgreeOrRefuse.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Ope != null && Object.hasOwnProperty.call(m, "Ope"))
                w.uint32(8).int32(m.Ope);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Push_FriendApplyAgreeOrRefuse message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Push_FriendApplyAgreeOrRefuse
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Push_FriendApplyAgreeOrRefuse} Push_FriendApplyAgreeOrRefuse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Push_FriendApplyAgreeOrRefuse.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Push_FriendApplyAgreeOrRefuse();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Ope = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Push_FriendApplyAgreeOrRefuse message.
         * @function verify
         * @memberof DcgProto.Push_FriendApplyAgreeOrRefuse
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Push_FriendApplyAgreeOrRefuse.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Ope != null && m.hasOwnProperty("Ope")) {
                switch (m.Ope) {
                default:
                    return "Ope: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Push_FriendApplyAgreeOrRefuse;
    })();

    DcgProto.Req_FriendDelete = (function() {

        /**
         * Properties of a Req_FriendDelete.
         * @memberof DcgProto
         * @interface IReq_FriendDelete
         * @property {Long|null} [FriendIID] Req_FriendDelete FriendIID
         */

        /**
         * Constructs a new Req_FriendDelete.
         * @memberof DcgProto
         * @classdesc Represents a Req_FriendDelete.
         * @implements IReq_FriendDelete
         * @constructor
         * @param {DcgProto.IReq_FriendDelete=} [p] Properties to set
         */
        function Req_FriendDelete(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_FriendDelete FriendIID.
         * @member {Long} FriendIID
         * @memberof DcgProto.Req_FriendDelete
         * @instance
         */
        Req_FriendDelete.prototype.FriendIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_FriendDelete instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_FriendDelete
         * @static
         * @param {DcgProto.IReq_FriendDelete=} [properties] Properties to set
         * @returns {DcgProto.Req_FriendDelete} Req_FriendDelete instance
         */
        Req_FriendDelete.create = function create(properties) {
            return new Req_FriendDelete(properties);
        };

        /**
         * Encodes the specified Req_FriendDelete message. Does not implicitly {@link DcgProto.Req_FriendDelete.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_FriendDelete
         * @static
         * @param {DcgProto.IReq_FriendDelete} m Req_FriendDelete message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_FriendDelete.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.FriendIID != null && Object.hasOwnProperty.call(m, "FriendIID"))
                w.uint32(8).int64(m.FriendIID);
            return w;
        };

        /**
         * Decodes a Req_FriendDelete message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_FriendDelete
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_FriendDelete} Req_FriendDelete
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_FriendDelete.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_FriendDelete();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.FriendIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_FriendDelete message.
         * @function verify
         * @memberof DcgProto.Req_FriendDelete
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_FriendDelete.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.FriendIID != null && m.hasOwnProperty("FriendIID")) {
                if (!$util.isInteger(m.FriendIID) && !(m.FriendIID && $util.isInteger(m.FriendIID.low) && $util.isInteger(m.FriendIID.high)))
                    return "FriendIID: integer|Long expected";
            }
            return null;
        };

        return Req_FriendDelete;
    })();

    DcgProto.Resp_FriendDelete = (function() {

        /**
         * Properties of a Resp_FriendDelete.
         * @memberof DcgProto
         * @interface IResp_FriendDelete
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_FriendDelete ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_FriendDelete Cmn
         */

        /**
         * Constructs a new Resp_FriendDelete.
         * @memberof DcgProto
         * @classdesc Represents a Resp_FriendDelete.
         * @implements IResp_FriendDelete
         * @constructor
         * @param {DcgProto.IResp_FriendDelete=} [p] Properties to set
         */
        function Resp_FriendDelete(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_FriendDelete ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_FriendDelete
         * @instance
         */
        Resp_FriendDelete.prototype.ErrorCode = 0;

        /**
         * Resp_FriendDelete Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_FriendDelete
         * @instance
         */
        Resp_FriendDelete.prototype.Cmn = null;

        /**
         * Creates a new Resp_FriendDelete instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_FriendDelete
         * @static
         * @param {DcgProto.IResp_FriendDelete=} [properties] Properties to set
         * @returns {DcgProto.Resp_FriendDelete} Resp_FriendDelete instance
         */
        Resp_FriendDelete.create = function create(properties) {
            return new Resp_FriendDelete(properties);
        };

        /**
         * Encodes the specified Resp_FriendDelete message. Does not implicitly {@link DcgProto.Resp_FriendDelete.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_FriendDelete
         * @static
         * @param {DcgProto.IResp_FriendDelete} m Resp_FriendDelete message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_FriendDelete.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_FriendDelete message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_FriendDelete
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_FriendDelete} Resp_FriendDelete
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_FriendDelete.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_FriendDelete();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_FriendDelete message.
         * @function verify
         * @memberof DcgProto.Resp_FriendDelete
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_FriendDelete.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_FriendDelete;
    })();

    DcgProto.Push_FriendDelete = (function() {

        /**
         * Properties of a Push_FriendDelete.
         * @memberof DcgProto
         * @interface IPush_FriendDelete
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Push_FriendDelete Cmn
         */

        /**
         * Constructs a new Push_FriendDelete.
         * @memberof DcgProto
         * @classdesc Represents a Push_FriendDelete.
         * @implements IPush_FriendDelete
         * @constructor
         * @param {DcgProto.IPush_FriendDelete=} [p] Properties to set
         */
        function Push_FriendDelete(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Push_FriendDelete Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Push_FriendDelete
         * @instance
         */
        Push_FriendDelete.prototype.Cmn = null;

        /**
         * Creates a new Push_FriendDelete instance using the specified properties.
         * @function create
         * @memberof DcgProto.Push_FriendDelete
         * @static
         * @param {DcgProto.IPush_FriendDelete=} [properties] Properties to set
         * @returns {DcgProto.Push_FriendDelete} Push_FriendDelete instance
         */
        Push_FriendDelete.create = function create(properties) {
            return new Push_FriendDelete(properties);
        };

        /**
         * Encodes the specified Push_FriendDelete message. Does not implicitly {@link DcgProto.Push_FriendDelete.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Push_FriendDelete
         * @static
         * @param {DcgProto.IPush_FriendDelete} m Push_FriendDelete message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Push_FriendDelete.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Push_FriendDelete message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Push_FriendDelete
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Push_FriendDelete} Push_FriendDelete
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Push_FriendDelete.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Push_FriendDelete();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Push_FriendDelete message.
         * @function verify
         * @memberof DcgProto.Push_FriendDelete
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Push_FriendDelete.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Push_FriendDelete;
    })();

    DcgProto.Req_FriendSearch = (function() {

        /**
         * Properties of a Req_FriendSearch.
         * @memberof DcgProto
         * @interface IReq_FriendSearch
         * @property {DcgProto.E_SearchType|null} [SearchType] Req_FriendSearch SearchType
         * @property {string|null} [NickName] Req_FriendSearch NickName
         * @property {Long|null} [PlayerIID] Req_FriendSearch PlayerIID
         * @property {Array.<number>|null} [TitleIds] Req_FriendSearch TitleIds
         * @property {boolean|null} [Special] Req_FriendSearch Special
         * @property {number|null} [PlayerId] Req_FriendSearch PlayerId
         */

        /**
         * Constructs a new Req_FriendSearch.
         * @memberof DcgProto
         * @classdesc Represents a Req_FriendSearch.
         * @implements IReq_FriendSearch
         * @constructor
         * @param {DcgProto.IReq_FriendSearch=} [p] Properties to set
         */
        function Req_FriendSearch(p) {
            this.TitleIds = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_FriendSearch SearchType.
         * @member {DcgProto.E_SearchType} SearchType
         * @memberof DcgProto.Req_FriendSearch
         * @instance
         */
        Req_FriendSearch.prototype.SearchType = 0;

        /**
         * Req_FriendSearch NickName.
         * @member {string} NickName
         * @memberof DcgProto.Req_FriendSearch
         * @instance
         */
        Req_FriendSearch.prototype.NickName = "";

        /**
         * Req_FriendSearch PlayerIID.
         * @member {Long} PlayerIID
         * @memberof DcgProto.Req_FriendSearch
         * @instance
         */
        Req_FriendSearch.prototype.PlayerIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_FriendSearch TitleIds.
         * @member {Array.<number>} TitleIds
         * @memberof DcgProto.Req_FriendSearch
         * @instance
         */
        Req_FriendSearch.prototype.TitleIds = $util.emptyArray;

        /**
         * Req_FriendSearch Special.
         * @member {boolean} Special
         * @memberof DcgProto.Req_FriendSearch
         * @instance
         */
        Req_FriendSearch.prototype.Special = false;

        /**
         * Req_FriendSearch PlayerId.
         * @member {number} PlayerId
         * @memberof DcgProto.Req_FriendSearch
         * @instance
         */
        Req_FriendSearch.prototype.PlayerId = 0;

        /**
         * Creates a new Req_FriendSearch instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_FriendSearch
         * @static
         * @param {DcgProto.IReq_FriendSearch=} [properties] Properties to set
         * @returns {DcgProto.Req_FriendSearch} Req_FriendSearch instance
         */
        Req_FriendSearch.create = function create(properties) {
            return new Req_FriendSearch(properties);
        };

        /**
         * Encodes the specified Req_FriendSearch message. Does not implicitly {@link DcgProto.Req_FriendSearch.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_FriendSearch
         * @static
         * @param {DcgProto.IReq_FriendSearch} m Req_FriendSearch message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_FriendSearch.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.SearchType != null && Object.hasOwnProperty.call(m, "SearchType"))
                w.uint32(8).int32(m.SearchType);
            if (m.NickName != null && Object.hasOwnProperty.call(m, "NickName"))
                w.uint32(18).string(m.NickName);
            if (m.PlayerIID != null && Object.hasOwnProperty.call(m, "PlayerIID"))
                w.uint32(24).int64(m.PlayerIID);
            if (m.TitleIds != null && m.TitleIds.length) {
                w.uint32(34).fork();
                for (var i = 0; i < m.TitleIds.length; ++i)
                    w.int32(m.TitleIds[i]);
                w.ldelim();
            }
            if (m.Special != null && Object.hasOwnProperty.call(m, "Special"))
                w.uint32(40).bool(m.Special);
            if (m.PlayerId != null && Object.hasOwnProperty.call(m, "PlayerId"))
                w.uint32(48).int32(m.PlayerId);
            return w;
        };

        /**
         * Decodes a Req_FriendSearch message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_FriendSearch
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_FriendSearch} Req_FriendSearch
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_FriendSearch.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_FriendSearch();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.SearchType = r.int32();
                    break;
                case 2:
                    m.NickName = r.string();
                    break;
                case 3:
                    m.PlayerIID = r.int64();
                    break;
                case 4:
                    if (!(m.TitleIds && m.TitleIds.length))
                        m.TitleIds = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.TitleIds.push(r.int32());
                    } else
                        m.TitleIds.push(r.int32());
                    break;
                case 5:
                    m.Special = r.bool();
                    break;
                case 6:
                    m.PlayerId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_FriendSearch message.
         * @function verify
         * @memberof DcgProto.Req_FriendSearch
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_FriendSearch.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.SearchType != null && m.hasOwnProperty("SearchType")) {
                switch (m.SearchType) {
                default:
                    return "SearchType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.NickName != null && m.hasOwnProperty("NickName")) {
                if (!$util.isString(m.NickName))
                    return "NickName: string expected";
            }
            if (m.PlayerIID != null && m.hasOwnProperty("PlayerIID")) {
                if (!$util.isInteger(m.PlayerIID) && !(m.PlayerIID && $util.isInteger(m.PlayerIID.low) && $util.isInteger(m.PlayerIID.high)))
                    return "PlayerIID: integer|Long expected";
            }
            if (m.TitleIds != null && m.hasOwnProperty("TitleIds")) {
                if (!Array.isArray(m.TitleIds))
                    return "TitleIds: array expected";
                for (var i = 0; i < m.TitleIds.length; ++i) {
                    if (!$util.isInteger(m.TitleIds[i]))
                        return "TitleIds: integer[] expected";
                }
            }
            if (m.Special != null && m.hasOwnProperty("Special")) {
                if (typeof m.Special !== "boolean")
                    return "Special: boolean expected";
            }
            if (m.PlayerId != null && m.hasOwnProperty("PlayerId")) {
                if (!$util.isInteger(m.PlayerId))
                    return "PlayerId: integer expected";
            }
            return null;
        };

        return Req_FriendSearch;
    })();

    DcgProto.Resp_FriendSearch = (function() {

        /**
         * Properties of a Resp_FriendSearch.
         * @memberof DcgProto
         * @interface IResp_FriendSearch
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_FriendSearch ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_FriendSearch Cmn
         * @property {Array.<DcgProto.IS_OtherRole>|null} [RoleList] Resp_FriendSearch RoleList
         */

        /**
         * Constructs a new Resp_FriendSearch.
         * @memberof DcgProto
         * @classdesc Represents a Resp_FriendSearch.
         * @implements IResp_FriendSearch
         * @constructor
         * @param {DcgProto.IResp_FriendSearch=} [p] Properties to set
         */
        function Resp_FriendSearch(p) {
            this.RoleList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_FriendSearch ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_FriendSearch
         * @instance
         */
        Resp_FriendSearch.prototype.ErrorCode = 0;

        /**
         * Resp_FriendSearch Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_FriendSearch
         * @instance
         */
        Resp_FriendSearch.prototype.Cmn = null;

        /**
         * Resp_FriendSearch RoleList.
         * @member {Array.<DcgProto.IS_OtherRole>} RoleList
         * @memberof DcgProto.Resp_FriendSearch
         * @instance
         */
        Resp_FriendSearch.prototype.RoleList = $util.emptyArray;

        /**
         * Creates a new Resp_FriendSearch instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_FriendSearch
         * @static
         * @param {DcgProto.IResp_FriendSearch=} [properties] Properties to set
         * @returns {DcgProto.Resp_FriendSearch} Resp_FriendSearch instance
         */
        Resp_FriendSearch.create = function create(properties) {
            return new Resp_FriendSearch(properties);
        };

        /**
         * Encodes the specified Resp_FriendSearch message. Does not implicitly {@link DcgProto.Resp_FriendSearch.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_FriendSearch
         * @static
         * @param {DcgProto.IResp_FriendSearch} m Resp_FriendSearch message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_FriendSearch.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.RoleList != null && m.RoleList.length) {
                for (var i = 0; i < m.RoleList.length; ++i)
                    $root.DcgProto.S_OtherRole.encode(m.RoleList[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Resp_FriendSearch message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_FriendSearch
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_FriendSearch} Resp_FriendSearch
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_FriendSearch.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_FriendSearch();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.RoleList && m.RoleList.length))
                        m.RoleList = [];
                    m.RoleList.push($root.DcgProto.S_OtherRole.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_FriendSearch message.
         * @function verify
         * @memberof DcgProto.Resp_FriendSearch
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_FriendSearch.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.RoleList != null && m.hasOwnProperty("RoleList")) {
                if (!Array.isArray(m.RoleList))
                    return "RoleList: array expected";
                for (var i = 0; i < m.RoleList.length; ++i) {
                    {
                        var e = $root.DcgProto.S_OtherRole.verify(m.RoleList[i]);
                        if (e)
                            return "RoleList." + e;
                    }
                }
            }
            return null;
        };

        return Resp_FriendSearch;
    })();

    DcgProto.Req_CollectMail = (function() {

        /**
         * Properties of a Req_CollectMail.
         * @memberof DcgProto
         * @interface IReq_CollectMail
         * @property {Long|null} [MailIID] Req_CollectMail MailIID
         */

        /**
         * Constructs a new Req_CollectMail.
         * @memberof DcgProto
         * @classdesc Represents a Req_CollectMail.
         * @implements IReq_CollectMail
         * @constructor
         * @param {DcgProto.IReq_CollectMail=} [p] Properties to set
         */
        function Req_CollectMail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_CollectMail MailIID.
         * @member {Long} MailIID
         * @memberof DcgProto.Req_CollectMail
         * @instance
         */
        Req_CollectMail.prototype.MailIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_CollectMail instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_CollectMail
         * @static
         * @param {DcgProto.IReq_CollectMail=} [properties] Properties to set
         * @returns {DcgProto.Req_CollectMail} Req_CollectMail instance
         */
        Req_CollectMail.create = function create(properties) {
            return new Req_CollectMail(properties);
        };

        /**
         * Encodes the specified Req_CollectMail message. Does not implicitly {@link DcgProto.Req_CollectMail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_CollectMail
         * @static
         * @param {DcgProto.IReq_CollectMail} m Req_CollectMail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_CollectMail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.MailIID != null && Object.hasOwnProperty.call(m, "MailIID"))
                w.uint32(8).int64(m.MailIID);
            return w;
        };

        /**
         * Decodes a Req_CollectMail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_CollectMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_CollectMail} Req_CollectMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_CollectMail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_CollectMail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.MailIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_CollectMail message.
         * @function verify
         * @memberof DcgProto.Req_CollectMail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_CollectMail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.MailIID != null && m.hasOwnProperty("MailIID")) {
                if (!$util.isInteger(m.MailIID) && !(m.MailIID && $util.isInteger(m.MailIID.low) && $util.isInteger(m.MailIID.high)))
                    return "MailIID: integer|Long expected";
            }
            return null;
        };

        return Req_CollectMail;
    })();

    DcgProto.Resp_CollectMail = (function() {

        /**
         * Properties of a Resp_CollectMail.
         * @memberof DcgProto
         * @interface IResp_CollectMail
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_CollectMail ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_CollectMail Cmn
         */

        /**
         * Constructs a new Resp_CollectMail.
         * @memberof DcgProto
         * @classdesc Represents a Resp_CollectMail.
         * @implements IResp_CollectMail
         * @constructor
         * @param {DcgProto.IResp_CollectMail=} [p] Properties to set
         */
        function Resp_CollectMail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_CollectMail ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_CollectMail
         * @instance
         */
        Resp_CollectMail.prototype.ErrorCode = 0;

        /**
         * Resp_CollectMail Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_CollectMail
         * @instance
         */
        Resp_CollectMail.prototype.Cmn = null;

        /**
         * Creates a new Resp_CollectMail instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_CollectMail
         * @static
         * @param {DcgProto.IResp_CollectMail=} [properties] Properties to set
         * @returns {DcgProto.Resp_CollectMail} Resp_CollectMail instance
         */
        Resp_CollectMail.create = function create(properties) {
            return new Resp_CollectMail(properties);
        };

        /**
         * Encodes the specified Resp_CollectMail message. Does not implicitly {@link DcgProto.Resp_CollectMail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_CollectMail
         * @static
         * @param {DcgProto.IResp_CollectMail} m Resp_CollectMail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_CollectMail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_CollectMail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_CollectMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_CollectMail} Resp_CollectMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_CollectMail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_CollectMail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_CollectMail message.
         * @function verify
         * @memberof DcgProto.Resp_CollectMail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_CollectMail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_CollectMail;
    })();

    DcgProto.Req_CancelCollectMail = (function() {

        /**
         * Properties of a Req_CancelCollectMail.
         * @memberof DcgProto
         * @interface IReq_CancelCollectMail
         * @property {Long|null} [MailIID] Req_CancelCollectMail MailIID
         */

        /**
         * Constructs a new Req_CancelCollectMail.
         * @memberof DcgProto
         * @classdesc Represents a Req_CancelCollectMail.
         * @implements IReq_CancelCollectMail
         * @constructor
         * @param {DcgProto.IReq_CancelCollectMail=} [p] Properties to set
         */
        function Req_CancelCollectMail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_CancelCollectMail MailIID.
         * @member {Long} MailIID
         * @memberof DcgProto.Req_CancelCollectMail
         * @instance
         */
        Req_CancelCollectMail.prototype.MailIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_CancelCollectMail instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_CancelCollectMail
         * @static
         * @param {DcgProto.IReq_CancelCollectMail=} [properties] Properties to set
         * @returns {DcgProto.Req_CancelCollectMail} Req_CancelCollectMail instance
         */
        Req_CancelCollectMail.create = function create(properties) {
            return new Req_CancelCollectMail(properties);
        };

        /**
         * Encodes the specified Req_CancelCollectMail message. Does not implicitly {@link DcgProto.Req_CancelCollectMail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_CancelCollectMail
         * @static
         * @param {DcgProto.IReq_CancelCollectMail} m Req_CancelCollectMail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_CancelCollectMail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.MailIID != null && Object.hasOwnProperty.call(m, "MailIID"))
                w.uint32(8).int64(m.MailIID);
            return w;
        };

        /**
         * Decodes a Req_CancelCollectMail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_CancelCollectMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_CancelCollectMail} Req_CancelCollectMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_CancelCollectMail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_CancelCollectMail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.MailIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_CancelCollectMail message.
         * @function verify
         * @memberof DcgProto.Req_CancelCollectMail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_CancelCollectMail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.MailIID != null && m.hasOwnProperty("MailIID")) {
                if (!$util.isInteger(m.MailIID) && !(m.MailIID && $util.isInteger(m.MailIID.low) && $util.isInteger(m.MailIID.high)))
                    return "MailIID: integer|Long expected";
            }
            return null;
        };

        return Req_CancelCollectMail;
    })();

    DcgProto.Resp_CancelCollectMail = (function() {

        /**
         * Properties of a Resp_CancelCollectMail.
         * @memberof DcgProto
         * @interface IResp_CancelCollectMail
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_CancelCollectMail ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_CancelCollectMail Cmn
         */

        /**
         * Constructs a new Resp_CancelCollectMail.
         * @memberof DcgProto
         * @classdesc Represents a Resp_CancelCollectMail.
         * @implements IResp_CancelCollectMail
         * @constructor
         * @param {DcgProto.IResp_CancelCollectMail=} [p] Properties to set
         */
        function Resp_CancelCollectMail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_CancelCollectMail ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_CancelCollectMail
         * @instance
         */
        Resp_CancelCollectMail.prototype.ErrorCode = 0;

        /**
         * Resp_CancelCollectMail Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_CancelCollectMail
         * @instance
         */
        Resp_CancelCollectMail.prototype.Cmn = null;

        /**
         * Creates a new Resp_CancelCollectMail instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_CancelCollectMail
         * @static
         * @param {DcgProto.IResp_CancelCollectMail=} [properties] Properties to set
         * @returns {DcgProto.Resp_CancelCollectMail} Resp_CancelCollectMail instance
         */
        Resp_CancelCollectMail.create = function create(properties) {
            return new Resp_CancelCollectMail(properties);
        };

        /**
         * Encodes the specified Resp_CancelCollectMail message. Does not implicitly {@link DcgProto.Resp_CancelCollectMail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_CancelCollectMail
         * @static
         * @param {DcgProto.IResp_CancelCollectMail} m Resp_CancelCollectMail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_CancelCollectMail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_CancelCollectMail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_CancelCollectMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_CancelCollectMail} Resp_CancelCollectMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_CancelCollectMail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_CancelCollectMail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_CancelCollectMail message.
         * @function verify
         * @memberof DcgProto.Resp_CancelCollectMail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_CancelCollectMail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_CancelCollectMail;
    })();

    DcgProto.Req_GetMailList = (function() {

        /**
         * Properties of a Req_GetMailList.
         * @memberof DcgProto
         * @interface IReq_GetMailList
         * @property {Long|null} [MaxMailIID] Req_GetMailList MaxMailIID
         */

        /**
         * Constructs a new Req_GetMailList.
         * @memberof DcgProto
         * @classdesc Represents a Req_GetMailList.
         * @implements IReq_GetMailList
         * @constructor
         * @param {DcgProto.IReq_GetMailList=} [p] Properties to set
         */
        function Req_GetMailList(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_GetMailList MaxMailIID.
         * @member {Long} MaxMailIID
         * @memberof DcgProto.Req_GetMailList
         * @instance
         */
        Req_GetMailList.prototype.MaxMailIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_GetMailList instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_GetMailList
         * @static
         * @param {DcgProto.IReq_GetMailList=} [properties] Properties to set
         * @returns {DcgProto.Req_GetMailList} Req_GetMailList instance
         */
        Req_GetMailList.create = function create(properties) {
            return new Req_GetMailList(properties);
        };

        /**
         * Encodes the specified Req_GetMailList message. Does not implicitly {@link DcgProto.Req_GetMailList.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_GetMailList
         * @static
         * @param {DcgProto.IReq_GetMailList} m Req_GetMailList message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_GetMailList.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.MaxMailIID != null && Object.hasOwnProperty.call(m, "MaxMailIID"))
                w.uint32(8).int64(m.MaxMailIID);
            return w;
        };

        /**
         * Decodes a Req_GetMailList message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_GetMailList
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_GetMailList} Req_GetMailList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_GetMailList.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_GetMailList();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.MaxMailIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_GetMailList message.
         * @function verify
         * @memberof DcgProto.Req_GetMailList
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_GetMailList.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.MaxMailIID != null && m.hasOwnProperty("MaxMailIID")) {
                if (!$util.isInteger(m.MaxMailIID) && !(m.MaxMailIID && $util.isInteger(m.MaxMailIID.low) && $util.isInteger(m.MaxMailIID.high)))
                    return "MaxMailIID: integer|Long expected";
            }
            return null;
        };

        return Req_GetMailList;
    })();

    DcgProto.Resp_GetMailList = (function() {

        /**
         * Properties of a Resp_GetMailList.
         * @memberof DcgProto
         * @interface IResp_GetMailList
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_GetMailList ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_GetMailList Cmn
         */

        /**
         * Constructs a new Resp_GetMailList.
         * @memberof DcgProto
         * @classdesc Represents a Resp_GetMailList.
         * @implements IResp_GetMailList
         * @constructor
         * @param {DcgProto.IResp_GetMailList=} [p] Properties to set
         */
        function Resp_GetMailList(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_GetMailList ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_GetMailList
         * @instance
         */
        Resp_GetMailList.prototype.ErrorCode = 0;

        /**
         * Resp_GetMailList Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_GetMailList
         * @instance
         */
        Resp_GetMailList.prototype.Cmn = null;

        /**
         * Creates a new Resp_GetMailList instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_GetMailList
         * @static
         * @param {DcgProto.IResp_GetMailList=} [properties] Properties to set
         * @returns {DcgProto.Resp_GetMailList} Resp_GetMailList instance
         */
        Resp_GetMailList.create = function create(properties) {
            return new Resp_GetMailList(properties);
        };

        /**
         * Encodes the specified Resp_GetMailList message. Does not implicitly {@link DcgProto.Resp_GetMailList.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_GetMailList
         * @static
         * @param {DcgProto.IResp_GetMailList} m Resp_GetMailList message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_GetMailList.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_GetMailList message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_GetMailList
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_GetMailList} Resp_GetMailList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_GetMailList.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_GetMailList();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_GetMailList message.
         * @function verify
         * @memberof DcgProto.Resp_GetMailList
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_GetMailList.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_GetMailList;
    })();

    DcgProto.Req_DelMail = (function() {

        /**
         * Properties of a Req_DelMail.
         * @memberof DcgProto
         * @interface IReq_DelMail
         * @property {Long|null} [MailIID] Req_DelMail MailIID
         */

        /**
         * Constructs a new Req_DelMail.
         * @memberof DcgProto
         * @classdesc Represents a Req_DelMail.
         * @implements IReq_DelMail
         * @constructor
         * @param {DcgProto.IReq_DelMail=} [p] Properties to set
         */
        function Req_DelMail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_DelMail MailIID.
         * @member {Long} MailIID
         * @memberof DcgProto.Req_DelMail
         * @instance
         */
        Req_DelMail.prototype.MailIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_DelMail instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_DelMail
         * @static
         * @param {DcgProto.IReq_DelMail=} [properties] Properties to set
         * @returns {DcgProto.Req_DelMail} Req_DelMail instance
         */
        Req_DelMail.create = function create(properties) {
            return new Req_DelMail(properties);
        };

        /**
         * Encodes the specified Req_DelMail message. Does not implicitly {@link DcgProto.Req_DelMail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_DelMail
         * @static
         * @param {DcgProto.IReq_DelMail} m Req_DelMail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_DelMail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.MailIID != null && Object.hasOwnProperty.call(m, "MailIID"))
                w.uint32(8).int64(m.MailIID);
            return w;
        };

        /**
         * Decodes a Req_DelMail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_DelMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_DelMail} Req_DelMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_DelMail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_DelMail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.MailIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_DelMail message.
         * @function verify
         * @memberof DcgProto.Req_DelMail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_DelMail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.MailIID != null && m.hasOwnProperty("MailIID")) {
                if (!$util.isInteger(m.MailIID) && !(m.MailIID && $util.isInteger(m.MailIID.low) && $util.isInteger(m.MailIID.high)))
                    return "MailIID: integer|Long expected";
            }
            return null;
        };

        return Req_DelMail;
    })();

    DcgProto.Resp_DelMail = (function() {

        /**
         * Properties of a Resp_DelMail.
         * @memberof DcgProto
         * @interface IResp_DelMail
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_DelMail ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_DelMail Cmn
         */

        /**
         * Constructs a new Resp_DelMail.
         * @memberof DcgProto
         * @classdesc Represents a Resp_DelMail.
         * @implements IResp_DelMail
         * @constructor
         * @param {DcgProto.IResp_DelMail=} [p] Properties to set
         */
        function Resp_DelMail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_DelMail ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_DelMail
         * @instance
         */
        Resp_DelMail.prototype.ErrorCode = 0;

        /**
         * Resp_DelMail Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_DelMail
         * @instance
         */
        Resp_DelMail.prototype.Cmn = null;

        /**
         * Creates a new Resp_DelMail instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_DelMail
         * @static
         * @param {DcgProto.IResp_DelMail=} [properties] Properties to set
         * @returns {DcgProto.Resp_DelMail} Resp_DelMail instance
         */
        Resp_DelMail.create = function create(properties) {
            return new Resp_DelMail(properties);
        };

        /**
         * Encodes the specified Resp_DelMail message. Does not implicitly {@link DcgProto.Resp_DelMail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_DelMail
         * @static
         * @param {DcgProto.IResp_DelMail} m Resp_DelMail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_DelMail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_DelMail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_DelMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_DelMail} Resp_DelMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_DelMail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_DelMail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_DelMail message.
         * @function verify
         * @memberof DcgProto.Resp_DelMail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_DelMail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_DelMail;
    })();

    DcgProto.Req_ReadMail = (function() {

        /**
         * Properties of a Req_ReadMail.
         * @memberof DcgProto
         * @interface IReq_ReadMail
         * @property {Long|null} [MailIID] Req_ReadMail MailIID
         */

        /**
         * Constructs a new Req_ReadMail.
         * @memberof DcgProto
         * @classdesc Represents a Req_ReadMail.
         * @implements IReq_ReadMail
         * @constructor
         * @param {DcgProto.IReq_ReadMail=} [p] Properties to set
         */
        function Req_ReadMail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_ReadMail MailIID.
         * @member {Long} MailIID
         * @memberof DcgProto.Req_ReadMail
         * @instance
         */
        Req_ReadMail.prototype.MailIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_ReadMail instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_ReadMail
         * @static
         * @param {DcgProto.IReq_ReadMail=} [properties] Properties to set
         * @returns {DcgProto.Req_ReadMail} Req_ReadMail instance
         */
        Req_ReadMail.create = function create(properties) {
            return new Req_ReadMail(properties);
        };

        /**
         * Encodes the specified Req_ReadMail message. Does not implicitly {@link DcgProto.Req_ReadMail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_ReadMail
         * @static
         * @param {DcgProto.IReq_ReadMail} m Req_ReadMail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_ReadMail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.MailIID != null && Object.hasOwnProperty.call(m, "MailIID"))
                w.uint32(8).int64(m.MailIID);
            return w;
        };

        /**
         * Decodes a Req_ReadMail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_ReadMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_ReadMail} Req_ReadMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_ReadMail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_ReadMail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.MailIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_ReadMail message.
         * @function verify
         * @memberof DcgProto.Req_ReadMail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_ReadMail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.MailIID != null && m.hasOwnProperty("MailIID")) {
                if (!$util.isInteger(m.MailIID) && !(m.MailIID && $util.isInteger(m.MailIID.low) && $util.isInteger(m.MailIID.high)))
                    return "MailIID: integer|Long expected";
            }
            return null;
        };

        return Req_ReadMail;
    })();

    DcgProto.Resp_ReadMail = (function() {

        /**
         * Properties of a Resp_ReadMail.
         * @memberof DcgProto
         * @interface IResp_ReadMail
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_ReadMail ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_ReadMail Cmn
         */

        /**
         * Constructs a new Resp_ReadMail.
         * @memberof DcgProto
         * @classdesc Represents a Resp_ReadMail.
         * @implements IResp_ReadMail
         * @constructor
         * @param {DcgProto.IResp_ReadMail=} [p] Properties to set
         */
        function Resp_ReadMail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_ReadMail ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_ReadMail
         * @instance
         */
        Resp_ReadMail.prototype.ErrorCode = 0;

        /**
         * Resp_ReadMail Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_ReadMail
         * @instance
         */
        Resp_ReadMail.prototype.Cmn = null;

        /**
         * Creates a new Resp_ReadMail instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_ReadMail
         * @static
         * @param {DcgProto.IResp_ReadMail=} [properties] Properties to set
         * @returns {DcgProto.Resp_ReadMail} Resp_ReadMail instance
         */
        Resp_ReadMail.create = function create(properties) {
            return new Resp_ReadMail(properties);
        };

        /**
         * Encodes the specified Resp_ReadMail message. Does not implicitly {@link DcgProto.Resp_ReadMail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_ReadMail
         * @static
         * @param {DcgProto.IResp_ReadMail} m Resp_ReadMail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_ReadMail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_ReadMail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_ReadMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_ReadMail} Resp_ReadMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_ReadMail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_ReadMail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_ReadMail message.
         * @function verify
         * @memberof DcgProto.Resp_ReadMail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_ReadMail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_ReadMail;
    })();

    DcgProto.Req_ReceiveMailAttach = (function() {

        /**
         * Properties of a Req_ReceiveMailAttach.
         * @memberof DcgProto
         * @interface IReq_ReceiveMailAttach
         * @property {Long|null} [MailIID] Req_ReceiveMailAttach MailIID
         */

        /**
         * Constructs a new Req_ReceiveMailAttach.
         * @memberof DcgProto
         * @classdesc Represents a Req_ReceiveMailAttach.
         * @implements IReq_ReceiveMailAttach
         * @constructor
         * @param {DcgProto.IReq_ReceiveMailAttach=} [p] Properties to set
         */
        function Req_ReceiveMailAttach(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_ReceiveMailAttach MailIID.
         * @member {Long} MailIID
         * @memberof DcgProto.Req_ReceiveMailAttach
         * @instance
         */
        Req_ReceiveMailAttach.prototype.MailIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_ReceiveMailAttach instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_ReceiveMailAttach
         * @static
         * @param {DcgProto.IReq_ReceiveMailAttach=} [properties] Properties to set
         * @returns {DcgProto.Req_ReceiveMailAttach} Req_ReceiveMailAttach instance
         */
        Req_ReceiveMailAttach.create = function create(properties) {
            return new Req_ReceiveMailAttach(properties);
        };

        /**
         * Encodes the specified Req_ReceiveMailAttach message. Does not implicitly {@link DcgProto.Req_ReceiveMailAttach.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_ReceiveMailAttach
         * @static
         * @param {DcgProto.IReq_ReceiveMailAttach} m Req_ReceiveMailAttach message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_ReceiveMailAttach.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.MailIID != null && Object.hasOwnProperty.call(m, "MailIID"))
                w.uint32(8).int64(m.MailIID);
            return w;
        };

        /**
         * Decodes a Req_ReceiveMailAttach message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_ReceiveMailAttach
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_ReceiveMailAttach} Req_ReceiveMailAttach
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_ReceiveMailAttach.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_ReceiveMailAttach();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.MailIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_ReceiveMailAttach message.
         * @function verify
         * @memberof DcgProto.Req_ReceiveMailAttach
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_ReceiveMailAttach.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.MailIID != null && m.hasOwnProperty("MailIID")) {
                if (!$util.isInteger(m.MailIID) && !(m.MailIID && $util.isInteger(m.MailIID.low) && $util.isInteger(m.MailIID.high)))
                    return "MailIID: integer|Long expected";
            }
            return null;
        };

        return Req_ReceiveMailAttach;
    })();

    DcgProto.Resp_ReceiveMailAttach = (function() {

        /**
         * Properties of a Resp_ReceiveMailAttach.
         * @memberof DcgProto
         * @interface IResp_ReceiveMailAttach
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_ReceiveMailAttach ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_ReceiveMailAttach Cmn
         */

        /**
         * Constructs a new Resp_ReceiveMailAttach.
         * @memberof DcgProto
         * @classdesc Represents a Resp_ReceiveMailAttach.
         * @implements IResp_ReceiveMailAttach
         * @constructor
         * @param {DcgProto.IResp_ReceiveMailAttach=} [p] Properties to set
         */
        function Resp_ReceiveMailAttach(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_ReceiveMailAttach ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_ReceiveMailAttach
         * @instance
         */
        Resp_ReceiveMailAttach.prototype.ErrorCode = 0;

        /**
         * Resp_ReceiveMailAttach Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_ReceiveMailAttach
         * @instance
         */
        Resp_ReceiveMailAttach.prototype.Cmn = null;

        /**
         * Creates a new Resp_ReceiveMailAttach instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_ReceiveMailAttach
         * @static
         * @param {DcgProto.IResp_ReceiveMailAttach=} [properties] Properties to set
         * @returns {DcgProto.Resp_ReceiveMailAttach} Resp_ReceiveMailAttach instance
         */
        Resp_ReceiveMailAttach.create = function create(properties) {
            return new Resp_ReceiveMailAttach(properties);
        };

        /**
         * Encodes the specified Resp_ReceiveMailAttach message. Does not implicitly {@link DcgProto.Resp_ReceiveMailAttach.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_ReceiveMailAttach
         * @static
         * @param {DcgProto.IResp_ReceiveMailAttach} m Resp_ReceiveMailAttach message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_ReceiveMailAttach.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_ReceiveMailAttach message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_ReceiveMailAttach
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_ReceiveMailAttach} Resp_ReceiveMailAttach
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_ReceiveMailAttach.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_ReceiveMailAttach();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_ReceiveMailAttach message.
         * @function verify
         * @memberof DcgProto.Resp_ReceiveMailAttach
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_ReceiveMailAttach.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_ReceiveMailAttach;
    })();

    DcgProto.Req_OneKeyReadMail = (function() {

        /**
         * Properties of a Req_OneKeyReadMail.
         * @memberof DcgProto
         * @interface IReq_OneKeyReadMail
         * @property {number|null} [ShowType] Req_OneKeyReadMail ShowType
         */

        /**
         * Constructs a new Req_OneKeyReadMail.
         * @memberof DcgProto
         * @classdesc Represents a Req_OneKeyReadMail.
         * @implements IReq_OneKeyReadMail
         * @constructor
         * @param {DcgProto.IReq_OneKeyReadMail=} [p] Properties to set
         */
        function Req_OneKeyReadMail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_OneKeyReadMail ShowType.
         * @member {number} ShowType
         * @memberof DcgProto.Req_OneKeyReadMail
         * @instance
         */
        Req_OneKeyReadMail.prototype.ShowType = 0;

        /**
         * Creates a new Req_OneKeyReadMail instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_OneKeyReadMail
         * @static
         * @param {DcgProto.IReq_OneKeyReadMail=} [properties] Properties to set
         * @returns {DcgProto.Req_OneKeyReadMail} Req_OneKeyReadMail instance
         */
        Req_OneKeyReadMail.create = function create(properties) {
            return new Req_OneKeyReadMail(properties);
        };

        /**
         * Encodes the specified Req_OneKeyReadMail message. Does not implicitly {@link DcgProto.Req_OneKeyReadMail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_OneKeyReadMail
         * @static
         * @param {DcgProto.IReq_OneKeyReadMail} m Req_OneKeyReadMail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_OneKeyReadMail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ShowType != null && Object.hasOwnProperty.call(m, "ShowType"))
                w.uint32(8).int32(m.ShowType);
            return w;
        };

        /**
         * Decodes a Req_OneKeyReadMail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_OneKeyReadMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_OneKeyReadMail} Req_OneKeyReadMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_OneKeyReadMail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_OneKeyReadMail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ShowType = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_OneKeyReadMail message.
         * @function verify
         * @memberof DcgProto.Req_OneKeyReadMail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_OneKeyReadMail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ShowType != null && m.hasOwnProperty("ShowType")) {
                if (!$util.isInteger(m.ShowType))
                    return "ShowType: integer expected";
            }
            return null;
        };

        return Req_OneKeyReadMail;
    })();

    DcgProto.Resp_OneKeyReadMail = (function() {

        /**
         * Properties of a Resp_OneKeyReadMail.
         * @memberof DcgProto
         * @interface IResp_OneKeyReadMail
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_OneKeyReadMail ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_OneKeyReadMail Cmn
         */

        /**
         * Constructs a new Resp_OneKeyReadMail.
         * @memberof DcgProto
         * @classdesc Represents a Resp_OneKeyReadMail.
         * @implements IResp_OneKeyReadMail
         * @constructor
         * @param {DcgProto.IResp_OneKeyReadMail=} [p] Properties to set
         */
        function Resp_OneKeyReadMail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_OneKeyReadMail ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_OneKeyReadMail
         * @instance
         */
        Resp_OneKeyReadMail.prototype.ErrorCode = 0;

        /**
         * Resp_OneKeyReadMail Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_OneKeyReadMail
         * @instance
         */
        Resp_OneKeyReadMail.prototype.Cmn = null;

        /**
         * Creates a new Resp_OneKeyReadMail instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_OneKeyReadMail
         * @static
         * @param {DcgProto.IResp_OneKeyReadMail=} [properties] Properties to set
         * @returns {DcgProto.Resp_OneKeyReadMail} Resp_OneKeyReadMail instance
         */
        Resp_OneKeyReadMail.create = function create(properties) {
            return new Resp_OneKeyReadMail(properties);
        };

        /**
         * Encodes the specified Resp_OneKeyReadMail message. Does not implicitly {@link DcgProto.Resp_OneKeyReadMail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_OneKeyReadMail
         * @static
         * @param {DcgProto.IResp_OneKeyReadMail} m Resp_OneKeyReadMail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_OneKeyReadMail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_OneKeyReadMail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_OneKeyReadMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_OneKeyReadMail} Resp_OneKeyReadMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_OneKeyReadMail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_OneKeyReadMail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_OneKeyReadMail message.
         * @function verify
         * @memberof DcgProto.Resp_OneKeyReadMail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_OneKeyReadMail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_OneKeyReadMail;
    })();

    DcgProto.Req_OneKeyDelMail = (function() {

        /**
         * Properties of a Req_OneKeyDelMail.
         * @memberof DcgProto
         * @interface IReq_OneKeyDelMail
         * @property {number|null} [ShowType] Req_OneKeyDelMail ShowType
         */

        /**
         * Constructs a new Req_OneKeyDelMail.
         * @memberof DcgProto
         * @classdesc Represents a Req_OneKeyDelMail.
         * @implements IReq_OneKeyDelMail
         * @constructor
         * @param {DcgProto.IReq_OneKeyDelMail=} [p] Properties to set
         */
        function Req_OneKeyDelMail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_OneKeyDelMail ShowType.
         * @member {number} ShowType
         * @memberof DcgProto.Req_OneKeyDelMail
         * @instance
         */
        Req_OneKeyDelMail.prototype.ShowType = 0;

        /**
         * Creates a new Req_OneKeyDelMail instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_OneKeyDelMail
         * @static
         * @param {DcgProto.IReq_OneKeyDelMail=} [properties] Properties to set
         * @returns {DcgProto.Req_OneKeyDelMail} Req_OneKeyDelMail instance
         */
        Req_OneKeyDelMail.create = function create(properties) {
            return new Req_OneKeyDelMail(properties);
        };

        /**
         * Encodes the specified Req_OneKeyDelMail message. Does not implicitly {@link DcgProto.Req_OneKeyDelMail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_OneKeyDelMail
         * @static
         * @param {DcgProto.IReq_OneKeyDelMail} m Req_OneKeyDelMail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_OneKeyDelMail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ShowType != null && Object.hasOwnProperty.call(m, "ShowType"))
                w.uint32(8).int32(m.ShowType);
            return w;
        };

        /**
         * Decodes a Req_OneKeyDelMail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_OneKeyDelMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_OneKeyDelMail} Req_OneKeyDelMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_OneKeyDelMail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_OneKeyDelMail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ShowType = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_OneKeyDelMail message.
         * @function verify
         * @memberof DcgProto.Req_OneKeyDelMail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_OneKeyDelMail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ShowType != null && m.hasOwnProperty("ShowType")) {
                if (!$util.isInteger(m.ShowType))
                    return "ShowType: integer expected";
            }
            return null;
        };

        return Req_OneKeyDelMail;
    })();

    DcgProto.Resp_OneKeyDelMail = (function() {

        /**
         * Properties of a Resp_OneKeyDelMail.
         * @memberof DcgProto
         * @interface IResp_OneKeyDelMail
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_OneKeyDelMail ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_OneKeyDelMail Cmn
         */

        /**
         * Constructs a new Resp_OneKeyDelMail.
         * @memberof DcgProto
         * @classdesc Represents a Resp_OneKeyDelMail.
         * @implements IResp_OneKeyDelMail
         * @constructor
         * @param {DcgProto.IResp_OneKeyDelMail=} [p] Properties to set
         */
        function Resp_OneKeyDelMail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_OneKeyDelMail ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_OneKeyDelMail
         * @instance
         */
        Resp_OneKeyDelMail.prototype.ErrorCode = 0;

        /**
         * Resp_OneKeyDelMail Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_OneKeyDelMail
         * @instance
         */
        Resp_OneKeyDelMail.prototype.Cmn = null;

        /**
         * Creates a new Resp_OneKeyDelMail instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_OneKeyDelMail
         * @static
         * @param {DcgProto.IResp_OneKeyDelMail=} [properties] Properties to set
         * @returns {DcgProto.Resp_OneKeyDelMail} Resp_OneKeyDelMail instance
         */
        Resp_OneKeyDelMail.create = function create(properties) {
            return new Resp_OneKeyDelMail(properties);
        };

        /**
         * Encodes the specified Resp_OneKeyDelMail message. Does not implicitly {@link DcgProto.Resp_OneKeyDelMail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_OneKeyDelMail
         * @static
         * @param {DcgProto.IResp_OneKeyDelMail} m Resp_OneKeyDelMail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_OneKeyDelMail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_OneKeyDelMail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_OneKeyDelMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_OneKeyDelMail} Resp_OneKeyDelMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_OneKeyDelMail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_OneKeyDelMail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_OneKeyDelMail message.
         * @function verify
         * @memberof DcgProto.Resp_OneKeyDelMail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_OneKeyDelMail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_OneKeyDelMail;
    })();

    DcgProto.Req_DebugAddMail = (function() {

        /**
         * Properties of a Req_DebugAddMail.
         * @memberof DcgProto
         * @interface IReq_DebugAddMail
         * @property {DcgProto.E_MailNewType|null} [MailType] Req_DebugAddMail MailType
         * @property {string|null} [SendFrom] Req_DebugAddMail SendFrom
         * @property {Long|null} [SendFromId] Req_DebugAddMail SendFromId
         * @property {DcgProto.IS_MailParam|null} [MailParam] Req_DebugAddMail MailParam
         * @property {Array.<DcgProto.IS_Item>|null} [Attach] Req_DebugAddMail Attach
         * @property {Long|null} [AccountId] Req_DebugAddMail AccountId
         */

        /**
         * Constructs a new Req_DebugAddMail.
         * @memberof DcgProto
         * @classdesc Represents a Req_DebugAddMail.
         * @implements IReq_DebugAddMail
         * @constructor
         * @param {DcgProto.IReq_DebugAddMail=} [p] Properties to set
         */
        function Req_DebugAddMail(p) {
            this.Attach = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_DebugAddMail MailType.
         * @member {DcgProto.E_MailNewType} MailType
         * @memberof DcgProto.Req_DebugAddMail
         * @instance
         */
        Req_DebugAddMail.prototype.MailType = 0;

        /**
         * Req_DebugAddMail SendFrom.
         * @member {string} SendFrom
         * @memberof DcgProto.Req_DebugAddMail
         * @instance
         */
        Req_DebugAddMail.prototype.SendFrom = "";

        /**
         * Req_DebugAddMail SendFromId.
         * @member {Long} SendFromId
         * @memberof DcgProto.Req_DebugAddMail
         * @instance
         */
        Req_DebugAddMail.prototype.SendFromId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_DebugAddMail MailParam.
         * @member {DcgProto.IS_MailParam|null|undefined} MailParam
         * @memberof DcgProto.Req_DebugAddMail
         * @instance
         */
        Req_DebugAddMail.prototype.MailParam = null;

        /**
         * Req_DebugAddMail Attach.
         * @member {Array.<DcgProto.IS_Item>} Attach
         * @memberof DcgProto.Req_DebugAddMail
         * @instance
         */
        Req_DebugAddMail.prototype.Attach = $util.emptyArray;

        /**
         * Req_DebugAddMail AccountId.
         * @member {Long} AccountId
         * @memberof DcgProto.Req_DebugAddMail
         * @instance
         */
        Req_DebugAddMail.prototype.AccountId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_DebugAddMail instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_DebugAddMail
         * @static
         * @param {DcgProto.IReq_DebugAddMail=} [properties] Properties to set
         * @returns {DcgProto.Req_DebugAddMail} Req_DebugAddMail instance
         */
        Req_DebugAddMail.create = function create(properties) {
            return new Req_DebugAddMail(properties);
        };

        /**
         * Encodes the specified Req_DebugAddMail message. Does not implicitly {@link DcgProto.Req_DebugAddMail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_DebugAddMail
         * @static
         * @param {DcgProto.IReq_DebugAddMail} m Req_DebugAddMail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_DebugAddMail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.MailType != null && Object.hasOwnProperty.call(m, "MailType"))
                w.uint32(8).int32(m.MailType);
            if (m.SendFrom != null && Object.hasOwnProperty.call(m, "SendFrom"))
                w.uint32(18).string(m.SendFrom);
            if (m.SendFromId != null && Object.hasOwnProperty.call(m, "SendFromId"))
                w.uint32(24).int64(m.SendFromId);
            if (m.MailParam != null && Object.hasOwnProperty.call(m, "MailParam"))
                $root.DcgProto.S_MailParam.encode(m.MailParam, w.uint32(34).fork()).ldelim();
            if (m.Attach != null && m.Attach.length) {
                for (var i = 0; i < m.Attach.length; ++i)
                    $root.DcgProto.S_Item.encode(m.Attach[i], w.uint32(42).fork()).ldelim();
            }
            if (m.AccountId != null && Object.hasOwnProperty.call(m, "AccountId"))
                w.uint32(48).int64(m.AccountId);
            return w;
        };

        /**
         * Decodes a Req_DebugAddMail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_DebugAddMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_DebugAddMail} Req_DebugAddMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_DebugAddMail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_DebugAddMail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.MailType = r.int32();
                    break;
                case 2:
                    m.SendFrom = r.string();
                    break;
                case 3:
                    m.SendFromId = r.int64();
                    break;
                case 4:
                    m.MailParam = $root.DcgProto.S_MailParam.decode(r, r.uint32());
                    break;
                case 5:
                    if (!(m.Attach && m.Attach.length))
                        m.Attach = [];
                    m.Attach.push($root.DcgProto.S_Item.decode(r, r.uint32()));
                    break;
                case 6:
                    m.AccountId = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_DebugAddMail message.
         * @function verify
         * @memberof DcgProto.Req_DebugAddMail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_DebugAddMail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.MailType != null && m.hasOwnProperty("MailType")) {
                switch (m.MailType) {
                default:
                    return "MailType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    break;
                }
            }
            if (m.SendFrom != null && m.hasOwnProperty("SendFrom")) {
                if (!$util.isString(m.SendFrom))
                    return "SendFrom: string expected";
            }
            if (m.SendFromId != null && m.hasOwnProperty("SendFromId")) {
                if (!$util.isInteger(m.SendFromId) && !(m.SendFromId && $util.isInteger(m.SendFromId.low) && $util.isInteger(m.SendFromId.high)))
                    return "SendFromId: integer|Long expected";
            }
            if (m.MailParam != null && m.hasOwnProperty("MailParam")) {
                {
                    var e = $root.DcgProto.S_MailParam.verify(m.MailParam);
                    if (e)
                        return "MailParam." + e;
                }
            }
            if (m.Attach != null && m.hasOwnProperty("Attach")) {
                if (!Array.isArray(m.Attach))
                    return "Attach: array expected";
                for (var i = 0; i < m.Attach.length; ++i) {
                    {
                        var e = $root.DcgProto.S_Item.verify(m.Attach[i]);
                        if (e)
                            return "Attach." + e;
                    }
                }
            }
            if (m.AccountId != null && m.hasOwnProperty("AccountId")) {
                if (!$util.isInteger(m.AccountId) && !(m.AccountId && $util.isInteger(m.AccountId.low) && $util.isInteger(m.AccountId.high)))
                    return "AccountId: integer|Long expected";
            }
            return null;
        };

        return Req_DebugAddMail;
    })();

    DcgProto.Resp_DebugAddMail = (function() {

        /**
         * Properties of a Resp_DebugAddMail.
         * @memberof DcgProto
         * @interface IResp_DebugAddMail
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_DebugAddMail ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_DebugAddMail Cmn
         */

        /**
         * Constructs a new Resp_DebugAddMail.
         * @memberof DcgProto
         * @classdesc Represents a Resp_DebugAddMail.
         * @implements IResp_DebugAddMail
         * @constructor
         * @param {DcgProto.IResp_DebugAddMail=} [p] Properties to set
         */
        function Resp_DebugAddMail(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_DebugAddMail ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_DebugAddMail
         * @instance
         */
        Resp_DebugAddMail.prototype.ErrorCode = 0;

        /**
         * Resp_DebugAddMail Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_DebugAddMail
         * @instance
         */
        Resp_DebugAddMail.prototype.Cmn = null;

        /**
         * Creates a new Resp_DebugAddMail instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_DebugAddMail
         * @static
         * @param {DcgProto.IResp_DebugAddMail=} [properties] Properties to set
         * @returns {DcgProto.Resp_DebugAddMail} Resp_DebugAddMail instance
         */
        Resp_DebugAddMail.create = function create(properties) {
            return new Resp_DebugAddMail(properties);
        };

        /**
         * Encodes the specified Resp_DebugAddMail message. Does not implicitly {@link DcgProto.Resp_DebugAddMail.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_DebugAddMail
         * @static
         * @param {DcgProto.IResp_DebugAddMail} m Resp_DebugAddMail message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_DebugAddMail.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_DebugAddMail message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_DebugAddMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_DebugAddMail} Resp_DebugAddMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_DebugAddMail.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_DebugAddMail();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_DebugAddMail message.
         * @function verify
         * @memberof DcgProto.Resp_DebugAddMail
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_DebugAddMail.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_DebugAddMail;
    })();

    DcgProto.Req_PvpInvite = (function() {

        /**
         * Properties of a Req_PvpInvite.
         * @memberof DcgProto
         * @interface IReq_PvpInvite
         * @property {DcgProto.E_ROOM_MODE|null} [RoomMode] Req_PvpInvite RoomMode
         * @property {Long|null} [RoleIID] Req_PvpInvite RoleIID
         * @property {Long|null} [RoomIID] Req_PvpInvite RoomIID
         */

        /**
         * Constructs a new Req_PvpInvite.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpInvite.
         * @implements IReq_PvpInvite
         * @constructor
         * @param {DcgProto.IReq_PvpInvite=} [p] Properties to set
         */
        function Req_PvpInvite(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PvpInvite RoomMode.
         * @member {DcgProto.E_ROOM_MODE} RoomMode
         * @memberof DcgProto.Req_PvpInvite
         * @instance
         */
        Req_PvpInvite.prototype.RoomMode = 0;

        /**
         * Req_PvpInvite RoleIID.
         * @member {Long} RoleIID
         * @memberof DcgProto.Req_PvpInvite
         * @instance
         */
        Req_PvpInvite.prototype.RoleIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_PvpInvite RoomIID.
         * @member {Long} RoomIID
         * @memberof DcgProto.Req_PvpInvite
         * @instance
         */
        Req_PvpInvite.prototype.RoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_PvpInvite instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpInvite
         * @static
         * @param {DcgProto.IReq_PvpInvite=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpInvite} Req_PvpInvite instance
         */
        Req_PvpInvite.create = function create(properties) {
            return new Req_PvpInvite(properties);
        };

        /**
         * Encodes the specified Req_PvpInvite message. Does not implicitly {@link DcgProto.Req_PvpInvite.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpInvite
         * @static
         * @param {DcgProto.IReq_PvpInvite} m Req_PvpInvite message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpInvite.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomMode != null && Object.hasOwnProperty.call(m, "RoomMode"))
                w.uint32(8).int32(m.RoomMode);
            if (m.RoleIID != null && Object.hasOwnProperty.call(m, "RoleIID"))
                w.uint32(16).int64(m.RoleIID);
            if (m.RoomIID != null && Object.hasOwnProperty.call(m, "RoomIID"))
                w.uint32(24).int64(m.RoomIID);
            return w;
        };

        /**
         * Decodes a Req_PvpInvite message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpInvite
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpInvite} Req_PvpInvite
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpInvite.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpInvite();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomMode = r.int32();
                    break;
                case 2:
                    m.RoleIID = r.int64();
                    break;
                case 3:
                    m.RoomIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpInvite message.
         * @function verify
         * @memberof DcgProto.Req_PvpInvite
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpInvite.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomMode != null && m.hasOwnProperty("RoomMode")) {
                switch (m.RoomMode) {
                default:
                    return "RoomMode: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            }
            if (m.RoleIID != null && m.hasOwnProperty("RoleIID")) {
                if (!$util.isInteger(m.RoleIID) && !(m.RoleIID && $util.isInteger(m.RoleIID.low) && $util.isInteger(m.RoleIID.high)))
                    return "RoleIID: integer|Long expected";
            }
            if (m.RoomIID != null && m.hasOwnProperty("RoomIID")) {
                if (!$util.isInteger(m.RoomIID) && !(m.RoomIID && $util.isInteger(m.RoomIID.low) && $util.isInteger(m.RoomIID.high)))
                    return "RoomIID: integer|Long expected";
            }
            return null;
        };

        return Req_PvpInvite;
    })();

    DcgProto.Resp_PvpInvite = (function() {

        /**
         * Properties of a Resp_PvpInvite.
         * @memberof DcgProto
         * @interface IResp_PvpInvite
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpInvite ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpInvite Cmn
         */

        /**
         * Constructs a new Resp_PvpInvite.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpInvite.
         * @implements IResp_PvpInvite
         * @constructor
         * @param {DcgProto.IResp_PvpInvite=} [p] Properties to set
         */
        function Resp_PvpInvite(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpInvite ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpInvite
         * @instance
         */
        Resp_PvpInvite.prototype.ErrorCode = 0;

        /**
         * Resp_PvpInvite Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpInvite
         * @instance
         */
        Resp_PvpInvite.prototype.Cmn = null;

        /**
         * Creates a new Resp_PvpInvite instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpInvite
         * @static
         * @param {DcgProto.IResp_PvpInvite=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpInvite} Resp_PvpInvite instance
         */
        Resp_PvpInvite.create = function create(properties) {
            return new Resp_PvpInvite(properties);
        };

        /**
         * Encodes the specified Resp_PvpInvite message. Does not implicitly {@link DcgProto.Resp_PvpInvite.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpInvite
         * @static
         * @param {DcgProto.IResp_PvpInvite} m Resp_PvpInvite message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpInvite.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpInvite message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpInvite
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpInvite} Resp_PvpInvite
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpInvite.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpInvite();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpInvite message.
         * @function verify
         * @memberof DcgProto.Resp_PvpInvite
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpInvite.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PvpInvite;
    })();

    DcgProto.Push_PvpInvite = (function() {

        /**
         * Properties of a Push_PvpInvite.
         * @memberof DcgProto
         * @interface IPush_PvpInvite
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Push_PvpInvite Cmn
         */

        /**
         * Constructs a new Push_PvpInvite.
         * @memberof DcgProto
         * @classdesc Represents a Push_PvpInvite.
         * @implements IPush_PvpInvite
         * @constructor
         * @param {DcgProto.IPush_PvpInvite=} [p] Properties to set
         */
        function Push_PvpInvite(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Push_PvpInvite Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Push_PvpInvite
         * @instance
         */
        Push_PvpInvite.prototype.Cmn = null;

        /**
         * Creates a new Push_PvpInvite instance using the specified properties.
         * @function create
         * @memberof DcgProto.Push_PvpInvite
         * @static
         * @param {DcgProto.IPush_PvpInvite=} [properties] Properties to set
         * @returns {DcgProto.Push_PvpInvite} Push_PvpInvite instance
         */
        Push_PvpInvite.create = function create(properties) {
            return new Push_PvpInvite(properties);
        };

        /**
         * Encodes the specified Push_PvpInvite message. Does not implicitly {@link DcgProto.Push_PvpInvite.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Push_PvpInvite
         * @static
         * @param {DcgProto.IPush_PvpInvite} m Push_PvpInvite message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Push_PvpInvite.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Push_PvpInvite message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Push_PvpInvite
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Push_PvpInvite} Push_PvpInvite
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Push_PvpInvite.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Push_PvpInvite();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Push_PvpInvite message.
         * @function verify
         * @memberof DcgProto.Push_PvpInvite
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Push_PvpInvite.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Push_PvpInvite;
    })();

    DcgProto.Req_PvpInviteCancel = (function() {

        /**
         * Properties of a Req_PvpInviteCancel.
         * @memberof DcgProto
         * @interface IReq_PvpInviteCancel
         * @property {Long|null} [InviteIID] Req_PvpInviteCancel InviteIID
         */

        /**
         * Constructs a new Req_PvpInviteCancel.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpInviteCancel.
         * @implements IReq_PvpInviteCancel
         * @constructor
         * @param {DcgProto.IReq_PvpInviteCancel=} [p] Properties to set
         */
        function Req_PvpInviteCancel(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PvpInviteCancel InviteIID.
         * @member {Long} InviteIID
         * @memberof DcgProto.Req_PvpInviteCancel
         * @instance
         */
        Req_PvpInviteCancel.prototype.InviteIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_PvpInviteCancel instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpInviteCancel
         * @static
         * @param {DcgProto.IReq_PvpInviteCancel=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpInviteCancel} Req_PvpInviteCancel instance
         */
        Req_PvpInviteCancel.create = function create(properties) {
            return new Req_PvpInviteCancel(properties);
        };

        /**
         * Encodes the specified Req_PvpInviteCancel message. Does not implicitly {@link DcgProto.Req_PvpInviteCancel.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpInviteCancel
         * @static
         * @param {DcgProto.IReq_PvpInviteCancel} m Req_PvpInviteCancel message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpInviteCancel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.InviteIID != null && Object.hasOwnProperty.call(m, "InviteIID"))
                w.uint32(8).int64(m.InviteIID);
            return w;
        };

        /**
         * Decodes a Req_PvpInviteCancel message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpInviteCancel
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpInviteCancel} Req_PvpInviteCancel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpInviteCancel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpInviteCancel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.InviteIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpInviteCancel message.
         * @function verify
         * @memberof DcgProto.Req_PvpInviteCancel
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpInviteCancel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.InviteIID != null && m.hasOwnProperty("InviteIID")) {
                if (!$util.isInteger(m.InviteIID) && !(m.InviteIID && $util.isInteger(m.InviteIID.low) && $util.isInteger(m.InviteIID.high)))
                    return "InviteIID: integer|Long expected";
            }
            return null;
        };

        return Req_PvpInviteCancel;
    })();

    DcgProto.Resp_PvpInviteCancel = (function() {

        /**
         * Properties of a Resp_PvpInviteCancel.
         * @memberof DcgProto
         * @interface IResp_PvpInviteCancel
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpInviteCancel ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpInviteCancel Cmn
         */

        /**
         * Constructs a new Resp_PvpInviteCancel.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpInviteCancel.
         * @implements IResp_PvpInviteCancel
         * @constructor
         * @param {DcgProto.IResp_PvpInviteCancel=} [p] Properties to set
         */
        function Resp_PvpInviteCancel(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpInviteCancel ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpInviteCancel
         * @instance
         */
        Resp_PvpInviteCancel.prototype.ErrorCode = 0;

        /**
         * Resp_PvpInviteCancel Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpInviteCancel
         * @instance
         */
        Resp_PvpInviteCancel.prototype.Cmn = null;

        /**
         * Creates a new Resp_PvpInviteCancel instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpInviteCancel
         * @static
         * @param {DcgProto.IResp_PvpInviteCancel=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpInviteCancel} Resp_PvpInviteCancel instance
         */
        Resp_PvpInviteCancel.create = function create(properties) {
            return new Resp_PvpInviteCancel(properties);
        };

        /**
         * Encodes the specified Resp_PvpInviteCancel message. Does not implicitly {@link DcgProto.Resp_PvpInviteCancel.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpInviteCancel
         * @static
         * @param {DcgProto.IResp_PvpInviteCancel} m Resp_PvpInviteCancel message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpInviteCancel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpInviteCancel message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpInviteCancel
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpInviteCancel} Resp_PvpInviteCancel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpInviteCancel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpInviteCancel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpInviteCancel message.
         * @function verify
         * @memberof DcgProto.Resp_PvpInviteCancel
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpInviteCancel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PvpInviteCancel;
    })();

    DcgProto.Push_PvpInviteCancel = (function() {

        /**
         * Properties of a Push_PvpInviteCancel.
         * @memberof DcgProto
         * @interface IPush_PvpInviteCancel
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Push_PvpInviteCancel Cmn
         */

        /**
         * Constructs a new Push_PvpInviteCancel.
         * @memberof DcgProto
         * @classdesc Represents a Push_PvpInviteCancel.
         * @implements IPush_PvpInviteCancel
         * @constructor
         * @param {DcgProto.IPush_PvpInviteCancel=} [p] Properties to set
         */
        function Push_PvpInviteCancel(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Push_PvpInviteCancel Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Push_PvpInviteCancel
         * @instance
         */
        Push_PvpInviteCancel.prototype.Cmn = null;

        /**
         * Creates a new Push_PvpInviteCancel instance using the specified properties.
         * @function create
         * @memberof DcgProto.Push_PvpInviteCancel
         * @static
         * @param {DcgProto.IPush_PvpInviteCancel=} [properties] Properties to set
         * @returns {DcgProto.Push_PvpInviteCancel} Push_PvpInviteCancel instance
         */
        Push_PvpInviteCancel.create = function create(properties) {
            return new Push_PvpInviteCancel(properties);
        };

        /**
         * Encodes the specified Push_PvpInviteCancel message. Does not implicitly {@link DcgProto.Push_PvpInviteCancel.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Push_PvpInviteCancel
         * @static
         * @param {DcgProto.IPush_PvpInviteCancel} m Push_PvpInviteCancel message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Push_PvpInviteCancel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Push_PvpInviteCancel message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Push_PvpInviteCancel
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Push_PvpInviteCancel} Push_PvpInviteCancel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Push_PvpInviteCancel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Push_PvpInviteCancel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Push_PvpInviteCancel message.
         * @function verify
         * @memberof DcgProto.Push_PvpInviteCancel
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Push_PvpInviteCancel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Push_PvpInviteCancel;
    })();

    DcgProto.Req_PvpInviteAgreeOrRefuse = (function() {

        /**
         * Properties of a Req_PvpInviteAgreeOrRefuse.
         * @memberof DcgProto
         * @interface IReq_PvpInviteAgreeOrRefuse
         * @property {DcgProto.E_Ope|null} [Ope] Req_PvpInviteAgreeOrRefuse Ope
         * @property {Long|null} [InviteIID] Req_PvpInviteAgreeOrRefuse InviteIID
         */

        /**
         * Constructs a new Req_PvpInviteAgreeOrRefuse.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpInviteAgreeOrRefuse.
         * @implements IReq_PvpInviteAgreeOrRefuse
         * @constructor
         * @param {DcgProto.IReq_PvpInviteAgreeOrRefuse=} [p] Properties to set
         */
        function Req_PvpInviteAgreeOrRefuse(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PvpInviteAgreeOrRefuse Ope.
         * @member {DcgProto.E_Ope} Ope
         * @memberof DcgProto.Req_PvpInviteAgreeOrRefuse
         * @instance
         */
        Req_PvpInviteAgreeOrRefuse.prototype.Ope = 0;

        /**
         * Req_PvpInviteAgreeOrRefuse InviteIID.
         * @member {Long} InviteIID
         * @memberof DcgProto.Req_PvpInviteAgreeOrRefuse
         * @instance
         */
        Req_PvpInviteAgreeOrRefuse.prototype.InviteIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_PvpInviteAgreeOrRefuse instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpInviteAgreeOrRefuse
         * @static
         * @param {DcgProto.IReq_PvpInviteAgreeOrRefuse=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpInviteAgreeOrRefuse} Req_PvpInviteAgreeOrRefuse instance
         */
        Req_PvpInviteAgreeOrRefuse.create = function create(properties) {
            return new Req_PvpInviteAgreeOrRefuse(properties);
        };

        /**
         * Encodes the specified Req_PvpInviteAgreeOrRefuse message. Does not implicitly {@link DcgProto.Req_PvpInviteAgreeOrRefuse.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpInviteAgreeOrRefuse
         * @static
         * @param {DcgProto.IReq_PvpInviteAgreeOrRefuse} m Req_PvpInviteAgreeOrRefuse message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpInviteAgreeOrRefuse.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Ope != null && Object.hasOwnProperty.call(m, "Ope"))
                w.uint32(8).int32(m.Ope);
            if (m.InviteIID != null && Object.hasOwnProperty.call(m, "InviteIID"))
                w.uint32(16).int64(m.InviteIID);
            return w;
        };

        /**
         * Decodes a Req_PvpInviteAgreeOrRefuse message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpInviteAgreeOrRefuse
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpInviteAgreeOrRefuse} Req_PvpInviteAgreeOrRefuse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpInviteAgreeOrRefuse.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpInviteAgreeOrRefuse();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Ope = r.int32();
                    break;
                case 2:
                    m.InviteIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpInviteAgreeOrRefuse message.
         * @function verify
         * @memberof DcgProto.Req_PvpInviteAgreeOrRefuse
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpInviteAgreeOrRefuse.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Ope != null && m.hasOwnProperty("Ope")) {
                switch (m.Ope) {
                default:
                    return "Ope: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            if (m.InviteIID != null && m.hasOwnProperty("InviteIID")) {
                if (!$util.isInteger(m.InviteIID) && !(m.InviteIID && $util.isInteger(m.InviteIID.low) && $util.isInteger(m.InviteIID.high)))
                    return "InviteIID: integer|Long expected";
            }
            return null;
        };

        return Req_PvpInviteAgreeOrRefuse;
    })();

    DcgProto.Resp_PvpInviteAgreeOrRefuse = (function() {

        /**
         * Properties of a Resp_PvpInviteAgreeOrRefuse.
         * @memberof DcgProto
         * @interface IResp_PvpInviteAgreeOrRefuse
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpInviteAgreeOrRefuse ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpInviteAgreeOrRefuse Cmn
         */

        /**
         * Constructs a new Resp_PvpInviteAgreeOrRefuse.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpInviteAgreeOrRefuse.
         * @implements IResp_PvpInviteAgreeOrRefuse
         * @constructor
         * @param {DcgProto.IResp_PvpInviteAgreeOrRefuse=} [p] Properties to set
         */
        function Resp_PvpInviteAgreeOrRefuse(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpInviteAgreeOrRefuse ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpInviteAgreeOrRefuse
         * @instance
         */
        Resp_PvpInviteAgreeOrRefuse.prototype.ErrorCode = 0;

        /**
         * Resp_PvpInviteAgreeOrRefuse Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpInviteAgreeOrRefuse
         * @instance
         */
        Resp_PvpInviteAgreeOrRefuse.prototype.Cmn = null;

        /**
         * Creates a new Resp_PvpInviteAgreeOrRefuse instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpInviteAgreeOrRefuse
         * @static
         * @param {DcgProto.IResp_PvpInviteAgreeOrRefuse=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpInviteAgreeOrRefuse} Resp_PvpInviteAgreeOrRefuse instance
         */
        Resp_PvpInviteAgreeOrRefuse.create = function create(properties) {
            return new Resp_PvpInviteAgreeOrRefuse(properties);
        };

        /**
         * Encodes the specified Resp_PvpInviteAgreeOrRefuse message. Does not implicitly {@link DcgProto.Resp_PvpInviteAgreeOrRefuse.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpInviteAgreeOrRefuse
         * @static
         * @param {DcgProto.IResp_PvpInviteAgreeOrRefuse} m Resp_PvpInviteAgreeOrRefuse message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpInviteAgreeOrRefuse.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpInviteAgreeOrRefuse message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpInviteAgreeOrRefuse
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpInviteAgreeOrRefuse} Resp_PvpInviteAgreeOrRefuse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpInviteAgreeOrRefuse.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpInviteAgreeOrRefuse();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpInviteAgreeOrRefuse message.
         * @function verify
         * @memberof DcgProto.Resp_PvpInviteAgreeOrRefuse
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpInviteAgreeOrRefuse.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PvpInviteAgreeOrRefuse;
    })();

    DcgProto.Push_PvpInviteAgreeOrRefuse = (function() {

        /**
         * Properties of a Push_PvpInviteAgreeOrRefuse.
         * @memberof DcgProto
         * @interface IPush_PvpInviteAgreeOrRefuse
         * @property {DcgProto.E_Ope|null} [Ope] Push_PvpInviteAgreeOrRefuse Ope
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Push_PvpInviteAgreeOrRefuse Cmn
         */

        /**
         * Constructs a new Push_PvpInviteAgreeOrRefuse.
         * @memberof DcgProto
         * @classdesc Represents a Push_PvpInviteAgreeOrRefuse.
         * @implements IPush_PvpInviteAgreeOrRefuse
         * @constructor
         * @param {DcgProto.IPush_PvpInviteAgreeOrRefuse=} [p] Properties to set
         */
        function Push_PvpInviteAgreeOrRefuse(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Push_PvpInviteAgreeOrRefuse Ope.
         * @member {DcgProto.E_Ope} Ope
         * @memberof DcgProto.Push_PvpInviteAgreeOrRefuse
         * @instance
         */
        Push_PvpInviteAgreeOrRefuse.prototype.Ope = 0;

        /**
         * Push_PvpInviteAgreeOrRefuse Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Push_PvpInviteAgreeOrRefuse
         * @instance
         */
        Push_PvpInviteAgreeOrRefuse.prototype.Cmn = null;

        /**
         * Creates a new Push_PvpInviteAgreeOrRefuse instance using the specified properties.
         * @function create
         * @memberof DcgProto.Push_PvpInviteAgreeOrRefuse
         * @static
         * @param {DcgProto.IPush_PvpInviteAgreeOrRefuse=} [properties] Properties to set
         * @returns {DcgProto.Push_PvpInviteAgreeOrRefuse} Push_PvpInviteAgreeOrRefuse instance
         */
        Push_PvpInviteAgreeOrRefuse.create = function create(properties) {
            return new Push_PvpInviteAgreeOrRefuse(properties);
        };

        /**
         * Encodes the specified Push_PvpInviteAgreeOrRefuse message. Does not implicitly {@link DcgProto.Push_PvpInviteAgreeOrRefuse.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Push_PvpInviteAgreeOrRefuse
         * @static
         * @param {DcgProto.IPush_PvpInviteAgreeOrRefuse} m Push_PvpInviteAgreeOrRefuse message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Push_PvpInviteAgreeOrRefuse.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Ope != null && Object.hasOwnProperty.call(m, "Ope"))
                w.uint32(8).int32(m.Ope);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Push_PvpInviteAgreeOrRefuse message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Push_PvpInviteAgreeOrRefuse
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Push_PvpInviteAgreeOrRefuse} Push_PvpInviteAgreeOrRefuse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Push_PvpInviteAgreeOrRefuse.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Push_PvpInviteAgreeOrRefuse();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Ope = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Push_PvpInviteAgreeOrRefuse message.
         * @function verify
         * @memberof DcgProto.Push_PvpInviteAgreeOrRefuse
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Push_PvpInviteAgreeOrRefuse.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Ope != null && m.hasOwnProperty("Ope")) {
                switch (m.Ope) {
                default:
                    return "Ope: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Push_PvpInviteAgreeOrRefuse;
    })();

    DcgProto.Req_MatchStart = (function() {

        /**
         * Properties of a Req_MatchStart.
         * @memberof DcgProto
         * @interface IReq_MatchStart
         * @property {Long|null} [DeckIID] Req_MatchStart DeckIID
         * @property {DcgProto.E_ROOM_MODE|null} [RoomMode] Req_MatchStart RoomMode
         */

        /**
         * Constructs a new Req_MatchStart.
         * @memberof DcgProto
         * @classdesc Represents a Req_MatchStart.
         * @implements IReq_MatchStart
         * @constructor
         * @param {DcgProto.IReq_MatchStart=} [p] Properties to set
         */
        function Req_MatchStart(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_MatchStart DeckIID.
         * @member {Long} DeckIID
         * @memberof DcgProto.Req_MatchStart
         * @instance
         */
        Req_MatchStart.prototype.DeckIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_MatchStart RoomMode.
         * @member {DcgProto.E_ROOM_MODE} RoomMode
         * @memberof DcgProto.Req_MatchStart
         * @instance
         */
        Req_MatchStart.prototype.RoomMode = 0;

        /**
         * Creates a new Req_MatchStart instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_MatchStart
         * @static
         * @param {DcgProto.IReq_MatchStart=} [properties] Properties to set
         * @returns {DcgProto.Req_MatchStart} Req_MatchStart instance
         */
        Req_MatchStart.create = function create(properties) {
            return new Req_MatchStart(properties);
        };

        /**
         * Encodes the specified Req_MatchStart message. Does not implicitly {@link DcgProto.Req_MatchStart.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_MatchStart
         * @static
         * @param {DcgProto.IReq_MatchStart} m Req_MatchStart message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_MatchStart.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DeckIID != null && Object.hasOwnProperty.call(m, "DeckIID"))
                w.uint32(8).int64(m.DeckIID);
            if (m.RoomMode != null && Object.hasOwnProperty.call(m, "RoomMode"))
                w.uint32(16).int32(m.RoomMode);
            return w;
        };

        /**
         * Decodes a Req_MatchStart message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_MatchStart
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_MatchStart} Req_MatchStart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_MatchStart.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_MatchStart();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DeckIID = r.int64();
                    break;
                case 2:
                    m.RoomMode = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_MatchStart message.
         * @function verify
         * @memberof DcgProto.Req_MatchStart
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_MatchStart.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.DeckIID != null && m.hasOwnProperty("DeckIID")) {
                if (!$util.isInteger(m.DeckIID) && !(m.DeckIID && $util.isInteger(m.DeckIID.low) && $util.isInteger(m.DeckIID.high)))
                    return "DeckIID: integer|Long expected";
            }
            if (m.RoomMode != null && m.hasOwnProperty("RoomMode")) {
                switch (m.RoomMode) {
                default:
                    return "RoomMode: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            }
            return null;
        };

        return Req_MatchStart;
    })();

    DcgProto.Resp_MatchStart = (function() {

        /**
         * Properties of a Resp_MatchStart.
         * @memberof DcgProto
         * @interface IResp_MatchStart
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_MatchStart ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_MatchStart Cmn
         */

        /**
         * Constructs a new Resp_MatchStart.
         * @memberof DcgProto
         * @classdesc Represents a Resp_MatchStart.
         * @implements IResp_MatchStart
         * @constructor
         * @param {DcgProto.IResp_MatchStart=} [p] Properties to set
         */
        function Resp_MatchStart(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_MatchStart ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_MatchStart
         * @instance
         */
        Resp_MatchStart.prototype.ErrorCode = 0;

        /**
         * Resp_MatchStart Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_MatchStart
         * @instance
         */
        Resp_MatchStart.prototype.Cmn = null;

        /**
         * Creates a new Resp_MatchStart instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_MatchStart
         * @static
         * @param {DcgProto.IResp_MatchStart=} [properties] Properties to set
         * @returns {DcgProto.Resp_MatchStart} Resp_MatchStart instance
         */
        Resp_MatchStart.create = function create(properties) {
            return new Resp_MatchStart(properties);
        };

        /**
         * Encodes the specified Resp_MatchStart message. Does not implicitly {@link DcgProto.Resp_MatchStart.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_MatchStart
         * @static
         * @param {DcgProto.IResp_MatchStart} m Resp_MatchStart message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_MatchStart.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_MatchStart message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_MatchStart
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_MatchStart} Resp_MatchStart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_MatchStart.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_MatchStart();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_MatchStart message.
         * @function verify
         * @memberof DcgProto.Resp_MatchStart
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_MatchStart.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_MatchStart;
    })();

    DcgProto.Req_MatchCancel = (function() {

        /**
         * Properties of a Req_MatchCancel.
         * @memberof DcgProto
         * @interface IReq_MatchCancel
         * @property {DcgProto.E_ROOM_MODE|null} [RoomMode] Req_MatchCancel RoomMode
         */

        /**
         * Constructs a new Req_MatchCancel.
         * @memberof DcgProto
         * @classdesc Represents a Req_MatchCancel.
         * @implements IReq_MatchCancel
         * @constructor
         * @param {DcgProto.IReq_MatchCancel=} [p] Properties to set
         */
        function Req_MatchCancel(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_MatchCancel RoomMode.
         * @member {DcgProto.E_ROOM_MODE} RoomMode
         * @memberof DcgProto.Req_MatchCancel
         * @instance
         */
        Req_MatchCancel.prototype.RoomMode = 0;

        /**
         * Creates a new Req_MatchCancel instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_MatchCancel
         * @static
         * @param {DcgProto.IReq_MatchCancel=} [properties] Properties to set
         * @returns {DcgProto.Req_MatchCancel} Req_MatchCancel instance
         */
        Req_MatchCancel.create = function create(properties) {
            return new Req_MatchCancel(properties);
        };

        /**
         * Encodes the specified Req_MatchCancel message. Does not implicitly {@link DcgProto.Req_MatchCancel.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_MatchCancel
         * @static
         * @param {DcgProto.IReq_MatchCancel} m Req_MatchCancel message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_MatchCancel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomMode != null && Object.hasOwnProperty.call(m, "RoomMode"))
                w.uint32(8).int32(m.RoomMode);
            return w;
        };

        /**
         * Decodes a Req_MatchCancel message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_MatchCancel
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_MatchCancel} Req_MatchCancel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_MatchCancel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_MatchCancel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomMode = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_MatchCancel message.
         * @function verify
         * @memberof DcgProto.Req_MatchCancel
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_MatchCancel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomMode != null && m.hasOwnProperty("RoomMode")) {
                switch (m.RoomMode) {
                default:
                    return "RoomMode: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            }
            return null;
        };

        return Req_MatchCancel;
    })();

    DcgProto.Resp_MatchCancel = (function() {

        /**
         * Properties of a Resp_MatchCancel.
         * @memberof DcgProto
         * @interface IResp_MatchCancel
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_MatchCancel ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_MatchCancel Cmn
         */

        /**
         * Constructs a new Resp_MatchCancel.
         * @memberof DcgProto
         * @classdesc Represents a Resp_MatchCancel.
         * @implements IResp_MatchCancel
         * @constructor
         * @param {DcgProto.IResp_MatchCancel=} [p] Properties to set
         */
        function Resp_MatchCancel(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_MatchCancel ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_MatchCancel
         * @instance
         */
        Resp_MatchCancel.prototype.ErrorCode = 0;

        /**
         * Resp_MatchCancel Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_MatchCancel
         * @instance
         */
        Resp_MatchCancel.prototype.Cmn = null;

        /**
         * Creates a new Resp_MatchCancel instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_MatchCancel
         * @static
         * @param {DcgProto.IResp_MatchCancel=} [properties] Properties to set
         * @returns {DcgProto.Resp_MatchCancel} Resp_MatchCancel instance
         */
        Resp_MatchCancel.create = function create(properties) {
            return new Resp_MatchCancel(properties);
        };

        /**
         * Encodes the specified Resp_MatchCancel message. Does not implicitly {@link DcgProto.Resp_MatchCancel.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_MatchCancel
         * @static
         * @param {DcgProto.IResp_MatchCancel} m Resp_MatchCancel message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_MatchCancel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_MatchCancel message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_MatchCancel
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_MatchCancel} Resp_MatchCancel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_MatchCancel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_MatchCancel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_MatchCancel message.
         * @function verify
         * @memberof DcgProto.Resp_MatchCancel
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_MatchCancel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_MatchCancel;
    })();

    DcgProto.Push_RoomInfo = (function() {

        /**
         * Properties of a Push_RoomInfo.
         * @memberof DcgProto
         * @interface IPush_RoomInfo
         * @property {DcgProto.IS_RoomData|null} [RoomData] Push_RoomInfo RoomData
         * @property {DcgProto.IS_ReconnectData|null} [ReconnectData] Push_RoomInfo ReconnectData
         */

        /**
         * Constructs a new Push_RoomInfo.
         * @memberof DcgProto
         * @classdesc Represents a Push_RoomInfo.
         * @implements IPush_RoomInfo
         * @constructor
         * @param {DcgProto.IPush_RoomInfo=} [p] Properties to set
         */
        function Push_RoomInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Push_RoomInfo RoomData.
         * @member {DcgProto.IS_RoomData|null|undefined} RoomData
         * @memberof DcgProto.Push_RoomInfo
         * @instance
         */
        Push_RoomInfo.prototype.RoomData = null;

        /**
         * Push_RoomInfo ReconnectData.
         * @member {DcgProto.IS_ReconnectData|null|undefined} ReconnectData
         * @memberof DcgProto.Push_RoomInfo
         * @instance
         */
        Push_RoomInfo.prototype.ReconnectData = null;

        /**
         * Creates a new Push_RoomInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.Push_RoomInfo
         * @static
         * @param {DcgProto.IPush_RoomInfo=} [properties] Properties to set
         * @returns {DcgProto.Push_RoomInfo} Push_RoomInfo instance
         */
        Push_RoomInfo.create = function create(properties) {
            return new Push_RoomInfo(properties);
        };

        /**
         * Encodes the specified Push_RoomInfo message. Does not implicitly {@link DcgProto.Push_RoomInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Push_RoomInfo
         * @static
         * @param {DcgProto.IPush_RoomInfo} m Push_RoomInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Push_RoomInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomData != null && Object.hasOwnProperty.call(m, "RoomData"))
                $root.DcgProto.S_RoomData.encode(m.RoomData, w.uint32(10).fork()).ldelim();
            if (m.ReconnectData != null && Object.hasOwnProperty.call(m, "ReconnectData"))
                $root.DcgProto.S_ReconnectData.encode(m.ReconnectData, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Push_RoomInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Push_RoomInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Push_RoomInfo} Push_RoomInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Push_RoomInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Push_RoomInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomData = $root.DcgProto.S_RoomData.decode(r, r.uint32());
                    break;
                case 2:
                    m.ReconnectData = $root.DcgProto.S_ReconnectData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Push_RoomInfo message.
         * @function verify
         * @memberof DcgProto.Push_RoomInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Push_RoomInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomData != null && m.hasOwnProperty("RoomData")) {
                {
                    var e = $root.DcgProto.S_RoomData.verify(m.RoomData);
                    if (e)
                        return "RoomData." + e;
                }
            }
            if (m.ReconnectData != null && m.hasOwnProperty("ReconnectData")) {
                {
                    var e = $root.DcgProto.S_ReconnectData.verify(m.ReconnectData);
                    if (e)
                        return "ReconnectData." + e;
                }
            }
            return null;
        };

        return Push_RoomInfo;
    })();

    DcgProto.Req_RoomJoin = (function() {

        /**
         * Properties of a Req_RoomJoin.
         * @memberof DcgProto
         * @interface IReq_RoomJoin
         * @property {Long|null} [RoomIID] Req_RoomJoin RoomIID
         * @property {Long|null} [DeckIID] Req_RoomJoin DeckIID
         */

        /**
         * Constructs a new Req_RoomJoin.
         * @memberof DcgProto
         * @classdesc Represents a Req_RoomJoin.
         * @implements IReq_RoomJoin
         * @constructor
         * @param {DcgProto.IReq_RoomJoin=} [p] Properties to set
         */
        function Req_RoomJoin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_RoomJoin RoomIID.
         * @member {Long} RoomIID
         * @memberof DcgProto.Req_RoomJoin
         * @instance
         */
        Req_RoomJoin.prototype.RoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_RoomJoin DeckIID.
         * @member {Long} DeckIID
         * @memberof DcgProto.Req_RoomJoin
         * @instance
         */
        Req_RoomJoin.prototype.DeckIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_RoomJoin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_RoomJoin
         * @static
         * @param {DcgProto.IReq_RoomJoin=} [properties] Properties to set
         * @returns {DcgProto.Req_RoomJoin} Req_RoomJoin instance
         */
        Req_RoomJoin.create = function create(properties) {
            return new Req_RoomJoin(properties);
        };

        /**
         * Encodes the specified Req_RoomJoin message. Does not implicitly {@link DcgProto.Req_RoomJoin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_RoomJoin
         * @static
         * @param {DcgProto.IReq_RoomJoin} m Req_RoomJoin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_RoomJoin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomIID != null && Object.hasOwnProperty.call(m, "RoomIID"))
                w.uint32(8).int64(m.RoomIID);
            if (m.DeckIID != null && Object.hasOwnProperty.call(m, "DeckIID"))
                w.uint32(16).int64(m.DeckIID);
            return w;
        };

        /**
         * Decodes a Req_RoomJoin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_RoomJoin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_RoomJoin} Req_RoomJoin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_RoomJoin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_RoomJoin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomIID = r.int64();
                    break;
                case 2:
                    m.DeckIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_RoomJoin message.
         * @function verify
         * @memberof DcgProto.Req_RoomJoin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_RoomJoin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomIID != null && m.hasOwnProperty("RoomIID")) {
                if (!$util.isInteger(m.RoomIID) && !(m.RoomIID && $util.isInteger(m.RoomIID.low) && $util.isInteger(m.RoomIID.high)))
                    return "RoomIID: integer|Long expected";
            }
            if (m.DeckIID != null && m.hasOwnProperty("DeckIID")) {
                if (!$util.isInteger(m.DeckIID) && !(m.DeckIID && $util.isInteger(m.DeckIID.low) && $util.isInteger(m.DeckIID.high)))
                    return "DeckIID: integer|Long expected";
            }
            return null;
        };

        return Req_RoomJoin;
    })();

    DcgProto.Resp_RoomJoin = (function() {

        /**
         * Properties of a Resp_RoomJoin.
         * @memberof DcgProto
         * @interface IResp_RoomJoin
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_RoomJoin ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_RoomJoin Cmn
         */

        /**
         * Constructs a new Resp_RoomJoin.
         * @memberof DcgProto
         * @classdesc Represents a Resp_RoomJoin.
         * @implements IResp_RoomJoin
         * @constructor
         * @param {DcgProto.IResp_RoomJoin=} [p] Properties to set
         */
        function Resp_RoomJoin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_RoomJoin ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_RoomJoin
         * @instance
         */
        Resp_RoomJoin.prototype.ErrorCode = 0;

        /**
         * Resp_RoomJoin Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_RoomJoin
         * @instance
         */
        Resp_RoomJoin.prototype.Cmn = null;

        /**
         * Creates a new Resp_RoomJoin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_RoomJoin
         * @static
         * @param {DcgProto.IResp_RoomJoin=} [properties] Properties to set
         * @returns {DcgProto.Resp_RoomJoin} Resp_RoomJoin instance
         */
        Resp_RoomJoin.create = function create(properties) {
            return new Resp_RoomJoin(properties);
        };

        /**
         * Encodes the specified Resp_RoomJoin message. Does not implicitly {@link DcgProto.Resp_RoomJoin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_RoomJoin
         * @static
         * @param {DcgProto.IResp_RoomJoin} m Resp_RoomJoin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_RoomJoin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_RoomJoin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_RoomJoin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_RoomJoin} Resp_RoomJoin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_RoomJoin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_RoomJoin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_RoomJoin message.
         * @function verify
         * @memberof DcgProto.Resp_RoomJoin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_RoomJoin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_RoomJoin;
    })();

    DcgProto.Req_RoomQuit = (function() {

        /**
         * Properties of a Req_RoomQuit.
         * @memberof DcgProto
         * @interface IReq_RoomQuit
         * @property {Long|null} [RoomIID] Req_RoomQuit RoomIID
         */

        /**
         * Constructs a new Req_RoomQuit.
         * @memberof DcgProto
         * @classdesc Represents a Req_RoomQuit.
         * @implements IReq_RoomQuit
         * @constructor
         * @param {DcgProto.IReq_RoomQuit=} [p] Properties to set
         */
        function Req_RoomQuit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_RoomQuit RoomIID.
         * @member {Long} RoomIID
         * @memberof DcgProto.Req_RoomQuit
         * @instance
         */
        Req_RoomQuit.prototype.RoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_RoomQuit instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_RoomQuit
         * @static
         * @param {DcgProto.IReq_RoomQuit=} [properties] Properties to set
         * @returns {DcgProto.Req_RoomQuit} Req_RoomQuit instance
         */
        Req_RoomQuit.create = function create(properties) {
            return new Req_RoomQuit(properties);
        };

        /**
         * Encodes the specified Req_RoomQuit message. Does not implicitly {@link DcgProto.Req_RoomQuit.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_RoomQuit
         * @static
         * @param {DcgProto.IReq_RoomQuit} m Req_RoomQuit message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_RoomQuit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomIID != null && Object.hasOwnProperty.call(m, "RoomIID"))
                w.uint32(8).int64(m.RoomIID);
            return w;
        };

        /**
         * Decodes a Req_RoomQuit message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_RoomQuit
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_RoomQuit} Req_RoomQuit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_RoomQuit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_RoomQuit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_RoomQuit message.
         * @function verify
         * @memberof DcgProto.Req_RoomQuit
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_RoomQuit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomIID != null && m.hasOwnProperty("RoomIID")) {
                if (!$util.isInteger(m.RoomIID) && !(m.RoomIID && $util.isInteger(m.RoomIID.low) && $util.isInteger(m.RoomIID.high)))
                    return "RoomIID: integer|Long expected";
            }
            return null;
        };

        return Req_RoomQuit;
    })();

    DcgProto.Resp_RoomQuit = (function() {

        /**
         * Properties of a Resp_RoomQuit.
         * @memberof DcgProto
         * @interface IResp_RoomQuit
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_RoomQuit ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_RoomQuit Cmn
         */

        /**
         * Constructs a new Resp_RoomQuit.
         * @memberof DcgProto
         * @classdesc Represents a Resp_RoomQuit.
         * @implements IResp_RoomQuit
         * @constructor
         * @param {DcgProto.IResp_RoomQuit=} [p] Properties to set
         */
        function Resp_RoomQuit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_RoomQuit ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_RoomQuit
         * @instance
         */
        Resp_RoomQuit.prototype.ErrorCode = 0;

        /**
         * Resp_RoomQuit Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_RoomQuit
         * @instance
         */
        Resp_RoomQuit.prototype.Cmn = null;

        /**
         * Creates a new Resp_RoomQuit instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_RoomQuit
         * @static
         * @param {DcgProto.IResp_RoomQuit=} [properties] Properties to set
         * @returns {DcgProto.Resp_RoomQuit} Resp_RoomQuit instance
         */
        Resp_RoomQuit.create = function create(properties) {
            return new Resp_RoomQuit(properties);
        };

        /**
         * Encodes the specified Resp_RoomQuit message. Does not implicitly {@link DcgProto.Resp_RoomQuit.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_RoomQuit
         * @static
         * @param {DcgProto.IResp_RoomQuit} m Resp_RoomQuit message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_RoomQuit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_RoomQuit message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_RoomQuit
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_RoomQuit} Resp_RoomQuit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_RoomQuit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_RoomQuit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_RoomQuit message.
         * @function verify
         * @memberof DcgProto.Resp_RoomQuit
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_RoomQuit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_RoomQuit;
    })();

    DcgProto.Req_RoomFight = (function() {

        /**
         * Properties of a Req_RoomFight.
         * @memberof DcgProto
         * @interface IReq_RoomFight
         * @property {Long|null} [RoomIID] Req_RoomFight RoomIID
         * @property {DcgProto.IS_BattleParams|null} [BattleParams] Req_RoomFight BattleParams
         */

        /**
         * Constructs a new Req_RoomFight.
         * @memberof DcgProto
         * @classdesc Represents a Req_RoomFight.
         * @implements IReq_RoomFight
         * @constructor
         * @param {DcgProto.IReq_RoomFight=} [p] Properties to set
         */
        function Req_RoomFight(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_RoomFight RoomIID.
         * @member {Long} RoomIID
         * @memberof DcgProto.Req_RoomFight
         * @instance
         */
        Req_RoomFight.prototype.RoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_RoomFight BattleParams.
         * @member {DcgProto.IS_BattleParams|null|undefined} BattleParams
         * @memberof DcgProto.Req_RoomFight
         * @instance
         */
        Req_RoomFight.prototype.BattleParams = null;

        /**
         * Creates a new Req_RoomFight instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_RoomFight
         * @static
         * @param {DcgProto.IReq_RoomFight=} [properties] Properties to set
         * @returns {DcgProto.Req_RoomFight} Req_RoomFight instance
         */
        Req_RoomFight.create = function create(properties) {
            return new Req_RoomFight(properties);
        };

        /**
         * Encodes the specified Req_RoomFight message. Does not implicitly {@link DcgProto.Req_RoomFight.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_RoomFight
         * @static
         * @param {DcgProto.IReq_RoomFight} m Req_RoomFight message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_RoomFight.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomIID != null && Object.hasOwnProperty.call(m, "RoomIID"))
                w.uint32(8).int64(m.RoomIID);
            if (m.BattleParams != null && Object.hasOwnProperty.call(m, "BattleParams"))
                $root.DcgProto.S_BattleParams.encode(m.BattleParams, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Req_RoomFight message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_RoomFight
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_RoomFight} Req_RoomFight
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_RoomFight.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_RoomFight();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomIID = r.int64();
                    break;
                case 2:
                    m.BattleParams = $root.DcgProto.S_BattleParams.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_RoomFight message.
         * @function verify
         * @memberof DcgProto.Req_RoomFight
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_RoomFight.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomIID != null && m.hasOwnProperty("RoomIID")) {
                if (!$util.isInteger(m.RoomIID) && !(m.RoomIID && $util.isInteger(m.RoomIID.low) && $util.isInteger(m.RoomIID.high)))
                    return "RoomIID: integer|Long expected";
            }
            if (m.BattleParams != null && m.hasOwnProperty("BattleParams")) {
                {
                    var e = $root.DcgProto.S_BattleParams.verify(m.BattleParams);
                    if (e)
                        return "BattleParams." + e;
                }
            }
            return null;
        };

        return Req_RoomFight;
    })();

    DcgProto.Resp_RoomFight = (function() {

        /**
         * Properties of a Resp_RoomFight.
         * @memberof DcgProto
         * @interface IResp_RoomFight
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_RoomFight ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_RoomFight Cmn
         */

        /**
         * Constructs a new Resp_RoomFight.
         * @memberof DcgProto
         * @classdesc Represents a Resp_RoomFight.
         * @implements IResp_RoomFight
         * @constructor
         * @param {DcgProto.IResp_RoomFight=} [p] Properties to set
         */
        function Resp_RoomFight(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_RoomFight ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_RoomFight
         * @instance
         */
        Resp_RoomFight.prototype.ErrorCode = 0;

        /**
         * Resp_RoomFight Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_RoomFight
         * @instance
         */
        Resp_RoomFight.prototype.Cmn = null;

        /**
         * Creates a new Resp_RoomFight instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_RoomFight
         * @static
         * @param {DcgProto.IResp_RoomFight=} [properties] Properties to set
         * @returns {DcgProto.Resp_RoomFight} Resp_RoomFight instance
         */
        Resp_RoomFight.create = function create(properties) {
            return new Resp_RoomFight(properties);
        };

        /**
         * Encodes the specified Resp_RoomFight message. Does not implicitly {@link DcgProto.Resp_RoomFight.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_RoomFight
         * @static
         * @param {DcgProto.IResp_RoomFight} m Resp_RoomFight message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_RoomFight.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_RoomFight message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_RoomFight
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_RoomFight} Resp_RoomFight
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_RoomFight.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_RoomFight();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_RoomFight message.
         * @function verify
         * @memberof DcgProto.Resp_RoomFight
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_RoomFight.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_RoomFight;
    })();

    DcgProto.Push_RoomFight = (function() {

        /**
         * Properties of a Push_RoomFight.
         * @memberof DcgProto
         * @interface IPush_RoomFight
         * @property {string|null} [Data] Push_RoomFight Data
         * @property {Array.<DcgProto.IS_RoomFight>|null} [RoomFights] Push_RoomFight RoomFights
         * @property {number|null} [FrameIndex] Push_RoomFight FrameIndex
         */

        /**
         * Constructs a new Push_RoomFight.
         * @memberof DcgProto
         * @classdesc Represents a Push_RoomFight.
         * @implements IPush_RoomFight
         * @constructor
         * @param {DcgProto.IPush_RoomFight=} [p] Properties to set
         */
        function Push_RoomFight(p) {
            this.RoomFights = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Push_RoomFight Data.
         * @member {string} Data
         * @memberof DcgProto.Push_RoomFight
         * @instance
         */
        Push_RoomFight.prototype.Data = "";

        /**
         * Push_RoomFight RoomFights.
         * @member {Array.<DcgProto.IS_RoomFight>} RoomFights
         * @memberof DcgProto.Push_RoomFight
         * @instance
         */
        Push_RoomFight.prototype.RoomFights = $util.emptyArray;

        /**
         * Push_RoomFight FrameIndex.
         * @member {number} FrameIndex
         * @memberof DcgProto.Push_RoomFight
         * @instance
         */
        Push_RoomFight.prototype.FrameIndex = 0;

        /**
         * Creates a new Push_RoomFight instance using the specified properties.
         * @function create
         * @memberof DcgProto.Push_RoomFight
         * @static
         * @param {DcgProto.IPush_RoomFight=} [properties] Properties to set
         * @returns {DcgProto.Push_RoomFight} Push_RoomFight instance
         */
        Push_RoomFight.create = function create(properties) {
            return new Push_RoomFight(properties);
        };

        /**
         * Encodes the specified Push_RoomFight message. Does not implicitly {@link DcgProto.Push_RoomFight.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Push_RoomFight
         * @static
         * @param {DcgProto.IPush_RoomFight} m Push_RoomFight message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Push_RoomFight.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Data != null && Object.hasOwnProperty.call(m, "Data"))
                w.uint32(10).string(m.Data);
            if (m.RoomFights != null && m.RoomFights.length) {
                for (var i = 0; i < m.RoomFights.length; ++i)
                    $root.DcgProto.S_RoomFight.encode(m.RoomFights[i], w.uint32(18).fork()).ldelim();
            }
            if (m.FrameIndex != null && Object.hasOwnProperty.call(m, "FrameIndex"))
                w.uint32(24).int32(m.FrameIndex);
            return w;
        };

        /**
         * Decodes a Push_RoomFight message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Push_RoomFight
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Push_RoomFight} Push_RoomFight
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Push_RoomFight.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Push_RoomFight();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Data = r.string();
                    break;
                case 2:
                    if (!(m.RoomFights && m.RoomFights.length))
                        m.RoomFights = [];
                    m.RoomFights.push($root.DcgProto.S_RoomFight.decode(r, r.uint32()));
                    break;
                case 3:
                    m.FrameIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Push_RoomFight message.
         * @function verify
         * @memberof DcgProto.Push_RoomFight
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Push_RoomFight.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Data != null && m.hasOwnProperty("Data")) {
                if (!$util.isString(m.Data))
                    return "Data: string expected";
            }
            if (m.RoomFights != null && m.hasOwnProperty("RoomFights")) {
                if (!Array.isArray(m.RoomFights))
                    return "RoomFights: array expected";
                for (var i = 0; i < m.RoomFights.length; ++i) {
                    {
                        var e = $root.DcgProto.S_RoomFight.verify(m.RoomFights[i]);
                        if (e)
                            return "RoomFights." + e;
                    }
                }
            }
            if (m.FrameIndex != null && m.hasOwnProperty("FrameIndex")) {
                if (!$util.isInteger(m.FrameIndex))
                    return "FrameIndex: integer expected";
            }
            return null;
        };

        return Push_RoomFight;
    })();

    DcgProto.Req_RoomFightInfo = (function() {

        /**
         * Properties of a Req_RoomFightInfo.
         * @memberof DcgProto
         * @interface IReq_RoomFightInfo
         * @property {Long|null} [RoomIID] Req_RoomFightInfo RoomIID
         * @property {number|null} [FrameIndex] Req_RoomFightInfo FrameIndex
         */

        /**
         * Constructs a new Req_RoomFightInfo.
         * @memberof DcgProto
         * @classdesc Represents a Req_RoomFightInfo.
         * @implements IReq_RoomFightInfo
         * @constructor
         * @param {DcgProto.IReq_RoomFightInfo=} [p] Properties to set
         */
        function Req_RoomFightInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_RoomFightInfo RoomIID.
         * @member {Long} RoomIID
         * @memberof DcgProto.Req_RoomFightInfo
         * @instance
         */
        Req_RoomFightInfo.prototype.RoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_RoomFightInfo FrameIndex.
         * @member {number} FrameIndex
         * @memberof DcgProto.Req_RoomFightInfo
         * @instance
         */
        Req_RoomFightInfo.prototype.FrameIndex = 0;

        /**
         * Creates a new Req_RoomFightInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_RoomFightInfo
         * @static
         * @param {DcgProto.IReq_RoomFightInfo=} [properties] Properties to set
         * @returns {DcgProto.Req_RoomFightInfo} Req_RoomFightInfo instance
         */
        Req_RoomFightInfo.create = function create(properties) {
            return new Req_RoomFightInfo(properties);
        };

        /**
         * Encodes the specified Req_RoomFightInfo message. Does not implicitly {@link DcgProto.Req_RoomFightInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_RoomFightInfo
         * @static
         * @param {DcgProto.IReq_RoomFightInfo} m Req_RoomFightInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_RoomFightInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomIID != null && Object.hasOwnProperty.call(m, "RoomIID"))
                w.uint32(8).int64(m.RoomIID);
            if (m.FrameIndex != null && Object.hasOwnProperty.call(m, "FrameIndex"))
                w.uint32(16).int32(m.FrameIndex);
            return w;
        };

        /**
         * Decodes a Req_RoomFightInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_RoomFightInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_RoomFightInfo} Req_RoomFightInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_RoomFightInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_RoomFightInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomIID = r.int64();
                    break;
                case 2:
                    m.FrameIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_RoomFightInfo message.
         * @function verify
         * @memberof DcgProto.Req_RoomFightInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_RoomFightInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomIID != null && m.hasOwnProperty("RoomIID")) {
                if (!$util.isInteger(m.RoomIID) && !(m.RoomIID && $util.isInteger(m.RoomIID.low) && $util.isInteger(m.RoomIID.high)))
                    return "RoomIID: integer|Long expected";
            }
            if (m.FrameIndex != null && m.hasOwnProperty("FrameIndex")) {
                if (!$util.isInteger(m.FrameIndex))
                    return "FrameIndex: integer expected";
            }
            return null;
        };

        return Req_RoomFightInfo;
    })();

    DcgProto.Resp_RoomFightInfo = (function() {

        /**
         * Properties of a Resp_RoomFightInfo.
         * @memberof DcgProto
         * @interface IResp_RoomFightInfo
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_RoomFightInfo ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_RoomFightInfo Cmn
         * @property {Array.<DcgProto.IPush_RoomFight>|null} [RoomFights] Resp_RoomFightInfo RoomFights
         */

        /**
         * Constructs a new Resp_RoomFightInfo.
         * @memberof DcgProto
         * @classdesc Represents a Resp_RoomFightInfo.
         * @implements IResp_RoomFightInfo
         * @constructor
         * @param {DcgProto.IResp_RoomFightInfo=} [p] Properties to set
         */
        function Resp_RoomFightInfo(p) {
            this.RoomFights = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_RoomFightInfo ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_RoomFightInfo
         * @instance
         */
        Resp_RoomFightInfo.prototype.ErrorCode = 0;

        /**
         * Resp_RoomFightInfo Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_RoomFightInfo
         * @instance
         */
        Resp_RoomFightInfo.prototype.Cmn = null;

        /**
         * Resp_RoomFightInfo RoomFights.
         * @member {Array.<DcgProto.IPush_RoomFight>} RoomFights
         * @memberof DcgProto.Resp_RoomFightInfo
         * @instance
         */
        Resp_RoomFightInfo.prototype.RoomFights = $util.emptyArray;

        /**
         * Creates a new Resp_RoomFightInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_RoomFightInfo
         * @static
         * @param {DcgProto.IResp_RoomFightInfo=} [properties] Properties to set
         * @returns {DcgProto.Resp_RoomFightInfo} Resp_RoomFightInfo instance
         */
        Resp_RoomFightInfo.create = function create(properties) {
            return new Resp_RoomFightInfo(properties);
        };

        /**
         * Encodes the specified Resp_RoomFightInfo message. Does not implicitly {@link DcgProto.Resp_RoomFightInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_RoomFightInfo
         * @static
         * @param {DcgProto.IResp_RoomFightInfo} m Resp_RoomFightInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_RoomFightInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.RoomFights != null && m.RoomFights.length) {
                for (var i = 0; i < m.RoomFights.length; ++i)
                    $root.DcgProto.Push_RoomFight.encode(m.RoomFights[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Resp_RoomFightInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_RoomFightInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_RoomFightInfo} Resp_RoomFightInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_RoomFightInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_RoomFightInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.RoomFights && m.RoomFights.length))
                        m.RoomFights = [];
                    m.RoomFights.push($root.DcgProto.Push_RoomFight.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_RoomFightInfo message.
         * @function verify
         * @memberof DcgProto.Resp_RoomFightInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_RoomFightInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.RoomFights != null && m.hasOwnProperty("RoomFights")) {
                if (!Array.isArray(m.RoomFights))
                    return "RoomFights: array expected";
                for (var i = 0; i < m.RoomFights.length; ++i) {
                    {
                        var e = $root.DcgProto.Push_RoomFight.verify(m.RoomFights[i]);
                        if (e)
                            return "RoomFights." + e;
                    }
                }
            }
            return null;
        };

        return Resp_RoomFightInfo;
    })();

    DcgProto.Req_RoomRecordList = (function() {

        /**
         * Properties of a Req_RoomRecordList.
         * @memberof DcgProto
         * @interface IReq_RoomRecordList
         * @property {Long|null} [RoleIID] Req_RoomRecordList RoleIID
         */

        /**
         * Constructs a new Req_RoomRecordList.
         * @memberof DcgProto
         * @classdesc Represents a Req_RoomRecordList.
         * @implements IReq_RoomRecordList
         * @constructor
         * @param {DcgProto.IReq_RoomRecordList=} [p] Properties to set
         */
        function Req_RoomRecordList(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_RoomRecordList RoleIID.
         * @member {Long} RoleIID
         * @memberof DcgProto.Req_RoomRecordList
         * @instance
         */
        Req_RoomRecordList.prototype.RoleIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_RoomRecordList instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_RoomRecordList
         * @static
         * @param {DcgProto.IReq_RoomRecordList=} [properties] Properties to set
         * @returns {DcgProto.Req_RoomRecordList} Req_RoomRecordList instance
         */
        Req_RoomRecordList.create = function create(properties) {
            return new Req_RoomRecordList(properties);
        };

        /**
         * Encodes the specified Req_RoomRecordList message. Does not implicitly {@link DcgProto.Req_RoomRecordList.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_RoomRecordList
         * @static
         * @param {DcgProto.IReq_RoomRecordList} m Req_RoomRecordList message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_RoomRecordList.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoleIID != null && Object.hasOwnProperty.call(m, "RoleIID"))
                w.uint32(8).int64(m.RoleIID);
            return w;
        };

        /**
         * Decodes a Req_RoomRecordList message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_RoomRecordList
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_RoomRecordList} Req_RoomRecordList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_RoomRecordList.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_RoomRecordList();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoleIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_RoomRecordList message.
         * @function verify
         * @memberof DcgProto.Req_RoomRecordList
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_RoomRecordList.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoleIID != null && m.hasOwnProperty("RoleIID")) {
                if (!$util.isInteger(m.RoleIID) && !(m.RoleIID && $util.isInteger(m.RoleIID.low) && $util.isInteger(m.RoleIID.high)))
                    return "RoleIID: integer|Long expected";
            }
            return null;
        };

        return Req_RoomRecordList;
    })();

    DcgProto.Resp_RoomRecordList = (function() {

        /**
         * Properties of a Resp_RoomRecordList.
         * @memberof DcgProto
         * @interface IResp_RoomRecordList
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_RoomRecordList ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_RoomRecordList Cmn
         * @property {Array.<DcgProto.IS_RoomRecord>|null} [RoomRecords] Resp_RoomRecordList RoomRecords
         */

        /**
         * Constructs a new Resp_RoomRecordList.
         * @memberof DcgProto
         * @classdesc Represents a Resp_RoomRecordList.
         * @implements IResp_RoomRecordList
         * @constructor
         * @param {DcgProto.IResp_RoomRecordList=} [p] Properties to set
         */
        function Resp_RoomRecordList(p) {
            this.RoomRecords = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_RoomRecordList ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_RoomRecordList
         * @instance
         */
        Resp_RoomRecordList.prototype.ErrorCode = 0;

        /**
         * Resp_RoomRecordList Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_RoomRecordList
         * @instance
         */
        Resp_RoomRecordList.prototype.Cmn = null;

        /**
         * Resp_RoomRecordList RoomRecords.
         * @member {Array.<DcgProto.IS_RoomRecord>} RoomRecords
         * @memberof DcgProto.Resp_RoomRecordList
         * @instance
         */
        Resp_RoomRecordList.prototype.RoomRecords = $util.emptyArray;

        /**
         * Creates a new Resp_RoomRecordList instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_RoomRecordList
         * @static
         * @param {DcgProto.IResp_RoomRecordList=} [properties] Properties to set
         * @returns {DcgProto.Resp_RoomRecordList} Resp_RoomRecordList instance
         */
        Resp_RoomRecordList.create = function create(properties) {
            return new Resp_RoomRecordList(properties);
        };

        /**
         * Encodes the specified Resp_RoomRecordList message. Does not implicitly {@link DcgProto.Resp_RoomRecordList.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_RoomRecordList
         * @static
         * @param {DcgProto.IResp_RoomRecordList} m Resp_RoomRecordList message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_RoomRecordList.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.RoomRecords != null && m.RoomRecords.length) {
                for (var i = 0; i < m.RoomRecords.length; ++i)
                    $root.DcgProto.S_RoomRecord.encode(m.RoomRecords[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Resp_RoomRecordList message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_RoomRecordList
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_RoomRecordList} Resp_RoomRecordList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_RoomRecordList.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_RoomRecordList();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.RoomRecords && m.RoomRecords.length))
                        m.RoomRecords = [];
                    m.RoomRecords.push($root.DcgProto.S_RoomRecord.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_RoomRecordList message.
         * @function verify
         * @memberof DcgProto.Resp_RoomRecordList
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_RoomRecordList.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.RoomRecords != null && m.hasOwnProperty("RoomRecords")) {
                if (!Array.isArray(m.RoomRecords))
                    return "RoomRecords: array expected";
                for (var i = 0; i < m.RoomRecords.length; ++i) {
                    {
                        var e = $root.DcgProto.S_RoomRecord.verify(m.RoomRecords[i]);
                        if (e)
                            return "RoomRecords." + e;
                    }
                }
            }
            return null;
        };

        return Resp_RoomRecordList;
    })();

    DcgProto.Req_PersonalRoomCreate = (function() {

        /**
         * Properties of a Req_PersonalRoomCreate.
         * @memberof DcgProto
         * @interface IReq_PersonalRoomCreate
         * @property {boolean|null} [Viewer] Req_PersonalRoomCreate Viewer
         */

        /**
         * Constructs a new Req_PersonalRoomCreate.
         * @memberof DcgProto
         * @classdesc Represents a Req_PersonalRoomCreate.
         * @implements IReq_PersonalRoomCreate
         * @constructor
         * @param {DcgProto.IReq_PersonalRoomCreate=} [p] Properties to set
         */
        function Req_PersonalRoomCreate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PersonalRoomCreate Viewer.
         * @member {boolean} Viewer
         * @memberof DcgProto.Req_PersonalRoomCreate
         * @instance
         */
        Req_PersonalRoomCreate.prototype.Viewer = false;

        /**
         * Creates a new Req_PersonalRoomCreate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PersonalRoomCreate
         * @static
         * @param {DcgProto.IReq_PersonalRoomCreate=} [properties] Properties to set
         * @returns {DcgProto.Req_PersonalRoomCreate} Req_PersonalRoomCreate instance
         */
        Req_PersonalRoomCreate.create = function create(properties) {
            return new Req_PersonalRoomCreate(properties);
        };

        /**
         * Encodes the specified Req_PersonalRoomCreate message. Does not implicitly {@link DcgProto.Req_PersonalRoomCreate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PersonalRoomCreate
         * @static
         * @param {DcgProto.IReq_PersonalRoomCreate} m Req_PersonalRoomCreate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PersonalRoomCreate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Viewer != null && Object.hasOwnProperty.call(m, "Viewer"))
                w.uint32(8).bool(m.Viewer);
            return w;
        };

        /**
         * Decodes a Req_PersonalRoomCreate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PersonalRoomCreate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PersonalRoomCreate} Req_PersonalRoomCreate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PersonalRoomCreate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PersonalRoomCreate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Viewer = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PersonalRoomCreate message.
         * @function verify
         * @memberof DcgProto.Req_PersonalRoomCreate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PersonalRoomCreate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Viewer != null && m.hasOwnProperty("Viewer")) {
                if (typeof m.Viewer !== "boolean")
                    return "Viewer: boolean expected";
            }
            return null;
        };

        return Req_PersonalRoomCreate;
    })();

    DcgProto.Resp_PersonalRoomCreate = (function() {

        /**
         * Properties of a Resp_PersonalRoomCreate.
         * @memberof DcgProto
         * @interface IResp_PersonalRoomCreate
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PersonalRoomCreate ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PersonalRoomCreate Cmn
         */

        /**
         * Constructs a new Resp_PersonalRoomCreate.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PersonalRoomCreate.
         * @implements IResp_PersonalRoomCreate
         * @constructor
         * @param {DcgProto.IResp_PersonalRoomCreate=} [p] Properties to set
         */
        function Resp_PersonalRoomCreate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PersonalRoomCreate ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PersonalRoomCreate
         * @instance
         */
        Resp_PersonalRoomCreate.prototype.ErrorCode = 0;

        /**
         * Resp_PersonalRoomCreate Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PersonalRoomCreate
         * @instance
         */
        Resp_PersonalRoomCreate.prototype.Cmn = null;

        /**
         * Creates a new Resp_PersonalRoomCreate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PersonalRoomCreate
         * @static
         * @param {DcgProto.IResp_PersonalRoomCreate=} [properties] Properties to set
         * @returns {DcgProto.Resp_PersonalRoomCreate} Resp_PersonalRoomCreate instance
         */
        Resp_PersonalRoomCreate.create = function create(properties) {
            return new Resp_PersonalRoomCreate(properties);
        };

        /**
         * Encodes the specified Resp_PersonalRoomCreate message. Does not implicitly {@link DcgProto.Resp_PersonalRoomCreate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PersonalRoomCreate
         * @static
         * @param {DcgProto.IResp_PersonalRoomCreate} m Resp_PersonalRoomCreate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PersonalRoomCreate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PersonalRoomCreate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PersonalRoomCreate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PersonalRoomCreate} Resp_PersonalRoomCreate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PersonalRoomCreate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PersonalRoomCreate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PersonalRoomCreate message.
         * @function verify
         * @memberof DcgProto.Resp_PersonalRoomCreate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PersonalRoomCreate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PersonalRoomCreate;
    })();

    DcgProto.Req_PersonalRoomUpdate = (function() {

        /**
         * Properties of a Req_PersonalRoomUpdate.
         * @memberof DcgProto
         * @interface IReq_PersonalRoomUpdate
         * @property {boolean|null} [Viewer] Req_PersonalRoomUpdate Viewer
         */

        /**
         * Constructs a new Req_PersonalRoomUpdate.
         * @memberof DcgProto
         * @classdesc Represents a Req_PersonalRoomUpdate.
         * @implements IReq_PersonalRoomUpdate
         * @constructor
         * @param {DcgProto.IReq_PersonalRoomUpdate=} [p] Properties to set
         */
        function Req_PersonalRoomUpdate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PersonalRoomUpdate Viewer.
         * @member {boolean} Viewer
         * @memberof DcgProto.Req_PersonalRoomUpdate
         * @instance
         */
        Req_PersonalRoomUpdate.prototype.Viewer = false;

        /**
         * Creates a new Req_PersonalRoomUpdate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PersonalRoomUpdate
         * @static
         * @param {DcgProto.IReq_PersonalRoomUpdate=} [properties] Properties to set
         * @returns {DcgProto.Req_PersonalRoomUpdate} Req_PersonalRoomUpdate instance
         */
        Req_PersonalRoomUpdate.create = function create(properties) {
            return new Req_PersonalRoomUpdate(properties);
        };

        /**
         * Encodes the specified Req_PersonalRoomUpdate message. Does not implicitly {@link DcgProto.Req_PersonalRoomUpdate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PersonalRoomUpdate
         * @static
         * @param {DcgProto.IReq_PersonalRoomUpdate} m Req_PersonalRoomUpdate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PersonalRoomUpdate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Viewer != null && Object.hasOwnProperty.call(m, "Viewer"))
                w.uint32(8).bool(m.Viewer);
            return w;
        };

        /**
         * Decodes a Req_PersonalRoomUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PersonalRoomUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PersonalRoomUpdate} Req_PersonalRoomUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PersonalRoomUpdate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PersonalRoomUpdate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Viewer = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PersonalRoomUpdate message.
         * @function verify
         * @memberof DcgProto.Req_PersonalRoomUpdate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PersonalRoomUpdate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Viewer != null && m.hasOwnProperty("Viewer")) {
                if (typeof m.Viewer !== "boolean")
                    return "Viewer: boolean expected";
            }
            return null;
        };

        return Req_PersonalRoomUpdate;
    })();

    DcgProto.Resp_PersonalRoomUpdate = (function() {

        /**
         * Properties of a Resp_PersonalRoomUpdate.
         * @memberof DcgProto
         * @interface IResp_PersonalRoomUpdate
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PersonalRoomUpdate ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PersonalRoomUpdate Cmn
         */

        /**
         * Constructs a new Resp_PersonalRoomUpdate.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PersonalRoomUpdate.
         * @implements IResp_PersonalRoomUpdate
         * @constructor
         * @param {DcgProto.IResp_PersonalRoomUpdate=} [p] Properties to set
         */
        function Resp_PersonalRoomUpdate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PersonalRoomUpdate ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PersonalRoomUpdate
         * @instance
         */
        Resp_PersonalRoomUpdate.prototype.ErrorCode = 0;

        /**
         * Resp_PersonalRoomUpdate Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PersonalRoomUpdate
         * @instance
         */
        Resp_PersonalRoomUpdate.prototype.Cmn = null;

        /**
         * Creates a new Resp_PersonalRoomUpdate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PersonalRoomUpdate
         * @static
         * @param {DcgProto.IResp_PersonalRoomUpdate=} [properties] Properties to set
         * @returns {DcgProto.Resp_PersonalRoomUpdate} Resp_PersonalRoomUpdate instance
         */
        Resp_PersonalRoomUpdate.create = function create(properties) {
            return new Resp_PersonalRoomUpdate(properties);
        };

        /**
         * Encodes the specified Resp_PersonalRoomUpdate message. Does not implicitly {@link DcgProto.Resp_PersonalRoomUpdate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PersonalRoomUpdate
         * @static
         * @param {DcgProto.IResp_PersonalRoomUpdate} m Resp_PersonalRoomUpdate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PersonalRoomUpdate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PersonalRoomUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PersonalRoomUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PersonalRoomUpdate} Resp_PersonalRoomUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PersonalRoomUpdate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PersonalRoomUpdate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PersonalRoomUpdate message.
         * @function verify
         * @memberof DcgProto.Resp_PersonalRoomUpdate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PersonalRoomUpdate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PersonalRoomUpdate;
    })();

    DcgProto.Req_PersonalRoomJoin = (function() {

        /**
         * Properties of a Req_PersonalRoomJoin.
         * @memberof DcgProto
         * @interface IReq_PersonalRoomJoin
         * @property {Long|null} [PersonalRoomIID] Req_PersonalRoomJoin PersonalRoomIID
         */

        /**
         * Constructs a new Req_PersonalRoomJoin.
         * @memberof DcgProto
         * @classdesc Represents a Req_PersonalRoomJoin.
         * @implements IReq_PersonalRoomJoin
         * @constructor
         * @param {DcgProto.IReq_PersonalRoomJoin=} [p] Properties to set
         */
        function Req_PersonalRoomJoin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PersonalRoomJoin PersonalRoomIID.
         * @member {Long} PersonalRoomIID
         * @memberof DcgProto.Req_PersonalRoomJoin
         * @instance
         */
        Req_PersonalRoomJoin.prototype.PersonalRoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_PersonalRoomJoin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PersonalRoomJoin
         * @static
         * @param {DcgProto.IReq_PersonalRoomJoin=} [properties] Properties to set
         * @returns {DcgProto.Req_PersonalRoomJoin} Req_PersonalRoomJoin instance
         */
        Req_PersonalRoomJoin.create = function create(properties) {
            return new Req_PersonalRoomJoin(properties);
        };

        /**
         * Encodes the specified Req_PersonalRoomJoin message. Does not implicitly {@link DcgProto.Req_PersonalRoomJoin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PersonalRoomJoin
         * @static
         * @param {DcgProto.IReq_PersonalRoomJoin} m Req_PersonalRoomJoin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PersonalRoomJoin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PersonalRoomIID != null && Object.hasOwnProperty.call(m, "PersonalRoomIID"))
                w.uint32(8).int64(m.PersonalRoomIID);
            return w;
        };

        /**
         * Decodes a Req_PersonalRoomJoin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PersonalRoomJoin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PersonalRoomJoin} Req_PersonalRoomJoin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PersonalRoomJoin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PersonalRoomJoin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PersonalRoomIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PersonalRoomJoin message.
         * @function verify
         * @memberof DcgProto.Req_PersonalRoomJoin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PersonalRoomJoin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PersonalRoomIID != null && m.hasOwnProperty("PersonalRoomIID")) {
                if (!$util.isInteger(m.PersonalRoomIID) && !(m.PersonalRoomIID && $util.isInteger(m.PersonalRoomIID.low) && $util.isInteger(m.PersonalRoomIID.high)))
                    return "PersonalRoomIID: integer|Long expected";
            }
            return null;
        };

        return Req_PersonalRoomJoin;
    })();

    DcgProto.Resp_PersonalRoomJoin = (function() {

        /**
         * Properties of a Resp_PersonalRoomJoin.
         * @memberof DcgProto
         * @interface IResp_PersonalRoomJoin
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PersonalRoomJoin ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PersonalRoomJoin Cmn
         */

        /**
         * Constructs a new Resp_PersonalRoomJoin.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PersonalRoomJoin.
         * @implements IResp_PersonalRoomJoin
         * @constructor
         * @param {DcgProto.IResp_PersonalRoomJoin=} [p] Properties to set
         */
        function Resp_PersonalRoomJoin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PersonalRoomJoin ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PersonalRoomJoin
         * @instance
         */
        Resp_PersonalRoomJoin.prototype.ErrorCode = 0;

        /**
         * Resp_PersonalRoomJoin Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PersonalRoomJoin
         * @instance
         */
        Resp_PersonalRoomJoin.prototype.Cmn = null;

        /**
         * Creates a new Resp_PersonalRoomJoin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PersonalRoomJoin
         * @static
         * @param {DcgProto.IResp_PersonalRoomJoin=} [properties] Properties to set
         * @returns {DcgProto.Resp_PersonalRoomJoin} Resp_PersonalRoomJoin instance
         */
        Resp_PersonalRoomJoin.create = function create(properties) {
            return new Resp_PersonalRoomJoin(properties);
        };

        /**
         * Encodes the specified Resp_PersonalRoomJoin message. Does not implicitly {@link DcgProto.Resp_PersonalRoomJoin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PersonalRoomJoin
         * @static
         * @param {DcgProto.IResp_PersonalRoomJoin} m Resp_PersonalRoomJoin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PersonalRoomJoin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PersonalRoomJoin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PersonalRoomJoin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PersonalRoomJoin} Resp_PersonalRoomJoin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PersonalRoomJoin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PersonalRoomJoin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PersonalRoomJoin message.
         * @function verify
         * @memberof DcgProto.Resp_PersonalRoomJoin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PersonalRoomJoin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PersonalRoomJoin;
    })();

    DcgProto.Req_PersonalRoomReady = (function() {

        /**
         * Properties of a Req_PersonalRoomReady.
         * @memberof DcgProto
         * @interface IReq_PersonalRoomReady
         * @property {boolean|null} [Ready] Req_PersonalRoomReady Ready
         */

        /**
         * Constructs a new Req_PersonalRoomReady.
         * @memberof DcgProto
         * @classdesc Represents a Req_PersonalRoomReady.
         * @implements IReq_PersonalRoomReady
         * @constructor
         * @param {DcgProto.IReq_PersonalRoomReady=} [p] Properties to set
         */
        function Req_PersonalRoomReady(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PersonalRoomReady Ready.
         * @member {boolean} Ready
         * @memberof DcgProto.Req_PersonalRoomReady
         * @instance
         */
        Req_PersonalRoomReady.prototype.Ready = false;

        /**
         * Creates a new Req_PersonalRoomReady instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PersonalRoomReady
         * @static
         * @param {DcgProto.IReq_PersonalRoomReady=} [properties] Properties to set
         * @returns {DcgProto.Req_PersonalRoomReady} Req_PersonalRoomReady instance
         */
        Req_PersonalRoomReady.create = function create(properties) {
            return new Req_PersonalRoomReady(properties);
        };

        /**
         * Encodes the specified Req_PersonalRoomReady message. Does not implicitly {@link DcgProto.Req_PersonalRoomReady.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PersonalRoomReady
         * @static
         * @param {DcgProto.IReq_PersonalRoomReady} m Req_PersonalRoomReady message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PersonalRoomReady.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Ready != null && Object.hasOwnProperty.call(m, "Ready"))
                w.uint32(8).bool(m.Ready);
            return w;
        };

        /**
         * Decodes a Req_PersonalRoomReady message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PersonalRoomReady
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PersonalRoomReady} Req_PersonalRoomReady
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PersonalRoomReady.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PersonalRoomReady();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Ready = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PersonalRoomReady message.
         * @function verify
         * @memberof DcgProto.Req_PersonalRoomReady
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PersonalRoomReady.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Ready != null && m.hasOwnProperty("Ready")) {
                if (typeof m.Ready !== "boolean")
                    return "Ready: boolean expected";
            }
            return null;
        };

        return Req_PersonalRoomReady;
    })();

    DcgProto.Resp_PersonalRoomReady = (function() {

        /**
         * Properties of a Resp_PersonalRoomReady.
         * @memberof DcgProto
         * @interface IResp_PersonalRoomReady
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PersonalRoomReady ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PersonalRoomReady Cmn
         */

        /**
         * Constructs a new Resp_PersonalRoomReady.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PersonalRoomReady.
         * @implements IResp_PersonalRoomReady
         * @constructor
         * @param {DcgProto.IResp_PersonalRoomReady=} [p] Properties to set
         */
        function Resp_PersonalRoomReady(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PersonalRoomReady ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PersonalRoomReady
         * @instance
         */
        Resp_PersonalRoomReady.prototype.ErrorCode = 0;

        /**
         * Resp_PersonalRoomReady Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PersonalRoomReady
         * @instance
         */
        Resp_PersonalRoomReady.prototype.Cmn = null;

        /**
         * Creates a new Resp_PersonalRoomReady instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PersonalRoomReady
         * @static
         * @param {DcgProto.IResp_PersonalRoomReady=} [properties] Properties to set
         * @returns {DcgProto.Resp_PersonalRoomReady} Resp_PersonalRoomReady instance
         */
        Resp_PersonalRoomReady.create = function create(properties) {
            return new Resp_PersonalRoomReady(properties);
        };

        /**
         * Encodes the specified Resp_PersonalRoomReady message. Does not implicitly {@link DcgProto.Resp_PersonalRoomReady.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PersonalRoomReady
         * @static
         * @param {DcgProto.IResp_PersonalRoomReady} m Resp_PersonalRoomReady message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PersonalRoomReady.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PersonalRoomReady message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PersonalRoomReady
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PersonalRoomReady} Resp_PersonalRoomReady
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PersonalRoomReady.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PersonalRoomReady();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PersonalRoomReady message.
         * @function verify
         * @memberof DcgProto.Resp_PersonalRoomReady
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PersonalRoomReady.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PersonalRoomReady;
    })();

    DcgProto.Req_PersonalRoomKick = (function() {

        /**
         * Properties of a Req_PersonalRoomKick.
         * @memberof DcgProto
         * @interface IReq_PersonalRoomKick
         * @property {Long|null} [RoleIID] Req_PersonalRoomKick RoleIID
         */

        /**
         * Constructs a new Req_PersonalRoomKick.
         * @memberof DcgProto
         * @classdesc Represents a Req_PersonalRoomKick.
         * @implements IReq_PersonalRoomKick
         * @constructor
         * @param {DcgProto.IReq_PersonalRoomKick=} [p] Properties to set
         */
        function Req_PersonalRoomKick(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PersonalRoomKick RoleIID.
         * @member {Long} RoleIID
         * @memberof DcgProto.Req_PersonalRoomKick
         * @instance
         */
        Req_PersonalRoomKick.prototype.RoleIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_PersonalRoomKick instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PersonalRoomKick
         * @static
         * @param {DcgProto.IReq_PersonalRoomKick=} [properties] Properties to set
         * @returns {DcgProto.Req_PersonalRoomKick} Req_PersonalRoomKick instance
         */
        Req_PersonalRoomKick.create = function create(properties) {
            return new Req_PersonalRoomKick(properties);
        };

        /**
         * Encodes the specified Req_PersonalRoomKick message. Does not implicitly {@link DcgProto.Req_PersonalRoomKick.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PersonalRoomKick
         * @static
         * @param {DcgProto.IReq_PersonalRoomKick} m Req_PersonalRoomKick message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PersonalRoomKick.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoleIID != null && Object.hasOwnProperty.call(m, "RoleIID"))
                w.uint32(8).int64(m.RoleIID);
            return w;
        };

        /**
         * Decodes a Req_PersonalRoomKick message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PersonalRoomKick
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PersonalRoomKick} Req_PersonalRoomKick
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PersonalRoomKick.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PersonalRoomKick();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoleIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PersonalRoomKick message.
         * @function verify
         * @memberof DcgProto.Req_PersonalRoomKick
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PersonalRoomKick.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoleIID != null && m.hasOwnProperty("RoleIID")) {
                if (!$util.isInteger(m.RoleIID) && !(m.RoleIID && $util.isInteger(m.RoleIID.low) && $util.isInteger(m.RoleIID.high)))
                    return "RoleIID: integer|Long expected";
            }
            return null;
        };

        return Req_PersonalRoomKick;
    })();

    DcgProto.Resp_PersonalRoomKick = (function() {

        /**
         * Properties of a Resp_PersonalRoomKick.
         * @memberof DcgProto
         * @interface IResp_PersonalRoomKick
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PersonalRoomKick ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PersonalRoomKick Cmn
         */

        /**
         * Constructs a new Resp_PersonalRoomKick.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PersonalRoomKick.
         * @implements IResp_PersonalRoomKick
         * @constructor
         * @param {DcgProto.IResp_PersonalRoomKick=} [p] Properties to set
         */
        function Resp_PersonalRoomKick(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PersonalRoomKick ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PersonalRoomKick
         * @instance
         */
        Resp_PersonalRoomKick.prototype.ErrorCode = 0;

        /**
         * Resp_PersonalRoomKick Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PersonalRoomKick
         * @instance
         */
        Resp_PersonalRoomKick.prototype.Cmn = null;

        /**
         * Creates a new Resp_PersonalRoomKick instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PersonalRoomKick
         * @static
         * @param {DcgProto.IResp_PersonalRoomKick=} [properties] Properties to set
         * @returns {DcgProto.Resp_PersonalRoomKick} Resp_PersonalRoomKick instance
         */
        Resp_PersonalRoomKick.create = function create(properties) {
            return new Resp_PersonalRoomKick(properties);
        };

        /**
         * Encodes the specified Resp_PersonalRoomKick message. Does not implicitly {@link DcgProto.Resp_PersonalRoomKick.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PersonalRoomKick
         * @static
         * @param {DcgProto.IResp_PersonalRoomKick} m Resp_PersonalRoomKick message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PersonalRoomKick.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PersonalRoomKick message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PersonalRoomKick
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PersonalRoomKick} Resp_PersonalRoomKick
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PersonalRoomKick.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PersonalRoomKick();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PersonalRoomKick message.
         * @function verify
         * @memberof DcgProto.Resp_PersonalRoomKick
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PersonalRoomKick.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PersonalRoomKick;
    })();

    DcgProto.Req_PersonalRoomQuit = (function() {

        /**
         * Properties of a Req_PersonalRoomQuit.
         * @memberof DcgProto
         * @interface IReq_PersonalRoomQuit
         */

        /**
         * Constructs a new Req_PersonalRoomQuit.
         * @memberof DcgProto
         * @classdesc Represents a Req_PersonalRoomQuit.
         * @implements IReq_PersonalRoomQuit
         * @constructor
         * @param {DcgProto.IReq_PersonalRoomQuit=} [p] Properties to set
         */
        function Req_PersonalRoomQuit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Req_PersonalRoomQuit instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PersonalRoomQuit
         * @static
         * @param {DcgProto.IReq_PersonalRoomQuit=} [properties] Properties to set
         * @returns {DcgProto.Req_PersonalRoomQuit} Req_PersonalRoomQuit instance
         */
        Req_PersonalRoomQuit.create = function create(properties) {
            return new Req_PersonalRoomQuit(properties);
        };

        /**
         * Encodes the specified Req_PersonalRoomQuit message. Does not implicitly {@link DcgProto.Req_PersonalRoomQuit.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PersonalRoomQuit
         * @static
         * @param {DcgProto.IReq_PersonalRoomQuit} m Req_PersonalRoomQuit message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PersonalRoomQuit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Req_PersonalRoomQuit message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PersonalRoomQuit
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PersonalRoomQuit} Req_PersonalRoomQuit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PersonalRoomQuit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PersonalRoomQuit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PersonalRoomQuit message.
         * @function verify
         * @memberof DcgProto.Req_PersonalRoomQuit
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PersonalRoomQuit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Req_PersonalRoomQuit;
    })();

    DcgProto.Resp_PersonalRoomQuit = (function() {

        /**
         * Properties of a Resp_PersonalRoomQuit.
         * @memberof DcgProto
         * @interface IResp_PersonalRoomQuit
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PersonalRoomQuit ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PersonalRoomQuit Cmn
         */

        /**
         * Constructs a new Resp_PersonalRoomQuit.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PersonalRoomQuit.
         * @implements IResp_PersonalRoomQuit
         * @constructor
         * @param {DcgProto.IResp_PersonalRoomQuit=} [p] Properties to set
         */
        function Resp_PersonalRoomQuit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PersonalRoomQuit ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PersonalRoomQuit
         * @instance
         */
        Resp_PersonalRoomQuit.prototype.ErrorCode = 0;

        /**
         * Resp_PersonalRoomQuit Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PersonalRoomQuit
         * @instance
         */
        Resp_PersonalRoomQuit.prototype.Cmn = null;

        /**
         * Creates a new Resp_PersonalRoomQuit instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PersonalRoomQuit
         * @static
         * @param {DcgProto.IResp_PersonalRoomQuit=} [properties] Properties to set
         * @returns {DcgProto.Resp_PersonalRoomQuit} Resp_PersonalRoomQuit instance
         */
        Resp_PersonalRoomQuit.create = function create(properties) {
            return new Resp_PersonalRoomQuit(properties);
        };

        /**
         * Encodes the specified Resp_PersonalRoomQuit message. Does not implicitly {@link DcgProto.Resp_PersonalRoomQuit.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PersonalRoomQuit
         * @static
         * @param {DcgProto.IResp_PersonalRoomQuit} m Resp_PersonalRoomQuit message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PersonalRoomQuit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PersonalRoomQuit message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PersonalRoomQuit
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PersonalRoomQuit} Resp_PersonalRoomQuit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PersonalRoomQuit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PersonalRoomQuit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PersonalRoomQuit message.
         * @function verify
         * @memberof DcgProto.Resp_PersonalRoomQuit
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PersonalRoomQuit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PersonalRoomQuit;
    })();

    DcgProto.Req_PersonalRoomStartBattle = (function() {

        /**
         * Properties of a Req_PersonalRoomStartBattle.
         * @memberof DcgProto
         * @interface IReq_PersonalRoomStartBattle
         */

        /**
         * Constructs a new Req_PersonalRoomStartBattle.
         * @memberof DcgProto
         * @classdesc Represents a Req_PersonalRoomStartBattle.
         * @implements IReq_PersonalRoomStartBattle
         * @constructor
         * @param {DcgProto.IReq_PersonalRoomStartBattle=} [p] Properties to set
         */
        function Req_PersonalRoomStartBattle(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Req_PersonalRoomStartBattle instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PersonalRoomStartBattle
         * @static
         * @param {DcgProto.IReq_PersonalRoomStartBattle=} [properties] Properties to set
         * @returns {DcgProto.Req_PersonalRoomStartBattle} Req_PersonalRoomStartBattle instance
         */
        Req_PersonalRoomStartBattle.create = function create(properties) {
            return new Req_PersonalRoomStartBattle(properties);
        };

        /**
         * Encodes the specified Req_PersonalRoomStartBattle message. Does not implicitly {@link DcgProto.Req_PersonalRoomStartBattle.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PersonalRoomStartBattle
         * @static
         * @param {DcgProto.IReq_PersonalRoomStartBattle} m Req_PersonalRoomStartBattle message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PersonalRoomStartBattle.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Req_PersonalRoomStartBattle message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PersonalRoomStartBattle
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PersonalRoomStartBattle} Req_PersonalRoomStartBattle
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PersonalRoomStartBattle.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PersonalRoomStartBattle();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PersonalRoomStartBattle message.
         * @function verify
         * @memberof DcgProto.Req_PersonalRoomStartBattle
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PersonalRoomStartBattle.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Req_PersonalRoomStartBattle;
    })();

    DcgProto.Resp_PersonalRoomStartBattle = (function() {

        /**
         * Properties of a Resp_PersonalRoomStartBattle.
         * @memberof DcgProto
         * @interface IResp_PersonalRoomStartBattle
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PersonalRoomStartBattle ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PersonalRoomStartBattle Cmn
         */

        /**
         * Constructs a new Resp_PersonalRoomStartBattle.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PersonalRoomStartBattle.
         * @implements IResp_PersonalRoomStartBattle
         * @constructor
         * @param {DcgProto.IResp_PersonalRoomStartBattle=} [p] Properties to set
         */
        function Resp_PersonalRoomStartBattle(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PersonalRoomStartBattle ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PersonalRoomStartBattle
         * @instance
         */
        Resp_PersonalRoomStartBattle.prototype.ErrorCode = 0;

        /**
         * Resp_PersonalRoomStartBattle Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PersonalRoomStartBattle
         * @instance
         */
        Resp_PersonalRoomStartBattle.prototype.Cmn = null;

        /**
         * Creates a new Resp_PersonalRoomStartBattle instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PersonalRoomStartBattle
         * @static
         * @param {DcgProto.IResp_PersonalRoomStartBattle=} [properties] Properties to set
         * @returns {DcgProto.Resp_PersonalRoomStartBattle} Resp_PersonalRoomStartBattle instance
         */
        Resp_PersonalRoomStartBattle.create = function create(properties) {
            return new Resp_PersonalRoomStartBattle(properties);
        };

        /**
         * Encodes the specified Resp_PersonalRoomStartBattle message. Does not implicitly {@link DcgProto.Resp_PersonalRoomStartBattle.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PersonalRoomStartBattle
         * @static
         * @param {DcgProto.IResp_PersonalRoomStartBattle} m Resp_PersonalRoomStartBattle message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PersonalRoomStartBattle.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PersonalRoomStartBattle message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PersonalRoomStartBattle
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PersonalRoomStartBattle} Resp_PersonalRoomStartBattle
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PersonalRoomStartBattle.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PersonalRoomStartBattle();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PersonalRoomStartBattle message.
         * @function verify
         * @memberof DcgProto.Resp_PersonalRoomStartBattle
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PersonalRoomStartBattle.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PersonalRoomStartBattle;
    })();

    DcgProto.Req_PersonalRoomLogs = (function() {

        /**
         * Properties of a Req_PersonalRoomLogs.
         * @memberof DcgProto
         * @interface IReq_PersonalRoomLogs
         * @property {Long|null} [PersonalRoomIID] Req_PersonalRoomLogs PersonalRoomIID
         */

        /**
         * Constructs a new Req_PersonalRoomLogs.
         * @memberof DcgProto
         * @classdesc Represents a Req_PersonalRoomLogs.
         * @implements IReq_PersonalRoomLogs
         * @constructor
         * @param {DcgProto.IReq_PersonalRoomLogs=} [p] Properties to set
         */
        function Req_PersonalRoomLogs(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PersonalRoomLogs PersonalRoomIID.
         * @member {Long} PersonalRoomIID
         * @memberof DcgProto.Req_PersonalRoomLogs
         * @instance
         */
        Req_PersonalRoomLogs.prototype.PersonalRoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_PersonalRoomLogs instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PersonalRoomLogs
         * @static
         * @param {DcgProto.IReq_PersonalRoomLogs=} [properties] Properties to set
         * @returns {DcgProto.Req_PersonalRoomLogs} Req_PersonalRoomLogs instance
         */
        Req_PersonalRoomLogs.create = function create(properties) {
            return new Req_PersonalRoomLogs(properties);
        };

        /**
         * Encodes the specified Req_PersonalRoomLogs message. Does not implicitly {@link DcgProto.Req_PersonalRoomLogs.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PersonalRoomLogs
         * @static
         * @param {DcgProto.IReq_PersonalRoomLogs} m Req_PersonalRoomLogs message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PersonalRoomLogs.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PersonalRoomIID != null && Object.hasOwnProperty.call(m, "PersonalRoomIID"))
                w.uint32(8).int64(m.PersonalRoomIID);
            return w;
        };

        /**
         * Decodes a Req_PersonalRoomLogs message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PersonalRoomLogs
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PersonalRoomLogs} Req_PersonalRoomLogs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PersonalRoomLogs.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PersonalRoomLogs();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PersonalRoomIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PersonalRoomLogs message.
         * @function verify
         * @memberof DcgProto.Req_PersonalRoomLogs
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PersonalRoomLogs.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PersonalRoomIID != null && m.hasOwnProperty("PersonalRoomIID")) {
                if (!$util.isInteger(m.PersonalRoomIID) && !(m.PersonalRoomIID && $util.isInteger(m.PersonalRoomIID.low) && $util.isInteger(m.PersonalRoomIID.high)))
                    return "PersonalRoomIID: integer|Long expected";
            }
            return null;
        };

        return Req_PersonalRoomLogs;
    })();

    DcgProto.Resp_PersonalRoomLogs = (function() {

        /**
         * Properties of a Resp_PersonalRoomLogs.
         * @memberof DcgProto
         * @interface IResp_PersonalRoomLogs
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PersonalRoomLogs ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PersonalRoomLogs Cmn
         * @property {Array.<DcgProto.IS_RoomRecord>|null} [RoomRecords] Resp_PersonalRoomLogs RoomRecords
         */

        /**
         * Constructs a new Resp_PersonalRoomLogs.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PersonalRoomLogs.
         * @implements IResp_PersonalRoomLogs
         * @constructor
         * @param {DcgProto.IResp_PersonalRoomLogs=} [p] Properties to set
         */
        function Resp_PersonalRoomLogs(p) {
            this.RoomRecords = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PersonalRoomLogs ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PersonalRoomLogs
         * @instance
         */
        Resp_PersonalRoomLogs.prototype.ErrorCode = 0;

        /**
         * Resp_PersonalRoomLogs Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PersonalRoomLogs
         * @instance
         */
        Resp_PersonalRoomLogs.prototype.Cmn = null;

        /**
         * Resp_PersonalRoomLogs RoomRecords.
         * @member {Array.<DcgProto.IS_RoomRecord>} RoomRecords
         * @memberof DcgProto.Resp_PersonalRoomLogs
         * @instance
         */
        Resp_PersonalRoomLogs.prototype.RoomRecords = $util.emptyArray;

        /**
         * Creates a new Resp_PersonalRoomLogs instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PersonalRoomLogs
         * @static
         * @param {DcgProto.IResp_PersonalRoomLogs=} [properties] Properties to set
         * @returns {DcgProto.Resp_PersonalRoomLogs} Resp_PersonalRoomLogs instance
         */
        Resp_PersonalRoomLogs.create = function create(properties) {
            return new Resp_PersonalRoomLogs(properties);
        };

        /**
         * Encodes the specified Resp_PersonalRoomLogs message. Does not implicitly {@link DcgProto.Resp_PersonalRoomLogs.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PersonalRoomLogs
         * @static
         * @param {DcgProto.IResp_PersonalRoomLogs} m Resp_PersonalRoomLogs message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PersonalRoomLogs.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.RoomRecords != null && m.RoomRecords.length) {
                for (var i = 0; i < m.RoomRecords.length; ++i)
                    $root.DcgProto.S_RoomRecord.encode(m.RoomRecords[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Resp_PersonalRoomLogs message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PersonalRoomLogs
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PersonalRoomLogs} Resp_PersonalRoomLogs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PersonalRoomLogs.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PersonalRoomLogs();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.RoomRecords && m.RoomRecords.length))
                        m.RoomRecords = [];
                    m.RoomRecords.push($root.DcgProto.S_RoomRecord.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PersonalRoomLogs message.
         * @function verify
         * @memberof DcgProto.Resp_PersonalRoomLogs
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PersonalRoomLogs.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.RoomRecords != null && m.hasOwnProperty("RoomRecords")) {
                if (!Array.isArray(m.RoomRecords))
                    return "RoomRecords: array expected";
                for (var i = 0; i < m.RoomRecords.length; ++i) {
                    {
                        var e = $root.DcgProto.S_RoomRecord.verify(m.RoomRecords[i]);
                        if (e)
                            return "RoomRecords." + e;
                    }
                }
            }
            return null;
        };

        return Resp_PersonalRoomLogs;
    })();

    DcgProto.Push_PersonalRoomInfo = (function() {

        /**
         * Properties of a Push_PersonalRoomInfo.
         * @memberof DcgProto
         * @interface IPush_PersonalRoomInfo
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Push_PersonalRoomInfo Cmn
         */

        /**
         * Constructs a new Push_PersonalRoomInfo.
         * @memberof DcgProto
         * @classdesc Represents a Push_PersonalRoomInfo.
         * @implements IPush_PersonalRoomInfo
         * @constructor
         * @param {DcgProto.IPush_PersonalRoomInfo=} [p] Properties to set
         */
        function Push_PersonalRoomInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Push_PersonalRoomInfo Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Push_PersonalRoomInfo
         * @instance
         */
        Push_PersonalRoomInfo.prototype.Cmn = null;

        /**
         * Creates a new Push_PersonalRoomInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.Push_PersonalRoomInfo
         * @static
         * @param {DcgProto.IPush_PersonalRoomInfo=} [properties] Properties to set
         * @returns {DcgProto.Push_PersonalRoomInfo} Push_PersonalRoomInfo instance
         */
        Push_PersonalRoomInfo.create = function create(properties) {
            return new Push_PersonalRoomInfo(properties);
        };

        /**
         * Encodes the specified Push_PersonalRoomInfo message. Does not implicitly {@link DcgProto.Push_PersonalRoomInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Push_PersonalRoomInfo
         * @static
         * @param {DcgProto.IPush_PersonalRoomInfo} m Push_PersonalRoomInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Push_PersonalRoomInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Push_PersonalRoomInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Push_PersonalRoomInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Push_PersonalRoomInfo} Push_PersonalRoomInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Push_PersonalRoomInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Push_PersonalRoomInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Push_PersonalRoomInfo message.
         * @function verify
         * @memberof DcgProto.Push_PersonalRoomInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Push_PersonalRoomInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Push_PersonalRoomInfo;
    })();

    DcgProto.Req_PvpRoomSearch = (function() {

        /**
         * Properties of a Req_PvpRoomSearch.
         * @memberof DcgProto
         * @interface IReq_PvpRoomSearch
         * @property {number|null} [ShortId] Req_PvpRoomSearch ShortId
         */

        /**
         * Constructs a new Req_PvpRoomSearch.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomSearch.
         * @implements IReq_PvpRoomSearch
         * @constructor
         * @param {DcgProto.IReq_PvpRoomSearch=} [p] Properties to set
         */
        function Req_PvpRoomSearch(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PvpRoomSearch ShortId.
         * @member {number} ShortId
         * @memberof DcgProto.Req_PvpRoomSearch
         * @instance
         */
        Req_PvpRoomSearch.prototype.ShortId = 0;

        /**
         * Creates a new Req_PvpRoomSearch instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomSearch
         * @static
         * @param {DcgProto.IReq_PvpRoomSearch=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomSearch} Req_PvpRoomSearch instance
         */
        Req_PvpRoomSearch.create = function create(properties) {
            return new Req_PvpRoomSearch(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomSearch message. Does not implicitly {@link DcgProto.Req_PvpRoomSearch.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomSearch
         * @static
         * @param {DcgProto.IReq_PvpRoomSearch} m Req_PvpRoomSearch message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomSearch.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ShortId != null && Object.hasOwnProperty.call(m, "ShortId"))
                w.uint32(8).int32(m.ShortId);
            return w;
        };

        /**
         * Decodes a Req_PvpRoomSearch message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomSearch
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomSearch} Req_PvpRoomSearch
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomSearch.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomSearch();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ShortId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomSearch message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomSearch
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomSearch.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ShortId != null && m.hasOwnProperty("ShortId")) {
                if (!$util.isInteger(m.ShortId))
                    return "ShortId: integer expected";
            }
            return null;
        };

        return Req_PvpRoomSearch;
    })();

    DcgProto.Resp_PvpRoomSearch = (function() {

        /**
         * Properties of a Resp_PvpRoomSearch.
         * @memberof DcgProto
         * @interface IResp_PvpRoomSearch
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomSearch ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomSearch Cmn
         * @property {DcgProto.IS_PvpRoom|null} [PvpRoom] Resp_PvpRoomSearch PvpRoom
         */

        /**
         * Constructs a new Resp_PvpRoomSearch.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomSearch.
         * @implements IResp_PvpRoomSearch
         * @constructor
         * @param {DcgProto.IResp_PvpRoomSearch=} [p] Properties to set
         */
        function Resp_PvpRoomSearch(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomSearch ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomSearch
         * @instance
         */
        Resp_PvpRoomSearch.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomSearch Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomSearch
         * @instance
         */
        Resp_PvpRoomSearch.prototype.Cmn = null;

        /**
         * Resp_PvpRoomSearch PvpRoom.
         * @member {DcgProto.IS_PvpRoom|null|undefined} PvpRoom
         * @memberof DcgProto.Resp_PvpRoomSearch
         * @instance
         */
        Resp_PvpRoomSearch.prototype.PvpRoom = null;

        /**
         * Creates a new Resp_PvpRoomSearch instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomSearch
         * @static
         * @param {DcgProto.IResp_PvpRoomSearch=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomSearch} Resp_PvpRoomSearch instance
         */
        Resp_PvpRoomSearch.create = function create(properties) {
            return new Resp_PvpRoomSearch(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomSearch message. Does not implicitly {@link DcgProto.Resp_PvpRoomSearch.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomSearch
         * @static
         * @param {DcgProto.IResp_PvpRoomSearch} m Resp_PvpRoomSearch message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomSearch.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.PvpRoom != null && Object.hasOwnProperty.call(m, "PvpRoom"))
                $root.DcgProto.S_PvpRoom.encode(m.PvpRoom, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomSearch message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomSearch
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomSearch} Resp_PvpRoomSearch
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomSearch.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomSearch();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    m.PvpRoom = $root.DcgProto.S_PvpRoom.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomSearch message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomSearch
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomSearch.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.PvpRoom != null && m.hasOwnProperty("PvpRoom")) {
                {
                    var e = $root.DcgProto.S_PvpRoom.verify(m.PvpRoom);
                    if (e)
                        return "PvpRoom." + e;
                }
            }
            return null;
        };

        return Resp_PvpRoomSearch;
    })();

    DcgProto.Req_PvpRoomList = (function() {

        /**
         * Properties of a Req_PvpRoomList.
         * @memberof DcgProto
         * @interface IReq_PvpRoomList
         * @property {DcgProto.E_ROOM_MODE|null} [RoomMode] Req_PvpRoomList RoomMode
         * @property {number|null} [CurrPage] Req_PvpRoomList CurrPage
         */

        /**
         * Constructs a new Req_PvpRoomList.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomList.
         * @implements IReq_PvpRoomList
         * @constructor
         * @param {DcgProto.IReq_PvpRoomList=} [p] Properties to set
         */
        function Req_PvpRoomList(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PvpRoomList RoomMode.
         * @member {DcgProto.E_ROOM_MODE} RoomMode
         * @memberof DcgProto.Req_PvpRoomList
         * @instance
         */
        Req_PvpRoomList.prototype.RoomMode = 0;

        /**
         * Req_PvpRoomList CurrPage.
         * @member {number} CurrPage
         * @memberof DcgProto.Req_PvpRoomList
         * @instance
         */
        Req_PvpRoomList.prototype.CurrPage = 0;

        /**
         * Creates a new Req_PvpRoomList instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomList
         * @static
         * @param {DcgProto.IReq_PvpRoomList=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomList} Req_PvpRoomList instance
         */
        Req_PvpRoomList.create = function create(properties) {
            return new Req_PvpRoomList(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomList message. Does not implicitly {@link DcgProto.Req_PvpRoomList.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomList
         * @static
         * @param {DcgProto.IReq_PvpRoomList} m Req_PvpRoomList message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomList.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomMode != null && Object.hasOwnProperty.call(m, "RoomMode"))
                w.uint32(8).int32(m.RoomMode);
            if (m.CurrPage != null && Object.hasOwnProperty.call(m, "CurrPage"))
                w.uint32(16).int32(m.CurrPage);
            return w;
        };

        /**
         * Decodes a Req_PvpRoomList message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomList
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomList} Req_PvpRoomList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomList.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomList();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomMode = r.int32();
                    break;
                case 2:
                    m.CurrPage = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomList message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomList
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomList.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomMode != null && m.hasOwnProperty("RoomMode")) {
                switch (m.RoomMode) {
                default:
                    return "RoomMode: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            }
            if (m.CurrPage != null && m.hasOwnProperty("CurrPage")) {
                if (!$util.isInteger(m.CurrPage))
                    return "CurrPage: integer expected";
            }
            return null;
        };

        return Req_PvpRoomList;
    })();

    DcgProto.Resp_PvpRoomList = (function() {

        /**
         * Properties of a Resp_PvpRoomList.
         * @memberof DcgProto
         * @interface IResp_PvpRoomList
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomList ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomList Cmn
         * @property {Array.<DcgProto.IS_PvpRoom>|null} [PvpRooms] Resp_PvpRoomList PvpRooms
         * @property {number|null} [CurrPage] Resp_PvpRoomList CurrPage
         * @property {number|null} [TotalNum] Resp_PvpRoomList TotalNum
         */

        /**
         * Constructs a new Resp_PvpRoomList.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomList.
         * @implements IResp_PvpRoomList
         * @constructor
         * @param {DcgProto.IResp_PvpRoomList=} [p] Properties to set
         */
        function Resp_PvpRoomList(p) {
            this.PvpRooms = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomList ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomList
         * @instance
         */
        Resp_PvpRoomList.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomList Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomList
         * @instance
         */
        Resp_PvpRoomList.prototype.Cmn = null;

        /**
         * Resp_PvpRoomList PvpRooms.
         * @member {Array.<DcgProto.IS_PvpRoom>} PvpRooms
         * @memberof DcgProto.Resp_PvpRoomList
         * @instance
         */
        Resp_PvpRoomList.prototype.PvpRooms = $util.emptyArray;

        /**
         * Resp_PvpRoomList CurrPage.
         * @member {number} CurrPage
         * @memberof DcgProto.Resp_PvpRoomList
         * @instance
         */
        Resp_PvpRoomList.prototype.CurrPage = 0;

        /**
         * Resp_PvpRoomList TotalNum.
         * @member {number} TotalNum
         * @memberof DcgProto.Resp_PvpRoomList
         * @instance
         */
        Resp_PvpRoomList.prototype.TotalNum = 0;

        /**
         * Creates a new Resp_PvpRoomList instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomList
         * @static
         * @param {DcgProto.IResp_PvpRoomList=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomList} Resp_PvpRoomList instance
         */
        Resp_PvpRoomList.create = function create(properties) {
            return new Resp_PvpRoomList(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomList message. Does not implicitly {@link DcgProto.Resp_PvpRoomList.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomList
         * @static
         * @param {DcgProto.IResp_PvpRoomList} m Resp_PvpRoomList message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomList.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.PvpRooms != null && m.PvpRooms.length) {
                for (var i = 0; i < m.PvpRooms.length; ++i)
                    $root.DcgProto.S_PvpRoom.encode(m.PvpRooms[i], w.uint32(26).fork()).ldelim();
            }
            if (m.CurrPage != null && Object.hasOwnProperty.call(m, "CurrPage"))
                w.uint32(32).int32(m.CurrPage);
            if (m.TotalNum != null && Object.hasOwnProperty.call(m, "TotalNum"))
                w.uint32(40).int32(m.TotalNum);
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomList message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomList
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomList} Resp_PvpRoomList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomList.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomList();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.PvpRooms && m.PvpRooms.length))
                        m.PvpRooms = [];
                    m.PvpRooms.push($root.DcgProto.S_PvpRoom.decode(r, r.uint32()));
                    break;
                case 4:
                    m.CurrPage = r.int32();
                    break;
                case 5:
                    m.TotalNum = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomList message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomList
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomList.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.PvpRooms != null && m.hasOwnProperty("PvpRooms")) {
                if (!Array.isArray(m.PvpRooms))
                    return "PvpRooms: array expected";
                for (var i = 0; i < m.PvpRooms.length; ++i) {
                    {
                        var e = $root.DcgProto.S_PvpRoom.verify(m.PvpRooms[i]);
                        if (e)
                            return "PvpRooms." + e;
                    }
                }
            }
            if (m.CurrPage != null && m.hasOwnProperty("CurrPage")) {
                if (!$util.isInteger(m.CurrPage))
                    return "CurrPage: integer expected";
            }
            if (m.TotalNum != null && m.hasOwnProperty("TotalNum")) {
                if (!$util.isInteger(m.TotalNum))
                    return "TotalNum: integer expected";
            }
            return null;
        };

        return Resp_PvpRoomList;
    })();

    DcgProto.Req_PvpRoomInfo = (function() {

        /**
         * Properties of a Req_PvpRoomInfo.
         * @memberof DcgProto
         * @interface IReq_PvpRoomInfo
         * @property {Long|null} [PvpRoomIID] Req_PvpRoomInfo PvpRoomIID
         */

        /**
         * Constructs a new Req_PvpRoomInfo.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomInfo.
         * @implements IReq_PvpRoomInfo
         * @constructor
         * @param {DcgProto.IReq_PvpRoomInfo=} [p] Properties to set
         */
        function Req_PvpRoomInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PvpRoomInfo PvpRoomIID.
         * @member {Long} PvpRoomIID
         * @memberof DcgProto.Req_PvpRoomInfo
         * @instance
         */
        Req_PvpRoomInfo.prototype.PvpRoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_PvpRoomInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomInfo
         * @static
         * @param {DcgProto.IReq_PvpRoomInfo=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomInfo} Req_PvpRoomInfo instance
         */
        Req_PvpRoomInfo.create = function create(properties) {
            return new Req_PvpRoomInfo(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomInfo message. Does not implicitly {@link DcgProto.Req_PvpRoomInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomInfo
         * @static
         * @param {DcgProto.IReq_PvpRoomInfo} m Req_PvpRoomInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PvpRoomIID != null && Object.hasOwnProperty.call(m, "PvpRoomIID"))
                w.uint32(8).int64(m.PvpRoomIID);
            return w;
        };

        /**
         * Decodes a Req_PvpRoomInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomInfo} Req_PvpRoomInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PvpRoomIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomInfo message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PvpRoomIID != null && m.hasOwnProperty("PvpRoomIID")) {
                if (!$util.isInteger(m.PvpRoomIID) && !(m.PvpRoomIID && $util.isInteger(m.PvpRoomIID.low) && $util.isInteger(m.PvpRoomIID.high)))
                    return "PvpRoomIID: integer|Long expected";
            }
            return null;
        };

        return Req_PvpRoomInfo;
    })();

    DcgProto.Resp_PvpRoomInfo = (function() {

        /**
         * Properties of a Resp_PvpRoomInfo.
         * @memberof DcgProto
         * @interface IResp_PvpRoomInfo
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomInfo ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomInfo Cmn
         * @property {DcgProto.IS_PvpRoom|null} [PvpRoom] Resp_PvpRoomInfo PvpRoom
         * @property {Array.<DcgProto.IS_PvpRoomMember>|null} [PvpRoomMember] Resp_PvpRoomInfo PvpRoomMember
         * @property {DcgProto.IS_PvpRoomRace|null} [PvpRoomRace] Resp_PvpRoomInfo PvpRoomRace
         */

        /**
         * Constructs a new Resp_PvpRoomInfo.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomInfo.
         * @implements IResp_PvpRoomInfo
         * @constructor
         * @param {DcgProto.IResp_PvpRoomInfo=} [p] Properties to set
         */
        function Resp_PvpRoomInfo(p) {
            this.PvpRoomMember = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomInfo ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomInfo
         * @instance
         */
        Resp_PvpRoomInfo.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomInfo Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomInfo
         * @instance
         */
        Resp_PvpRoomInfo.prototype.Cmn = null;

        /**
         * Resp_PvpRoomInfo PvpRoom.
         * @member {DcgProto.IS_PvpRoom|null|undefined} PvpRoom
         * @memberof DcgProto.Resp_PvpRoomInfo
         * @instance
         */
        Resp_PvpRoomInfo.prototype.PvpRoom = null;

        /**
         * Resp_PvpRoomInfo PvpRoomMember.
         * @member {Array.<DcgProto.IS_PvpRoomMember>} PvpRoomMember
         * @memberof DcgProto.Resp_PvpRoomInfo
         * @instance
         */
        Resp_PvpRoomInfo.prototype.PvpRoomMember = $util.emptyArray;

        /**
         * Resp_PvpRoomInfo PvpRoomRace.
         * @member {DcgProto.IS_PvpRoomRace|null|undefined} PvpRoomRace
         * @memberof DcgProto.Resp_PvpRoomInfo
         * @instance
         */
        Resp_PvpRoomInfo.prototype.PvpRoomRace = null;

        /**
         * Creates a new Resp_PvpRoomInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomInfo
         * @static
         * @param {DcgProto.IResp_PvpRoomInfo=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomInfo} Resp_PvpRoomInfo instance
         */
        Resp_PvpRoomInfo.create = function create(properties) {
            return new Resp_PvpRoomInfo(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomInfo message. Does not implicitly {@link DcgProto.Resp_PvpRoomInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomInfo
         * @static
         * @param {DcgProto.IResp_PvpRoomInfo} m Resp_PvpRoomInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.PvpRoom != null && Object.hasOwnProperty.call(m, "PvpRoom"))
                $root.DcgProto.S_PvpRoom.encode(m.PvpRoom, w.uint32(26).fork()).ldelim();
            if (m.PvpRoomMember != null && m.PvpRoomMember.length) {
                for (var i = 0; i < m.PvpRoomMember.length; ++i)
                    $root.DcgProto.S_PvpRoomMember.encode(m.PvpRoomMember[i], w.uint32(34).fork()).ldelim();
            }
            if (m.PvpRoomRace != null && Object.hasOwnProperty.call(m, "PvpRoomRace"))
                $root.DcgProto.S_PvpRoomRace.encode(m.PvpRoomRace, w.uint32(42).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomInfo} Resp_PvpRoomInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    m.PvpRoom = $root.DcgProto.S_PvpRoom.decode(r, r.uint32());
                    break;
                case 4:
                    if (!(m.PvpRoomMember && m.PvpRoomMember.length))
                        m.PvpRoomMember = [];
                    m.PvpRoomMember.push($root.DcgProto.S_PvpRoomMember.decode(r, r.uint32()));
                    break;
                case 5:
                    m.PvpRoomRace = $root.DcgProto.S_PvpRoomRace.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomInfo message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.PvpRoom != null && m.hasOwnProperty("PvpRoom")) {
                {
                    var e = $root.DcgProto.S_PvpRoom.verify(m.PvpRoom);
                    if (e)
                        return "PvpRoom." + e;
                }
            }
            if (m.PvpRoomMember != null && m.hasOwnProperty("PvpRoomMember")) {
                if (!Array.isArray(m.PvpRoomMember))
                    return "PvpRoomMember: array expected";
                for (var i = 0; i < m.PvpRoomMember.length; ++i) {
                    {
                        var e = $root.DcgProto.S_PvpRoomMember.verify(m.PvpRoomMember[i]);
                        if (e)
                            return "PvpRoomMember." + e;
                    }
                }
            }
            if (m.PvpRoomRace != null && m.hasOwnProperty("PvpRoomRace")) {
                {
                    var e = $root.DcgProto.S_PvpRoomRace.verify(m.PvpRoomRace);
                    if (e)
                        return "PvpRoomRace." + e;
                }
            }
            return null;
        };

        return Resp_PvpRoomInfo;
    })();

    DcgProto.Req_PvpRoomRewardInfo = (function() {

        /**
         * Properties of a Req_PvpRoomRewardInfo.
         * @memberof DcgProto
         * @interface IReq_PvpRoomRewardInfo
         * @property {Long|null} [PvpRoomIID] Req_PvpRoomRewardInfo PvpRoomIID
         */

        /**
         * Constructs a new Req_PvpRoomRewardInfo.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomRewardInfo.
         * @implements IReq_PvpRoomRewardInfo
         * @constructor
         * @param {DcgProto.IReq_PvpRoomRewardInfo=} [p] Properties to set
         */
        function Req_PvpRoomRewardInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PvpRoomRewardInfo PvpRoomIID.
         * @member {Long} PvpRoomIID
         * @memberof DcgProto.Req_PvpRoomRewardInfo
         * @instance
         */
        Req_PvpRoomRewardInfo.prototype.PvpRoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_PvpRoomRewardInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomRewardInfo
         * @static
         * @param {DcgProto.IReq_PvpRoomRewardInfo=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomRewardInfo} Req_PvpRoomRewardInfo instance
         */
        Req_PvpRoomRewardInfo.create = function create(properties) {
            return new Req_PvpRoomRewardInfo(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomRewardInfo message. Does not implicitly {@link DcgProto.Req_PvpRoomRewardInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomRewardInfo
         * @static
         * @param {DcgProto.IReq_PvpRoomRewardInfo} m Req_PvpRoomRewardInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomRewardInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PvpRoomIID != null && Object.hasOwnProperty.call(m, "PvpRoomIID"))
                w.uint32(8).int64(m.PvpRoomIID);
            return w;
        };

        /**
         * Decodes a Req_PvpRoomRewardInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomRewardInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomRewardInfo} Req_PvpRoomRewardInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomRewardInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomRewardInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PvpRoomIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomRewardInfo message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomRewardInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomRewardInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PvpRoomIID != null && m.hasOwnProperty("PvpRoomIID")) {
                if (!$util.isInteger(m.PvpRoomIID) && !(m.PvpRoomIID && $util.isInteger(m.PvpRoomIID.low) && $util.isInteger(m.PvpRoomIID.high)))
                    return "PvpRoomIID: integer|Long expected";
            }
            return null;
        };

        return Req_PvpRoomRewardInfo;
    })();

    DcgProto.Resp_PvpRoomRewardInfo = (function() {

        /**
         * Properties of a Resp_PvpRoomRewardInfo.
         * @memberof DcgProto
         * @interface IResp_PvpRoomRewardInfo
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomRewardInfo ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomRewardInfo Cmn
         * @property {Array.<number>|null} [Rewards] Resp_PvpRoomRewardInfo Rewards
         */

        /**
         * Constructs a new Resp_PvpRoomRewardInfo.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomRewardInfo.
         * @implements IResp_PvpRoomRewardInfo
         * @constructor
         * @param {DcgProto.IResp_PvpRoomRewardInfo=} [p] Properties to set
         */
        function Resp_PvpRoomRewardInfo(p) {
            this.Rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomRewardInfo ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomRewardInfo
         * @instance
         */
        Resp_PvpRoomRewardInfo.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomRewardInfo Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomRewardInfo
         * @instance
         */
        Resp_PvpRoomRewardInfo.prototype.Cmn = null;

        /**
         * Resp_PvpRoomRewardInfo Rewards.
         * @member {Array.<number>} Rewards
         * @memberof DcgProto.Resp_PvpRoomRewardInfo
         * @instance
         */
        Resp_PvpRoomRewardInfo.prototype.Rewards = $util.emptyArray;

        /**
         * Creates a new Resp_PvpRoomRewardInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomRewardInfo
         * @static
         * @param {DcgProto.IResp_PvpRoomRewardInfo=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomRewardInfo} Resp_PvpRoomRewardInfo instance
         */
        Resp_PvpRoomRewardInfo.create = function create(properties) {
            return new Resp_PvpRoomRewardInfo(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomRewardInfo message. Does not implicitly {@link DcgProto.Resp_PvpRoomRewardInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomRewardInfo
         * @static
         * @param {DcgProto.IResp_PvpRoomRewardInfo} m Resp_PvpRoomRewardInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomRewardInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.Rewards != null && m.Rewards.length) {
                w.uint32(26).fork();
                for (var i = 0; i < m.Rewards.length; ++i)
                    w.int32(m.Rewards[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomRewardInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomRewardInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomRewardInfo} Resp_PvpRoomRewardInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomRewardInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomRewardInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.Rewards && m.Rewards.length))
                        m.Rewards = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Rewards.push(r.int32());
                    } else
                        m.Rewards.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomRewardInfo message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomRewardInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomRewardInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.Rewards != null && m.hasOwnProperty("Rewards")) {
                if (!Array.isArray(m.Rewards))
                    return "Rewards: array expected";
                for (var i = 0; i < m.Rewards.length; ++i) {
                    if (!$util.isInteger(m.Rewards[i]))
                        return "Rewards: integer[] expected";
                }
            }
            return null;
        };

        return Resp_PvpRoomRewardInfo;
    })();

    DcgProto.Req_PvpRoomCreate = (function() {

        /**
         * Properties of a Req_PvpRoomCreate.
         * @memberof DcgProto
         * @interface IReq_PvpRoomCreate
         * @property {string|null} [Name] Req_PvpRoomCreate Name
         * @property {number|null} [Level] Req_PvpRoomCreate Level
         * @property {DcgProto.E_ROOM_TYPE|null} [RoomType] Req_PvpRoomCreate RoomType
         * @property {Array.<number>|null} [Rewards] Req_PvpRoomCreate Rewards
         */

        /**
         * Constructs a new Req_PvpRoomCreate.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomCreate.
         * @implements IReq_PvpRoomCreate
         * @constructor
         * @param {DcgProto.IReq_PvpRoomCreate=} [p] Properties to set
         */
        function Req_PvpRoomCreate(p) {
            this.Rewards = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PvpRoomCreate Name.
         * @member {string} Name
         * @memberof DcgProto.Req_PvpRoomCreate
         * @instance
         */
        Req_PvpRoomCreate.prototype.Name = "";

        /**
         * Req_PvpRoomCreate Level.
         * @member {number} Level
         * @memberof DcgProto.Req_PvpRoomCreate
         * @instance
         */
        Req_PvpRoomCreate.prototype.Level = 0;

        /**
         * Req_PvpRoomCreate RoomType.
         * @member {DcgProto.E_ROOM_TYPE} RoomType
         * @memberof DcgProto.Req_PvpRoomCreate
         * @instance
         */
        Req_PvpRoomCreate.prototype.RoomType = 0;

        /**
         * Req_PvpRoomCreate Rewards.
         * @member {Array.<number>} Rewards
         * @memberof DcgProto.Req_PvpRoomCreate
         * @instance
         */
        Req_PvpRoomCreate.prototype.Rewards = $util.emptyArray;

        /**
         * Creates a new Req_PvpRoomCreate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomCreate
         * @static
         * @param {DcgProto.IReq_PvpRoomCreate=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomCreate} Req_PvpRoomCreate instance
         */
        Req_PvpRoomCreate.create = function create(properties) {
            return new Req_PvpRoomCreate(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomCreate message. Does not implicitly {@link DcgProto.Req_PvpRoomCreate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomCreate
         * @static
         * @param {DcgProto.IReq_PvpRoomCreate} m Req_PvpRoomCreate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomCreate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Name != null && Object.hasOwnProperty.call(m, "Name"))
                w.uint32(10).string(m.Name);
            if (m.Level != null && Object.hasOwnProperty.call(m, "Level"))
                w.uint32(16).int32(m.Level);
            if (m.RoomType != null && Object.hasOwnProperty.call(m, "RoomType"))
                w.uint32(24).int32(m.RoomType);
            if (m.Rewards != null && m.Rewards.length) {
                w.uint32(34).fork();
                for (var i = 0; i < m.Rewards.length; ++i)
                    w.int32(m.Rewards[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a Req_PvpRoomCreate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomCreate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomCreate} Req_PvpRoomCreate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomCreate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomCreate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Name = r.string();
                    break;
                case 2:
                    m.Level = r.int32();
                    break;
                case 3:
                    m.RoomType = r.int32();
                    break;
                case 4:
                    if (!(m.Rewards && m.Rewards.length))
                        m.Rewards = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.Rewards.push(r.int32());
                    } else
                        m.Rewards.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomCreate message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomCreate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomCreate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Name != null && m.hasOwnProperty("Name")) {
                if (!$util.isString(m.Name))
                    return "Name: string expected";
            }
            if (m.Level != null && m.hasOwnProperty("Level")) {
                if (!$util.isInteger(m.Level))
                    return "Level: integer expected";
            }
            if (m.RoomType != null && m.hasOwnProperty("RoomType")) {
                switch (m.RoomType) {
                default:
                    return "RoomType: enum value expected";
                case 0:
                case 1:
                    break;
                }
            }
            if (m.Rewards != null && m.hasOwnProperty("Rewards")) {
                if (!Array.isArray(m.Rewards))
                    return "Rewards: array expected";
                for (var i = 0; i < m.Rewards.length; ++i) {
                    if (!$util.isInteger(m.Rewards[i]))
                        return "Rewards: integer[] expected";
                }
            }
            return null;
        };

        return Req_PvpRoomCreate;
    })();

    DcgProto.Resp_PvpRoomCreate = (function() {

        /**
         * Properties of a Resp_PvpRoomCreate.
         * @memberof DcgProto
         * @interface IResp_PvpRoomCreate
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomCreate ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomCreate Cmn
         */

        /**
         * Constructs a new Resp_PvpRoomCreate.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomCreate.
         * @implements IResp_PvpRoomCreate
         * @constructor
         * @param {DcgProto.IResp_PvpRoomCreate=} [p] Properties to set
         */
        function Resp_PvpRoomCreate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomCreate ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomCreate
         * @instance
         */
        Resp_PvpRoomCreate.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomCreate Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomCreate
         * @instance
         */
        Resp_PvpRoomCreate.prototype.Cmn = null;

        /**
         * Creates a new Resp_PvpRoomCreate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomCreate
         * @static
         * @param {DcgProto.IResp_PvpRoomCreate=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomCreate} Resp_PvpRoomCreate instance
         */
        Resp_PvpRoomCreate.create = function create(properties) {
            return new Resp_PvpRoomCreate(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomCreate message. Does not implicitly {@link DcgProto.Resp_PvpRoomCreate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomCreate
         * @static
         * @param {DcgProto.IResp_PvpRoomCreate} m Resp_PvpRoomCreate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomCreate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomCreate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomCreate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomCreate} Resp_PvpRoomCreate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomCreate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomCreate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomCreate message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomCreate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomCreate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PvpRoomCreate;
    })();

    DcgProto.Req_PvpRoomModifyName = (function() {

        /**
         * Properties of a Req_PvpRoomModifyName.
         * @memberof DcgProto
         * @interface IReq_PvpRoomModifyName
         * @property {Long|null} [PvpRoomIID] Req_PvpRoomModifyName PvpRoomIID
         * @property {string|null} [Name] Req_PvpRoomModifyName Name
         */

        /**
         * Constructs a new Req_PvpRoomModifyName.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomModifyName.
         * @implements IReq_PvpRoomModifyName
         * @constructor
         * @param {DcgProto.IReq_PvpRoomModifyName=} [p] Properties to set
         */
        function Req_PvpRoomModifyName(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PvpRoomModifyName PvpRoomIID.
         * @member {Long} PvpRoomIID
         * @memberof DcgProto.Req_PvpRoomModifyName
         * @instance
         */
        Req_PvpRoomModifyName.prototype.PvpRoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_PvpRoomModifyName Name.
         * @member {string} Name
         * @memberof DcgProto.Req_PvpRoomModifyName
         * @instance
         */
        Req_PvpRoomModifyName.prototype.Name = "";

        /**
         * Creates a new Req_PvpRoomModifyName instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomModifyName
         * @static
         * @param {DcgProto.IReq_PvpRoomModifyName=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomModifyName} Req_PvpRoomModifyName instance
         */
        Req_PvpRoomModifyName.create = function create(properties) {
            return new Req_PvpRoomModifyName(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomModifyName message. Does not implicitly {@link DcgProto.Req_PvpRoomModifyName.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomModifyName
         * @static
         * @param {DcgProto.IReq_PvpRoomModifyName} m Req_PvpRoomModifyName message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomModifyName.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PvpRoomIID != null && Object.hasOwnProperty.call(m, "PvpRoomIID"))
                w.uint32(8).int64(m.PvpRoomIID);
            if (m.Name != null && Object.hasOwnProperty.call(m, "Name"))
                w.uint32(18).string(m.Name);
            return w;
        };

        /**
         * Decodes a Req_PvpRoomModifyName message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomModifyName
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomModifyName} Req_PvpRoomModifyName
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomModifyName.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomModifyName();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PvpRoomIID = r.int64();
                    break;
                case 2:
                    m.Name = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomModifyName message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomModifyName
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomModifyName.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PvpRoomIID != null && m.hasOwnProperty("PvpRoomIID")) {
                if (!$util.isInteger(m.PvpRoomIID) && !(m.PvpRoomIID && $util.isInteger(m.PvpRoomIID.low) && $util.isInteger(m.PvpRoomIID.high)))
                    return "PvpRoomIID: integer|Long expected";
            }
            if (m.Name != null && m.hasOwnProperty("Name")) {
                if (!$util.isString(m.Name))
                    return "Name: string expected";
            }
            return null;
        };

        return Req_PvpRoomModifyName;
    })();

    DcgProto.Resp_PvpRoomModifyName = (function() {

        /**
         * Properties of a Resp_PvpRoomModifyName.
         * @memberof DcgProto
         * @interface IResp_PvpRoomModifyName
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomModifyName ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomModifyName Cmn
         */

        /**
         * Constructs a new Resp_PvpRoomModifyName.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomModifyName.
         * @implements IResp_PvpRoomModifyName
         * @constructor
         * @param {DcgProto.IResp_PvpRoomModifyName=} [p] Properties to set
         */
        function Resp_PvpRoomModifyName(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomModifyName ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomModifyName
         * @instance
         */
        Resp_PvpRoomModifyName.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomModifyName Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomModifyName
         * @instance
         */
        Resp_PvpRoomModifyName.prototype.Cmn = null;

        /**
         * Creates a new Resp_PvpRoomModifyName instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomModifyName
         * @static
         * @param {DcgProto.IResp_PvpRoomModifyName=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomModifyName} Resp_PvpRoomModifyName instance
         */
        Resp_PvpRoomModifyName.create = function create(properties) {
            return new Resp_PvpRoomModifyName(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomModifyName message. Does not implicitly {@link DcgProto.Resp_PvpRoomModifyName.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomModifyName
         * @static
         * @param {DcgProto.IResp_PvpRoomModifyName} m Resp_PvpRoomModifyName message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomModifyName.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomModifyName message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomModifyName
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomModifyName} Resp_PvpRoomModifyName
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomModifyName.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomModifyName();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomModifyName message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomModifyName
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomModifyName.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PvpRoomModifyName;
    })();

    DcgProto.Req_PvpRoomModifyType = (function() {

        /**
         * Properties of a Req_PvpRoomModifyType.
         * @memberof DcgProto
         * @interface IReq_PvpRoomModifyType
         * @property {Long|null} [PvpRoomIID] Req_PvpRoomModifyType PvpRoomIID
         * @property {DcgProto.E_ROOM_TYPE|null} [RoomType] Req_PvpRoomModifyType RoomType
         */

        /**
         * Constructs a new Req_PvpRoomModifyType.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomModifyType.
         * @implements IReq_PvpRoomModifyType
         * @constructor
         * @param {DcgProto.IReq_PvpRoomModifyType=} [p] Properties to set
         */
        function Req_PvpRoomModifyType(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PvpRoomModifyType PvpRoomIID.
         * @member {Long} PvpRoomIID
         * @memberof DcgProto.Req_PvpRoomModifyType
         * @instance
         */
        Req_PvpRoomModifyType.prototype.PvpRoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_PvpRoomModifyType RoomType.
         * @member {DcgProto.E_ROOM_TYPE} RoomType
         * @memberof DcgProto.Req_PvpRoomModifyType
         * @instance
         */
        Req_PvpRoomModifyType.prototype.RoomType = 0;

        /**
         * Creates a new Req_PvpRoomModifyType instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomModifyType
         * @static
         * @param {DcgProto.IReq_PvpRoomModifyType=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomModifyType} Req_PvpRoomModifyType instance
         */
        Req_PvpRoomModifyType.create = function create(properties) {
            return new Req_PvpRoomModifyType(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomModifyType message. Does not implicitly {@link DcgProto.Req_PvpRoomModifyType.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomModifyType
         * @static
         * @param {DcgProto.IReq_PvpRoomModifyType} m Req_PvpRoomModifyType message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomModifyType.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PvpRoomIID != null && Object.hasOwnProperty.call(m, "PvpRoomIID"))
                w.uint32(8).int64(m.PvpRoomIID);
            if (m.RoomType != null && Object.hasOwnProperty.call(m, "RoomType"))
                w.uint32(16).int32(m.RoomType);
            return w;
        };

        /**
         * Decodes a Req_PvpRoomModifyType message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomModifyType
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomModifyType} Req_PvpRoomModifyType
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomModifyType.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomModifyType();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PvpRoomIID = r.int64();
                    break;
                case 2:
                    m.RoomType = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomModifyType message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomModifyType
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomModifyType.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PvpRoomIID != null && m.hasOwnProperty("PvpRoomIID")) {
                if (!$util.isInteger(m.PvpRoomIID) && !(m.PvpRoomIID && $util.isInteger(m.PvpRoomIID.low) && $util.isInteger(m.PvpRoomIID.high)))
                    return "PvpRoomIID: integer|Long expected";
            }
            if (m.RoomType != null && m.hasOwnProperty("RoomType")) {
                switch (m.RoomType) {
                default:
                    return "RoomType: enum value expected";
                case 0:
                case 1:
                    break;
                }
            }
            return null;
        };

        return Req_PvpRoomModifyType;
    })();

    DcgProto.Resp_PvpRoomModifyType = (function() {

        /**
         * Properties of a Resp_PvpRoomModifyType.
         * @memberof DcgProto
         * @interface IResp_PvpRoomModifyType
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomModifyType ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomModifyType Cmn
         */

        /**
         * Constructs a new Resp_PvpRoomModifyType.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomModifyType.
         * @implements IResp_PvpRoomModifyType
         * @constructor
         * @param {DcgProto.IResp_PvpRoomModifyType=} [p] Properties to set
         */
        function Resp_PvpRoomModifyType(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomModifyType ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomModifyType
         * @instance
         */
        Resp_PvpRoomModifyType.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomModifyType Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomModifyType
         * @instance
         */
        Resp_PvpRoomModifyType.prototype.Cmn = null;

        /**
         * Creates a new Resp_PvpRoomModifyType instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomModifyType
         * @static
         * @param {DcgProto.IResp_PvpRoomModifyType=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomModifyType} Resp_PvpRoomModifyType instance
         */
        Resp_PvpRoomModifyType.create = function create(properties) {
            return new Resp_PvpRoomModifyType(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomModifyType message. Does not implicitly {@link DcgProto.Resp_PvpRoomModifyType.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomModifyType
         * @static
         * @param {DcgProto.IResp_PvpRoomModifyType} m Resp_PvpRoomModifyType message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomModifyType.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomModifyType message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomModifyType
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomModifyType} Resp_PvpRoomModifyType
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomModifyType.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomModifyType();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomModifyType message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomModifyType
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomModifyType.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PvpRoomModifyType;
    })();

    DcgProto.Req_PvpRoomJoin = (function() {

        /**
         * Properties of a Req_PvpRoomJoin.
         * @memberof DcgProto
         * @interface IReq_PvpRoomJoin
         * @property {Long|null} [PvpRoomIID] Req_PvpRoomJoin PvpRoomIID
         */

        /**
         * Constructs a new Req_PvpRoomJoin.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomJoin.
         * @implements IReq_PvpRoomJoin
         * @constructor
         * @param {DcgProto.IReq_PvpRoomJoin=} [p] Properties to set
         */
        function Req_PvpRoomJoin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PvpRoomJoin PvpRoomIID.
         * @member {Long} PvpRoomIID
         * @memberof DcgProto.Req_PvpRoomJoin
         * @instance
         */
        Req_PvpRoomJoin.prototype.PvpRoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_PvpRoomJoin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomJoin
         * @static
         * @param {DcgProto.IReq_PvpRoomJoin=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomJoin} Req_PvpRoomJoin instance
         */
        Req_PvpRoomJoin.create = function create(properties) {
            return new Req_PvpRoomJoin(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomJoin message. Does not implicitly {@link DcgProto.Req_PvpRoomJoin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomJoin
         * @static
         * @param {DcgProto.IReq_PvpRoomJoin} m Req_PvpRoomJoin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomJoin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PvpRoomIID != null && Object.hasOwnProperty.call(m, "PvpRoomIID"))
                w.uint32(8).int64(m.PvpRoomIID);
            return w;
        };

        /**
         * Decodes a Req_PvpRoomJoin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomJoin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomJoin} Req_PvpRoomJoin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomJoin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomJoin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PvpRoomIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomJoin message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomJoin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomJoin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PvpRoomIID != null && m.hasOwnProperty("PvpRoomIID")) {
                if (!$util.isInteger(m.PvpRoomIID) && !(m.PvpRoomIID && $util.isInteger(m.PvpRoomIID.low) && $util.isInteger(m.PvpRoomIID.high)))
                    return "PvpRoomIID: integer|Long expected";
            }
            return null;
        };

        return Req_PvpRoomJoin;
    })();

    DcgProto.Resp_PvpRoomJoin = (function() {

        /**
         * Properties of a Resp_PvpRoomJoin.
         * @memberof DcgProto
         * @interface IResp_PvpRoomJoin
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomJoin ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomJoin Cmn
         */

        /**
         * Constructs a new Resp_PvpRoomJoin.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomJoin.
         * @implements IResp_PvpRoomJoin
         * @constructor
         * @param {DcgProto.IResp_PvpRoomJoin=} [p] Properties to set
         */
        function Resp_PvpRoomJoin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomJoin ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomJoin
         * @instance
         */
        Resp_PvpRoomJoin.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomJoin Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomJoin
         * @instance
         */
        Resp_PvpRoomJoin.prototype.Cmn = null;

        /**
         * Creates a new Resp_PvpRoomJoin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomJoin
         * @static
         * @param {DcgProto.IResp_PvpRoomJoin=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomJoin} Resp_PvpRoomJoin instance
         */
        Resp_PvpRoomJoin.create = function create(properties) {
            return new Resp_PvpRoomJoin(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomJoin message. Does not implicitly {@link DcgProto.Resp_PvpRoomJoin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomJoin
         * @static
         * @param {DcgProto.IResp_PvpRoomJoin} m Resp_PvpRoomJoin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomJoin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomJoin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomJoin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomJoin} Resp_PvpRoomJoin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomJoin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomJoin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomJoin message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomJoin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomJoin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PvpRoomJoin;
    })();

    DcgProto.Req_PvpRoomKick = (function() {

        /**
         * Properties of a Req_PvpRoomKick.
         * @memberof DcgProto
         * @interface IReq_PvpRoomKick
         * @property {Long|null} [RoleIID] Req_PvpRoomKick RoleIID
         */

        /**
         * Constructs a new Req_PvpRoomKick.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomKick.
         * @implements IReq_PvpRoomKick
         * @constructor
         * @param {DcgProto.IReq_PvpRoomKick=} [p] Properties to set
         */
        function Req_PvpRoomKick(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PvpRoomKick RoleIID.
         * @member {Long} RoleIID
         * @memberof DcgProto.Req_PvpRoomKick
         * @instance
         */
        Req_PvpRoomKick.prototype.RoleIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_PvpRoomKick instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomKick
         * @static
         * @param {DcgProto.IReq_PvpRoomKick=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomKick} Req_PvpRoomKick instance
         */
        Req_PvpRoomKick.create = function create(properties) {
            return new Req_PvpRoomKick(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomKick message. Does not implicitly {@link DcgProto.Req_PvpRoomKick.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomKick
         * @static
         * @param {DcgProto.IReq_PvpRoomKick} m Req_PvpRoomKick message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomKick.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoleIID != null && Object.hasOwnProperty.call(m, "RoleIID"))
                w.uint32(8).int64(m.RoleIID);
            return w;
        };

        /**
         * Decodes a Req_PvpRoomKick message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomKick
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomKick} Req_PvpRoomKick
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomKick.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomKick();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoleIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomKick message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomKick
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomKick.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoleIID != null && m.hasOwnProperty("RoleIID")) {
                if (!$util.isInteger(m.RoleIID) && !(m.RoleIID && $util.isInteger(m.RoleIID.low) && $util.isInteger(m.RoleIID.high)))
                    return "RoleIID: integer|Long expected";
            }
            return null;
        };

        return Req_PvpRoomKick;
    })();

    DcgProto.Resp_PvpRoomKick = (function() {

        /**
         * Properties of a Resp_PvpRoomKick.
         * @memberof DcgProto
         * @interface IResp_PvpRoomKick
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomKick ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomKick Cmn
         */

        /**
         * Constructs a new Resp_PvpRoomKick.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomKick.
         * @implements IResp_PvpRoomKick
         * @constructor
         * @param {DcgProto.IResp_PvpRoomKick=} [p] Properties to set
         */
        function Resp_PvpRoomKick(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomKick ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomKick
         * @instance
         */
        Resp_PvpRoomKick.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomKick Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomKick
         * @instance
         */
        Resp_PvpRoomKick.prototype.Cmn = null;

        /**
         * Creates a new Resp_PvpRoomKick instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomKick
         * @static
         * @param {DcgProto.IResp_PvpRoomKick=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomKick} Resp_PvpRoomKick instance
         */
        Resp_PvpRoomKick.create = function create(properties) {
            return new Resp_PvpRoomKick(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomKick message. Does not implicitly {@link DcgProto.Resp_PvpRoomKick.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomKick
         * @static
         * @param {DcgProto.IResp_PvpRoomKick} m Resp_PvpRoomKick message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomKick.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomKick message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomKick
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomKick} Resp_PvpRoomKick
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomKick.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomKick();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomKick message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomKick
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomKick.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PvpRoomKick;
    })();

    DcgProto.Req_PvpRoomQuit = (function() {

        /**
         * Properties of a Req_PvpRoomQuit.
         * @memberof DcgProto
         * @interface IReq_PvpRoomQuit
         */

        /**
         * Constructs a new Req_PvpRoomQuit.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomQuit.
         * @implements IReq_PvpRoomQuit
         * @constructor
         * @param {DcgProto.IReq_PvpRoomQuit=} [p] Properties to set
         */
        function Req_PvpRoomQuit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Req_PvpRoomQuit instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomQuit
         * @static
         * @param {DcgProto.IReq_PvpRoomQuit=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomQuit} Req_PvpRoomQuit instance
         */
        Req_PvpRoomQuit.create = function create(properties) {
            return new Req_PvpRoomQuit(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomQuit message. Does not implicitly {@link DcgProto.Req_PvpRoomQuit.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomQuit
         * @static
         * @param {DcgProto.IReq_PvpRoomQuit} m Req_PvpRoomQuit message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomQuit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Req_PvpRoomQuit message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomQuit
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomQuit} Req_PvpRoomQuit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomQuit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomQuit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomQuit message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomQuit
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomQuit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Req_PvpRoomQuit;
    })();

    DcgProto.Resp_PvpRoomQuit = (function() {

        /**
         * Properties of a Resp_PvpRoomQuit.
         * @memberof DcgProto
         * @interface IResp_PvpRoomQuit
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomQuit ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomQuit Cmn
         */

        /**
         * Constructs a new Resp_PvpRoomQuit.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomQuit.
         * @implements IResp_PvpRoomQuit
         * @constructor
         * @param {DcgProto.IResp_PvpRoomQuit=} [p] Properties to set
         */
        function Resp_PvpRoomQuit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomQuit ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomQuit
         * @instance
         */
        Resp_PvpRoomQuit.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomQuit Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomQuit
         * @instance
         */
        Resp_PvpRoomQuit.prototype.Cmn = null;

        /**
         * Creates a new Resp_PvpRoomQuit instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomQuit
         * @static
         * @param {DcgProto.IResp_PvpRoomQuit=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomQuit} Resp_PvpRoomQuit instance
         */
        Resp_PvpRoomQuit.create = function create(properties) {
            return new Resp_PvpRoomQuit(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomQuit message. Does not implicitly {@link DcgProto.Resp_PvpRoomQuit.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomQuit
         * @static
         * @param {DcgProto.IResp_PvpRoomQuit} m Resp_PvpRoomQuit message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomQuit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomQuit message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomQuit
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomQuit} Resp_PvpRoomQuit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomQuit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomQuit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomQuit message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomQuit
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomQuit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PvpRoomQuit;
    })();

    DcgProto.Req_PvpRoomRaceCreate = (function() {

        /**
         * Properties of a Req_PvpRoomRaceCreate.
         * @memberof DcgProto
         * @interface IReq_PvpRoomRaceCreate
         */

        /**
         * Constructs a new Req_PvpRoomRaceCreate.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomRaceCreate.
         * @implements IReq_PvpRoomRaceCreate
         * @constructor
         * @param {DcgProto.IReq_PvpRoomRaceCreate=} [p] Properties to set
         */
        function Req_PvpRoomRaceCreate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Req_PvpRoomRaceCreate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomRaceCreate
         * @static
         * @param {DcgProto.IReq_PvpRoomRaceCreate=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomRaceCreate} Req_PvpRoomRaceCreate instance
         */
        Req_PvpRoomRaceCreate.create = function create(properties) {
            return new Req_PvpRoomRaceCreate(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomRaceCreate message. Does not implicitly {@link DcgProto.Req_PvpRoomRaceCreate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomRaceCreate
         * @static
         * @param {DcgProto.IReq_PvpRoomRaceCreate} m Req_PvpRoomRaceCreate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomRaceCreate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Req_PvpRoomRaceCreate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomRaceCreate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomRaceCreate} Req_PvpRoomRaceCreate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomRaceCreate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomRaceCreate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomRaceCreate message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomRaceCreate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomRaceCreate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Req_PvpRoomRaceCreate;
    })();

    DcgProto.Resp_PvpRoomRaceCreate = (function() {

        /**
         * Properties of a Resp_PvpRoomRaceCreate.
         * @memberof DcgProto
         * @interface IResp_PvpRoomRaceCreate
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomRaceCreate ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomRaceCreate Cmn
         */

        /**
         * Constructs a new Resp_PvpRoomRaceCreate.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomRaceCreate.
         * @implements IResp_PvpRoomRaceCreate
         * @constructor
         * @param {DcgProto.IResp_PvpRoomRaceCreate=} [p] Properties to set
         */
        function Resp_PvpRoomRaceCreate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomRaceCreate ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomRaceCreate
         * @instance
         */
        Resp_PvpRoomRaceCreate.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomRaceCreate Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomRaceCreate
         * @instance
         */
        Resp_PvpRoomRaceCreate.prototype.Cmn = null;

        /**
         * Creates a new Resp_PvpRoomRaceCreate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomRaceCreate
         * @static
         * @param {DcgProto.IResp_PvpRoomRaceCreate=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomRaceCreate} Resp_PvpRoomRaceCreate instance
         */
        Resp_PvpRoomRaceCreate.create = function create(properties) {
            return new Resp_PvpRoomRaceCreate(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomRaceCreate message. Does not implicitly {@link DcgProto.Resp_PvpRoomRaceCreate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomRaceCreate
         * @static
         * @param {DcgProto.IResp_PvpRoomRaceCreate} m Resp_PvpRoomRaceCreate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomRaceCreate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomRaceCreate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomRaceCreate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomRaceCreate} Resp_PvpRoomRaceCreate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomRaceCreate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomRaceCreate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomRaceCreate message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomRaceCreate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomRaceCreate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PvpRoomRaceCreate;
    })();

    DcgProto.Req_PvpRoomRaceJoin = (function() {

        /**
         * Properties of a Req_PvpRoomRaceJoin.
         * @memberof DcgProto
         * @interface IReq_PvpRoomRaceJoin
         */

        /**
         * Constructs a new Req_PvpRoomRaceJoin.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomRaceJoin.
         * @implements IReq_PvpRoomRaceJoin
         * @constructor
         * @param {DcgProto.IReq_PvpRoomRaceJoin=} [p] Properties to set
         */
        function Req_PvpRoomRaceJoin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Req_PvpRoomRaceJoin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomRaceJoin
         * @static
         * @param {DcgProto.IReq_PvpRoomRaceJoin=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomRaceJoin} Req_PvpRoomRaceJoin instance
         */
        Req_PvpRoomRaceJoin.create = function create(properties) {
            return new Req_PvpRoomRaceJoin(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomRaceJoin message. Does not implicitly {@link DcgProto.Req_PvpRoomRaceJoin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomRaceJoin
         * @static
         * @param {DcgProto.IReq_PvpRoomRaceJoin} m Req_PvpRoomRaceJoin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomRaceJoin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Req_PvpRoomRaceJoin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomRaceJoin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomRaceJoin} Req_PvpRoomRaceJoin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomRaceJoin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomRaceJoin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomRaceJoin message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomRaceJoin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomRaceJoin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Req_PvpRoomRaceJoin;
    })();

    DcgProto.Resp_PvpRoomRaceJoin = (function() {

        /**
         * Properties of a Resp_PvpRoomRaceJoin.
         * @memberof DcgProto
         * @interface IResp_PvpRoomRaceJoin
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomRaceJoin ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomRaceJoin Cmn
         */

        /**
         * Constructs a new Resp_PvpRoomRaceJoin.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomRaceJoin.
         * @implements IResp_PvpRoomRaceJoin
         * @constructor
         * @param {DcgProto.IResp_PvpRoomRaceJoin=} [p] Properties to set
         */
        function Resp_PvpRoomRaceJoin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomRaceJoin ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomRaceJoin
         * @instance
         */
        Resp_PvpRoomRaceJoin.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomRaceJoin Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomRaceJoin
         * @instance
         */
        Resp_PvpRoomRaceJoin.prototype.Cmn = null;

        /**
         * Creates a new Resp_PvpRoomRaceJoin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomRaceJoin
         * @static
         * @param {DcgProto.IResp_PvpRoomRaceJoin=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomRaceJoin} Resp_PvpRoomRaceJoin instance
         */
        Resp_PvpRoomRaceJoin.create = function create(properties) {
            return new Resp_PvpRoomRaceJoin(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomRaceJoin message. Does not implicitly {@link DcgProto.Resp_PvpRoomRaceJoin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomRaceJoin
         * @static
         * @param {DcgProto.IResp_PvpRoomRaceJoin} m Resp_PvpRoomRaceJoin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomRaceJoin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomRaceJoin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomRaceJoin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomRaceJoin} Resp_PvpRoomRaceJoin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomRaceJoin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomRaceJoin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomRaceJoin message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomRaceJoin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomRaceJoin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PvpRoomRaceJoin;
    })();

    DcgProto.Req_PvpRoomRaceQuit = (function() {

        /**
         * Properties of a Req_PvpRoomRaceQuit.
         * @memberof DcgProto
         * @interface IReq_PvpRoomRaceQuit
         */

        /**
         * Constructs a new Req_PvpRoomRaceQuit.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomRaceQuit.
         * @implements IReq_PvpRoomRaceQuit
         * @constructor
         * @param {DcgProto.IReq_PvpRoomRaceQuit=} [p] Properties to set
         */
        function Req_PvpRoomRaceQuit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Req_PvpRoomRaceQuit instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomRaceQuit
         * @static
         * @param {DcgProto.IReq_PvpRoomRaceQuit=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomRaceQuit} Req_PvpRoomRaceQuit instance
         */
        Req_PvpRoomRaceQuit.create = function create(properties) {
            return new Req_PvpRoomRaceQuit(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomRaceQuit message. Does not implicitly {@link DcgProto.Req_PvpRoomRaceQuit.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomRaceQuit
         * @static
         * @param {DcgProto.IReq_PvpRoomRaceQuit} m Req_PvpRoomRaceQuit message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomRaceQuit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Req_PvpRoomRaceQuit message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomRaceQuit
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomRaceQuit} Req_PvpRoomRaceQuit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomRaceQuit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomRaceQuit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomRaceQuit message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomRaceQuit
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomRaceQuit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Req_PvpRoomRaceQuit;
    })();

    DcgProto.Resp_PvpRoomRaceQuit = (function() {

        /**
         * Properties of a Resp_PvpRoomRaceQuit.
         * @memberof DcgProto
         * @interface IResp_PvpRoomRaceQuit
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomRaceQuit ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomRaceQuit Cmn
         */

        /**
         * Constructs a new Resp_PvpRoomRaceQuit.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomRaceQuit.
         * @implements IResp_PvpRoomRaceQuit
         * @constructor
         * @param {DcgProto.IResp_PvpRoomRaceQuit=} [p] Properties to set
         */
        function Resp_PvpRoomRaceQuit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomRaceQuit ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomRaceQuit
         * @instance
         */
        Resp_PvpRoomRaceQuit.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomRaceQuit Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomRaceQuit
         * @instance
         */
        Resp_PvpRoomRaceQuit.prototype.Cmn = null;

        /**
         * Creates a new Resp_PvpRoomRaceQuit instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomRaceQuit
         * @static
         * @param {DcgProto.IResp_PvpRoomRaceQuit=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomRaceQuit} Resp_PvpRoomRaceQuit instance
         */
        Resp_PvpRoomRaceQuit.create = function create(properties) {
            return new Resp_PvpRoomRaceQuit(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomRaceQuit message. Does not implicitly {@link DcgProto.Resp_PvpRoomRaceQuit.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomRaceQuit
         * @static
         * @param {DcgProto.IResp_PvpRoomRaceQuit} m Resp_PvpRoomRaceQuit message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomRaceQuit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomRaceQuit message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomRaceQuit
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomRaceQuit} Resp_PvpRoomRaceQuit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomRaceQuit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomRaceQuit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomRaceQuit message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomRaceQuit
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomRaceQuit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PvpRoomRaceQuit;
    })();

    DcgProto.Req_PvpRoomBeginRace = (function() {

        /**
         * Properties of a Req_PvpRoomBeginRace.
         * @memberof DcgProto
         * @interface IReq_PvpRoomBeginRace
         */

        /**
         * Constructs a new Req_PvpRoomBeginRace.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomBeginRace.
         * @implements IReq_PvpRoomBeginRace
         * @constructor
         * @param {DcgProto.IReq_PvpRoomBeginRace=} [p] Properties to set
         */
        function Req_PvpRoomBeginRace(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Req_PvpRoomBeginRace instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomBeginRace
         * @static
         * @param {DcgProto.IReq_PvpRoomBeginRace=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomBeginRace} Req_PvpRoomBeginRace instance
         */
        Req_PvpRoomBeginRace.create = function create(properties) {
            return new Req_PvpRoomBeginRace(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomBeginRace message. Does not implicitly {@link DcgProto.Req_PvpRoomBeginRace.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomBeginRace
         * @static
         * @param {DcgProto.IReq_PvpRoomBeginRace} m Req_PvpRoomBeginRace message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomBeginRace.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Req_PvpRoomBeginRace message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomBeginRace
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomBeginRace} Req_PvpRoomBeginRace
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomBeginRace.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomBeginRace();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomBeginRace message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomBeginRace
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomBeginRace.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Req_PvpRoomBeginRace;
    })();

    DcgProto.Resp_PvpRoomBeginRace = (function() {

        /**
         * Properties of a Resp_PvpRoomBeginRace.
         * @memberof DcgProto
         * @interface IResp_PvpRoomBeginRace
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomBeginRace ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomBeginRace Cmn
         */

        /**
         * Constructs a new Resp_PvpRoomBeginRace.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomBeginRace.
         * @implements IResp_PvpRoomBeginRace
         * @constructor
         * @param {DcgProto.IResp_PvpRoomBeginRace=} [p] Properties to set
         */
        function Resp_PvpRoomBeginRace(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomBeginRace ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomBeginRace
         * @instance
         */
        Resp_PvpRoomBeginRace.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomBeginRace Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomBeginRace
         * @instance
         */
        Resp_PvpRoomBeginRace.prototype.Cmn = null;

        /**
         * Creates a new Resp_PvpRoomBeginRace instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomBeginRace
         * @static
         * @param {DcgProto.IResp_PvpRoomBeginRace=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomBeginRace} Resp_PvpRoomBeginRace instance
         */
        Resp_PvpRoomBeginRace.create = function create(properties) {
            return new Resp_PvpRoomBeginRace(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomBeginRace message. Does not implicitly {@link DcgProto.Resp_PvpRoomBeginRace.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomBeginRace
         * @static
         * @param {DcgProto.IResp_PvpRoomBeginRace} m Resp_PvpRoomBeginRace message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomBeginRace.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomBeginRace message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomBeginRace
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomBeginRace} Resp_PvpRoomBeginRace
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomBeginRace.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomBeginRace();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomBeginRace message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomBeginRace
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomBeginRace.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PvpRoomBeginRace;
    })();

    DcgProto.Req_PvpRoomRaceLogs = (function() {

        /**
         * Properties of a Req_PvpRoomRaceLogs.
         * @memberof DcgProto
         * @interface IReq_PvpRoomRaceLogs
         * @property {Long|null} [PvpRoomIID] Req_PvpRoomRaceLogs PvpRoomIID
         */

        /**
         * Constructs a new Req_PvpRoomRaceLogs.
         * @memberof DcgProto
         * @classdesc Represents a Req_PvpRoomRaceLogs.
         * @implements IReq_PvpRoomRaceLogs
         * @constructor
         * @param {DcgProto.IReq_PvpRoomRaceLogs=} [p] Properties to set
         */
        function Req_PvpRoomRaceLogs(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PvpRoomRaceLogs PvpRoomIID.
         * @member {Long} PvpRoomIID
         * @memberof DcgProto.Req_PvpRoomRaceLogs
         * @instance
         */
        Req_PvpRoomRaceLogs.prototype.PvpRoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_PvpRoomRaceLogs instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PvpRoomRaceLogs
         * @static
         * @param {DcgProto.IReq_PvpRoomRaceLogs=} [properties] Properties to set
         * @returns {DcgProto.Req_PvpRoomRaceLogs} Req_PvpRoomRaceLogs instance
         */
        Req_PvpRoomRaceLogs.create = function create(properties) {
            return new Req_PvpRoomRaceLogs(properties);
        };

        /**
         * Encodes the specified Req_PvpRoomRaceLogs message. Does not implicitly {@link DcgProto.Req_PvpRoomRaceLogs.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PvpRoomRaceLogs
         * @static
         * @param {DcgProto.IReq_PvpRoomRaceLogs} m Req_PvpRoomRaceLogs message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PvpRoomRaceLogs.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PvpRoomIID != null && Object.hasOwnProperty.call(m, "PvpRoomIID"))
                w.uint32(8).int64(m.PvpRoomIID);
            return w;
        };

        /**
         * Decodes a Req_PvpRoomRaceLogs message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PvpRoomRaceLogs
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PvpRoomRaceLogs} Req_PvpRoomRaceLogs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PvpRoomRaceLogs.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PvpRoomRaceLogs();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PvpRoomIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PvpRoomRaceLogs message.
         * @function verify
         * @memberof DcgProto.Req_PvpRoomRaceLogs
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PvpRoomRaceLogs.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PvpRoomIID != null && m.hasOwnProperty("PvpRoomIID")) {
                if (!$util.isInteger(m.PvpRoomIID) && !(m.PvpRoomIID && $util.isInteger(m.PvpRoomIID.low) && $util.isInteger(m.PvpRoomIID.high)))
                    return "PvpRoomIID: integer|Long expected";
            }
            return null;
        };

        return Req_PvpRoomRaceLogs;
    })();

    DcgProto.Resp_PvpRoomRaceLogs = (function() {

        /**
         * Properties of a Resp_PvpRoomRaceLogs.
         * @memberof DcgProto
         * @interface IResp_PvpRoomRaceLogs
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PvpRoomRaceLogs ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PvpRoomRaceLogs Cmn
         * @property {Array.<DcgProto.IS_PvpRoomRace>|null} [HistoryRace] Resp_PvpRoomRaceLogs HistoryRace
         */

        /**
         * Constructs a new Resp_PvpRoomRaceLogs.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PvpRoomRaceLogs.
         * @implements IResp_PvpRoomRaceLogs
         * @constructor
         * @param {DcgProto.IResp_PvpRoomRaceLogs=} [p] Properties to set
         */
        function Resp_PvpRoomRaceLogs(p) {
            this.HistoryRace = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PvpRoomRaceLogs ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PvpRoomRaceLogs
         * @instance
         */
        Resp_PvpRoomRaceLogs.prototype.ErrorCode = 0;

        /**
         * Resp_PvpRoomRaceLogs Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PvpRoomRaceLogs
         * @instance
         */
        Resp_PvpRoomRaceLogs.prototype.Cmn = null;

        /**
         * Resp_PvpRoomRaceLogs HistoryRace.
         * @member {Array.<DcgProto.IS_PvpRoomRace>} HistoryRace
         * @memberof DcgProto.Resp_PvpRoomRaceLogs
         * @instance
         */
        Resp_PvpRoomRaceLogs.prototype.HistoryRace = $util.emptyArray;

        /**
         * Creates a new Resp_PvpRoomRaceLogs instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PvpRoomRaceLogs
         * @static
         * @param {DcgProto.IResp_PvpRoomRaceLogs=} [properties] Properties to set
         * @returns {DcgProto.Resp_PvpRoomRaceLogs} Resp_PvpRoomRaceLogs instance
         */
        Resp_PvpRoomRaceLogs.create = function create(properties) {
            return new Resp_PvpRoomRaceLogs(properties);
        };

        /**
         * Encodes the specified Resp_PvpRoomRaceLogs message. Does not implicitly {@link DcgProto.Resp_PvpRoomRaceLogs.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PvpRoomRaceLogs
         * @static
         * @param {DcgProto.IResp_PvpRoomRaceLogs} m Resp_PvpRoomRaceLogs message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PvpRoomRaceLogs.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.HistoryRace != null && m.HistoryRace.length) {
                for (var i = 0; i < m.HistoryRace.length; ++i)
                    $root.DcgProto.S_PvpRoomRace.encode(m.HistoryRace[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Resp_PvpRoomRaceLogs message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PvpRoomRaceLogs
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PvpRoomRaceLogs} Resp_PvpRoomRaceLogs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PvpRoomRaceLogs.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PvpRoomRaceLogs();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.HistoryRace && m.HistoryRace.length))
                        m.HistoryRace = [];
                    m.HistoryRace.push($root.DcgProto.S_PvpRoomRace.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PvpRoomRaceLogs message.
         * @function verify
         * @memberof DcgProto.Resp_PvpRoomRaceLogs
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PvpRoomRaceLogs.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.HistoryRace != null && m.hasOwnProperty("HistoryRace")) {
                if (!Array.isArray(m.HistoryRace))
                    return "HistoryRace: array expected";
                for (var i = 0; i < m.HistoryRace.length; ++i) {
                    {
                        var e = $root.DcgProto.S_PvpRoomRace.verify(m.HistoryRace[i]);
                        if (e)
                            return "HistoryRace." + e;
                    }
                }
            }
            return null;
        };

        return Resp_PvpRoomRaceLogs;
    })();

    DcgProto.Push_PvpRoomInfo = (function() {

        /**
         * Properties of a Push_PvpRoomInfo.
         * @memberof DcgProto
         * @interface IPush_PvpRoomInfo
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Push_PvpRoomInfo Cmn
         */

        /**
         * Constructs a new Push_PvpRoomInfo.
         * @memberof DcgProto
         * @classdesc Represents a Push_PvpRoomInfo.
         * @implements IPush_PvpRoomInfo
         * @constructor
         * @param {DcgProto.IPush_PvpRoomInfo=} [p] Properties to set
         */
        function Push_PvpRoomInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Push_PvpRoomInfo Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Push_PvpRoomInfo
         * @instance
         */
        Push_PvpRoomInfo.prototype.Cmn = null;

        /**
         * Creates a new Push_PvpRoomInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.Push_PvpRoomInfo
         * @static
         * @param {DcgProto.IPush_PvpRoomInfo=} [properties] Properties to set
         * @returns {DcgProto.Push_PvpRoomInfo} Push_PvpRoomInfo instance
         */
        Push_PvpRoomInfo.create = function create(properties) {
            return new Push_PvpRoomInfo(properties);
        };

        /**
         * Encodes the specified Push_PvpRoomInfo message. Does not implicitly {@link DcgProto.Push_PvpRoomInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Push_PvpRoomInfo
         * @static
         * @param {DcgProto.IPush_PvpRoomInfo} m Push_PvpRoomInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Push_PvpRoomInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Push_PvpRoomInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Push_PvpRoomInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Push_PvpRoomInfo} Push_PvpRoomInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Push_PvpRoomInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Push_PvpRoomInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Push_PvpRoomInfo message.
         * @function verify
         * @memberof DcgProto.Push_PvpRoomInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Push_PvpRoomInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Push_PvpRoomInfo;
    })();

    DcgProto.Req_TaskRefresh = (function() {

        /**
         * Properties of a Req_TaskRefresh.
         * @memberof DcgProto
         * @interface IReq_TaskRefresh
         * @property {Long|null} [TaskIID] Req_TaskRefresh TaskIID
         */

        /**
         * Constructs a new Req_TaskRefresh.
         * @memberof DcgProto
         * @classdesc Represents a Req_TaskRefresh.
         * @implements IReq_TaskRefresh
         * @constructor
         * @param {DcgProto.IReq_TaskRefresh=} [p] Properties to set
         */
        function Req_TaskRefresh(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_TaskRefresh TaskIID.
         * @member {Long} TaskIID
         * @memberof DcgProto.Req_TaskRefresh
         * @instance
         */
        Req_TaskRefresh.prototype.TaskIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_TaskRefresh instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_TaskRefresh
         * @static
         * @param {DcgProto.IReq_TaskRefresh=} [properties] Properties to set
         * @returns {DcgProto.Req_TaskRefresh} Req_TaskRefresh instance
         */
        Req_TaskRefresh.create = function create(properties) {
            return new Req_TaskRefresh(properties);
        };

        /**
         * Encodes the specified Req_TaskRefresh message. Does not implicitly {@link DcgProto.Req_TaskRefresh.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_TaskRefresh
         * @static
         * @param {DcgProto.IReq_TaskRefresh} m Req_TaskRefresh message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_TaskRefresh.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.TaskIID != null && Object.hasOwnProperty.call(m, "TaskIID"))
                w.uint32(8).int64(m.TaskIID);
            return w;
        };

        /**
         * Decodes a Req_TaskRefresh message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_TaskRefresh
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_TaskRefresh} Req_TaskRefresh
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_TaskRefresh.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_TaskRefresh();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.TaskIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_TaskRefresh message.
         * @function verify
         * @memberof DcgProto.Req_TaskRefresh
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_TaskRefresh.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.TaskIID != null && m.hasOwnProperty("TaskIID")) {
                if (!$util.isInteger(m.TaskIID) && !(m.TaskIID && $util.isInteger(m.TaskIID.low) && $util.isInteger(m.TaskIID.high)))
                    return "TaskIID: integer|Long expected";
            }
            return null;
        };

        return Req_TaskRefresh;
    })();

    DcgProto.Resp_TaskRefresh = (function() {

        /**
         * Properties of a Resp_TaskRefresh.
         * @memberof DcgProto
         * @interface IResp_TaskRefresh
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_TaskRefresh ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_TaskRefresh Cmn
         */

        /**
         * Constructs a new Resp_TaskRefresh.
         * @memberof DcgProto
         * @classdesc Represents a Resp_TaskRefresh.
         * @implements IResp_TaskRefresh
         * @constructor
         * @param {DcgProto.IResp_TaskRefresh=} [p] Properties to set
         */
        function Resp_TaskRefresh(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_TaskRefresh ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_TaskRefresh
         * @instance
         */
        Resp_TaskRefresh.prototype.ErrorCode = 0;

        /**
         * Resp_TaskRefresh Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_TaskRefresh
         * @instance
         */
        Resp_TaskRefresh.prototype.Cmn = null;

        /**
         * Creates a new Resp_TaskRefresh instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_TaskRefresh
         * @static
         * @param {DcgProto.IResp_TaskRefresh=} [properties] Properties to set
         * @returns {DcgProto.Resp_TaskRefresh} Resp_TaskRefresh instance
         */
        Resp_TaskRefresh.create = function create(properties) {
            return new Resp_TaskRefresh(properties);
        };

        /**
         * Encodes the specified Resp_TaskRefresh message. Does not implicitly {@link DcgProto.Resp_TaskRefresh.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_TaskRefresh
         * @static
         * @param {DcgProto.IResp_TaskRefresh} m Resp_TaskRefresh message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_TaskRefresh.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_TaskRefresh message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_TaskRefresh
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_TaskRefresh} Resp_TaskRefresh
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_TaskRefresh.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_TaskRefresh();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_TaskRefresh message.
         * @function verify
         * @memberof DcgProto.Resp_TaskRefresh
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_TaskRefresh.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_TaskRefresh;
    })();

    DcgProto.Req_TaskReward = (function() {

        /**
         * Properties of a Req_TaskReward.
         * @memberof DcgProto
         * @interface IReq_TaskReward
         * @property {Array.<Long>|null} [TaskList] Req_TaskReward TaskList
         */

        /**
         * Constructs a new Req_TaskReward.
         * @memberof DcgProto
         * @classdesc Represents a Req_TaskReward.
         * @implements IReq_TaskReward
         * @constructor
         * @param {DcgProto.IReq_TaskReward=} [p] Properties to set
         */
        function Req_TaskReward(p) {
            this.TaskList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_TaskReward TaskList.
         * @member {Array.<Long>} TaskList
         * @memberof DcgProto.Req_TaskReward
         * @instance
         */
        Req_TaskReward.prototype.TaskList = $util.emptyArray;

        /**
         * Creates a new Req_TaskReward instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_TaskReward
         * @static
         * @param {DcgProto.IReq_TaskReward=} [properties] Properties to set
         * @returns {DcgProto.Req_TaskReward} Req_TaskReward instance
         */
        Req_TaskReward.create = function create(properties) {
            return new Req_TaskReward(properties);
        };

        /**
         * Encodes the specified Req_TaskReward message. Does not implicitly {@link DcgProto.Req_TaskReward.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_TaskReward
         * @static
         * @param {DcgProto.IReq_TaskReward} m Req_TaskReward message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_TaskReward.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.TaskList != null && m.TaskList.length) {
                w.uint32(10).fork();
                for (var i = 0; i < m.TaskList.length; ++i)
                    w.int64(m.TaskList[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a Req_TaskReward message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_TaskReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_TaskReward} Req_TaskReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_TaskReward.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_TaskReward();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.TaskList && m.TaskList.length))
                        m.TaskList = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.TaskList.push(r.int64());
                    } else
                        m.TaskList.push(r.int64());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_TaskReward message.
         * @function verify
         * @memberof DcgProto.Req_TaskReward
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_TaskReward.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.TaskList != null && m.hasOwnProperty("TaskList")) {
                if (!Array.isArray(m.TaskList))
                    return "TaskList: array expected";
                for (var i = 0; i < m.TaskList.length; ++i) {
                    if (!$util.isInteger(m.TaskList[i]) && !(m.TaskList[i] && $util.isInteger(m.TaskList[i].low) && $util.isInteger(m.TaskList[i].high)))
                        return "TaskList: integer|Long[] expected";
                }
            }
            return null;
        };

        return Req_TaskReward;
    })();

    DcgProto.Resp_TaskReward = (function() {

        /**
         * Properties of a Resp_TaskReward.
         * @memberof DcgProto
         * @interface IResp_TaskReward
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_TaskReward ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_TaskReward Cmn
         */

        /**
         * Constructs a new Resp_TaskReward.
         * @memberof DcgProto
         * @classdesc Represents a Resp_TaskReward.
         * @implements IResp_TaskReward
         * @constructor
         * @param {DcgProto.IResp_TaskReward=} [p] Properties to set
         */
        function Resp_TaskReward(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_TaskReward ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_TaskReward
         * @instance
         */
        Resp_TaskReward.prototype.ErrorCode = 0;

        /**
         * Resp_TaskReward Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_TaskReward
         * @instance
         */
        Resp_TaskReward.prototype.Cmn = null;

        /**
         * Creates a new Resp_TaskReward instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_TaskReward
         * @static
         * @param {DcgProto.IResp_TaskReward=} [properties] Properties to set
         * @returns {DcgProto.Resp_TaskReward} Resp_TaskReward instance
         */
        Resp_TaskReward.create = function create(properties) {
            return new Resp_TaskReward(properties);
        };

        /**
         * Encodes the specified Resp_TaskReward message. Does not implicitly {@link DcgProto.Resp_TaskReward.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_TaskReward
         * @static
         * @param {DcgProto.IResp_TaskReward} m Resp_TaskReward message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_TaskReward.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_TaskReward message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_TaskReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_TaskReward} Resp_TaskReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_TaskReward.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_TaskReward();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_TaskReward message.
         * @function verify
         * @memberof DcgProto.Resp_TaskReward
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_TaskReward.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_TaskReward;
    })();

    DcgProto.Req_TaskStageReward = (function() {

        /**
         * Properties of a Req_TaskStageReward.
         * @memberof DcgProto
         * @interface IReq_TaskStageReward
         * @property {Array.<DcgProto.IS_TaskStageReward>|null} [TaskStageReward] Req_TaskStageReward TaskStageReward
         */

        /**
         * Constructs a new Req_TaskStageReward.
         * @memberof DcgProto
         * @classdesc Represents a Req_TaskStageReward.
         * @implements IReq_TaskStageReward
         * @constructor
         * @param {DcgProto.IReq_TaskStageReward=} [p] Properties to set
         */
        function Req_TaskStageReward(p) {
            this.TaskStageReward = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_TaskStageReward TaskStageReward.
         * @member {Array.<DcgProto.IS_TaskStageReward>} TaskStageReward
         * @memberof DcgProto.Req_TaskStageReward
         * @instance
         */
        Req_TaskStageReward.prototype.TaskStageReward = $util.emptyArray;

        /**
         * Creates a new Req_TaskStageReward instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_TaskStageReward
         * @static
         * @param {DcgProto.IReq_TaskStageReward=} [properties] Properties to set
         * @returns {DcgProto.Req_TaskStageReward} Req_TaskStageReward instance
         */
        Req_TaskStageReward.create = function create(properties) {
            return new Req_TaskStageReward(properties);
        };

        /**
         * Encodes the specified Req_TaskStageReward message. Does not implicitly {@link DcgProto.Req_TaskStageReward.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_TaskStageReward
         * @static
         * @param {DcgProto.IReq_TaskStageReward} m Req_TaskStageReward message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_TaskStageReward.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.TaskStageReward != null && m.TaskStageReward.length) {
                for (var i = 0; i < m.TaskStageReward.length; ++i)
                    $root.DcgProto.S_TaskStageReward.encode(m.TaskStageReward[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Req_TaskStageReward message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_TaskStageReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_TaskStageReward} Req_TaskStageReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_TaskStageReward.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_TaskStageReward();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.TaskStageReward && m.TaskStageReward.length))
                        m.TaskStageReward = [];
                    m.TaskStageReward.push($root.DcgProto.S_TaskStageReward.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_TaskStageReward message.
         * @function verify
         * @memberof DcgProto.Req_TaskStageReward
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_TaskStageReward.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.TaskStageReward != null && m.hasOwnProperty("TaskStageReward")) {
                if (!Array.isArray(m.TaskStageReward))
                    return "TaskStageReward: array expected";
                for (var i = 0; i < m.TaskStageReward.length; ++i) {
                    {
                        var e = $root.DcgProto.S_TaskStageReward.verify(m.TaskStageReward[i]);
                        if (e)
                            return "TaskStageReward." + e;
                    }
                }
            }
            return null;
        };

        return Req_TaskStageReward;
    })();

    DcgProto.S_TaskStageReward = (function() {

        /**
         * Properties of a S_TaskStageReward.
         * @memberof DcgProto
         * @interface IS_TaskStageReward
         * @property {Long|null} [TaskIID] S_TaskStageReward TaskIID
         * @property {number|null} [Stage] S_TaskStageReward Stage
         */

        /**
         * Constructs a new S_TaskStageReward.
         * @memberof DcgProto
         * @classdesc Represents a S_TaskStageReward.
         * @implements IS_TaskStageReward
         * @constructor
         * @param {DcgProto.IS_TaskStageReward=} [p] Properties to set
         */
        function S_TaskStageReward(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_TaskStageReward TaskIID.
         * @member {Long} TaskIID
         * @memberof DcgProto.S_TaskStageReward
         * @instance
         */
        S_TaskStageReward.prototype.TaskIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * S_TaskStageReward Stage.
         * @member {number} Stage
         * @memberof DcgProto.S_TaskStageReward
         * @instance
         */
        S_TaskStageReward.prototype.Stage = 0;

        /**
         * Creates a new S_TaskStageReward instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_TaskStageReward
         * @static
         * @param {DcgProto.IS_TaskStageReward=} [properties] Properties to set
         * @returns {DcgProto.S_TaskStageReward} S_TaskStageReward instance
         */
        S_TaskStageReward.create = function create(properties) {
            return new S_TaskStageReward(properties);
        };

        /**
         * Encodes the specified S_TaskStageReward message. Does not implicitly {@link DcgProto.S_TaskStageReward.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_TaskStageReward
         * @static
         * @param {DcgProto.IS_TaskStageReward} m S_TaskStageReward message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_TaskStageReward.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.TaskIID != null && Object.hasOwnProperty.call(m, "TaskIID"))
                w.uint32(8).int64(m.TaskIID);
            if (m.Stage != null && Object.hasOwnProperty.call(m, "Stage"))
                w.uint32(16).int32(m.Stage);
            return w;
        };

        /**
         * Decodes a S_TaskStageReward message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_TaskStageReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_TaskStageReward} S_TaskStageReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_TaskStageReward.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_TaskStageReward();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.TaskIID = r.int64();
                    break;
                case 2:
                    m.Stage = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_TaskStageReward message.
         * @function verify
         * @memberof DcgProto.S_TaskStageReward
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_TaskStageReward.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.TaskIID != null && m.hasOwnProperty("TaskIID")) {
                if (!$util.isInteger(m.TaskIID) && !(m.TaskIID && $util.isInteger(m.TaskIID.low) && $util.isInteger(m.TaskIID.high)))
                    return "TaskIID: integer|Long expected";
            }
            if (m.Stage != null && m.hasOwnProperty("Stage")) {
                if (!$util.isInteger(m.Stage))
                    return "Stage: integer expected";
            }
            return null;
        };

        return S_TaskStageReward;
    })();

    DcgProto.Resp_TaskStageReward = (function() {

        /**
         * Properties of a Resp_TaskStageReward.
         * @memberof DcgProto
         * @interface IResp_TaskStageReward
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_TaskStageReward ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_TaskStageReward Cmn
         */

        /**
         * Constructs a new Resp_TaskStageReward.
         * @memberof DcgProto
         * @classdesc Represents a Resp_TaskStageReward.
         * @implements IResp_TaskStageReward
         * @constructor
         * @param {DcgProto.IResp_TaskStageReward=} [p] Properties to set
         */
        function Resp_TaskStageReward(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_TaskStageReward ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_TaskStageReward
         * @instance
         */
        Resp_TaskStageReward.prototype.ErrorCode = 0;

        /**
         * Resp_TaskStageReward Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_TaskStageReward
         * @instance
         */
        Resp_TaskStageReward.prototype.Cmn = null;

        /**
         * Creates a new Resp_TaskStageReward instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_TaskStageReward
         * @static
         * @param {DcgProto.IResp_TaskStageReward=} [properties] Properties to set
         * @returns {DcgProto.Resp_TaskStageReward} Resp_TaskStageReward instance
         */
        Resp_TaskStageReward.create = function create(properties) {
            return new Resp_TaskStageReward(properties);
        };

        /**
         * Encodes the specified Resp_TaskStageReward message. Does not implicitly {@link DcgProto.Resp_TaskStageReward.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_TaskStageReward
         * @static
         * @param {DcgProto.IResp_TaskStageReward} m Resp_TaskStageReward message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_TaskStageReward.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_TaskStageReward message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_TaskStageReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_TaskStageReward} Resp_TaskStageReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_TaskStageReward.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_TaskStageReward();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_TaskStageReward message.
         * @function verify
         * @memberof DcgProto.Resp_TaskStageReward
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_TaskStageReward.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_TaskStageReward;
    })();

    DcgProto.Req_GatewayEntry = (function() {

        /**
         * Properties of a Req_GatewayEntry.
         * @memberof DcgProto
         * @interface IReq_GatewayEntry
         * @property {Long|null} [AccountIID] Req_GatewayEntry AccountIID
         */

        /**
         * Constructs a new Req_GatewayEntry.
         * @memberof DcgProto
         * @classdesc Represents a Req_GatewayEntry.
         * @implements IReq_GatewayEntry
         * @constructor
         * @param {DcgProto.IReq_GatewayEntry=} [p] Properties to set
         */
        function Req_GatewayEntry(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_GatewayEntry AccountIID.
         * @member {Long} AccountIID
         * @memberof DcgProto.Req_GatewayEntry
         * @instance
         */
        Req_GatewayEntry.prototype.AccountIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_GatewayEntry instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_GatewayEntry
         * @static
         * @param {DcgProto.IReq_GatewayEntry=} [properties] Properties to set
         * @returns {DcgProto.Req_GatewayEntry} Req_GatewayEntry instance
         */
        Req_GatewayEntry.create = function create(properties) {
            return new Req_GatewayEntry(properties);
        };

        /**
         * Encodes the specified Req_GatewayEntry message. Does not implicitly {@link DcgProto.Req_GatewayEntry.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_GatewayEntry
         * @static
         * @param {DcgProto.IReq_GatewayEntry} m Req_GatewayEntry message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_GatewayEntry.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.AccountIID != null && Object.hasOwnProperty.call(m, "AccountIID"))
                w.uint32(8).int64(m.AccountIID);
            return w;
        };

        /**
         * Decodes a Req_GatewayEntry message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_GatewayEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_GatewayEntry} Req_GatewayEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_GatewayEntry.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_GatewayEntry();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.AccountIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_GatewayEntry message.
         * @function verify
         * @memberof DcgProto.Req_GatewayEntry
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_GatewayEntry.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.AccountIID != null && m.hasOwnProperty("AccountIID")) {
                if (!$util.isInteger(m.AccountIID) && !(m.AccountIID && $util.isInteger(m.AccountIID.low) && $util.isInteger(m.AccountIID.high)))
                    return "AccountIID: integer|Long expected";
            }
            return null;
        };

        return Req_GatewayEntry;
    })();

    DcgProto.Resp_GatewayEntry = (function() {

        /**
         * Properties of a Resp_GatewayEntry.
         * @memberof DcgProto
         * @interface IResp_GatewayEntry
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_GatewayEntry ErrorCode
         * @property {string|null} [ConnectorUrl] Resp_GatewayEntry ConnectorUrl
         */

        /**
         * Constructs a new Resp_GatewayEntry.
         * @memberof DcgProto
         * @classdesc Represents a Resp_GatewayEntry.
         * @implements IResp_GatewayEntry
         * @constructor
         * @param {DcgProto.IResp_GatewayEntry=} [p] Properties to set
         */
        function Resp_GatewayEntry(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_GatewayEntry ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_GatewayEntry
         * @instance
         */
        Resp_GatewayEntry.prototype.ErrorCode = 0;

        /**
         * Resp_GatewayEntry ConnectorUrl.
         * @member {string} ConnectorUrl
         * @memberof DcgProto.Resp_GatewayEntry
         * @instance
         */
        Resp_GatewayEntry.prototype.ConnectorUrl = "";

        /**
         * Creates a new Resp_GatewayEntry instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_GatewayEntry
         * @static
         * @param {DcgProto.IResp_GatewayEntry=} [properties] Properties to set
         * @returns {DcgProto.Resp_GatewayEntry} Resp_GatewayEntry instance
         */
        Resp_GatewayEntry.create = function create(properties) {
            return new Resp_GatewayEntry(properties);
        };

        /**
         * Encodes the specified Resp_GatewayEntry message. Does not implicitly {@link DcgProto.Resp_GatewayEntry.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_GatewayEntry
         * @static
         * @param {DcgProto.IResp_GatewayEntry} m Resp_GatewayEntry message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_GatewayEntry.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.ConnectorUrl != null && Object.hasOwnProperty.call(m, "ConnectorUrl"))
                w.uint32(18).string(m.ConnectorUrl);
            return w;
        };

        /**
         * Decodes a Resp_GatewayEntry message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_GatewayEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_GatewayEntry} Resp_GatewayEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_GatewayEntry.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_GatewayEntry();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.ConnectorUrl = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_GatewayEntry message.
         * @function verify
         * @memberof DcgProto.Resp_GatewayEntry
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_GatewayEntry.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.ConnectorUrl != null && m.hasOwnProperty("ConnectorUrl")) {
                if (!$util.isString(m.ConnectorUrl))
                    return "ConnectorUrl: string expected";
            }
            return null;
        };

        return Resp_GatewayEntry;
    })();

    DcgProto.Req_ConnectorEntry = (function() {

        /**
         * Properties of a Req_ConnectorEntry.
         * @memberof DcgProto
         * @interface IReq_ConnectorEntry
         * @property {Long|null} [AccountIID] Req_ConnectorEntry AccountIID
         */

        /**
         * Constructs a new Req_ConnectorEntry.
         * @memberof DcgProto
         * @classdesc Represents a Req_ConnectorEntry.
         * @implements IReq_ConnectorEntry
         * @constructor
         * @param {DcgProto.IReq_ConnectorEntry=} [p] Properties to set
         */
        function Req_ConnectorEntry(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_ConnectorEntry AccountIID.
         * @member {Long} AccountIID
         * @memberof DcgProto.Req_ConnectorEntry
         * @instance
         */
        Req_ConnectorEntry.prototype.AccountIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_ConnectorEntry instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_ConnectorEntry
         * @static
         * @param {DcgProto.IReq_ConnectorEntry=} [properties] Properties to set
         * @returns {DcgProto.Req_ConnectorEntry} Req_ConnectorEntry instance
         */
        Req_ConnectorEntry.create = function create(properties) {
            return new Req_ConnectorEntry(properties);
        };

        /**
         * Encodes the specified Req_ConnectorEntry message. Does not implicitly {@link DcgProto.Req_ConnectorEntry.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_ConnectorEntry
         * @static
         * @param {DcgProto.IReq_ConnectorEntry} m Req_ConnectorEntry message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_ConnectorEntry.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.AccountIID != null && Object.hasOwnProperty.call(m, "AccountIID"))
                w.uint32(8).int64(m.AccountIID);
            return w;
        };

        /**
         * Decodes a Req_ConnectorEntry message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_ConnectorEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_ConnectorEntry} Req_ConnectorEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_ConnectorEntry.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_ConnectorEntry();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.AccountIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_ConnectorEntry message.
         * @function verify
         * @memberof DcgProto.Req_ConnectorEntry
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_ConnectorEntry.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.AccountIID != null && m.hasOwnProperty("AccountIID")) {
                if (!$util.isInteger(m.AccountIID) && !(m.AccountIID && $util.isInteger(m.AccountIID.low) && $util.isInteger(m.AccountIID.high)))
                    return "AccountIID: integer|Long expected";
            }
            return null;
        };

        return Req_ConnectorEntry;
    })();

    DcgProto.Resp_ConnectorEntry = (function() {

        /**
         * Properties of a Resp_ConnectorEntry.
         * @memberof DcgProto
         * @interface IResp_ConnectorEntry
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_ConnectorEntry ErrorCode
         */

        /**
         * Constructs a new Resp_ConnectorEntry.
         * @memberof DcgProto
         * @classdesc Represents a Resp_ConnectorEntry.
         * @implements IResp_ConnectorEntry
         * @constructor
         * @param {DcgProto.IResp_ConnectorEntry=} [p] Properties to set
         */
        function Resp_ConnectorEntry(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_ConnectorEntry ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_ConnectorEntry
         * @instance
         */
        Resp_ConnectorEntry.prototype.ErrorCode = 0;

        /**
         * Creates a new Resp_ConnectorEntry instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_ConnectorEntry
         * @static
         * @param {DcgProto.IResp_ConnectorEntry=} [properties] Properties to set
         * @returns {DcgProto.Resp_ConnectorEntry} Resp_ConnectorEntry instance
         */
        Resp_ConnectorEntry.create = function create(properties) {
            return new Resp_ConnectorEntry(properties);
        };

        /**
         * Encodes the specified Resp_ConnectorEntry message. Does not implicitly {@link DcgProto.Resp_ConnectorEntry.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_ConnectorEntry
         * @static
         * @param {DcgProto.IResp_ConnectorEntry} m Resp_ConnectorEntry message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_ConnectorEntry.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            return w;
        };

        /**
         * Decodes a Resp_ConnectorEntry message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_ConnectorEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_ConnectorEntry} Resp_ConnectorEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_ConnectorEntry.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_ConnectorEntry();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_ConnectorEntry message.
         * @function verify
         * @memberof DcgProto.Resp_ConnectorEntry
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_ConnectorEntry.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            return null;
        };

        return Resp_ConnectorEntry;
    })();

    DcgProto.Req_RoleLogin = (function() {

        /**
         * Properties of a Req_RoleLogin.
         * @memberof DcgProto
         * @interface IReq_RoleLogin
         * @property {string|null} [Name] Req_RoleLogin Name
         */

        /**
         * Constructs a new Req_RoleLogin.
         * @memberof DcgProto
         * @classdesc Represents a Req_RoleLogin.
         * @implements IReq_RoleLogin
         * @constructor
         * @param {DcgProto.IReq_RoleLogin=} [p] Properties to set
         */
        function Req_RoleLogin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_RoleLogin Name.
         * @member {string} Name
         * @memberof DcgProto.Req_RoleLogin
         * @instance
         */
        Req_RoleLogin.prototype.Name = "";

        /**
         * Creates a new Req_RoleLogin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_RoleLogin
         * @static
         * @param {DcgProto.IReq_RoleLogin=} [properties] Properties to set
         * @returns {DcgProto.Req_RoleLogin} Req_RoleLogin instance
         */
        Req_RoleLogin.create = function create(properties) {
            return new Req_RoleLogin(properties);
        };

        /**
         * Encodes the specified Req_RoleLogin message. Does not implicitly {@link DcgProto.Req_RoleLogin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_RoleLogin
         * @static
         * @param {DcgProto.IReq_RoleLogin} m Req_RoleLogin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_RoleLogin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Name != null && Object.hasOwnProperty.call(m, "Name"))
                w.uint32(10).string(m.Name);
            return w;
        };

        /**
         * Decodes a Req_RoleLogin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_RoleLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_RoleLogin} Req_RoleLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_RoleLogin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_RoleLogin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Name = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_RoleLogin message.
         * @function verify
         * @memberof DcgProto.Req_RoleLogin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_RoleLogin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Name != null && m.hasOwnProperty("Name")) {
                if (!$util.isString(m.Name))
                    return "Name: string expected";
            }
            return null;
        };

        return Req_RoleLogin;
    })();

    DcgProto.Resp_RoleLogin = (function() {

        /**
         * Properties of a Resp_RoleLogin.
         * @memberof DcgProto
         * @interface IResp_RoleLogin
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_RoleLogin ErrorCode
         * @property {number|null} [CfgVersion] Resp_RoleLogin CfgVersion
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_RoleLogin Cmn
         */

        /**
         * Constructs a new Resp_RoleLogin.
         * @memberof DcgProto
         * @classdesc Represents a Resp_RoleLogin.
         * @implements IResp_RoleLogin
         * @constructor
         * @param {DcgProto.IResp_RoleLogin=} [p] Properties to set
         */
        function Resp_RoleLogin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_RoleLogin ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_RoleLogin
         * @instance
         */
        Resp_RoleLogin.prototype.ErrorCode = 0;

        /**
         * Resp_RoleLogin CfgVersion.
         * @member {number} CfgVersion
         * @memberof DcgProto.Resp_RoleLogin
         * @instance
         */
        Resp_RoleLogin.prototype.CfgVersion = 0;

        /**
         * Resp_RoleLogin Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_RoleLogin
         * @instance
         */
        Resp_RoleLogin.prototype.Cmn = null;

        /**
         * Creates a new Resp_RoleLogin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_RoleLogin
         * @static
         * @param {DcgProto.IResp_RoleLogin=} [properties] Properties to set
         * @returns {DcgProto.Resp_RoleLogin} Resp_RoleLogin instance
         */
        Resp_RoleLogin.create = function create(properties) {
            return new Resp_RoleLogin(properties);
        };

        /**
         * Encodes the specified Resp_RoleLogin message. Does not implicitly {@link DcgProto.Resp_RoleLogin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_RoleLogin
         * @static
         * @param {DcgProto.IResp_RoleLogin} m Resp_RoleLogin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_RoleLogin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.CfgVersion != null && Object.hasOwnProperty.call(m, "CfgVersion"))
                w.uint32(16).uint32(m.CfgVersion);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_RoleLogin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_RoleLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_RoleLogin} Resp_RoleLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_RoleLogin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_RoleLogin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.CfgVersion = r.uint32();
                    break;
                case 3:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_RoleLogin message.
         * @function verify
         * @memberof DcgProto.Resp_RoleLogin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_RoleLogin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.CfgVersion != null && m.hasOwnProperty("CfgVersion")) {
                if (!$util.isInteger(m.CfgVersion))
                    return "CfgVersion: integer expected";
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_RoleLogin;
    })();

    DcgProto.Req_ChangeNickName = (function() {

        /**
         * Properties of a Req_ChangeNickName.
         * @memberof DcgProto
         * @interface IReq_ChangeNickName
         * @property {string|null} [NickName] Req_ChangeNickName NickName
         */

        /**
         * Constructs a new Req_ChangeNickName.
         * @memberof DcgProto
         * @classdesc Represents a Req_ChangeNickName.
         * @implements IReq_ChangeNickName
         * @constructor
         * @param {DcgProto.IReq_ChangeNickName=} [p] Properties to set
         */
        function Req_ChangeNickName(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_ChangeNickName NickName.
         * @member {string} NickName
         * @memberof DcgProto.Req_ChangeNickName
         * @instance
         */
        Req_ChangeNickName.prototype.NickName = "";

        /**
         * Creates a new Req_ChangeNickName instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_ChangeNickName
         * @static
         * @param {DcgProto.IReq_ChangeNickName=} [properties] Properties to set
         * @returns {DcgProto.Req_ChangeNickName} Req_ChangeNickName instance
         */
        Req_ChangeNickName.create = function create(properties) {
            return new Req_ChangeNickName(properties);
        };

        /**
         * Encodes the specified Req_ChangeNickName message. Does not implicitly {@link DcgProto.Req_ChangeNickName.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_ChangeNickName
         * @static
         * @param {DcgProto.IReq_ChangeNickName} m Req_ChangeNickName message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_ChangeNickName.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.NickName != null && Object.hasOwnProperty.call(m, "NickName"))
                w.uint32(10).string(m.NickName);
            return w;
        };

        /**
         * Decodes a Req_ChangeNickName message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_ChangeNickName
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_ChangeNickName} Req_ChangeNickName
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_ChangeNickName.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_ChangeNickName();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.NickName = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_ChangeNickName message.
         * @function verify
         * @memberof DcgProto.Req_ChangeNickName
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_ChangeNickName.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.NickName != null && m.hasOwnProperty("NickName")) {
                if (!$util.isString(m.NickName))
                    return "NickName: string expected";
            }
            return null;
        };

        return Req_ChangeNickName;
    })();

    DcgProto.Resp_ChangeNickName = (function() {

        /**
         * Properties of a Resp_ChangeNickName.
         * @memberof DcgProto
         * @interface IResp_ChangeNickName
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_ChangeNickName ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_ChangeNickName Cmn
         */

        /**
         * Constructs a new Resp_ChangeNickName.
         * @memberof DcgProto
         * @classdesc Represents a Resp_ChangeNickName.
         * @implements IResp_ChangeNickName
         * @constructor
         * @param {DcgProto.IResp_ChangeNickName=} [p] Properties to set
         */
        function Resp_ChangeNickName(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_ChangeNickName ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_ChangeNickName
         * @instance
         */
        Resp_ChangeNickName.prototype.ErrorCode = 0;

        /**
         * Resp_ChangeNickName Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_ChangeNickName
         * @instance
         */
        Resp_ChangeNickName.prototype.Cmn = null;

        /**
         * Creates a new Resp_ChangeNickName instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_ChangeNickName
         * @static
         * @param {DcgProto.IResp_ChangeNickName=} [properties] Properties to set
         * @returns {DcgProto.Resp_ChangeNickName} Resp_ChangeNickName instance
         */
        Resp_ChangeNickName.create = function create(properties) {
            return new Resp_ChangeNickName(properties);
        };

        /**
         * Encodes the specified Resp_ChangeNickName message. Does not implicitly {@link DcgProto.Resp_ChangeNickName.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_ChangeNickName
         * @static
         * @param {DcgProto.IResp_ChangeNickName} m Resp_ChangeNickName message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_ChangeNickName.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_ChangeNickName message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_ChangeNickName
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_ChangeNickName} Resp_ChangeNickName
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_ChangeNickName.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_ChangeNickName();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_ChangeNickName message.
         * @function verify
         * @memberof DcgProto.Resp_ChangeNickName
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_ChangeNickName.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_ChangeNickName;
    })();

    DcgProto.Req_RolePartsUpdate = (function() {

        /**
         * Properties of a Req_RolePartsUpdate.
         * @memberof DcgProto
         * @interface IReq_RolePartsUpdate
         * @property {Long|null} [PartsIID] Req_RolePartsUpdate PartsIID
         */

        /**
         * Constructs a new Req_RolePartsUpdate.
         * @memberof DcgProto
         * @classdesc Represents a Req_RolePartsUpdate.
         * @implements IReq_RolePartsUpdate
         * @constructor
         * @param {DcgProto.IReq_RolePartsUpdate=} [p] Properties to set
         */
        function Req_RolePartsUpdate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_RolePartsUpdate PartsIID.
         * @member {Long} PartsIID
         * @memberof DcgProto.Req_RolePartsUpdate
         * @instance
         */
        Req_RolePartsUpdate.prototype.PartsIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_RolePartsUpdate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_RolePartsUpdate
         * @static
         * @param {DcgProto.IReq_RolePartsUpdate=} [properties] Properties to set
         * @returns {DcgProto.Req_RolePartsUpdate} Req_RolePartsUpdate instance
         */
        Req_RolePartsUpdate.create = function create(properties) {
            return new Req_RolePartsUpdate(properties);
        };

        /**
         * Encodes the specified Req_RolePartsUpdate message. Does not implicitly {@link DcgProto.Req_RolePartsUpdate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_RolePartsUpdate
         * @static
         * @param {DcgProto.IReq_RolePartsUpdate} m Req_RolePartsUpdate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_RolePartsUpdate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.PartsIID != null && Object.hasOwnProperty.call(m, "PartsIID"))
                w.uint32(8).int64(m.PartsIID);
            return w;
        };

        /**
         * Decodes a Req_RolePartsUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_RolePartsUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_RolePartsUpdate} Req_RolePartsUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_RolePartsUpdate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_RolePartsUpdate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.PartsIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_RolePartsUpdate message.
         * @function verify
         * @memberof DcgProto.Req_RolePartsUpdate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_RolePartsUpdate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.PartsIID != null && m.hasOwnProperty("PartsIID")) {
                if (!$util.isInteger(m.PartsIID) && !(m.PartsIID && $util.isInteger(m.PartsIID.low) && $util.isInteger(m.PartsIID.high)))
                    return "PartsIID: integer|Long expected";
            }
            return null;
        };

        return Req_RolePartsUpdate;
    })();

    DcgProto.Resp_RolePartsUpdate = (function() {

        /**
         * Properties of a Resp_RolePartsUpdate.
         * @memberof DcgProto
         * @interface IResp_RolePartsUpdate
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_RolePartsUpdate ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_RolePartsUpdate Cmn
         */

        /**
         * Constructs a new Resp_RolePartsUpdate.
         * @memberof DcgProto
         * @classdesc Represents a Resp_RolePartsUpdate.
         * @implements IResp_RolePartsUpdate
         * @constructor
         * @param {DcgProto.IResp_RolePartsUpdate=} [p] Properties to set
         */
        function Resp_RolePartsUpdate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_RolePartsUpdate ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_RolePartsUpdate
         * @instance
         */
        Resp_RolePartsUpdate.prototype.ErrorCode = 0;

        /**
         * Resp_RolePartsUpdate Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_RolePartsUpdate
         * @instance
         */
        Resp_RolePartsUpdate.prototype.Cmn = null;

        /**
         * Creates a new Resp_RolePartsUpdate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_RolePartsUpdate
         * @static
         * @param {DcgProto.IResp_RolePartsUpdate=} [properties] Properties to set
         * @returns {DcgProto.Resp_RolePartsUpdate} Resp_RolePartsUpdate instance
         */
        Resp_RolePartsUpdate.create = function create(properties) {
            return new Resp_RolePartsUpdate(properties);
        };

        /**
         * Encodes the specified Resp_RolePartsUpdate message. Does not implicitly {@link DcgProto.Resp_RolePartsUpdate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_RolePartsUpdate
         * @static
         * @param {DcgProto.IResp_RolePartsUpdate} m Resp_RolePartsUpdate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_RolePartsUpdate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_RolePartsUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_RolePartsUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_RolePartsUpdate} Resp_RolePartsUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_RolePartsUpdate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_RolePartsUpdate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_RolePartsUpdate message.
         * @function verify
         * @memberof DcgProto.Resp_RolePartsUpdate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_RolePartsUpdate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_RolePartsUpdate;
    })();

    DcgProto.Req_RoleTitleUpdate = (function() {

        /**
         * Properties of a Req_RoleTitleUpdate.
         * @memberof DcgProto
         * @interface IReq_RoleTitleUpdate
         * @property {number|null} [Index] Req_RoleTitleUpdate Index
         * @property {number|null} [TitleCfgId] Req_RoleTitleUpdate TitleCfgId
         */

        /**
         * Constructs a new Req_RoleTitleUpdate.
         * @memberof DcgProto
         * @classdesc Represents a Req_RoleTitleUpdate.
         * @implements IReq_RoleTitleUpdate
         * @constructor
         * @param {DcgProto.IReq_RoleTitleUpdate=} [p] Properties to set
         */
        function Req_RoleTitleUpdate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_RoleTitleUpdate Index.
         * @member {number} Index
         * @memberof DcgProto.Req_RoleTitleUpdate
         * @instance
         */
        Req_RoleTitleUpdate.prototype.Index = 0;

        /**
         * Req_RoleTitleUpdate TitleCfgId.
         * @member {number} TitleCfgId
         * @memberof DcgProto.Req_RoleTitleUpdate
         * @instance
         */
        Req_RoleTitleUpdate.prototype.TitleCfgId = 0;

        /**
         * Creates a new Req_RoleTitleUpdate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_RoleTitleUpdate
         * @static
         * @param {DcgProto.IReq_RoleTitleUpdate=} [properties] Properties to set
         * @returns {DcgProto.Req_RoleTitleUpdate} Req_RoleTitleUpdate instance
         */
        Req_RoleTitleUpdate.create = function create(properties) {
            return new Req_RoleTitleUpdate(properties);
        };

        /**
         * Encodes the specified Req_RoleTitleUpdate message. Does not implicitly {@link DcgProto.Req_RoleTitleUpdate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_RoleTitleUpdate
         * @static
         * @param {DcgProto.IReq_RoleTitleUpdate} m Req_RoleTitleUpdate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_RoleTitleUpdate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Index != null && Object.hasOwnProperty.call(m, "Index"))
                w.uint32(8).int32(m.Index);
            if (m.TitleCfgId != null && Object.hasOwnProperty.call(m, "TitleCfgId"))
                w.uint32(16).int32(m.TitleCfgId);
            return w;
        };

        /**
         * Decodes a Req_RoleTitleUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_RoleTitleUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_RoleTitleUpdate} Req_RoleTitleUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_RoleTitleUpdate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_RoleTitleUpdate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Index = r.int32();
                    break;
                case 2:
                    m.TitleCfgId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_RoleTitleUpdate message.
         * @function verify
         * @memberof DcgProto.Req_RoleTitleUpdate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_RoleTitleUpdate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Index != null && m.hasOwnProperty("Index")) {
                if (!$util.isInteger(m.Index))
                    return "Index: integer expected";
            }
            if (m.TitleCfgId != null && m.hasOwnProperty("TitleCfgId")) {
                if (!$util.isInteger(m.TitleCfgId))
                    return "TitleCfgId: integer expected";
            }
            return null;
        };

        return Req_RoleTitleUpdate;
    })();

    DcgProto.Resp_RoleTitleUpdate = (function() {

        /**
         * Properties of a Resp_RoleTitleUpdate.
         * @memberof DcgProto
         * @interface IResp_RoleTitleUpdate
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_RoleTitleUpdate ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_RoleTitleUpdate Cmn
         */

        /**
         * Constructs a new Resp_RoleTitleUpdate.
         * @memberof DcgProto
         * @classdesc Represents a Resp_RoleTitleUpdate.
         * @implements IResp_RoleTitleUpdate
         * @constructor
         * @param {DcgProto.IResp_RoleTitleUpdate=} [p] Properties to set
         */
        function Resp_RoleTitleUpdate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_RoleTitleUpdate ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_RoleTitleUpdate
         * @instance
         */
        Resp_RoleTitleUpdate.prototype.ErrorCode = 0;

        /**
         * Resp_RoleTitleUpdate Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_RoleTitleUpdate
         * @instance
         */
        Resp_RoleTitleUpdate.prototype.Cmn = null;

        /**
         * Creates a new Resp_RoleTitleUpdate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_RoleTitleUpdate
         * @static
         * @param {DcgProto.IResp_RoleTitleUpdate=} [properties] Properties to set
         * @returns {DcgProto.Resp_RoleTitleUpdate} Resp_RoleTitleUpdate instance
         */
        Resp_RoleTitleUpdate.create = function create(properties) {
            return new Resp_RoleTitleUpdate(properties);
        };

        /**
         * Encodes the specified Resp_RoleTitleUpdate message. Does not implicitly {@link DcgProto.Resp_RoleTitleUpdate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_RoleTitleUpdate
         * @static
         * @param {DcgProto.IResp_RoleTitleUpdate} m Resp_RoleTitleUpdate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_RoleTitleUpdate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_RoleTitleUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_RoleTitleUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_RoleTitleUpdate} Resp_RoleTitleUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_RoleTitleUpdate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_RoleTitleUpdate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_RoleTitleUpdate message.
         * @function verify
         * @memberof DcgProto.Resp_RoleTitleUpdate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_RoleTitleUpdate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_RoleTitleUpdate;
    })();

    DcgProto.Push_RoleAllInfo = (function() {

        /**
         * Properties of a Push_RoleAllInfo.
         * @memberof DcgProto
         * @interface IPush_RoleAllInfo
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Push_RoleAllInfo Cmn
         */

        /**
         * Constructs a new Push_RoleAllInfo.
         * @memberof DcgProto
         * @classdesc Represents a Push_RoleAllInfo.
         * @implements IPush_RoleAllInfo
         * @constructor
         * @param {DcgProto.IPush_RoleAllInfo=} [p] Properties to set
         */
        function Push_RoleAllInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Push_RoleAllInfo Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Push_RoleAllInfo
         * @instance
         */
        Push_RoleAllInfo.prototype.Cmn = null;

        /**
         * Creates a new Push_RoleAllInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.Push_RoleAllInfo
         * @static
         * @param {DcgProto.IPush_RoleAllInfo=} [properties] Properties to set
         * @returns {DcgProto.Push_RoleAllInfo} Push_RoleAllInfo instance
         */
        Push_RoleAllInfo.create = function create(properties) {
            return new Push_RoleAllInfo(properties);
        };

        /**
         * Encodes the specified Push_RoleAllInfo message. Does not implicitly {@link DcgProto.Push_RoleAllInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Push_RoleAllInfo
         * @static
         * @param {DcgProto.IPush_RoleAllInfo} m Push_RoleAllInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Push_RoleAllInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Push_RoleAllInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Push_RoleAllInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Push_RoleAllInfo} Push_RoleAllInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Push_RoleAllInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Push_RoleAllInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Push_RoleAllInfo message.
         * @function verify
         * @memberof DcgProto.Push_RoleAllInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Push_RoleAllInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Push_RoleAllInfo;
    })();

    DcgProto.Req_RemoteSendMsg = (function() {

        /**
         * Properties of a Req_RemoteSendMsg.
         * @memberof DcgProto
         * @interface IReq_RemoteSendMsg
         * @property {string|null} [Route] Req_RemoteSendMsg Route
         * @property {Uint8Array|null} [Msg] Req_RemoteSendMsg Msg
         * @property {Long|null} [AccountIID] Req_RemoteSendMsg AccountIID
         */

        /**
         * Constructs a new Req_RemoteSendMsg.
         * @memberof DcgProto
         * @classdesc Represents a Req_RemoteSendMsg.
         * @implements IReq_RemoteSendMsg
         * @constructor
         * @param {DcgProto.IReq_RemoteSendMsg=} [p] Properties to set
         */
        function Req_RemoteSendMsg(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_RemoteSendMsg Route.
         * @member {string} Route
         * @memberof DcgProto.Req_RemoteSendMsg
         * @instance
         */
        Req_RemoteSendMsg.prototype.Route = "";

        /**
         * Req_RemoteSendMsg Msg.
         * @member {Uint8Array} Msg
         * @memberof DcgProto.Req_RemoteSendMsg
         * @instance
         */
        Req_RemoteSendMsg.prototype.Msg = $util.newBuffer([]);

        /**
         * Req_RemoteSendMsg AccountIID.
         * @member {Long} AccountIID
         * @memberof DcgProto.Req_RemoteSendMsg
         * @instance
         */
        Req_RemoteSendMsg.prototype.AccountIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_RemoteSendMsg instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_RemoteSendMsg
         * @static
         * @param {DcgProto.IReq_RemoteSendMsg=} [properties] Properties to set
         * @returns {DcgProto.Req_RemoteSendMsg} Req_RemoteSendMsg instance
         */
        Req_RemoteSendMsg.create = function create(properties) {
            return new Req_RemoteSendMsg(properties);
        };

        /**
         * Encodes the specified Req_RemoteSendMsg message. Does not implicitly {@link DcgProto.Req_RemoteSendMsg.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_RemoteSendMsg
         * @static
         * @param {DcgProto.IReq_RemoteSendMsg} m Req_RemoteSendMsg message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_RemoteSendMsg.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Route != null && Object.hasOwnProperty.call(m, "Route"))
                w.uint32(10).string(m.Route);
            if (m.Msg != null && Object.hasOwnProperty.call(m, "Msg"))
                w.uint32(18).bytes(m.Msg);
            if (m.AccountIID != null && Object.hasOwnProperty.call(m, "AccountIID"))
                w.uint32(24).int64(m.AccountIID);
            return w;
        };

        /**
         * Decodes a Req_RemoteSendMsg message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_RemoteSendMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_RemoteSendMsg} Req_RemoteSendMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_RemoteSendMsg.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_RemoteSendMsg();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Route = r.string();
                    break;
                case 2:
                    m.Msg = r.bytes();
                    break;
                case 3:
                    m.AccountIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_RemoteSendMsg message.
         * @function verify
         * @memberof DcgProto.Req_RemoteSendMsg
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_RemoteSendMsg.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Route != null && m.hasOwnProperty("Route")) {
                if (!$util.isString(m.Route))
                    return "Route: string expected";
            }
            if (m.Msg != null && m.hasOwnProperty("Msg")) {
                if (!(m.Msg && typeof m.Msg.length === "number" || $util.isString(m.Msg)))
                    return "Msg: buffer expected";
            }
            if (m.AccountIID != null && m.hasOwnProperty("AccountIID")) {
                if (!$util.isInteger(m.AccountIID) && !(m.AccountIID && $util.isInteger(m.AccountIID.low) && $util.isInteger(m.AccountIID.high)))
                    return "AccountIID: integer|Long expected";
            }
            return null;
        };

        return Req_RemoteSendMsg;
    })();

    DcgProto.Resp_RemoteSendMsg = (function() {

        /**
         * Properties of a Resp_RemoteSendMsg.
         * @memberof DcgProto
         * @interface IResp_RemoteSendMsg
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_RemoteSendMsg ErrorCode
         */

        /**
         * Constructs a new Resp_RemoteSendMsg.
         * @memberof DcgProto
         * @classdesc Represents a Resp_RemoteSendMsg.
         * @implements IResp_RemoteSendMsg
         * @constructor
         * @param {DcgProto.IResp_RemoteSendMsg=} [p] Properties to set
         */
        function Resp_RemoteSendMsg(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_RemoteSendMsg ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_RemoteSendMsg
         * @instance
         */
        Resp_RemoteSendMsg.prototype.ErrorCode = 0;

        /**
         * Creates a new Resp_RemoteSendMsg instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_RemoteSendMsg
         * @static
         * @param {DcgProto.IResp_RemoteSendMsg=} [properties] Properties to set
         * @returns {DcgProto.Resp_RemoteSendMsg} Resp_RemoteSendMsg instance
         */
        Resp_RemoteSendMsg.create = function create(properties) {
            return new Resp_RemoteSendMsg(properties);
        };

        /**
         * Encodes the specified Resp_RemoteSendMsg message. Does not implicitly {@link DcgProto.Resp_RemoteSendMsg.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_RemoteSendMsg
         * @static
         * @param {DcgProto.IResp_RemoteSendMsg} m Resp_RemoteSendMsg message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_RemoteSendMsg.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            return w;
        };

        /**
         * Decodes a Resp_RemoteSendMsg message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_RemoteSendMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_RemoteSendMsg} Resp_RemoteSendMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_RemoteSendMsg.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_RemoteSendMsg();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_RemoteSendMsg message.
         * @function verify
         * @memberof DcgProto.Resp_RemoteSendMsg
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_RemoteSendMsg.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            return null;
        };

        return Resp_RemoteSendMsg;
    })();

    DcgProto.Req_RoleGM = (function() {

        /**
         * Properties of a Req_RoleGM.
         * @memberof DcgProto
         * @interface IReq_RoleGM
         * @property {DcgProto.E_GM_CMD|null} [Cmd] Req_RoleGM Cmd
         * @property {DcgProto.IS_GmParams|null} [GmParams] Req_RoleGM GmParams
         */

        /**
         * Constructs a new Req_RoleGM.
         * @memberof DcgProto
         * @classdesc Represents a Req_RoleGM.
         * @implements IReq_RoleGM
         * @constructor
         * @param {DcgProto.IReq_RoleGM=} [p] Properties to set
         */
        function Req_RoleGM(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_RoleGM Cmd.
         * @member {DcgProto.E_GM_CMD} Cmd
         * @memberof DcgProto.Req_RoleGM
         * @instance
         */
        Req_RoleGM.prototype.Cmd = 0;

        /**
         * Req_RoleGM GmParams.
         * @member {DcgProto.IS_GmParams|null|undefined} GmParams
         * @memberof DcgProto.Req_RoleGM
         * @instance
         */
        Req_RoleGM.prototype.GmParams = null;

        /**
         * Creates a new Req_RoleGM instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_RoleGM
         * @static
         * @param {DcgProto.IReq_RoleGM=} [properties] Properties to set
         * @returns {DcgProto.Req_RoleGM} Req_RoleGM instance
         */
        Req_RoleGM.create = function create(properties) {
            return new Req_RoleGM(properties);
        };

        /**
         * Encodes the specified Req_RoleGM message. Does not implicitly {@link DcgProto.Req_RoleGM.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_RoleGM
         * @static
         * @param {DcgProto.IReq_RoleGM} m Req_RoleGM message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_RoleGM.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Cmd != null && Object.hasOwnProperty.call(m, "Cmd"))
                w.uint32(8).int32(m.Cmd);
            if (m.GmParams != null && Object.hasOwnProperty.call(m, "GmParams"))
                $root.DcgProto.S_GmParams.encode(m.GmParams, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Req_RoleGM message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_RoleGM
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_RoleGM} Req_RoleGM
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_RoleGM.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_RoleGM();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Cmd = r.int32();
                    break;
                case 2:
                    m.GmParams = $root.DcgProto.S_GmParams.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_RoleGM message.
         * @function verify
         * @memberof DcgProto.Req_RoleGM
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_RoleGM.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Cmd != null && m.hasOwnProperty("Cmd")) {
                switch (m.Cmd) {
                default:
                    return "Cmd: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            }
            if (m.GmParams != null && m.hasOwnProperty("GmParams")) {
                {
                    var e = $root.DcgProto.S_GmParams.verify(m.GmParams);
                    if (e)
                        return "GmParams." + e;
                }
            }
            return null;
        };

        return Req_RoleGM;
    })();

    DcgProto.Resp_RoleGM = (function() {

        /**
         * Properties of a Resp_RoleGM.
         * @memberof DcgProto
         * @interface IResp_RoleGM
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_RoleGM ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_RoleGM Cmn
         * @property {DcgProto.IS_MatchData|null} [MatchData] Resp_RoleGM MatchData
         */

        /**
         * Constructs a new Resp_RoleGM.
         * @memberof DcgProto
         * @classdesc Represents a Resp_RoleGM.
         * @implements IResp_RoleGM
         * @constructor
         * @param {DcgProto.IResp_RoleGM=} [p] Properties to set
         */
        function Resp_RoleGM(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_RoleGM ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_RoleGM
         * @instance
         */
        Resp_RoleGM.prototype.ErrorCode = 0;

        /**
         * Resp_RoleGM Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_RoleGM
         * @instance
         */
        Resp_RoleGM.prototype.Cmn = null;

        /**
         * Resp_RoleGM MatchData.
         * @member {DcgProto.IS_MatchData|null|undefined} MatchData
         * @memberof DcgProto.Resp_RoleGM
         * @instance
         */
        Resp_RoleGM.prototype.MatchData = null;

        /**
         * Creates a new Resp_RoleGM instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_RoleGM
         * @static
         * @param {DcgProto.IResp_RoleGM=} [properties] Properties to set
         * @returns {DcgProto.Resp_RoleGM} Resp_RoleGM instance
         */
        Resp_RoleGM.create = function create(properties) {
            return new Resp_RoleGM(properties);
        };

        /**
         * Encodes the specified Resp_RoleGM message. Does not implicitly {@link DcgProto.Resp_RoleGM.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_RoleGM
         * @static
         * @param {DcgProto.IResp_RoleGM} m Resp_RoleGM message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_RoleGM.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.MatchData != null && Object.hasOwnProperty.call(m, "MatchData"))
                $root.DcgProto.S_MatchData.encode(m.MatchData, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_RoleGM message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_RoleGM
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_RoleGM} Resp_RoleGM
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_RoleGM.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_RoleGM();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    m.MatchData = $root.DcgProto.S_MatchData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_RoleGM message.
         * @function verify
         * @memberof DcgProto.Resp_RoleGM
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_RoleGM.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.MatchData != null && m.hasOwnProperty("MatchData")) {
                {
                    var e = $root.DcgProto.S_MatchData.verify(m.MatchData);
                    if (e)
                        return "MatchData." + e;
                }
            }
            return null;
        };

        return Resp_RoleGM;
    })();

    DcgProto.Req_RoleSync = (function() {

        /**
         * Properties of a Req_RoleSync.
         * @memberof DcgProto
         * @interface IReq_RoleSync
         */

        /**
         * Constructs a new Req_RoleSync.
         * @memberof DcgProto
         * @classdesc Represents a Req_RoleSync.
         * @implements IReq_RoleSync
         * @constructor
         * @param {DcgProto.IReq_RoleSync=} [p] Properties to set
         */
        function Req_RoleSync(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Req_RoleSync instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_RoleSync
         * @static
         * @param {DcgProto.IReq_RoleSync=} [properties] Properties to set
         * @returns {DcgProto.Req_RoleSync} Req_RoleSync instance
         */
        Req_RoleSync.create = function create(properties) {
            return new Req_RoleSync(properties);
        };

        /**
         * Encodes the specified Req_RoleSync message. Does not implicitly {@link DcgProto.Req_RoleSync.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_RoleSync
         * @static
         * @param {DcgProto.IReq_RoleSync} m Req_RoleSync message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_RoleSync.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Req_RoleSync message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_RoleSync
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_RoleSync} Req_RoleSync
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_RoleSync.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_RoleSync();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_RoleSync message.
         * @function verify
         * @memberof DcgProto.Req_RoleSync
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_RoleSync.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Req_RoleSync;
    })();

    DcgProto.Resp_RoleSync = (function() {

        /**
         * Properties of a Resp_RoleSync.
         * @memberof DcgProto
         * @interface IResp_RoleSync
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_RoleSync ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_RoleSync Cmn
         */

        /**
         * Constructs a new Resp_RoleSync.
         * @memberof DcgProto
         * @classdesc Represents a Resp_RoleSync.
         * @implements IResp_RoleSync
         * @constructor
         * @param {DcgProto.IResp_RoleSync=} [p] Properties to set
         */
        function Resp_RoleSync(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_RoleSync ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_RoleSync
         * @instance
         */
        Resp_RoleSync.prototype.ErrorCode = 0;

        /**
         * Resp_RoleSync Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_RoleSync
         * @instance
         */
        Resp_RoleSync.prototype.Cmn = null;

        /**
         * Creates a new Resp_RoleSync instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_RoleSync
         * @static
         * @param {DcgProto.IResp_RoleSync=} [properties] Properties to set
         * @returns {DcgProto.Resp_RoleSync} Resp_RoleSync instance
         */
        Resp_RoleSync.create = function create(properties) {
            return new Resp_RoleSync(properties);
        };

        /**
         * Encodes the specified Resp_RoleSync message. Does not implicitly {@link DcgProto.Resp_RoleSync.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_RoleSync
         * @static
         * @param {DcgProto.IResp_RoleSync} m Resp_RoleSync message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_RoleSync.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_RoleSync message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_RoleSync
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_RoleSync} Resp_RoleSync
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_RoleSync.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_RoleSync();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_RoleSync message.
         * @function verify
         * @memberof DcgProto.Resp_RoleSync
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_RoleSync.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_RoleSync;
    })();

    DcgProto.Req_RoleDebug = (function() {

        /**
         * Properties of a Req_RoleDebug.
         * @memberof DcgProto
         * @interface IReq_RoleDebug
         * @property {number|null} [CfgId] Req_RoleDebug CfgId
         * @property {number|null} [Num] Req_RoleDebug Num
         */

        /**
         * Constructs a new Req_RoleDebug.
         * @memberof DcgProto
         * @classdesc Represents a Req_RoleDebug.
         * @implements IReq_RoleDebug
         * @constructor
         * @param {DcgProto.IReq_RoleDebug=} [p] Properties to set
         */
        function Req_RoleDebug(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_RoleDebug CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.Req_RoleDebug
         * @instance
         */
        Req_RoleDebug.prototype.CfgId = 0;

        /**
         * Req_RoleDebug Num.
         * @member {number} Num
         * @memberof DcgProto.Req_RoleDebug
         * @instance
         */
        Req_RoleDebug.prototype.Num = 0;

        /**
         * Creates a new Req_RoleDebug instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_RoleDebug
         * @static
         * @param {DcgProto.IReq_RoleDebug=} [properties] Properties to set
         * @returns {DcgProto.Req_RoleDebug} Req_RoleDebug instance
         */
        Req_RoleDebug.create = function create(properties) {
            return new Req_RoleDebug(properties);
        };

        /**
         * Encodes the specified Req_RoleDebug message. Does not implicitly {@link DcgProto.Req_RoleDebug.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_RoleDebug
         * @static
         * @param {DcgProto.IReq_RoleDebug} m Req_RoleDebug message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_RoleDebug.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(8).int32(m.CfgId);
            if (m.Num != null && Object.hasOwnProperty.call(m, "Num"))
                w.uint32(16).int32(m.Num);
            return w;
        };

        /**
         * Decodes a Req_RoleDebug message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_RoleDebug
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_RoleDebug} Req_RoleDebug
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_RoleDebug.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_RoleDebug();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CfgId = r.int32();
                    break;
                case 2:
                    m.Num = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_RoleDebug message.
         * @function verify
         * @memberof DcgProto.Req_RoleDebug
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_RoleDebug.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.Num != null && m.hasOwnProperty("Num")) {
                if (!$util.isInteger(m.Num))
                    return "Num: integer expected";
            }
            return null;
        };

        return Req_RoleDebug;
    })();

    DcgProto.Resp_RoleDebug = (function() {

        /**
         * Properties of a Resp_RoleDebug.
         * @memberof DcgProto
         * @interface IResp_RoleDebug
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_RoleDebug ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_RoleDebug Cmn
         */

        /**
         * Constructs a new Resp_RoleDebug.
         * @memberof DcgProto
         * @classdesc Represents a Resp_RoleDebug.
         * @implements IResp_RoleDebug
         * @constructor
         * @param {DcgProto.IResp_RoleDebug=} [p] Properties to set
         */
        function Resp_RoleDebug(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_RoleDebug ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_RoleDebug
         * @instance
         */
        Resp_RoleDebug.prototype.ErrorCode = 0;

        /**
         * Resp_RoleDebug Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_RoleDebug
         * @instance
         */
        Resp_RoleDebug.prototype.Cmn = null;

        /**
         * Creates a new Resp_RoleDebug instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_RoleDebug
         * @static
         * @param {DcgProto.IResp_RoleDebug=} [properties] Properties to set
         * @returns {DcgProto.Resp_RoleDebug} Resp_RoleDebug instance
         */
        Resp_RoleDebug.create = function create(properties) {
            return new Resp_RoleDebug(properties);
        };

        /**
         * Encodes the specified Resp_RoleDebug message. Does not implicitly {@link DcgProto.Resp_RoleDebug.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_RoleDebug
         * @static
         * @param {DcgProto.IResp_RoleDebug} m Resp_RoleDebug message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_RoleDebug.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_RoleDebug message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_RoleDebug
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_RoleDebug} Resp_RoleDebug
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_RoleDebug.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_RoleDebug();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_RoleDebug message.
         * @function verify
         * @memberof DcgProto.Resp_RoleDebug
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_RoleDebug.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_RoleDebug;
    })();

    DcgProto.Req_RoleDetails = (function() {

        /**
         * Properties of a Req_RoleDetails.
         * @memberof DcgProto
         * @interface IReq_RoleDetails
         * @property {Long|null} [RoleIID] Req_RoleDetails RoleIID
         */

        /**
         * Constructs a new Req_RoleDetails.
         * @memberof DcgProto
         * @classdesc Represents a Req_RoleDetails.
         * @implements IReq_RoleDetails
         * @constructor
         * @param {DcgProto.IReq_RoleDetails=} [p] Properties to set
         */
        function Req_RoleDetails(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_RoleDetails RoleIID.
         * @member {Long} RoleIID
         * @memberof DcgProto.Req_RoleDetails
         * @instance
         */
        Req_RoleDetails.prototype.RoleIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_RoleDetails instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_RoleDetails
         * @static
         * @param {DcgProto.IReq_RoleDetails=} [properties] Properties to set
         * @returns {DcgProto.Req_RoleDetails} Req_RoleDetails instance
         */
        Req_RoleDetails.create = function create(properties) {
            return new Req_RoleDetails(properties);
        };

        /**
         * Encodes the specified Req_RoleDetails message. Does not implicitly {@link DcgProto.Req_RoleDetails.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_RoleDetails
         * @static
         * @param {DcgProto.IReq_RoleDetails} m Req_RoleDetails message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_RoleDetails.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoleIID != null && Object.hasOwnProperty.call(m, "RoleIID"))
                w.uint32(8).int64(m.RoleIID);
            return w;
        };

        /**
         * Decodes a Req_RoleDetails message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_RoleDetails
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_RoleDetails} Req_RoleDetails
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_RoleDetails.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_RoleDetails();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoleIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_RoleDetails message.
         * @function verify
         * @memberof DcgProto.Req_RoleDetails
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_RoleDetails.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoleIID != null && m.hasOwnProperty("RoleIID")) {
                if (!$util.isInteger(m.RoleIID) && !(m.RoleIID && $util.isInteger(m.RoleIID.low) && $util.isInteger(m.RoleIID.high)))
                    return "RoleIID: integer|Long expected";
            }
            return null;
        };

        return Req_RoleDetails;
    })();

    DcgProto.Resp_RoleDetails = (function() {

        /**
         * Properties of a Resp_RoleDetails.
         * @memberof DcgProto
         * @interface IResp_RoleDetails
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_RoleDetails ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_RoleDetails Cmn
         * @property {DcgProto.IS_OtherRole|null} [RoleInfo] Resp_RoleDetails RoleInfo
         */

        /**
         * Constructs a new Resp_RoleDetails.
         * @memberof DcgProto
         * @classdesc Represents a Resp_RoleDetails.
         * @implements IResp_RoleDetails
         * @constructor
         * @param {DcgProto.IResp_RoleDetails=} [p] Properties to set
         */
        function Resp_RoleDetails(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_RoleDetails ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_RoleDetails
         * @instance
         */
        Resp_RoleDetails.prototype.ErrorCode = 0;

        /**
         * Resp_RoleDetails Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_RoleDetails
         * @instance
         */
        Resp_RoleDetails.prototype.Cmn = null;

        /**
         * Resp_RoleDetails RoleInfo.
         * @member {DcgProto.IS_OtherRole|null|undefined} RoleInfo
         * @memberof DcgProto.Resp_RoleDetails
         * @instance
         */
        Resp_RoleDetails.prototype.RoleInfo = null;

        /**
         * Creates a new Resp_RoleDetails instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_RoleDetails
         * @static
         * @param {DcgProto.IResp_RoleDetails=} [properties] Properties to set
         * @returns {DcgProto.Resp_RoleDetails} Resp_RoleDetails instance
         */
        Resp_RoleDetails.create = function create(properties) {
            return new Resp_RoleDetails(properties);
        };

        /**
         * Encodes the specified Resp_RoleDetails message. Does not implicitly {@link DcgProto.Resp_RoleDetails.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_RoleDetails
         * @static
         * @param {DcgProto.IResp_RoleDetails} m Resp_RoleDetails message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_RoleDetails.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.RoleInfo != null && Object.hasOwnProperty.call(m, "RoleInfo"))
                $root.DcgProto.S_OtherRole.encode(m.RoleInfo, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_RoleDetails message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_RoleDetails
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_RoleDetails} Resp_RoleDetails
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_RoleDetails.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_RoleDetails();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    m.RoleInfo = $root.DcgProto.S_OtherRole.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_RoleDetails message.
         * @function verify
         * @memberof DcgProto.Resp_RoleDetails
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_RoleDetails.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.RoleInfo != null && m.hasOwnProperty("RoleInfo")) {
                {
                    var e = $root.DcgProto.S_OtherRole.verify(m.RoleInfo);
                    if (e)
                        return "RoleInfo." + e;
                }
            }
            return null;
        };

        return Resp_RoleDetails;
    })();

    DcgProto.Req_RoleExtraSave = (function() {

        /**
         * Properties of a Req_RoleExtraSave.
         * @memberof DcgProto
         * @interface IReq_RoleExtraSave
         * @property {DcgProto.E_ExtraType|null} [ExtraType] Req_RoleExtraSave ExtraType
         * @property {DcgProto.IS_RoleExtra|null} [RoleExtra] Req_RoleExtraSave RoleExtra
         */

        /**
         * Constructs a new Req_RoleExtraSave.
         * @memberof DcgProto
         * @classdesc Represents a Req_RoleExtraSave.
         * @implements IReq_RoleExtraSave
         * @constructor
         * @param {DcgProto.IReq_RoleExtraSave=} [p] Properties to set
         */
        function Req_RoleExtraSave(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_RoleExtraSave ExtraType.
         * @member {DcgProto.E_ExtraType} ExtraType
         * @memberof DcgProto.Req_RoleExtraSave
         * @instance
         */
        Req_RoleExtraSave.prototype.ExtraType = 0;

        /**
         * Req_RoleExtraSave RoleExtra.
         * @member {DcgProto.IS_RoleExtra|null|undefined} RoleExtra
         * @memberof DcgProto.Req_RoleExtraSave
         * @instance
         */
        Req_RoleExtraSave.prototype.RoleExtra = null;

        /**
         * Creates a new Req_RoleExtraSave instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_RoleExtraSave
         * @static
         * @param {DcgProto.IReq_RoleExtraSave=} [properties] Properties to set
         * @returns {DcgProto.Req_RoleExtraSave} Req_RoleExtraSave instance
         */
        Req_RoleExtraSave.create = function create(properties) {
            return new Req_RoleExtraSave(properties);
        };

        /**
         * Encodes the specified Req_RoleExtraSave message. Does not implicitly {@link DcgProto.Req_RoleExtraSave.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_RoleExtraSave
         * @static
         * @param {DcgProto.IReq_RoleExtraSave} m Req_RoleExtraSave message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_RoleExtraSave.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ExtraType != null && Object.hasOwnProperty.call(m, "ExtraType"))
                w.uint32(8).int32(m.ExtraType);
            if (m.RoleExtra != null && Object.hasOwnProperty.call(m, "RoleExtra"))
                $root.DcgProto.S_RoleExtra.encode(m.RoleExtra, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Req_RoleExtraSave message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_RoleExtraSave
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_RoleExtraSave} Req_RoleExtraSave
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_RoleExtraSave.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_RoleExtraSave();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ExtraType = r.int32();
                    break;
                case 2:
                    m.RoleExtra = $root.DcgProto.S_RoleExtra.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_RoleExtraSave message.
         * @function verify
         * @memberof DcgProto.Req_RoleExtraSave
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_RoleExtraSave.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ExtraType != null && m.hasOwnProperty("ExtraType")) {
                switch (m.ExtraType) {
                default:
                    return "ExtraType: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            if (m.RoleExtra != null && m.hasOwnProperty("RoleExtra")) {
                {
                    var e = $root.DcgProto.S_RoleExtra.verify(m.RoleExtra);
                    if (e)
                        return "RoleExtra." + e;
                }
            }
            return null;
        };

        return Req_RoleExtraSave;
    })();

    DcgProto.Resp_RoleExtraSave = (function() {

        /**
         * Properties of a Resp_RoleExtraSave.
         * @memberof DcgProto
         * @interface IResp_RoleExtraSave
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_RoleExtraSave ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_RoleExtraSave Cmn
         * @property {DcgProto.IS_RoleExtra|null} [RoleExtra] Resp_RoleExtraSave RoleExtra
         */

        /**
         * Constructs a new Resp_RoleExtraSave.
         * @memberof DcgProto
         * @classdesc Represents a Resp_RoleExtraSave.
         * @implements IResp_RoleExtraSave
         * @constructor
         * @param {DcgProto.IResp_RoleExtraSave=} [p] Properties to set
         */
        function Resp_RoleExtraSave(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_RoleExtraSave ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_RoleExtraSave
         * @instance
         */
        Resp_RoleExtraSave.prototype.ErrorCode = 0;

        /**
         * Resp_RoleExtraSave Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_RoleExtraSave
         * @instance
         */
        Resp_RoleExtraSave.prototype.Cmn = null;

        /**
         * Resp_RoleExtraSave RoleExtra.
         * @member {DcgProto.IS_RoleExtra|null|undefined} RoleExtra
         * @memberof DcgProto.Resp_RoleExtraSave
         * @instance
         */
        Resp_RoleExtraSave.prototype.RoleExtra = null;

        /**
         * Creates a new Resp_RoleExtraSave instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_RoleExtraSave
         * @static
         * @param {DcgProto.IResp_RoleExtraSave=} [properties] Properties to set
         * @returns {DcgProto.Resp_RoleExtraSave} Resp_RoleExtraSave instance
         */
        Resp_RoleExtraSave.create = function create(properties) {
            return new Resp_RoleExtraSave(properties);
        };

        /**
         * Encodes the specified Resp_RoleExtraSave message. Does not implicitly {@link DcgProto.Resp_RoleExtraSave.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_RoleExtraSave
         * @static
         * @param {DcgProto.IResp_RoleExtraSave} m Resp_RoleExtraSave message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_RoleExtraSave.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.RoleExtra != null && Object.hasOwnProperty.call(m, "RoleExtra"))
                $root.DcgProto.S_RoleExtra.encode(m.RoleExtra, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_RoleExtraSave message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_RoleExtraSave
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_RoleExtraSave} Resp_RoleExtraSave
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_RoleExtraSave.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_RoleExtraSave();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    m.RoleExtra = $root.DcgProto.S_RoleExtra.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_RoleExtraSave message.
         * @function verify
         * @memberof DcgProto.Resp_RoleExtraSave
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_RoleExtraSave.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.RoleExtra != null && m.hasOwnProperty("RoleExtra")) {
                {
                    var e = $root.DcgProto.S_RoleExtra.verify(m.RoleExtra);
                    if (e)
                        return "RoleExtra." + e;
                }
            }
            return null;
        };

        return Resp_RoleExtraSave;
    })();

    DcgProto.Req_DeckCreate = (function() {

        /**
         * Properties of a Req_DeckCreate.
         * @memberof DcgProto
         * @interface IReq_DeckCreate
         * @property {DcgProto.IS_DeckInfo|null} [DeckInfo] Req_DeckCreate DeckInfo
         * @property {DcgProto.IS_DeckExtendInfo|null} [DeckExtendInfo] Req_DeckCreate DeckExtendInfo
         */

        /**
         * Constructs a new Req_DeckCreate.
         * @memberof DcgProto
         * @classdesc Represents a Req_DeckCreate.
         * @implements IReq_DeckCreate
         * @constructor
         * @param {DcgProto.IReq_DeckCreate=} [p] Properties to set
         */
        function Req_DeckCreate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_DeckCreate DeckInfo.
         * @member {DcgProto.IS_DeckInfo|null|undefined} DeckInfo
         * @memberof DcgProto.Req_DeckCreate
         * @instance
         */
        Req_DeckCreate.prototype.DeckInfo = null;

        /**
         * Req_DeckCreate DeckExtendInfo.
         * @member {DcgProto.IS_DeckExtendInfo|null|undefined} DeckExtendInfo
         * @memberof DcgProto.Req_DeckCreate
         * @instance
         */
        Req_DeckCreate.prototype.DeckExtendInfo = null;

        /**
         * Creates a new Req_DeckCreate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_DeckCreate
         * @static
         * @param {DcgProto.IReq_DeckCreate=} [properties] Properties to set
         * @returns {DcgProto.Req_DeckCreate} Req_DeckCreate instance
         */
        Req_DeckCreate.create = function create(properties) {
            return new Req_DeckCreate(properties);
        };

        /**
         * Encodes the specified Req_DeckCreate message. Does not implicitly {@link DcgProto.Req_DeckCreate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_DeckCreate
         * @static
         * @param {DcgProto.IReq_DeckCreate} m Req_DeckCreate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_DeckCreate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DeckInfo != null && Object.hasOwnProperty.call(m, "DeckInfo"))
                $root.DcgProto.S_DeckInfo.encode(m.DeckInfo, w.uint32(10).fork()).ldelim();
            if (m.DeckExtendInfo != null && Object.hasOwnProperty.call(m, "DeckExtendInfo"))
                $root.DcgProto.S_DeckExtendInfo.encode(m.DeckExtendInfo, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Req_DeckCreate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_DeckCreate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_DeckCreate} Req_DeckCreate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_DeckCreate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_DeckCreate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DeckInfo = $root.DcgProto.S_DeckInfo.decode(r, r.uint32());
                    break;
                case 2:
                    m.DeckExtendInfo = $root.DcgProto.S_DeckExtendInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_DeckCreate message.
         * @function verify
         * @memberof DcgProto.Req_DeckCreate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_DeckCreate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.DeckInfo != null && m.hasOwnProperty("DeckInfo")) {
                {
                    var e = $root.DcgProto.S_DeckInfo.verify(m.DeckInfo);
                    if (e)
                        return "DeckInfo." + e;
                }
            }
            if (m.DeckExtendInfo != null && m.hasOwnProperty("DeckExtendInfo")) {
                {
                    var e = $root.DcgProto.S_DeckExtendInfo.verify(m.DeckExtendInfo);
                    if (e)
                        return "DeckExtendInfo." + e;
                }
            }
            return null;
        };

        return Req_DeckCreate;
    })();

    DcgProto.Resp_DeckCreate = (function() {

        /**
         * Properties of a Resp_DeckCreate.
         * @memberof DcgProto
         * @interface IResp_DeckCreate
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_DeckCreate ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_DeckCreate Cmn
         */

        /**
         * Constructs a new Resp_DeckCreate.
         * @memberof DcgProto
         * @classdesc Represents a Resp_DeckCreate.
         * @implements IResp_DeckCreate
         * @constructor
         * @param {DcgProto.IResp_DeckCreate=} [p] Properties to set
         */
        function Resp_DeckCreate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_DeckCreate ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_DeckCreate
         * @instance
         */
        Resp_DeckCreate.prototype.ErrorCode = 0;

        /**
         * Resp_DeckCreate Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_DeckCreate
         * @instance
         */
        Resp_DeckCreate.prototype.Cmn = null;

        /**
         * Creates a new Resp_DeckCreate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_DeckCreate
         * @static
         * @param {DcgProto.IResp_DeckCreate=} [properties] Properties to set
         * @returns {DcgProto.Resp_DeckCreate} Resp_DeckCreate instance
         */
        Resp_DeckCreate.create = function create(properties) {
            return new Resp_DeckCreate(properties);
        };

        /**
         * Encodes the specified Resp_DeckCreate message. Does not implicitly {@link DcgProto.Resp_DeckCreate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_DeckCreate
         * @static
         * @param {DcgProto.IResp_DeckCreate} m Resp_DeckCreate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_DeckCreate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_DeckCreate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_DeckCreate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_DeckCreate} Resp_DeckCreate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_DeckCreate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_DeckCreate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_DeckCreate message.
         * @function verify
         * @memberof DcgProto.Resp_DeckCreate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_DeckCreate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_DeckCreate;
    })();

    DcgProto.Req_DeckCopy = (function() {

        /**
         * Properties of a Req_DeckCopy.
         * @memberof DcgProto
         * @interface IReq_DeckCopy
         * @property {Long|null} [DeckIID] Req_DeckCopy DeckIID
         * @property {number|null} [CfgId] Req_DeckCopy CfgId
         */

        /**
         * Constructs a new Req_DeckCopy.
         * @memberof DcgProto
         * @classdesc Represents a Req_DeckCopy.
         * @implements IReq_DeckCopy
         * @constructor
         * @param {DcgProto.IReq_DeckCopy=} [p] Properties to set
         */
        function Req_DeckCopy(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_DeckCopy DeckIID.
         * @member {Long} DeckIID
         * @memberof DcgProto.Req_DeckCopy
         * @instance
         */
        Req_DeckCopy.prototype.DeckIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_DeckCopy CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.Req_DeckCopy
         * @instance
         */
        Req_DeckCopy.prototype.CfgId = 0;

        /**
         * Creates a new Req_DeckCopy instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_DeckCopy
         * @static
         * @param {DcgProto.IReq_DeckCopy=} [properties] Properties to set
         * @returns {DcgProto.Req_DeckCopy} Req_DeckCopy instance
         */
        Req_DeckCopy.create = function create(properties) {
            return new Req_DeckCopy(properties);
        };

        /**
         * Encodes the specified Req_DeckCopy message. Does not implicitly {@link DcgProto.Req_DeckCopy.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_DeckCopy
         * @static
         * @param {DcgProto.IReq_DeckCopy} m Req_DeckCopy message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_DeckCopy.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DeckIID != null && Object.hasOwnProperty.call(m, "DeckIID"))
                w.uint32(8).int64(m.DeckIID);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            return w;
        };

        /**
         * Decodes a Req_DeckCopy message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_DeckCopy
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_DeckCopy} Req_DeckCopy
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_DeckCopy.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_DeckCopy();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DeckIID = r.int64();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_DeckCopy message.
         * @function verify
         * @memberof DcgProto.Req_DeckCopy
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_DeckCopy.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.DeckIID != null && m.hasOwnProperty("DeckIID")) {
                if (!$util.isInteger(m.DeckIID) && !(m.DeckIID && $util.isInteger(m.DeckIID.low) && $util.isInteger(m.DeckIID.high)))
                    return "DeckIID: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            return null;
        };

        return Req_DeckCopy;
    })();

    DcgProto.Resp_DeckCopy = (function() {

        /**
         * Properties of a Resp_DeckCopy.
         * @memberof DcgProto
         * @interface IResp_DeckCopy
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_DeckCopy ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_DeckCopy Cmn
         */

        /**
         * Constructs a new Resp_DeckCopy.
         * @memberof DcgProto
         * @classdesc Represents a Resp_DeckCopy.
         * @implements IResp_DeckCopy
         * @constructor
         * @param {DcgProto.IResp_DeckCopy=} [p] Properties to set
         */
        function Resp_DeckCopy(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_DeckCopy ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_DeckCopy
         * @instance
         */
        Resp_DeckCopy.prototype.ErrorCode = 0;

        /**
         * Resp_DeckCopy Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_DeckCopy
         * @instance
         */
        Resp_DeckCopy.prototype.Cmn = null;

        /**
         * Creates a new Resp_DeckCopy instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_DeckCopy
         * @static
         * @param {DcgProto.IResp_DeckCopy=} [properties] Properties to set
         * @returns {DcgProto.Resp_DeckCopy} Resp_DeckCopy instance
         */
        Resp_DeckCopy.create = function create(properties) {
            return new Resp_DeckCopy(properties);
        };

        /**
         * Encodes the specified Resp_DeckCopy message. Does not implicitly {@link DcgProto.Resp_DeckCopy.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_DeckCopy
         * @static
         * @param {DcgProto.IResp_DeckCopy} m Resp_DeckCopy message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_DeckCopy.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_DeckCopy message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_DeckCopy
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_DeckCopy} Resp_DeckCopy
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_DeckCopy.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_DeckCopy();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_DeckCopy message.
         * @function verify
         * @memberof DcgProto.Resp_DeckCopy
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_DeckCopy.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_DeckCopy;
    })();

    DcgProto.Req_DeckUpdate = (function() {

        /**
         * Properties of a Req_DeckUpdate.
         * @memberof DcgProto
         * @interface IReq_DeckUpdate
         * @property {DcgProto.IS_DeckInfo|null} [DeckInfo] Req_DeckUpdate DeckInfo
         */

        /**
         * Constructs a new Req_DeckUpdate.
         * @memberof DcgProto
         * @classdesc Represents a Req_DeckUpdate.
         * @implements IReq_DeckUpdate
         * @constructor
         * @param {DcgProto.IReq_DeckUpdate=} [p] Properties to set
         */
        function Req_DeckUpdate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_DeckUpdate DeckInfo.
         * @member {DcgProto.IS_DeckInfo|null|undefined} DeckInfo
         * @memberof DcgProto.Req_DeckUpdate
         * @instance
         */
        Req_DeckUpdate.prototype.DeckInfo = null;

        /**
         * Creates a new Req_DeckUpdate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_DeckUpdate
         * @static
         * @param {DcgProto.IReq_DeckUpdate=} [properties] Properties to set
         * @returns {DcgProto.Req_DeckUpdate} Req_DeckUpdate instance
         */
        Req_DeckUpdate.create = function create(properties) {
            return new Req_DeckUpdate(properties);
        };

        /**
         * Encodes the specified Req_DeckUpdate message. Does not implicitly {@link DcgProto.Req_DeckUpdate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_DeckUpdate
         * @static
         * @param {DcgProto.IReq_DeckUpdate} m Req_DeckUpdate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_DeckUpdate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DeckInfo != null && Object.hasOwnProperty.call(m, "DeckInfo"))
                $root.DcgProto.S_DeckInfo.encode(m.DeckInfo, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Req_DeckUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_DeckUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_DeckUpdate} Req_DeckUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_DeckUpdate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_DeckUpdate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DeckInfo = $root.DcgProto.S_DeckInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_DeckUpdate message.
         * @function verify
         * @memberof DcgProto.Req_DeckUpdate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_DeckUpdate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.DeckInfo != null && m.hasOwnProperty("DeckInfo")) {
                {
                    var e = $root.DcgProto.S_DeckInfo.verify(m.DeckInfo);
                    if (e)
                        return "DeckInfo." + e;
                }
            }
            return null;
        };

        return Req_DeckUpdate;
    })();

    DcgProto.Resp_DeckUpdate = (function() {

        /**
         * Properties of a Resp_DeckUpdate.
         * @memberof DcgProto
         * @interface IResp_DeckUpdate
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_DeckUpdate ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_DeckUpdate Cmn
         */

        /**
         * Constructs a new Resp_DeckUpdate.
         * @memberof DcgProto
         * @classdesc Represents a Resp_DeckUpdate.
         * @implements IResp_DeckUpdate
         * @constructor
         * @param {DcgProto.IResp_DeckUpdate=} [p] Properties to set
         */
        function Resp_DeckUpdate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_DeckUpdate ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_DeckUpdate
         * @instance
         */
        Resp_DeckUpdate.prototype.ErrorCode = 0;

        /**
         * Resp_DeckUpdate Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_DeckUpdate
         * @instance
         */
        Resp_DeckUpdate.prototype.Cmn = null;

        /**
         * Creates a new Resp_DeckUpdate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_DeckUpdate
         * @static
         * @param {DcgProto.IResp_DeckUpdate=} [properties] Properties to set
         * @returns {DcgProto.Resp_DeckUpdate} Resp_DeckUpdate instance
         */
        Resp_DeckUpdate.create = function create(properties) {
            return new Resp_DeckUpdate(properties);
        };

        /**
         * Encodes the specified Resp_DeckUpdate message. Does not implicitly {@link DcgProto.Resp_DeckUpdate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_DeckUpdate
         * @static
         * @param {DcgProto.IResp_DeckUpdate} m Resp_DeckUpdate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_DeckUpdate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_DeckUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_DeckUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_DeckUpdate} Resp_DeckUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_DeckUpdate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_DeckUpdate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_DeckUpdate message.
         * @function verify
         * @memberof DcgProto.Resp_DeckUpdate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_DeckUpdate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_DeckUpdate;
    })();

    DcgProto.Req_DeckPartsUpdate = (function() {

        /**
         * Properties of a Req_DeckPartsUpdate.
         * @memberof DcgProto
         * @interface IReq_DeckPartsUpdate
         * @property {Long|null} [DeckIID] Req_DeckPartsUpdate DeckIID
         * @property {Long|null} [PartsIID] Req_DeckPartsUpdate PartsIID
         */

        /**
         * Constructs a new Req_DeckPartsUpdate.
         * @memberof DcgProto
         * @classdesc Represents a Req_DeckPartsUpdate.
         * @implements IReq_DeckPartsUpdate
         * @constructor
         * @param {DcgProto.IReq_DeckPartsUpdate=} [p] Properties to set
         */
        function Req_DeckPartsUpdate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_DeckPartsUpdate DeckIID.
         * @member {Long} DeckIID
         * @memberof DcgProto.Req_DeckPartsUpdate
         * @instance
         */
        Req_DeckPartsUpdate.prototype.DeckIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_DeckPartsUpdate PartsIID.
         * @member {Long} PartsIID
         * @memberof DcgProto.Req_DeckPartsUpdate
         * @instance
         */
        Req_DeckPartsUpdate.prototype.PartsIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_DeckPartsUpdate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_DeckPartsUpdate
         * @static
         * @param {DcgProto.IReq_DeckPartsUpdate=} [properties] Properties to set
         * @returns {DcgProto.Req_DeckPartsUpdate} Req_DeckPartsUpdate instance
         */
        Req_DeckPartsUpdate.create = function create(properties) {
            return new Req_DeckPartsUpdate(properties);
        };

        /**
         * Encodes the specified Req_DeckPartsUpdate message. Does not implicitly {@link DcgProto.Req_DeckPartsUpdate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_DeckPartsUpdate
         * @static
         * @param {DcgProto.IReq_DeckPartsUpdate} m Req_DeckPartsUpdate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_DeckPartsUpdate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DeckIID != null && Object.hasOwnProperty.call(m, "DeckIID"))
                w.uint32(8).int64(m.DeckIID);
            if (m.PartsIID != null && Object.hasOwnProperty.call(m, "PartsIID"))
                w.uint32(16).int64(m.PartsIID);
            return w;
        };

        /**
         * Decodes a Req_DeckPartsUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_DeckPartsUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_DeckPartsUpdate} Req_DeckPartsUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_DeckPartsUpdate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_DeckPartsUpdate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DeckIID = r.int64();
                    break;
                case 2:
                    m.PartsIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_DeckPartsUpdate message.
         * @function verify
         * @memberof DcgProto.Req_DeckPartsUpdate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_DeckPartsUpdate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.DeckIID != null && m.hasOwnProperty("DeckIID")) {
                if (!$util.isInteger(m.DeckIID) && !(m.DeckIID && $util.isInteger(m.DeckIID.low) && $util.isInteger(m.DeckIID.high)))
                    return "DeckIID: integer|Long expected";
            }
            if (m.PartsIID != null && m.hasOwnProperty("PartsIID")) {
                if (!$util.isInteger(m.PartsIID) && !(m.PartsIID && $util.isInteger(m.PartsIID.low) && $util.isInteger(m.PartsIID.high)))
                    return "PartsIID: integer|Long expected";
            }
            return null;
        };

        return Req_DeckPartsUpdate;
    })();

    DcgProto.Resp_DeckPartsUpdate = (function() {

        /**
         * Properties of a Resp_DeckPartsUpdate.
         * @memberof DcgProto
         * @interface IResp_DeckPartsUpdate
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_DeckPartsUpdate ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_DeckPartsUpdate Cmn
         */

        /**
         * Constructs a new Resp_DeckPartsUpdate.
         * @memberof DcgProto
         * @classdesc Represents a Resp_DeckPartsUpdate.
         * @implements IResp_DeckPartsUpdate
         * @constructor
         * @param {DcgProto.IResp_DeckPartsUpdate=} [p] Properties to set
         */
        function Resp_DeckPartsUpdate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_DeckPartsUpdate ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_DeckPartsUpdate
         * @instance
         */
        Resp_DeckPartsUpdate.prototype.ErrorCode = 0;

        /**
         * Resp_DeckPartsUpdate Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_DeckPartsUpdate
         * @instance
         */
        Resp_DeckPartsUpdate.prototype.Cmn = null;

        /**
         * Creates a new Resp_DeckPartsUpdate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_DeckPartsUpdate
         * @static
         * @param {DcgProto.IResp_DeckPartsUpdate=} [properties] Properties to set
         * @returns {DcgProto.Resp_DeckPartsUpdate} Resp_DeckPartsUpdate instance
         */
        Resp_DeckPartsUpdate.create = function create(properties) {
            return new Resp_DeckPartsUpdate(properties);
        };

        /**
         * Encodes the specified Resp_DeckPartsUpdate message. Does not implicitly {@link DcgProto.Resp_DeckPartsUpdate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_DeckPartsUpdate
         * @static
         * @param {DcgProto.IResp_DeckPartsUpdate} m Resp_DeckPartsUpdate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_DeckPartsUpdate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_DeckPartsUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_DeckPartsUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_DeckPartsUpdate} Resp_DeckPartsUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_DeckPartsUpdate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_DeckPartsUpdate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_DeckPartsUpdate message.
         * @function verify
         * @memberof DcgProto.Resp_DeckPartsUpdate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_DeckPartsUpdate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_DeckPartsUpdate;
    })();

    DcgProto.Req_DeckDelete = (function() {

        /**
         * Properties of a Req_DeckDelete.
         * @memberof DcgProto
         * @interface IReq_DeckDelete
         * @property {Array.<Long>|null} [DeckIID] Req_DeckDelete DeckIID
         */

        /**
         * Constructs a new Req_DeckDelete.
         * @memberof DcgProto
         * @classdesc Represents a Req_DeckDelete.
         * @implements IReq_DeckDelete
         * @constructor
         * @param {DcgProto.IReq_DeckDelete=} [p] Properties to set
         */
        function Req_DeckDelete(p) {
            this.DeckIID = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_DeckDelete DeckIID.
         * @member {Array.<Long>} DeckIID
         * @memberof DcgProto.Req_DeckDelete
         * @instance
         */
        Req_DeckDelete.prototype.DeckIID = $util.emptyArray;

        /**
         * Creates a new Req_DeckDelete instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_DeckDelete
         * @static
         * @param {DcgProto.IReq_DeckDelete=} [properties] Properties to set
         * @returns {DcgProto.Req_DeckDelete} Req_DeckDelete instance
         */
        Req_DeckDelete.create = function create(properties) {
            return new Req_DeckDelete(properties);
        };

        /**
         * Encodes the specified Req_DeckDelete message. Does not implicitly {@link DcgProto.Req_DeckDelete.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_DeckDelete
         * @static
         * @param {DcgProto.IReq_DeckDelete} m Req_DeckDelete message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_DeckDelete.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DeckIID != null && m.DeckIID.length) {
                w.uint32(10).fork();
                for (var i = 0; i < m.DeckIID.length; ++i)
                    w.int64(m.DeckIID[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a Req_DeckDelete message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_DeckDelete
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_DeckDelete} Req_DeckDelete
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_DeckDelete.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_DeckDelete();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.DeckIID && m.DeckIID.length))
                        m.DeckIID = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.DeckIID.push(r.int64());
                    } else
                        m.DeckIID.push(r.int64());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_DeckDelete message.
         * @function verify
         * @memberof DcgProto.Req_DeckDelete
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_DeckDelete.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.DeckIID != null && m.hasOwnProperty("DeckIID")) {
                if (!Array.isArray(m.DeckIID))
                    return "DeckIID: array expected";
                for (var i = 0; i < m.DeckIID.length; ++i) {
                    if (!$util.isInteger(m.DeckIID[i]) && !(m.DeckIID[i] && $util.isInteger(m.DeckIID[i].low) && $util.isInteger(m.DeckIID[i].high)))
                        return "DeckIID: integer|Long[] expected";
                }
            }
            return null;
        };

        return Req_DeckDelete;
    })();

    DcgProto.Resp_DeckDelete = (function() {

        /**
         * Properties of a Resp_DeckDelete.
         * @memberof DcgProto
         * @interface IResp_DeckDelete
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_DeckDelete ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_DeckDelete Cmn
         */

        /**
         * Constructs a new Resp_DeckDelete.
         * @memberof DcgProto
         * @classdesc Represents a Resp_DeckDelete.
         * @implements IResp_DeckDelete
         * @constructor
         * @param {DcgProto.IResp_DeckDelete=} [p] Properties to set
         */
        function Resp_DeckDelete(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_DeckDelete ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_DeckDelete
         * @instance
         */
        Resp_DeckDelete.prototype.ErrorCode = 0;

        /**
         * Resp_DeckDelete Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_DeckDelete
         * @instance
         */
        Resp_DeckDelete.prototype.Cmn = null;

        /**
         * Creates a new Resp_DeckDelete instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_DeckDelete
         * @static
         * @param {DcgProto.IResp_DeckDelete=} [properties] Properties to set
         * @returns {DcgProto.Resp_DeckDelete} Resp_DeckDelete instance
         */
        Resp_DeckDelete.create = function create(properties) {
            return new Resp_DeckDelete(properties);
        };

        /**
         * Encodes the specified Resp_DeckDelete message. Does not implicitly {@link DcgProto.Resp_DeckDelete.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_DeckDelete
         * @static
         * @param {DcgProto.IResp_DeckDelete} m Resp_DeckDelete message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_DeckDelete.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_DeckDelete message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_DeckDelete
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_DeckDelete} Resp_DeckDelete
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_DeckDelete.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_DeckDelete();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_DeckDelete message.
         * @function verify
         * @memberof DcgProto.Resp_DeckDelete
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_DeckDelete.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_DeckDelete;
    })();

    DcgProto.Req_DeckRandomHand = (function() {

        /**
         * Properties of a Req_DeckRandomHand.
         * @memberof DcgProto
         * @interface IReq_DeckRandomHand
         * @property {Long|null} [DeckIID] Req_DeckRandomHand DeckIID
         */

        /**
         * Constructs a new Req_DeckRandomHand.
         * @memberof DcgProto
         * @classdesc Represents a Req_DeckRandomHand.
         * @implements IReq_DeckRandomHand
         * @constructor
         * @param {DcgProto.IReq_DeckRandomHand=} [p] Properties to set
         */
        function Req_DeckRandomHand(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_DeckRandomHand DeckIID.
         * @member {Long} DeckIID
         * @memberof DcgProto.Req_DeckRandomHand
         * @instance
         */
        Req_DeckRandomHand.prototype.DeckIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_DeckRandomHand instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_DeckRandomHand
         * @static
         * @param {DcgProto.IReq_DeckRandomHand=} [properties] Properties to set
         * @returns {DcgProto.Req_DeckRandomHand} Req_DeckRandomHand instance
         */
        Req_DeckRandomHand.create = function create(properties) {
            return new Req_DeckRandomHand(properties);
        };

        /**
         * Encodes the specified Req_DeckRandomHand message. Does not implicitly {@link DcgProto.Req_DeckRandomHand.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_DeckRandomHand
         * @static
         * @param {DcgProto.IReq_DeckRandomHand} m Req_DeckRandomHand message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_DeckRandomHand.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DeckIID != null && Object.hasOwnProperty.call(m, "DeckIID"))
                w.uint32(8).int64(m.DeckIID);
            return w;
        };

        /**
         * Decodes a Req_DeckRandomHand message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_DeckRandomHand
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_DeckRandomHand} Req_DeckRandomHand
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_DeckRandomHand.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_DeckRandomHand();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DeckIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_DeckRandomHand message.
         * @function verify
         * @memberof DcgProto.Req_DeckRandomHand
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_DeckRandomHand.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.DeckIID != null && m.hasOwnProperty("DeckIID")) {
                if (!$util.isInteger(m.DeckIID) && !(m.DeckIID && $util.isInteger(m.DeckIID.low) && $util.isInteger(m.DeckIID.high)))
                    return "DeckIID: integer|Long expected";
            }
            return null;
        };

        return Req_DeckRandomHand;
    })();

    DcgProto.Resp_DeckRandomHand = (function() {

        /**
         * Properties of a Resp_DeckRandomHand.
         * @memberof DcgProto
         * @interface IResp_DeckRandomHand
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_DeckRandomHand ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_DeckRandomHand Cmn
         * @property {Array.<DcgProto.IS_CardData>|null} [CardHand] Resp_DeckRandomHand CardHand
         */

        /**
         * Constructs a new Resp_DeckRandomHand.
         * @memberof DcgProto
         * @classdesc Represents a Resp_DeckRandomHand.
         * @implements IResp_DeckRandomHand
         * @constructor
         * @param {DcgProto.IResp_DeckRandomHand=} [p] Properties to set
         */
        function Resp_DeckRandomHand(p) {
            this.CardHand = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_DeckRandomHand ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_DeckRandomHand
         * @instance
         */
        Resp_DeckRandomHand.prototype.ErrorCode = 0;

        /**
         * Resp_DeckRandomHand Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_DeckRandomHand
         * @instance
         */
        Resp_DeckRandomHand.prototype.Cmn = null;

        /**
         * Resp_DeckRandomHand CardHand.
         * @member {Array.<DcgProto.IS_CardData>} CardHand
         * @memberof DcgProto.Resp_DeckRandomHand
         * @instance
         */
        Resp_DeckRandomHand.prototype.CardHand = $util.emptyArray;

        /**
         * Creates a new Resp_DeckRandomHand instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_DeckRandomHand
         * @static
         * @param {DcgProto.IResp_DeckRandomHand=} [properties] Properties to set
         * @returns {DcgProto.Resp_DeckRandomHand} Resp_DeckRandomHand instance
         */
        Resp_DeckRandomHand.create = function create(properties) {
            return new Resp_DeckRandomHand(properties);
        };

        /**
         * Encodes the specified Resp_DeckRandomHand message. Does not implicitly {@link DcgProto.Resp_DeckRandomHand.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_DeckRandomHand
         * @static
         * @param {DcgProto.IResp_DeckRandomHand} m Resp_DeckRandomHand message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_DeckRandomHand.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.CardHand != null && m.CardHand.length) {
                for (var i = 0; i < m.CardHand.length; ++i)
                    $root.DcgProto.S_CardData.encode(m.CardHand[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Resp_DeckRandomHand message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_DeckRandomHand
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_DeckRandomHand} Resp_DeckRandomHand
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_DeckRandomHand.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_DeckRandomHand();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.CardHand && m.CardHand.length))
                        m.CardHand = [];
                    m.CardHand.push($root.DcgProto.S_CardData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_DeckRandomHand message.
         * @function verify
         * @memberof DcgProto.Resp_DeckRandomHand
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_DeckRandomHand.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.CardHand != null && m.hasOwnProperty("CardHand")) {
                if (!Array.isArray(m.CardHand))
                    return "CardHand: array expected";
                for (var i = 0; i < m.CardHand.length; ++i) {
                    {
                        var e = $root.DcgProto.S_CardData.verify(m.CardHand[i]);
                        if (e)
                            return "CardHand." + e;
                    }
                }
            }
            return null;
        };

        return Resp_DeckRandomHand;
    })();

    DcgProto.Req_DeckAddHand = (function() {

        /**
         * Properties of a Req_DeckAddHand.
         * @memberof DcgProto
         * @interface IReq_DeckAddHand
         * @property {Long|null} [DeckIID] Req_DeckAddHand DeckIID
         */

        /**
         * Constructs a new Req_DeckAddHand.
         * @memberof DcgProto
         * @classdesc Represents a Req_DeckAddHand.
         * @implements IReq_DeckAddHand
         * @constructor
         * @param {DcgProto.IReq_DeckAddHand=} [p] Properties to set
         */
        function Req_DeckAddHand(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_DeckAddHand DeckIID.
         * @member {Long} DeckIID
         * @memberof DcgProto.Req_DeckAddHand
         * @instance
         */
        Req_DeckAddHand.prototype.DeckIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_DeckAddHand instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_DeckAddHand
         * @static
         * @param {DcgProto.IReq_DeckAddHand=} [properties] Properties to set
         * @returns {DcgProto.Req_DeckAddHand} Req_DeckAddHand instance
         */
        Req_DeckAddHand.create = function create(properties) {
            return new Req_DeckAddHand(properties);
        };

        /**
         * Encodes the specified Req_DeckAddHand message. Does not implicitly {@link DcgProto.Req_DeckAddHand.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_DeckAddHand
         * @static
         * @param {DcgProto.IReq_DeckAddHand} m Req_DeckAddHand message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_DeckAddHand.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DeckIID != null && Object.hasOwnProperty.call(m, "DeckIID"))
                w.uint32(8).int64(m.DeckIID);
            return w;
        };

        /**
         * Decodes a Req_DeckAddHand message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_DeckAddHand
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_DeckAddHand} Req_DeckAddHand
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_DeckAddHand.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_DeckAddHand();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DeckIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_DeckAddHand message.
         * @function verify
         * @memberof DcgProto.Req_DeckAddHand
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_DeckAddHand.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.DeckIID != null && m.hasOwnProperty("DeckIID")) {
                if (!$util.isInteger(m.DeckIID) && !(m.DeckIID && $util.isInteger(m.DeckIID.low) && $util.isInteger(m.DeckIID.high)))
                    return "DeckIID: integer|Long expected";
            }
            return null;
        };

        return Req_DeckAddHand;
    })();

    DcgProto.Resp_DeckAddHand = (function() {

        /**
         * Properties of a Resp_DeckAddHand.
         * @memberof DcgProto
         * @interface IResp_DeckAddHand
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_DeckAddHand ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_DeckAddHand Cmn
         * @property {Array.<DcgProto.IS_CardData>|null} [CardHand] Resp_DeckAddHand CardHand
         */

        /**
         * Constructs a new Resp_DeckAddHand.
         * @memberof DcgProto
         * @classdesc Represents a Resp_DeckAddHand.
         * @implements IResp_DeckAddHand
         * @constructor
         * @param {DcgProto.IResp_DeckAddHand=} [p] Properties to set
         */
        function Resp_DeckAddHand(p) {
            this.CardHand = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_DeckAddHand ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_DeckAddHand
         * @instance
         */
        Resp_DeckAddHand.prototype.ErrorCode = 0;

        /**
         * Resp_DeckAddHand Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_DeckAddHand
         * @instance
         */
        Resp_DeckAddHand.prototype.Cmn = null;

        /**
         * Resp_DeckAddHand CardHand.
         * @member {Array.<DcgProto.IS_CardData>} CardHand
         * @memberof DcgProto.Resp_DeckAddHand
         * @instance
         */
        Resp_DeckAddHand.prototype.CardHand = $util.emptyArray;

        /**
         * Creates a new Resp_DeckAddHand instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_DeckAddHand
         * @static
         * @param {DcgProto.IResp_DeckAddHand=} [properties] Properties to set
         * @returns {DcgProto.Resp_DeckAddHand} Resp_DeckAddHand instance
         */
        Resp_DeckAddHand.create = function create(properties) {
            return new Resp_DeckAddHand(properties);
        };

        /**
         * Encodes the specified Resp_DeckAddHand message. Does not implicitly {@link DcgProto.Resp_DeckAddHand.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_DeckAddHand
         * @static
         * @param {DcgProto.IResp_DeckAddHand} m Resp_DeckAddHand message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_DeckAddHand.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.CardHand != null && m.CardHand.length) {
                for (var i = 0; i < m.CardHand.length; ++i)
                    $root.DcgProto.S_CardData.encode(m.CardHand[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Resp_DeckAddHand message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_DeckAddHand
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_DeckAddHand} Resp_DeckAddHand
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_DeckAddHand.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_DeckAddHand();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.CardHand && m.CardHand.length))
                        m.CardHand = [];
                    m.CardHand.push($root.DcgProto.S_CardData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_DeckAddHand message.
         * @function verify
         * @memberof DcgProto.Resp_DeckAddHand
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_DeckAddHand.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.CardHand != null && m.hasOwnProperty("CardHand")) {
                if (!Array.isArray(m.CardHand))
                    return "CardHand: array expected";
                for (var i = 0; i < m.CardHand.length; ++i) {
                    {
                        var e = $root.DcgProto.S_CardData.verify(m.CardHand[i]);
                        if (e)
                            return "CardHand." + e;
                    }
                }
            }
            return null;
        };

        return Resp_DeckAddHand;
    })();

    DcgProto.Req_DeckPageUpdate = (function() {

        /**
         * Properties of a Req_DeckPageUpdate.
         * @memberof DcgProto
         * @interface IReq_DeckPageUpdate
         * @property {Long|null} [DeckIID] Req_DeckPageUpdate DeckIID
         * @property {Array.<number>|null} [CfgId] Req_DeckPageUpdate CfgId
         */

        /**
         * Constructs a new Req_DeckPageUpdate.
         * @memberof DcgProto
         * @classdesc Represents a Req_DeckPageUpdate.
         * @implements IReq_DeckPageUpdate
         * @constructor
         * @param {DcgProto.IReq_DeckPageUpdate=} [p] Properties to set
         */
        function Req_DeckPageUpdate(p) {
            this.CfgId = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_DeckPageUpdate DeckIID.
         * @member {Long} DeckIID
         * @memberof DcgProto.Req_DeckPageUpdate
         * @instance
         */
        Req_DeckPageUpdate.prototype.DeckIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_DeckPageUpdate CfgId.
         * @member {Array.<number>} CfgId
         * @memberof DcgProto.Req_DeckPageUpdate
         * @instance
         */
        Req_DeckPageUpdate.prototype.CfgId = $util.emptyArray;

        /**
         * Creates a new Req_DeckPageUpdate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_DeckPageUpdate
         * @static
         * @param {DcgProto.IReq_DeckPageUpdate=} [properties] Properties to set
         * @returns {DcgProto.Req_DeckPageUpdate} Req_DeckPageUpdate instance
         */
        Req_DeckPageUpdate.create = function create(properties) {
            return new Req_DeckPageUpdate(properties);
        };

        /**
         * Encodes the specified Req_DeckPageUpdate message. Does not implicitly {@link DcgProto.Req_DeckPageUpdate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_DeckPageUpdate
         * @static
         * @param {DcgProto.IReq_DeckPageUpdate} m Req_DeckPageUpdate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_DeckPageUpdate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.DeckIID != null && Object.hasOwnProperty.call(m, "DeckIID"))
                w.uint32(8).int64(m.DeckIID);
            if (m.CfgId != null && m.CfgId.length) {
                w.uint32(18).fork();
                for (var i = 0; i < m.CfgId.length; ++i)
                    w.int32(m.CfgId[i]);
                w.ldelim();
            }
            return w;
        };

        /**
         * Decodes a Req_DeckPageUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_DeckPageUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_DeckPageUpdate} Req_DeckPageUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_DeckPageUpdate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_DeckPageUpdate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.DeckIID = r.int64();
                    break;
                case 2:
                    if (!(m.CfgId && m.CfgId.length))
                        m.CfgId = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.CfgId.push(r.int32());
                    } else
                        m.CfgId.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_DeckPageUpdate message.
         * @function verify
         * @memberof DcgProto.Req_DeckPageUpdate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_DeckPageUpdate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.DeckIID != null && m.hasOwnProperty("DeckIID")) {
                if (!$util.isInteger(m.DeckIID) && !(m.DeckIID && $util.isInteger(m.DeckIID.low) && $util.isInteger(m.DeckIID.high)))
                    return "DeckIID: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!Array.isArray(m.CfgId))
                    return "CfgId: array expected";
                for (var i = 0; i < m.CfgId.length; ++i) {
                    if (!$util.isInteger(m.CfgId[i]))
                        return "CfgId: integer[] expected";
                }
            }
            return null;
        };

        return Req_DeckPageUpdate;
    })();

    DcgProto.Resp_DeckPageUpdate = (function() {

        /**
         * Properties of a Resp_DeckPageUpdate.
         * @memberof DcgProto
         * @interface IResp_DeckPageUpdate
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_DeckPageUpdate ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_DeckPageUpdate Cmn
         */

        /**
         * Constructs a new Resp_DeckPageUpdate.
         * @memberof DcgProto
         * @classdesc Represents a Resp_DeckPageUpdate.
         * @implements IResp_DeckPageUpdate
         * @constructor
         * @param {DcgProto.IResp_DeckPageUpdate=} [p] Properties to set
         */
        function Resp_DeckPageUpdate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_DeckPageUpdate ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_DeckPageUpdate
         * @instance
         */
        Resp_DeckPageUpdate.prototype.ErrorCode = 0;

        /**
         * Resp_DeckPageUpdate Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_DeckPageUpdate
         * @instance
         */
        Resp_DeckPageUpdate.prototype.Cmn = null;

        /**
         * Creates a new Resp_DeckPageUpdate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_DeckPageUpdate
         * @static
         * @param {DcgProto.IResp_DeckPageUpdate=} [properties] Properties to set
         * @returns {DcgProto.Resp_DeckPageUpdate} Resp_DeckPageUpdate instance
         */
        Resp_DeckPageUpdate.create = function create(properties) {
            return new Resp_DeckPageUpdate(properties);
        };

        /**
         * Encodes the specified Resp_DeckPageUpdate message. Does not implicitly {@link DcgProto.Resp_DeckPageUpdate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_DeckPageUpdate
         * @static
         * @param {DcgProto.IResp_DeckPageUpdate} m Resp_DeckPageUpdate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_DeckPageUpdate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_DeckPageUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_DeckPageUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_DeckPageUpdate} Resp_DeckPageUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_DeckPageUpdate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_DeckPageUpdate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_DeckPageUpdate message.
         * @function verify
         * @memberof DcgProto.Resp_DeckPageUpdate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_DeckPageUpdate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_DeckPageUpdate;
    })();

    DcgProto.Req_CardCollect = (function() {

        /**
         * Properties of a Req_CardCollect.
         * @memberof DcgProto
         * @interface IReq_CardCollect
         * @property {Long|null} [CollectIID] Req_CardCollect CollectIID
         * @property {number|null} [CfgId] Req_CardCollect CfgId
         */

        /**
         * Constructs a new Req_CardCollect.
         * @memberof DcgProto
         * @classdesc Represents a Req_CardCollect.
         * @implements IReq_CardCollect
         * @constructor
         * @param {DcgProto.IReq_CardCollect=} [p] Properties to set
         */
        function Req_CardCollect(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_CardCollect CollectIID.
         * @member {Long} CollectIID
         * @memberof DcgProto.Req_CardCollect
         * @instance
         */
        Req_CardCollect.prototype.CollectIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_CardCollect CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.Req_CardCollect
         * @instance
         */
        Req_CardCollect.prototype.CfgId = 0;

        /**
         * Creates a new Req_CardCollect instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_CardCollect
         * @static
         * @param {DcgProto.IReq_CardCollect=} [properties] Properties to set
         * @returns {DcgProto.Req_CardCollect} Req_CardCollect instance
         */
        Req_CardCollect.create = function create(properties) {
            return new Req_CardCollect(properties);
        };

        /**
         * Encodes the specified Req_CardCollect message. Does not implicitly {@link DcgProto.Req_CardCollect.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_CardCollect
         * @static
         * @param {DcgProto.IReq_CardCollect} m Req_CardCollect message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_CardCollect.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CollectIID != null && Object.hasOwnProperty.call(m, "CollectIID"))
                w.uint32(8).int64(m.CollectIID);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            return w;
        };

        /**
         * Decodes a Req_CardCollect message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_CardCollect
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_CardCollect} Req_CardCollect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_CardCollect.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_CardCollect();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CollectIID = r.int64();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_CardCollect message.
         * @function verify
         * @memberof DcgProto.Req_CardCollect
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_CardCollect.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CollectIID != null && m.hasOwnProperty("CollectIID")) {
                if (!$util.isInteger(m.CollectIID) && !(m.CollectIID && $util.isInteger(m.CollectIID.low) && $util.isInteger(m.CollectIID.high)))
                    return "CollectIID: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            return null;
        };

        return Req_CardCollect;
    })();

    DcgProto.Resp_CardCollect = (function() {

        /**
         * Properties of a Resp_CardCollect.
         * @memberof DcgProto
         * @interface IResp_CardCollect
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_CardCollect ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_CardCollect Cmn
         */

        /**
         * Constructs a new Resp_CardCollect.
         * @memberof DcgProto
         * @classdesc Represents a Resp_CardCollect.
         * @implements IResp_CardCollect
         * @constructor
         * @param {DcgProto.IResp_CardCollect=} [p] Properties to set
         */
        function Resp_CardCollect(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_CardCollect ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_CardCollect
         * @instance
         */
        Resp_CardCollect.prototype.ErrorCode = 0;

        /**
         * Resp_CardCollect Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_CardCollect
         * @instance
         */
        Resp_CardCollect.prototype.Cmn = null;

        /**
         * Creates a new Resp_CardCollect instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_CardCollect
         * @static
         * @param {DcgProto.IResp_CardCollect=} [properties] Properties to set
         * @returns {DcgProto.Resp_CardCollect} Resp_CardCollect instance
         */
        Resp_CardCollect.create = function create(properties) {
            return new Resp_CardCollect(properties);
        };

        /**
         * Encodes the specified Resp_CardCollect message. Does not implicitly {@link DcgProto.Resp_CardCollect.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_CardCollect
         * @static
         * @param {DcgProto.IResp_CardCollect} m Resp_CardCollect message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_CardCollect.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_CardCollect message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_CardCollect
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_CardCollect} Resp_CardCollect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_CardCollect.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_CardCollect();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_CardCollect message.
         * @function verify
         * @memberof DcgProto.Resp_CardCollect
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_CardCollect.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_CardCollect;
    })();

    DcgProto.Req_CardDeCollect = (function() {

        /**
         * Properties of a Req_CardDeCollect.
         * @memberof DcgProto
         * @interface IReq_CardDeCollect
         * @property {Long|null} [CollectIID] Req_CardDeCollect CollectIID
         * @property {number|null} [CfgId] Req_CardDeCollect CfgId
         */

        /**
         * Constructs a new Req_CardDeCollect.
         * @memberof DcgProto
         * @classdesc Represents a Req_CardDeCollect.
         * @implements IReq_CardDeCollect
         * @constructor
         * @param {DcgProto.IReq_CardDeCollect=} [p] Properties to set
         */
        function Req_CardDeCollect(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_CardDeCollect CollectIID.
         * @member {Long} CollectIID
         * @memberof DcgProto.Req_CardDeCollect
         * @instance
         */
        Req_CardDeCollect.prototype.CollectIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_CardDeCollect CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.Req_CardDeCollect
         * @instance
         */
        Req_CardDeCollect.prototype.CfgId = 0;

        /**
         * Creates a new Req_CardDeCollect instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_CardDeCollect
         * @static
         * @param {DcgProto.IReq_CardDeCollect=} [properties] Properties to set
         * @returns {DcgProto.Req_CardDeCollect} Req_CardDeCollect instance
         */
        Req_CardDeCollect.create = function create(properties) {
            return new Req_CardDeCollect(properties);
        };

        /**
         * Encodes the specified Req_CardDeCollect message. Does not implicitly {@link DcgProto.Req_CardDeCollect.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_CardDeCollect
         * @static
         * @param {DcgProto.IReq_CardDeCollect} m Req_CardDeCollect message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_CardDeCollect.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CollectIID != null && Object.hasOwnProperty.call(m, "CollectIID"))
                w.uint32(8).int64(m.CollectIID);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            return w;
        };

        /**
         * Decodes a Req_CardDeCollect message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_CardDeCollect
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_CardDeCollect} Req_CardDeCollect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_CardDeCollect.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_CardDeCollect();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CollectIID = r.int64();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_CardDeCollect message.
         * @function verify
         * @memberof DcgProto.Req_CardDeCollect
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_CardDeCollect.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CollectIID != null && m.hasOwnProperty("CollectIID")) {
                if (!$util.isInteger(m.CollectIID) && !(m.CollectIID && $util.isInteger(m.CollectIID.low) && $util.isInteger(m.CollectIID.high)))
                    return "CollectIID: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            return null;
        };

        return Req_CardDeCollect;
    })();

    DcgProto.Resp_CardDeCollect = (function() {

        /**
         * Properties of a Resp_CardDeCollect.
         * @memberof DcgProto
         * @interface IResp_CardDeCollect
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_CardDeCollect ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_CardDeCollect Cmn
         */

        /**
         * Constructs a new Resp_CardDeCollect.
         * @memberof DcgProto
         * @classdesc Represents a Resp_CardDeCollect.
         * @implements IResp_CardDeCollect
         * @constructor
         * @param {DcgProto.IResp_CardDeCollect=} [p] Properties to set
         */
        function Resp_CardDeCollect(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_CardDeCollect ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_CardDeCollect
         * @instance
         */
        Resp_CardDeCollect.prototype.ErrorCode = 0;

        /**
         * Resp_CardDeCollect Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_CardDeCollect
         * @instance
         */
        Resp_CardDeCollect.prototype.Cmn = null;

        /**
         * Creates a new Resp_CardDeCollect instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_CardDeCollect
         * @static
         * @param {DcgProto.IResp_CardDeCollect=} [properties] Properties to set
         * @returns {DcgProto.Resp_CardDeCollect} Resp_CardDeCollect instance
         */
        Resp_CardDeCollect.create = function create(properties) {
            return new Resp_CardDeCollect(properties);
        };

        /**
         * Encodes the specified Resp_CardDeCollect message. Does not implicitly {@link DcgProto.Resp_CardDeCollect.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_CardDeCollect
         * @static
         * @param {DcgProto.IResp_CardDeCollect} m Resp_CardDeCollect message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_CardDeCollect.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_CardDeCollect message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_CardDeCollect
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_CardDeCollect} Resp_CardDeCollect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_CardDeCollect.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_CardDeCollect();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_CardDeCollect message.
         * @function verify
         * @memberof DcgProto.Resp_CardDeCollect
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_CardDeCollect.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_CardDeCollect;
    })();

    DcgProto.Req_CardCompose = (function() {

        /**
         * Properties of a Req_CardCompose.
         * @memberof DcgProto
         * @interface IReq_CardCompose
         * @property {Array.<DcgProto.IS_CardInfo>|null} [CardInfo] Req_CardCompose CardInfo
         */

        /**
         * Constructs a new Req_CardCompose.
         * @memberof DcgProto
         * @classdesc Represents a Req_CardCompose.
         * @implements IReq_CardCompose
         * @constructor
         * @param {DcgProto.IReq_CardCompose=} [p] Properties to set
         */
        function Req_CardCompose(p) {
            this.CardInfo = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_CardCompose CardInfo.
         * @member {Array.<DcgProto.IS_CardInfo>} CardInfo
         * @memberof DcgProto.Req_CardCompose
         * @instance
         */
        Req_CardCompose.prototype.CardInfo = $util.emptyArray;

        /**
         * Creates a new Req_CardCompose instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_CardCompose
         * @static
         * @param {DcgProto.IReq_CardCompose=} [properties] Properties to set
         * @returns {DcgProto.Req_CardCompose} Req_CardCompose instance
         */
        Req_CardCompose.create = function create(properties) {
            return new Req_CardCompose(properties);
        };

        /**
         * Encodes the specified Req_CardCompose message. Does not implicitly {@link DcgProto.Req_CardCompose.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_CardCompose
         * @static
         * @param {DcgProto.IReq_CardCompose} m Req_CardCompose message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_CardCompose.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardInfo != null && m.CardInfo.length) {
                for (var i = 0; i < m.CardInfo.length; ++i)
                    $root.DcgProto.S_CardInfo.encode(m.CardInfo[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Req_CardCompose message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_CardCompose
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_CardCompose} Req_CardCompose
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_CardCompose.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_CardCompose();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.CardInfo && m.CardInfo.length))
                        m.CardInfo = [];
                    m.CardInfo.push($root.DcgProto.S_CardInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_CardCompose message.
         * @function verify
         * @memberof DcgProto.Req_CardCompose
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_CardCompose.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardInfo != null && m.hasOwnProperty("CardInfo")) {
                if (!Array.isArray(m.CardInfo))
                    return "CardInfo: array expected";
                for (var i = 0; i < m.CardInfo.length; ++i) {
                    {
                        var e = $root.DcgProto.S_CardInfo.verify(m.CardInfo[i]);
                        if (e)
                            return "CardInfo." + e;
                    }
                }
            }
            return null;
        };

        return Req_CardCompose;
    })();

    DcgProto.Resp_CardCompose = (function() {

        /**
         * Properties of a Resp_CardCompose.
         * @memberof DcgProto
         * @interface IResp_CardCompose
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_CardCompose ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_CardCompose Cmn
         */

        /**
         * Constructs a new Resp_CardCompose.
         * @memberof DcgProto
         * @classdesc Represents a Resp_CardCompose.
         * @implements IResp_CardCompose
         * @constructor
         * @param {DcgProto.IResp_CardCompose=} [p] Properties to set
         */
        function Resp_CardCompose(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_CardCompose ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_CardCompose
         * @instance
         */
        Resp_CardCompose.prototype.ErrorCode = 0;

        /**
         * Resp_CardCompose Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_CardCompose
         * @instance
         */
        Resp_CardCompose.prototype.Cmn = null;

        /**
         * Creates a new Resp_CardCompose instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_CardCompose
         * @static
         * @param {DcgProto.IResp_CardCompose=} [properties] Properties to set
         * @returns {DcgProto.Resp_CardCompose} Resp_CardCompose instance
         */
        Resp_CardCompose.create = function create(properties) {
            return new Resp_CardCompose(properties);
        };

        /**
         * Encodes the specified Resp_CardCompose message. Does not implicitly {@link DcgProto.Resp_CardCompose.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_CardCompose
         * @static
         * @param {DcgProto.IResp_CardCompose} m Resp_CardCompose message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_CardCompose.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_CardCompose message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_CardCompose
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_CardCompose} Resp_CardCompose
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_CardCompose.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_CardCompose();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_CardCompose message.
         * @function verify
         * @memberof DcgProto.Resp_CardCompose
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_CardCompose.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_CardCompose;
    })();

    DcgProto.Req_CardDeCompose = (function() {

        /**
         * Properties of a Req_CardDeCompose.
         * @memberof DcgProto
         * @interface IReq_CardDeCompose
         * @property {Array.<DcgProto.IS_CardInfo>|null} [CardInfo] Req_CardDeCompose CardInfo
         */

        /**
         * Constructs a new Req_CardDeCompose.
         * @memberof DcgProto
         * @classdesc Represents a Req_CardDeCompose.
         * @implements IReq_CardDeCompose
         * @constructor
         * @param {DcgProto.IReq_CardDeCompose=} [p] Properties to set
         */
        function Req_CardDeCompose(p) {
            this.CardInfo = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_CardDeCompose CardInfo.
         * @member {Array.<DcgProto.IS_CardInfo>} CardInfo
         * @memberof DcgProto.Req_CardDeCompose
         * @instance
         */
        Req_CardDeCompose.prototype.CardInfo = $util.emptyArray;

        /**
         * Creates a new Req_CardDeCompose instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_CardDeCompose
         * @static
         * @param {DcgProto.IReq_CardDeCompose=} [properties] Properties to set
         * @returns {DcgProto.Req_CardDeCompose} Req_CardDeCompose instance
         */
        Req_CardDeCompose.create = function create(properties) {
            return new Req_CardDeCompose(properties);
        };

        /**
         * Encodes the specified Req_CardDeCompose message. Does not implicitly {@link DcgProto.Req_CardDeCompose.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_CardDeCompose
         * @static
         * @param {DcgProto.IReq_CardDeCompose} m Req_CardDeCompose message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_CardDeCompose.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardInfo != null && m.CardInfo.length) {
                for (var i = 0; i < m.CardInfo.length; ++i)
                    $root.DcgProto.S_CardInfo.encode(m.CardInfo[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Req_CardDeCompose message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_CardDeCompose
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_CardDeCompose} Req_CardDeCompose
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_CardDeCompose.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_CardDeCompose();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.CardInfo && m.CardInfo.length))
                        m.CardInfo = [];
                    m.CardInfo.push($root.DcgProto.S_CardInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_CardDeCompose message.
         * @function verify
         * @memberof DcgProto.Req_CardDeCompose
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_CardDeCompose.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardInfo != null && m.hasOwnProperty("CardInfo")) {
                if (!Array.isArray(m.CardInfo))
                    return "CardInfo: array expected";
                for (var i = 0; i < m.CardInfo.length; ++i) {
                    {
                        var e = $root.DcgProto.S_CardInfo.verify(m.CardInfo[i]);
                        if (e)
                            return "CardInfo." + e;
                    }
                }
            }
            return null;
        };

        return Req_CardDeCompose;
    })();

    DcgProto.Resp_CardDeCompose = (function() {

        /**
         * Properties of a Resp_CardDeCompose.
         * @memberof DcgProto
         * @interface IResp_CardDeCompose
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_CardDeCompose ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_CardDeCompose Cmn
         */

        /**
         * Constructs a new Resp_CardDeCompose.
         * @memberof DcgProto
         * @classdesc Represents a Resp_CardDeCompose.
         * @implements IResp_CardDeCompose
         * @constructor
         * @param {DcgProto.IResp_CardDeCompose=} [p] Properties to set
         */
        function Resp_CardDeCompose(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_CardDeCompose ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_CardDeCompose
         * @instance
         */
        Resp_CardDeCompose.prototype.ErrorCode = 0;

        /**
         * Resp_CardDeCompose Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_CardDeCompose
         * @instance
         */
        Resp_CardDeCompose.prototype.Cmn = null;

        /**
         * Creates a new Resp_CardDeCompose instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_CardDeCompose
         * @static
         * @param {DcgProto.IResp_CardDeCompose=} [properties] Properties to set
         * @returns {DcgProto.Resp_CardDeCompose} Resp_CardDeCompose instance
         */
        Resp_CardDeCompose.create = function create(properties) {
            return new Resp_CardDeCompose(properties);
        };

        /**
         * Encodes the specified Resp_CardDeCompose message. Does not implicitly {@link DcgProto.Resp_CardDeCompose.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_CardDeCompose
         * @static
         * @param {DcgProto.IResp_CardDeCompose} m Resp_CardDeCompose message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_CardDeCompose.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_CardDeCompose message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_CardDeCompose
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_CardDeCompose} Resp_CardDeCompose
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_CardDeCompose.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_CardDeCompose();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_CardDeCompose message.
         * @function verify
         * @memberof DcgProto.Resp_CardDeCompose
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_CardDeCompose.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_CardDeCompose;
    })();

    DcgProto.Req_ShopBuy = (function() {

        /**
         * Properties of a Req_ShopBuy.
         * @memberof DcgProto
         * @interface IReq_ShopBuy
         * @property {Long|null} [ShopIID] Req_ShopBuy ShopIID
         * @property {number|null} [CfgId] Req_ShopBuy CfgId
         * @property {number|null} [BuyNum] Req_ShopBuy BuyNum
         */

        /**
         * Constructs a new Req_ShopBuy.
         * @memberof DcgProto
         * @classdesc Represents a Req_ShopBuy.
         * @implements IReq_ShopBuy
         * @constructor
         * @param {DcgProto.IReq_ShopBuy=} [p] Properties to set
         */
        function Req_ShopBuy(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_ShopBuy ShopIID.
         * @member {Long} ShopIID
         * @memberof DcgProto.Req_ShopBuy
         * @instance
         */
        Req_ShopBuy.prototype.ShopIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_ShopBuy CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.Req_ShopBuy
         * @instance
         */
        Req_ShopBuy.prototype.CfgId = 0;

        /**
         * Req_ShopBuy BuyNum.
         * @member {number} BuyNum
         * @memberof DcgProto.Req_ShopBuy
         * @instance
         */
        Req_ShopBuy.prototype.BuyNum = 0;

        /**
         * Creates a new Req_ShopBuy instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_ShopBuy
         * @static
         * @param {DcgProto.IReq_ShopBuy=} [properties] Properties to set
         * @returns {DcgProto.Req_ShopBuy} Req_ShopBuy instance
         */
        Req_ShopBuy.create = function create(properties) {
            return new Req_ShopBuy(properties);
        };

        /**
         * Encodes the specified Req_ShopBuy message. Does not implicitly {@link DcgProto.Req_ShopBuy.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_ShopBuy
         * @static
         * @param {DcgProto.IReq_ShopBuy} m Req_ShopBuy message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_ShopBuy.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ShopIID != null && Object.hasOwnProperty.call(m, "ShopIID"))
                w.uint32(8).int64(m.ShopIID);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            if (m.BuyNum != null && Object.hasOwnProperty.call(m, "BuyNum"))
                w.uint32(24).int32(m.BuyNum);
            return w;
        };

        /**
         * Decodes a Req_ShopBuy message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_ShopBuy
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_ShopBuy} Req_ShopBuy
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_ShopBuy.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_ShopBuy();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ShopIID = r.int64();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                case 3:
                    m.BuyNum = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_ShopBuy message.
         * @function verify
         * @memberof DcgProto.Req_ShopBuy
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_ShopBuy.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ShopIID != null && m.hasOwnProperty("ShopIID")) {
                if (!$util.isInteger(m.ShopIID) && !(m.ShopIID && $util.isInteger(m.ShopIID.low) && $util.isInteger(m.ShopIID.high)))
                    return "ShopIID: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.BuyNum != null && m.hasOwnProperty("BuyNum")) {
                if (!$util.isInteger(m.BuyNum))
                    return "BuyNum: integer expected";
            }
            return null;
        };

        return Req_ShopBuy;
    })();

    DcgProto.Resp_ShopBuy = (function() {

        /**
         * Properties of a Resp_ShopBuy.
         * @memberof DcgProto
         * @interface IResp_ShopBuy
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_ShopBuy ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_ShopBuy Cmn
         */

        /**
         * Constructs a new Resp_ShopBuy.
         * @memberof DcgProto
         * @classdesc Represents a Resp_ShopBuy.
         * @implements IResp_ShopBuy
         * @constructor
         * @param {DcgProto.IResp_ShopBuy=} [p] Properties to set
         */
        function Resp_ShopBuy(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_ShopBuy ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_ShopBuy
         * @instance
         */
        Resp_ShopBuy.prototype.ErrorCode = 0;

        /**
         * Resp_ShopBuy Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_ShopBuy
         * @instance
         */
        Resp_ShopBuy.prototype.Cmn = null;

        /**
         * Creates a new Resp_ShopBuy instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_ShopBuy
         * @static
         * @param {DcgProto.IResp_ShopBuy=} [properties] Properties to set
         * @returns {DcgProto.Resp_ShopBuy} Resp_ShopBuy instance
         */
        Resp_ShopBuy.create = function create(properties) {
            return new Resp_ShopBuy(properties);
        };

        /**
         * Encodes the specified Resp_ShopBuy message. Does not implicitly {@link DcgProto.Resp_ShopBuy.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_ShopBuy
         * @static
         * @param {DcgProto.IResp_ShopBuy} m Resp_ShopBuy message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_ShopBuy.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_ShopBuy message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_ShopBuy
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_ShopBuy} Resp_ShopBuy
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_ShopBuy.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_ShopBuy();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_ShopBuy message.
         * @function verify
         * @memberof DcgProto.Resp_ShopBuy
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_ShopBuy.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_ShopBuy;
    })();

    DcgProto.Req_CardBagBuy = (function() {

        /**
         * Properties of a Req_CardBagBuy.
         * @memberof DcgProto
         * @interface IReq_CardBagBuy
         * @property {Long|null} [CardBagIID] Req_CardBagBuy CardBagIID
         * @property {number|null} [BuyNum] Req_CardBagBuy BuyNum
         */

        /**
         * Constructs a new Req_CardBagBuy.
         * @memberof DcgProto
         * @classdesc Represents a Req_CardBagBuy.
         * @implements IReq_CardBagBuy
         * @constructor
         * @param {DcgProto.IReq_CardBagBuy=} [p] Properties to set
         */
        function Req_CardBagBuy(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_CardBagBuy CardBagIID.
         * @member {Long} CardBagIID
         * @memberof DcgProto.Req_CardBagBuy
         * @instance
         */
        Req_CardBagBuy.prototype.CardBagIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_CardBagBuy BuyNum.
         * @member {number} BuyNum
         * @memberof DcgProto.Req_CardBagBuy
         * @instance
         */
        Req_CardBagBuy.prototype.BuyNum = 0;

        /**
         * Creates a new Req_CardBagBuy instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_CardBagBuy
         * @static
         * @param {DcgProto.IReq_CardBagBuy=} [properties] Properties to set
         * @returns {DcgProto.Req_CardBagBuy} Req_CardBagBuy instance
         */
        Req_CardBagBuy.create = function create(properties) {
            return new Req_CardBagBuy(properties);
        };

        /**
         * Encodes the specified Req_CardBagBuy message. Does not implicitly {@link DcgProto.Req_CardBagBuy.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_CardBagBuy
         * @static
         * @param {DcgProto.IReq_CardBagBuy} m Req_CardBagBuy message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_CardBagBuy.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CardBagIID != null && Object.hasOwnProperty.call(m, "CardBagIID"))
                w.uint32(8).int64(m.CardBagIID);
            if (m.BuyNum != null && Object.hasOwnProperty.call(m, "BuyNum"))
                w.uint32(16).int32(m.BuyNum);
            return w;
        };

        /**
         * Decodes a Req_CardBagBuy message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_CardBagBuy
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_CardBagBuy} Req_CardBagBuy
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_CardBagBuy.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_CardBagBuy();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CardBagIID = r.int64();
                    break;
                case 2:
                    m.BuyNum = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_CardBagBuy message.
         * @function verify
         * @memberof DcgProto.Req_CardBagBuy
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_CardBagBuy.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CardBagIID != null && m.hasOwnProperty("CardBagIID")) {
                if (!$util.isInteger(m.CardBagIID) && !(m.CardBagIID && $util.isInteger(m.CardBagIID.low) && $util.isInteger(m.CardBagIID.high)))
                    return "CardBagIID: integer|Long expected";
            }
            if (m.BuyNum != null && m.hasOwnProperty("BuyNum")) {
                if (!$util.isInteger(m.BuyNum))
                    return "BuyNum: integer expected";
            }
            return null;
        };

        return Req_CardBagBuy;
    })();

    DcgProto.Resp_CardBagBuy = (function() {

        /**
         * Properties of a Resp_CardBagBuy.
         * @memberof DcgProto
         * @interface IResp_CardBagBuy
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_CardBagBuy ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_CardBagBuy Cmn
         * @property {Array.<DcgProto.IS_AddData>|null} [AddDataList] Resp_CardBagBuy AddDataList
         */

        /**
         * Constructs a new Resp_CardBagBuy.
         * @memberof DcgProto
         * @classdesc Represents a Resp_CardBagBuy.
         * @implements IResp_CardBagBuy
         * @constructor
         * @param {DcgProto.IResp_CardBagBuy=} [p] Properties to set
         */
        function Resp_CardBagBuy(p) {
            this.AddDataList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_CardBagBuy ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_CardBagBuy
         * @instance
         */
        Resp_CardBagBuy.prototype.ErrorCode = 0;

        /**
         * Resp_CardBagBuy Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_CardBagBuy
         * @instance
         */
        Resp_CardBagBuy.prototype.Cmn = null;

        /**
         * Resp_CardBagBuy AddDataList.
         * @member {Array.<DcgProto.IS_AddData>} AddDataList
         * @memberof DcgProto.Resp_CardBagBuy
         * @instance
         */
        Resp_CardBagBuy.prototype.AddDataList = $util.emptyArray;

        /**
         * Creates a new Resp_CardBagBuy instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_CardBagBuy
         * @static
         * @param {DcgProto.IResp_CardBagBuy=} [properties] Properties to set
         * @returns {DcgProto.Resp_CardBagBuy} Resp_CardBagBuy instance
         */
        Resp_CardBagBuy.create = function create(properties) {
            return new Resp_CardBagBuy(properties);
        };

        /**
         * Encodes the specified Resp_CardBagBuy message. Does not implicitly {@link DcgProto.Resp_CardBagBuy.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_CardBagBuy
         * @static
         * @param {DcgProto.IResp_CardBagBuy} m Resp_CardBagBuy message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_CardBagBuy.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            if (m.AddDataList != null && m.AddDataList.length) {
                for (var i = 0; i < m.AddDataList.length; ++i)
                    $root.DcgProto.S_AddData.encode(m.AddDataList[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Resp_CardBagBuy message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_CardBagBuy
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_CardBagBuy} Resp_CardBagBuy
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_CardBagBuy.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_CardBagBuy();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.AddDataList && m.AddDataList.length))
                        m.AddDataList = [];
                    m.AddDataList.push($root.DcgProto.S_AddData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_CardBagBuy message.
         * @function verify
         * @memberof DcgProto.Resp_CardBagBuy
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_CardBagBuy.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.AddDataList != null && m.hasOwnProperty("AddDataList")) {
                if (!Array.isArray(m.AddDataList))
                    return "AddDataList: array expected";
                for (var i = 0; i < m.AddDataList.length; ++i) {
                    {
                        var e = $root.DcgProto.S_AddData.verify(m.AddDataList[i]);
                        if (e)
                            return "AddDataList." + e;
                    }
                }
            }
            return null;
        };

        return Resp_CardBagBuy;
    })();

    DcgProto.Req_StoryReward = (function() {

        /**
         * Properties of a Req_StoryReward.
         * @memberof DcgProto
         * @interface IReq_StoryReward
         * @property {Long|null} [StoryIID] Req_StoryReward StoryIID
         */

        /**
         * Constructs a new Req_StoryReward.
         * @memberof DcgProto
         * @classdesc Represents a Req_StoryReward.
         * @implements IReq_StoryReward
         * @constructor
         * @param {DcgProto.IReq_StoryReward=} [p] Properties to set
         */
        function Req_StoryReward(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_StoryReward StoryIID.
         * @member {Long} StoryIID
         * @memberof DcgProto.Req_StoryReward
         * @instance
         */
        Req_StoryReward.prototype.StoryIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_StoryReward instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_StoryReward
         * @static
         * @param {DcgProto.IReq_StoryReward=} [properties] Properties to set
         * @returns {DcgProto.Req_StoryReward} Req_StoryReward instance
         */
        Req_StoryReward.create = function create(properties) {
            return new Req_StoryReward(properties);
        };

        /**
         * Encodes the specified Req_StoryReward message. Does not implicitly {@link DcgProto.Req_StoryReward.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_StoryReward
         * @static
         * @param {DcgProto.IReq_StoryReward} m Req_StoryReward message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_StoryReward.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.StoryIID != null && Object.hasOwnProperty.call(m, "StoryIID"))
                w.uint32(8).int64(m.StoryIID);
            return w;
        };

        /**
         * Decodes a Req_StoryReward message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_StoryReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_StoryReward} Req_StoryReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_StoryReward.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_StoryReward();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.StoryIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_StoryReward message.
         * @function verify
         * @memberof DcgProto.Req_StoryReward
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_StoryReward.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.StoryIID != null && m.hasOwnProperty("StoryIID")) {
                if (!$util.isInteger(m.StoryIID) && !(m.StoryIID && $util.isInteger(m.StoryIID.low) && $util.isInteger(m.StoryIID.high)))
                    return "StoryIID: integer|Long expected";
            }
            return null;
        };

        return Req_StoryReward;
    })();

    DcgProto.Resp_StoryReward = (function() {

        /**
         * Properties of a Resp_StoryReward.
         * @memberof DcgProto
         * @interface IResp_StoryReward
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_StoryReward ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_StoryReward Cmn
         */

        /**
         * Constructs a new Resp_StoryReward.
         * @memberof DcgProto
         * @classdesc Represents a Resp_StoryReward.
         * @implements IResp_StoryReward
         * @constructor
         * @param {DcgProto.IResp_StoryReward=} [p] Properties to set
         */
        function Resp_StoryReward(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_StoryReward ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_StoryReward
         * @instance
         */
        Resp_StoryReward.prototype.ErrorCode = 0;

        /**
         * Resp_StoryReward Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_StoryReward
         * @instance
         */
        Resp_StoryReward.prototype.Cmn = null;

        /**
         * Creates a new Resp_StoryReward instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_StoryReward
         * @static
         * @param {DcgProto.IResp_StoryReward=} [properties] Properties to set
         * @returns {DcgProto.Resp_StoryReward} Resp_StoryReward instance
         */
        Resp_StoryReward.create = function create(properties) {
            return new Resp_StoryReward(properties);
        };

        /**
         * Encodes the specified Resp_StoryReward message. Does not implicitly {@link DcgProto.Resp_StoryReward.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_StoryReward
         * @static
         * @param {DcgProto.IResp_StoryReward} m Resp_StoryReward message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_StoryReward.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_StoryReward message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_StoryReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_StoryReward} Resp_StoryReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_StoryReward.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_StoryReward();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_StoryReward message.
         * @function verify
         * @memberof DcgProto.Resp_StoryReward
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_StoryReward.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_StoryReward;
    })();

    DcgProto.Req_StoryFinish = (function() {

        /**
         * Properties of a Req_StoryFinish.
         * @memberof DcgProto
         * @interface IReq_StoryFinish
         * @property {Long|null} [StoryIID] Req_StoryFinish StoryIID
         * @property {number|null} [CfgId] Req_StoryFinish CfgId
         */

        /**
         * Constructs a new Req_StoryFinish.
         * @memberof DcgProto
         * @classdesc Represents a Req_StoryFinish.
         * @implements IReq_StoryFinish
         * @constructor
         * @param {DcgProto.IReq_StoryFinish=} [p] Properties to set
         */
        function Req_StoryFinish(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_StoryFinish StoryIID.
         * @member {Long} StoryIID
         * @memberof DcgProto.Req_StoryFinish
         * @instance
         */
        Req_StoryFinish.prototype.StoryIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_StoryFinish CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.Req_StoryFinish
         * @instance
         */
        Req_StoryFinish.prototype.CfgId = 0;

        /**
         * Creates a new Req_StoryFinish instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_StoryFinish
         * @static
         * @param {DcgProto.IReq_StoryFinish=} [properties] Properties to set
         * @returns {DcgProto.Req_StoryFinish} Req_StoryFinish instance
         */
        Req_StoryFinish.create = function create(properties) {
            return new Req_StoryFinish(properties);
        };

        /**
         * Encodes the specified Req_StoryFinish message. Does not implicitly {@link DcgProto.Req_StoryFinish.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_StoryFinish
         * @static
         * @param {DcgProto.IReq_StoryFinish} m Req_StoryFinish message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_StoryFinish.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.StoryIID != null && Object.hasOwnProperty.call(m, "StoryIID"))
                w.uint32(8).int64(m.StoryIID);
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            return w;
        };

        /**
         * Decodes a Req_StoryFinish message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_StoryFinish
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_StoryFinish} Req_StoryFinish
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_StoryFinish.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_StoryFinish();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.StoryIID = r.int64();
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_StoryFinish message.
         * @function verify
         * @memberof DcgProto.Req_StoryFinish
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_StoryFinish.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.StoryIID != null && m.hasOwnProperty("StoryIID")) {
                if (!$util.isInteger(m.StoryIID) && !(m.StoryIID && $util.isInteger(m.StoryIID.low) && $util.isInteger(m.StoryIID.high)))
                    return "StoryIID: integer|Long expected";
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            return null;
        };

        return Req_StoryFinish;
    })();

    DcgProto.Resp_StoryFinish = (function() {

        /**
         * Properties of a Resp_StoryFinish.
         * @memberof DcgProto
         * @interface IResp_StoryFinish
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_StoryFinish ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_StoryFinish Cmn
         */

        /**
         * Constructs a new Resp_StoryFinish.
         * @memberof DcgProto
         * @classdesc Represents a Resp_StoryFinish.
         * @implements IResp_StoryFinish
         * @constructor
         * @param {DcgProto.IResp_StoryFinish=} [p] Properties to set
         */
        function Resp_StoryFinish(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_StoryFinish ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_StoryFinish
         * @instance
         */
        Resp_StoryFinish.prototype.ErrorCode = 0;

        /**
         * Resp_StoryFinish Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_StoryFinish
         * @instance
         */
        Resp_StoryFinish.prototype.Cmn = null;

        /**
         * Creates a new Resp_StoryFinish instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_StoryFinish
         * @static
         * @param {DcgProto.IResp_StoryFinish=} [properties] Properties to set
         * @returns {DcgProto.Resp_StoryFinish} Resp_StoryFinish instance
         */
        Resp_StoryFinish.create = function create(properties) {
            return new Resp_StoryFinish(properties);
        };

        /**
         * Encodes the specified Resp_StoryFinish message. Does not implicitly {@link DcgProto.Resp_StoryFinish.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_StoryFinish
         * @static
         * @param {DcgProto.IResp_StoryFinish} m Resp_StoryFinish message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_StoryFinish.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_StoryFinish message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_StoryFinish
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_StoryFinish} Resp_StoryFinish
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_StoryFinish.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_StoryFinish();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_StoryFinish message.
         * @function verify
         * @memberof DcgProto.Resp_StoryFinish
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_StoryFinish.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_StoryFinish;
    })();

    DcgProto.Req_UseItem = (function() {

        /**
         * Properties of a Req_UseItem.
         * @memberof DcgProto
         * @interface IReq_UseItem
         * @property {Long|null} [ItemIID] Req_UseItem ItemIID
         * @property {number|null} [ItemNum] Req_UseItem ItemNum
         * @property {Array.<DcgProto.IS_Item>|null} [Items] Req_UseItem Items
         */

        /**
         * Constructs a new Req_UseItem.
         * @memberof DcgProto
         * @classdesc Represents a Req_UseItem.
         * @implements IReq_UseItem
         * @constructor
         * @param {DcgProto.IReq_UseItem=} [p] Properties to set
         */
        function Req_UseItem(p) {
            this.Items = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_UseItem ItemIID.
         * @member {Long} ItemIID
         * @memberof DcgProto.Req_UseItem
         * @instance
         */
        Req_UseItem.prototype.ItemIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_UseItem ItemNum.
         * @member {number} ItemNum
         * @memberof DcgProto.Req_UseItem
         * @instance
         */
        Req_UseItem.prototype.ItemNum = 0;

        /**
         * Req_UseItem Items.
         * @member {Array.<DcgProto.IS_Item>} Items
         * @memberof DcgProto.Req_UseItem
         * @instance
         */
        Req_UseItem.prototype.Items = $util.emptyArray;

        /**
         * Creates a new Req_UseItem instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_UseItem
         * @static
         * @param {DcgProto.IReq_UseItem=} [properties] Properties to set
         * @returns {DcgProto.Req_UseItem} Req_UseItem instance
         */
        Req_UseItem.create = function create(properties) {
            return new Req_UseItem(properties);
        };

        /**
         * Encodes the specified Req_UseItem message. Does not implicitly {@link DcgProto.Req_UseItem.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_UseItem
         * @static
         * @param {DcgProto.IReq_UseItem} m Req_UseItem message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_UseItem.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ItemIID != null && Object.hasOwnProperty.call(m, "ItemIID"))
                w.uint32(8).int64(m.ItemIID);
            if (m.ItemNum != null && Object.hasOwnProperty.call(m, "ItemNum"))
                w.uint32(16).int32(m.ItemNum);
            if (m.Items != null && m.Items.length) {
                for (var i = 0; i < m.Items.length; ++i)
                    $root.DcgProto.S_Item.encode(m.Items[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Req_UseItem message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_UseItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_UseItem} Req_UseItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_UseItem.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_UseItem();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ItemIID = r.int64();
                    break;
                case 2:
                    m.ItemNum = r.int32();
                    break;
                case 3:
                    if (!(m.Items && m.Items.length))
                        m.Items = [];
                    m.Items.push($root.DcgProto.S_Item.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_UseItem message.
         * @function verify
         * @memberof DcgProto.Req_UseItem
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_UseItem.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ItemIID != null && m.hasOwnProperty("ItemIID")) {
                if (!$util.isInteger(m.ItemIID) && !(m.ItemIID && $util.isInteger(m.ItemIID.low) && $util.isInteger(m.ItemIID.high)))
                    return "ItemIID: integer|Long expected";
            }
            if (m.ItemNum != null && m.hasOwnProperty("ItemNum")) {
                if (!$util.isInteger(m.ItemNum))
                    return "ItemNum: integer expected";
            }
            if (m.Items != null && m.hasOwnProperty("Items")) {
                if (!Array.isArray(m.Items))
                    return "Items: array expected";
                for (var i = 0; i < m.Items.length; ++i) {
                    {
                        var e = $root.DcgProto.S_Item.verify(m.Items[i]);
                        if (e)
                            return "Items." + e;
                    }
                }
            }
            return null;
        };

        return Req_UseItem;
    })();

    DcgProto.Resp_UseItem = (function() {

        /**
         * Properties of a Resp_UseItem.
         * @memberof DcgProto
         * @interface IResp_UseItem
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_UseItem ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_UseItem Cmn
         */

        /**
         * Constructs a new Resp_UseItem.
         * @memberof DcgProto
         * @classdesc Represents a Resp_UseItem.
         * @implements IResp_UseItem
         * @constructor
         * @param {DcgProto.IResp_UseItem=} [p] Properties to set
         */
        function Resp_UseItem(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_UseItem ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_UseItem
         * @instance
         */
        Resp_UseItem.prototype.ErrorCode = 0;

        /**
         * Resp_UseItem Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_UseItem
         * @instance
         */
        Resp_UseItem.prototype.Cmn = null;

        /**
         * Creates a new Resp_UseItem instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_UseItem
         * @static
         * @param {DcgProto.IResp_UseItem=} [properties] Properties to set
         * @returns {DcgProto.Resp_UseItem} Resp_UseItem instance
         */
        Resp_UseItem.create = function create(properties) {
            return new Resp_UseItem(properties);
        };

        /**
         * Encodes the specified Resp_UseItem message. Does not implicitly {@link DcgProto.Resp_UseItem.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_UseItem
         * @static
         * @param {DcgProto.IResp_UseItem} m Resp_UseItem message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_UseItem.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_UseItem message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_UseItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_UseItem} Resp_UseItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_UseItem.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_UseItem();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_UseItem message.
         * @function verify
         * @memberof DcgProto.Resp_UseItem
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_UseItem.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_UseItem;
    })();

    DcgProto.Req_FlyEmoJi = (function() {

        /**
         * Properties of a Req_FlyEmoJi.
         * @memberof DcgProto
         * @interface IReq_FlyEmoJi
         * @property {number|null} [CfgId] Req_FlyEmoJi CfgId
         * @property {DcgProto.E_EmoJiMode|null} [EmoJiMode] Req_FlyEmoJi EmoJiMode
         */

        /**
         * Constructs a new Req_FlyEmoJi.
         * @memberof DcgProto
         * @classdesc Represents a Req_FlyEmoJi.
         * @implements IReq_FlyEmoJi
         * @constructor
         * @param {DcgProto.IReq_FlyEmoJi=} [p] Properties to set
         */
        function Req_FlyEmoJi(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_FlyEmoJi CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.Req_FlyEmoJi
         * @instance
         */
        Req_FlyEmoJi.prototype.CfgId = 0;

        /**
         * Req_FlyEmoJi EmoJiMode.
         * @member {DcgProto.E_EmoJiMode} EmoJiMode
         * @memberof DcgProto.Req_FlyEmoJi
         * @instance
         */
        Req_FlyEmoJi.prototype.EmoJiMode = 0;

        /**
         * Creates a new Req_FlyEmoJi instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_FlyEmoJi
         * @static
         * @param {DcgProto.IReq_FlyEmoJi=} [properties] Properties to set
         * @returns {DcgProto.Req_FlyEmoJi} Req_FlyEmoJi instance
         */
        Req_FlyEmoJi.create = function create(properties) {
            return new Req_FlyEmoJi(properties);
        };

        /**
         * Encodes the specified Req_FlyEmoJi message. Does not implicitly {@link DcgProto.Req_FlyEmoJi.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_FlyEmoJi
         * @static
         * @param {DcgProto.IReq_FlyEmoJi} m Req_FlyEmoJi message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_FlyEmoJi.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(8).int32(m.CfgId);
            if (m.EmoJiMode != null && Object.hasOwnProperty.call(m, "EmoJiMode"))
                w.uint32(16).int32(m.EmoJiMode);
            return w;
        };

        /**
         * Decodes a Req_FlyEmoJi message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_FlyEmoJi
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_FlyEmoJi} Req_FlyEmoJi
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_FlyEmoJi.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_FlyEmoJi();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CfgId = r.int32();
                    break;
                case 2:
                    m.EmoJiMode = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_FlyEmoJi message.
         * @function verify
         * @memberof DcgProto.Req_FlyEmoJi
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_FlyEmoJi.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.EmoJiMode != null && m.hasOwnProperty("EmoJiMode")) {
                switch (m.EmoJiMode) {
                default:
                    return "EmoJiMode: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            return null;
        };

        return Req_FlyEmoJi;
    })();

    DcgProto.Resp_FlyEmoJi = (function() {

        /**
         * Properties of a Resp_FlyEmoJi.
         * @memberof DcgProto
         * @interface IResp_FlyEmoJi
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_FlyEmoJi ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_FlyEmoJi Cmn
         */

        /**
         * Constructs a new Resp_FlyEmoJi.
         * @memberof DcgProto
         * @classdesc Represents a Resp_FlyEmoJi.
         * @implements IResp_FlyEmoJi
         * @constructor
         * @param {DcgProto.IResp_FlyEmoJi=} [p] Properties to set
         */
        function Resp_FlyEmoJi(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_FlyEmoJi ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_FlyEmoJi
         * @instance
         */
        Resp_FlyEmoJi.prototype.ErrorCode = 0;

        /**
         * Resp_FlyEmoJi Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_FlyEmoJi
         * @instance
         */
        Resp_FlyEmoJi.prototype.Cmn = null;

        /**
         * Creates a new Resp_FlyEmoJi instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_FlyEmoJi
         * @static
         * @param {DcgProto.IResp_FlyEmoJi=} [properties] Properties to set
         * @returns {DcgProto.Resp_FlyEmoJi} Resp_FlyEmoJi instance
         */
        Resp_FlyEmoJi.create = function create(properties) {
            return new Resp_FlyEmoJi(properties);
        };

        /**
         * Encodes the specified Resp_FlyEmoJi message. Does not implicitly {@link DcgProto.Resp_FlyEmoJi.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_FlyEmoJi
         * @static
         * @param {DcgProto.IResp_FlyEmoJi} m Resp_FlyEmoJi message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_FlyEmoJi.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_FlyEmoJi message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_FlyEmoJi
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_FlyEmoJi} Resp_FlyEmoJi
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_FlyEmoJi.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_FlyEmoJi();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_FlyEmoJi message.
         * @function verify
         * @memberof DcgProto.Resp_FlyEmoJi
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_FlyEmoJi.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_FlyEmoJi;
    })();

    DcgProto.Push_EmoJi = (function() {

        /**
         * Properties of a Push_EmoJi.
         * @memberof DcgProto
         * @interface IPush_EmoJi
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Push_EmoJi Cmn
         * @property {number|null} [CfgId] Push_EmoJi CfgId
         * @property {DcgProto.E_EmoJiMode|null} [EmoJiMode] Push_EmoJi EmoJiMode
         * @property {Long|null} [FromRoleIID] Push_EmoJi FromRoleIID
         */

        /**
         * Constructs a new Push_EmoJi.
         * @memberof DcgProto
         * @classdesc Represents a Push_EmoJi.
         * @implements IPush_EmoJi
         * @constructor
         * @param {DcgProto.IPush_EmoJi=} [p] Properties to set
         */
        function Push_EmoJi(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Push_EmoJi Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Push_EmoJi
         * @instance
         */
        Push_EmoJi.prototype.Cmn = null;

        /**
         * Push_EmoJi CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.Push_EmoJi
         * @instance
         */
        Push_EmoJi.prototype.CfgId = 0;

        /**
         * Push_EmoJi EmoJiMode.
         * @member {DcgProto.E_EmoJiMode} EmoJiMode
         * @memberof DcgProto.Push_EmoJi
         * @instance
         */
        Push_EmoJi.prototype.EmoJiMode = 0;

        /**
         * Push_EmoJi FromRoleIID.
         * @member {Long} FromRoleIID
         * @memberof DcgProto.Push_EmoJi
         * @instance
         */
        Push_EmoJi.prototype.FromRoleIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Push_EmoJi instance using the specified properties.
         * @function create
         * @memberof DcgProto.Push_EmoJi
         * @static
         * @param {DcgProto.IPush_EmoJi=} [properties] Properties to set
         * @returns {DcgProto.Push_EmoJi} Push_EmoJi instance
         */
        Push_EmoJi.create = function create(properties) {
            return new Push_EmoJi(properties);
        };

        /**
         * Encodes the specified Push_EmoJi message. Does not implicitly {@link DcgProto.Push_EmoJi.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Push_EmoJi
         * @static
         * @param {DcgProto.IPush_EmoJi} m Push_EmoJi message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Push_EmoJi.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(10).fork()).ldelim();
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(16).int32(m.CfgId);
            if (m.EmoJiMode != null && Object.hasOwnProperty.call(m, "EmoJiMode"))
                w.uint32(24).int32(m.EmoJiMode);
            if (m.FromRoleIID != null && Object.hasOwnProperty.call(m, "FromRoleIID"))
                w.uint32(32).int64(m.FromRoleIID);
            return w;
        };

        /**
         * Decodes a Push_EmoJi message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Push_EmoJi
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Push_EmoJi} Push_EmoJi
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Push_EmoJi.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Push_EmoJi();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                case 2:
                    m.CfgId = r.int32();
                    break;
                case 3:
                    m.EmoJiMode = r.int32();
                    break;
                case 4:
                    m.FromRoleIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Push_EmoJi message.
         * @function verify
         * @memberof DcgProto.Push_EmoJi
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Push_EmoJi.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            if (m.EmoJiMode != null && m.hasOwnProperty("EmoJiMode")) {
                switch (m.EmoJiMode) {
                default:
                    return "EmoJiMode: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            }
            if (m.FromRoleIID != null && m.hasOwnProperty("FromRoleIID")) {
                if (!$util.isInteger(m.FromRoleIID) && !(m.FromRoleIID && $util.isInteger(m.FromRoleIID.low) && $util.isInteger(m.FromRoleIID.high)))
                    return "FromRoleIID: integer|Long expected";
            }
            return null;
        };

        return Push_EmoJi;
    })();

    DcgProto.Req_PhaseReward = (function() {

        /**
         * Properties of a Req_PhaseReward.
         * @memberof DcgProto
         * @interface IReq_PhaseReward
         * @property {number|null} [CfgId] Req_PhaseReward CfgId
         */

        /**
         * Constructs a new Req_PhaseReward.
         * @memberof DcgProto
         * @classdesc Represents a Req_PhaseReward.
         * @implements IReq_PhaseReward
         * @constructor
         * @param {DcgProto.IReq_PhaseReward=} [p] Properties to set
         */
        function Req_PhaseReward(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_PhaseReward CfgId.
         * @member {number} CfgId
         * @memberof DcgProto.Req_PhaseReward
         * @instance
         */
        Req_PhaseReward.prototype.CfgId = 0;

        /**
         * Creates a new Req_PhaseReward instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_PhaseReward
         * @static
         * @param {DcgProto.IReq_PhaseReward=} [properties] Properties to set
         * @returns {DcgProto.Req_PhaseReward} Req_PhaseReward instance
         */
        Req_PhaseReward.create = function create(properties) {
            return new Req_PhaseReward(properties);
        };

        /**
         * Encodes the specified Req_PhaseReward message. Does not implicitly {@link DcgProto.Req_PhaseReward.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_PhaseReward
         * @static
         * @param {DcgProto.IReq_PhaseReward} m Req_PhaseReward message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_PhaseReward.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.CfgId != null && Object.hasOwnProperty.call(m, "CfgId"))
                w.uint32(8).int32(m.CfgId);
            return w;
        };

        /**
         * Decodes a Req_PhaseReward message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_PhaseReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_PhaseReward} Req_PhaseReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_PhaseReward.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_PhaseReward();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.CfgId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_PhaseReward message.
         * @function verify
         * @memberof DcgProto.Req_PhaseReward
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_PhaseReward.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.CfgId != null && m.hasOwnProperty("CfgId")) {
                if (!$util.isInteger(m.CfgId))
                    return "CfgId: integer expected";
            }
            return null;
        };

        return Req_PhaseReward;
    })();

    DcgProto.Resp_PhaseReward = (function() {

        /**
         * Properties of a Resp_PhaseReward.
         * @memberof DcgProto
         * @interface IResp_PhaseReward
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_PhaseReward ErrorCode
         * @property {DcgProto.IS_CommonResp|null} [Cmn] Resp_PhaseReward Cmn
         */

        /**
         * Constructs a new Resp_PhaseReward.
         * @memberof DcgProto
         * @classdesc Represents a Resp_PhaseReward.
         * @implements IResp_PhaseReward
         * @constructor
         * @param {DcgProto.IResp_PhaseReward=} [p] Properties to set
         */
        function Resp_PhaseReward(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_PhaseReward ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_PhaseReward
         * @instance
         */
        Resp_PhaseReward.prototype.ErrorCode = 0;

        /**
         * Resp_PhaseReward Cmn.
         * @member {DcgProto.IS_CommonResp|null|undefined} Cmn
         * @memberof DcgProto.Resp_PhaseReward
         * @instance
         */
        Resp_PhaseReward.prototype.Cmn = null;

        /**
         * Creates a new Resp_PhaseReward instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_PhaseReward
         * @static
         * @param {DcgProto.IResp_PhaseReward=} [properties] Properties to set
         * @returns {DcgProto.Resp_PhaseReward} Resp_PhaseReward instance
         */
        Resp_PhaseReward.create = function create(properties) {
            return new Resp_PhaseReward(properties);
        };

        /**
         * Encodes the specified Resp_PhaseReward message. Does not implicitly {@link DcgProto.Resp_PhaseReward.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_PhaseReward
         * @static
         * @param {DcgProto.IResp_PhaseReward} m Resp_PhaseReward message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_PhaseReward.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Cmn != null && Object.hasOwnProperty.call(m, "Cmn"))
                $root.DcgProto.S_CommonResp.encode(m.Cmn, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_PhaseReward message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_PhaseReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_PhaseReward} Resp_PhaseReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_PhaseReward.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_PhaseReward();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Cmn = $root.DcgProto.S_CommonResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_PhaseReward message.
         * @function verify
         * @memberof DcgProto.Resp_PhaseReward
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_PhaseReward.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Cmn != null && m.hasOwnProperty("Cmn")) {
                {
                    var e = $root.DcgProto.S_CommonResp.verify(m.Cmn);
                    if (e)
                        return "Cmn." + e;
                }
            }
            return null;
        };

        return Resp_PhaseReward;
    })();

    DcgProto.Req_AccountRegister = (function() {

        /**
         * Properties of a Req_AccountRegister.
         * @memberof DcgProto
         * @interface IReq_AccountRegister
         * @property {string|null} [Name] Req_AccountRegister Name
         * @property {string|null} [Pwd] Req_AccountRegister Pwd
         */

        /**
         * Constructs a new Req_AccountRegister.
         * @memberof DcgProto
         * @classdesc Represents a Req_AccountRegister.
         * @implements IReq_AccountRegister
         * @constructor
         * @param {DcgProto.IReq_AccountRegister=} [p] Properties to set
         */
        function Req_AccountRegister(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_AccountRegister Name.
         * @member {string} Name
         * @memberof DcgProto.Req_AccountRegister
         * @instance
         */
        Req_AccountRegister.prototype.Name = "";

        /**
         * Req_AccountRegister Pwd.
         * @member {string} Pwd
         * @memberof DcgProto.Req_AccountRegister
         * @instance
         */
        Req_AccountRegister.prototype.Pwd = "";

        /**
         * Creates a new Req_AccountRegister instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_AccountRegister
         * @static
         * @param {DcgProto.IReq_AccountRegister=} [properties] Properties to set
         * @returns {DcgProto.Req_AccountRegister} Req_AccountRegister instance
         */
        Req_AccountRegister.create = function create(properties) {
            return new Req_AccountRegister(properties);
        };

        /**
         * Encodes the specified Req_AccountRegister message. Does not implicitly {@link DcgProto.Req_AccountRegister.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_AccountRegister
         * @static
         * @param {DcgProto.IReq_AccountRegister} m Req_AccountRegister message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_AccountRegister.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Name != null && Object.hasOwnProperty.call(m, "Name"))
                w.uint32(10).string(m.Name);
            if (m.Pwd != null && Object.hasOwnProperty.call(m, "Pwd"))
                w.uint32(18).string(m.Pwd);
            return w;
        };

        /**
         * Decodes a Req_AccountRegister message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_AccountRegister
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_AccountRegister} Req_AccountRegister
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_AccountRegister.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_AccountRegister();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Name = r.string();
                    break;
                case 2:
                    m.Pwd = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_AccountRegister message.
         * @function verify
         * @memberof DcgProto.Req_AccountRegister
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_AccountRegister.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Name != null && m.hasOwnProperty("Name")) {
                if (!$util.isString(m.Name))
                    return "Name: string expected";
            }
            if (m.Pwd != null && m.hasOwnProperty("Pwd")) {
                if (!$util.isString(m.Pwd))
                    return "Pwd: string expected";
            }
            return null;
        };

        return Req_AccountRegister;
    })();

    DcgProto.Resp_AccountRegister = (function() {

        /**
         * Properties of a Resp_AccountRegister.
         * @memberof DcgProto
         * @interface IResp_AccountRegister
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_AccountRegister ErrorCode
         */

        /**
         * Constructs a new Resp_AccountRegister.
         * @memberof DcgProto
         * @classdesc Represents a Resp_AccountRegister.
         * @implements IResp_AccountRegister
         * @constructor
         * @param {DcgProto.IResp_AccountRegister=} [p] Properties to set
         */
        function Resp_AccountRegister(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_AccountRegister ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_AccountRegister
         * @instance
         */
        Resp_AccountRegister.prototype.ErrorCode = 0;

        /**
         * Creates a new Resp_AccountRegister instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_AccountRegister
         * @static
         * @param {DcgProto.IResp_AccountRegister=} [properties] Properties to set
         * @returns {DcgProto.Resp_AccountRegister} Resp_AccountRegister instance
         */
        Resp_AccountRegister.create = function create(properties) {
            return new Resp_AccountRegister(properties);
        };

        /**
         * Encodes the specified Resp_AccountRegister message. Does not implicitly {@link DcgProto.Resp_AccountRegister.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_AccountRegister
         * @static
         * @param {DcgProto.IResp_AccountRegister} m Resp_AccountRegister message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_AccountRegister.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            return w;
        };

        /**
         * Decodes a Resp_AccountRegister message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_AccountRegister
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_AccountRegister} Resp_AccountRegister
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_AccountRegister.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_AccountRegister();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_AccountRegister message.
         * @function verify
         * @memberof DcgProto.Resp_AccountRegister
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_AccountRegister.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            return null;
        };

        return Resp_AccountRegister;
    })();

    DcgProto.Req_AccountLogin = (function() {

        /**
         * Properties of a Req_AccountLogin.
         * @memberof DcgProto
         * @interface IReq_AccountLogin
         * @property {string|null} [Name] Req_AccountLogin Name
         * @property {string|null} [Pwd] Req_AccountLogin Pwd
         */

        /**
         * Constructs a new Req_AccountLogin.
         * @memberof DcgProto
         * @classdesc Represents a Req_AccountLogin.
         * @implements IReq_AccountLogin
         * @constructor
         * @param {DcgProto.IReq_AccountLogin=} [p] Properties to set
         */
        function Req_AccountLogin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_AccountLogin Name.
         * @member {string} Name
         * @memberof DcgProto.Req_AccountLogin
         * @instance
         */
        Req_AccountLogin.prototype.Name = "";

        /**
         * Req_AccountLogin Pwd.
         * @member {string} Pwd
         * @memberof DcgProto.Req_AccountLogin
         * @instance
         */
        Req_AccountLogin.prototype.Pwd = "";

        /**
         * Creates a new Req_AccountLogin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_AccountLogin
         * @static
         * @param {DcgProto.IReq_AccountLogin=} [properties] Properties to set
         * @returns {DcgProto.Req_AccountLogin} Req_AccountLogin instance
         */
        Req_AccountLogin.create = function create(properties) {
            return new Req_AccountLogin(properties);
        };

        /**
         * Encodes the specified Req_AccountLogin message. Does not implicitly {@link DcgProto.Req_AccountLogin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_AccountLogin
         * @static
         * @param {DcgProto.IReq_AccountLogin} m Req_AccountLogin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_AccountLogin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Name != null && Object.hasOwnProperty.call(m, "Name"))
                w.uint32(10).string(m.Name);
            if (m.Pwd != null && Object.hasOwnProperty.call(m, "Pwd"))
                w.uint32(18).string(m.Pwd);
            return w;
        };

        /**
         * Decodes a Req_AccountLogin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_AccountLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_AccountLogin} Req_AccountLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_AccountLogin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_AccountLogin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Name = r.string();
                    break;
                case 2:
                    m.Pwd = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_AccountLogin message.
         * @function verify
         * @memberof DcgProto.Req_AccountLogin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_AccountLogin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Name != null && m.hasOwnProperty("Name")) {
                if (!$util.isString(m.Name))
                    return "Name: string expected";
            }
            if (m.Pwd != null && m.hasOwnProperty("Pwd")) {
                if (!$util.isString(m.Pwd))
                    return "Pwd: string expected";
            }
            return null;
        };

        return Req_AccountLogin;
    })();

    DcgProto.Resp_AccountLogin = (function() {

        /**
         * Properties of a Resp_AccountLogin.
         * @memberof DcgProto
         * @interface IResp_AccountLogin
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_AccountLogin ErrorCode
         * @property {string|null} [ThirdId] Resp_AccountLogin ThirdId
         */

        /**
         * Constructs a new Resp_AccountLogin.
         * @memberof DcgProto
         * @classdesc Represents a Resp_AccountLogin.
         * @implements IResp_AccountLogin
         * @constructor
         * @param {DcgProto.IResp_AccountLogin=} [p] Properties to set
         */
        function Resp_AccountLogin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_AccountLogin ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_AccountLogin
         * @instance
         */
        Resp_AccountLogin.prototype.ErrorCode = 0;

        /**
         * Resp_AccountLogin ThirdId.
         * @member {string} ThirdId
         * @memberof DcgProto.Resp_AccountLogin
         * @instance
         */
        Resp_AccountLogin.prototype.ThirdId = "";

        /**
         * Creates a new Resp_AccountLogin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_AccountLogin
         * @static
         * @param {DcgProto.IResp_AccountLogin=} [properties] Properties to set
         * @returns {DcgProto.Resp_AccountLogin} Resp_AccountLogin instance
         */
        Resp_AccountLogin.create = function create(properties) {
            return new Resp_AccountLogin(properties);
        };

        /**
         * Encodes the specified Resp_AccountLogin message. Does not implicitly {@link DcgProto.Resp_AccountLogin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_AccountLogin
         * @static
         * @param {DcgProto.IResp_AccountLogin} m Resp_AccountLogin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_AccountLogin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.ThirdId != null && Object.hasOwnProperty.call(m, "ThirdId"))
                w.uint32(18).string(m.ThirdId);
            return w;
        };

        /**
         * Decodes a Resp_AccountLogin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_AccountLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_AccountLogin} Resp_AccountLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_AccountLogin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_AccountLogin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.ThirdId = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_AccountLogin message.
         * @function verify
         * @memberof DcgProto.Resp_AccountLogin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_AccountLogin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.ThirdId != null && m.hasOwnProperty("ThirdId")) {
                if (!$util.isString(m.ThirdId))
                    return "ThirdId: string expected";
            }
            return null;
        };

        return Resp_AccountLogin;
    })();

    DcgProto.Req_AccountResetPwd = (function() {

        /**
         * Properties of a Req_AccountResetPwd.
         * @memberof DcgProto
         * @interface IReq_AccountResetPwd
         * @property {string|null} [Name] Req_AccountResetPwd Name
         * @property {string|null} [Pwd] Req_AccountResetPwd Pwd
         */

        /**
         * Constructs a new Req_AccountResetPwd.
         * @memberof DcgProto
         * @classdesc Represents a Req_AccountResetPwd.
         * @implements IReq_AccountResetPwd
         * @constructor
         * @param {DcgProto.IReq_AccountResetPwd=} [p] Properties to set
         */
        function Req_AccountResetPwd(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_AccountResetPwd Name.
         * @member {string} Name
         * @memberof DcgProto.Req_AccountResetPwd
         * @instance
         */
        Req_AccountResetPwd.prototype.Name = "";

        /**
         * Req_AccountResetPwd Pwd.
         * @member {string} Pwd
         * @memberof DcgProto.Req_AccountResetPwd
         * @instance
         */
        Req_AccountResetPwd.prototype.Pwd = "";

        /**
         * Creates a new Req_AccountResetPwd instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_AccountResetPwd
         * @static
         * @param {DcgProto.IReq_AccountResetPwd=} [properties] Properties to set
         * @returns {DcgProto.Req_AccountResetPwd} Req_AccountResetPwd instance
         */
        Req_AccountResetPwd.create = function create(properties) {
            return new Req_AccountResetPwd(properties);
        };

        /**
         * Encodes the specified Req_AccountResetPwd message. Does not implicitly {@link DcgProto.Req_AccountResetPwd.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_AccountResetPwd
         * @static
         * @param {DcgProto.IReq_AccountResetPwd} m Req_AccountResetPwd message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_AccountResetPwd.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.Name != null && Object.hasOwnProperty.call(m, "Name"))
                w.uint32(10).string(m.Name);
            if (m.Pwd != null && Object.hasOwnProperty.call(m, "Pwd"))
                w.uint32(18).string(m.Pwd);
            return w;
        };

        /**
         * Decodes a Req_AccountResetPwd message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_AccountResetPwd
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_AccountResetPwd} Req_AccountResetPwd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_AccountResetPwd.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_AccountResetPwd();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.Name = r.string();
                    break;
                case 2:
                    m.Pwd = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_AccountResetPwd message.
         * @function verify
         * @memberof DcgProto.Req_AccountResetPwd
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_AccountResetPwd.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.Name != null && m.hasOwnProperty("Name")) {
                if (!$util.isString(m.Name))
                    return "Name: string expected";
            }
            if (m.Pwd != null && m.hasOwnProperty("Pwd")) {
                if (!$util.isString(m.Pwd))
                    return "Pwd: string expected";
            }
            return null;
        };

        return Req_AccountResetPwd;
    })();

    DcgProto.Resp_AccountResetPwd = (function() {

        /**
         * Properties of a Resp_AccountResetPwd.
         * @memberof DcgProto
         * @interface IResp_AccountResetPwd
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_AccountResetPwd ErrorCode
         */

        /**
         * Constructs a new Resp_AccountResetPwd.
         * @memberof DcgProto
         * @classdesc Represents a Resp_AccountResetPwd.
         * @implements IResp_AccountResetPwd
         * @constructor
         * @param {DcgProto.IResp_AccountResetPwd=} [p] Properties to set
         */
        function Resp_AccountResetPwd(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_AccountResetPwd ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_AccountResetPwd
         * @instance
         */
        Resp_AccountResetPwd.prototype.ErrorCode = 0;

        /**
         * Creates a new Resp_AccountResetPwd instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_AccountResetPwd
         * @static
         * @param {DcgProto.IResp_AccountResetPwd=} [properties] Properties to set
         * @returns {DcgProto.Resp_AccountResetPwd} Resp_AccountResetPwd instance
         */
        Resp_AccountResetPwd.create = function create(properties) {
            return new Resp_AccountResetPwd(properties);
        };

        /**
         * Encodes the specified Resp_AccountResetPwd message. Does not implicitly {@link DcgProto.Resp_AccountResetPwd.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_AccountResetPwd
         * @static
         * @param {DcgProto.IResp_AccountResetPwd} m Resp_AccountResetPwd message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_AccountResetPwd.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            return w;
        };

        /**
         * Decodes a Resp_AccountResetPwd message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_AccountResetPwd
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_AccountResetPwd} Resp_AccountResetPwd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_AccountResetPwd.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_AccountResetPwd();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_AccountResetPwd message.
         * @function verify
         * @memberof DcgProto.Resp_AccountResetPwd
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_AccountResetPwd.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            return null;
        };

        return Resp_AccountResetPwd;
    })();

    DcgProto.Req_GameAccountLogin = (function() {

        /**
         * Properties of a Req_GameAccountLogin.
         * @memberof DcgProto
         * @interface IReq_GameAccountLogin
         * @property {string|null} [ThirdId] Req_GameAccountLogin ThirdId
         * @property {DcgProto.E_Platform|null} [Platform] Req_GameAccountLogin Platform
         * @property {DcgProto.E_ProductLine|null} [ProductLine] Req_GameAccountLogin ProductLine
         * @property {string|null} [ClientVersion] Req_GameAccountLogin ClientVersion
         * @property {string|null} [AccountToken] Req_GameAccountLogin AccountToken
         */

        /**
         * Constructs a new Req_GameAccountLogin.
         * @memberof DcgProto
         * @classdesc Represents a Req_GameAccountLogin.
         * @implements IReq_GameAccountLogin
         * @constructor
         * @param {DcgProto.IReq_GameAccountLogin=} [p] Properties to set
         */
        function Req_GameAccountLogin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_GameAccountLogin ThirdId.
         * @member {string} ThirdId
         * @memberof DcgProto.Req_GameAccountLogin
         * @instance
         */
        Req_GameAccountLogin.prototype.ThirdId = "";

        /**
         * Req_GameAccountLogin Platform.
         * @member {DcgProto.E_Platform} Platform
         * @memberof DcgProto.Req_GameAccountLogin
         * @instance
         */
        Req_GameAccountLogin.prototype.Platform = 0;

        /**
         * Req_GameAccountLogin ProductLine.
         * @member {DcgProto.E_ProductLine} ProductLine
         * @memberof DcgProto.Req_GameAccountLogin
         * @instance
         */
        Req_GameAccountLogin.prototype.ProductLine = 0;

        /**
         * Req_GameAccountLogin ClientVersion.
         * @member {string} ClientVersion
         * @memberof DcgProto.Req_GameAccountLogin
         * @instance
         */
        Req_GameAccountLogin.prototype.ClientVersion = "";

        /**
         * Req_GameAccountLogin AccountToken.
         * @member {string} AccountToken
         * @memberof DcgProto.Req_GameAccountLogin
         * @instance
         */
        Req_GameAccountLogin.prototype.AccountToken = "";

        /**
         * Creates a new Req_GameAccountLogin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_GameAccountLogin
         * @static
         * @param {DcgProto.IReq_GameAccountLogin=} [properties] Properties to set
         * @returns {DcgProto.Req_GameAccountLogin} Req_GameAccountLogin instance
         */
        Req_GameAccountLogin.create = function create(properties) {
            return new Req_GameAccountLogin(properties);
        };

        /**
         * Encodes the specified Req_GameAccountLogin message. Does not implicitly {@link DcgProto.Req_GameAccountLogin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_GameAccountLogin
         * @static
         * @param {DcgProto.IReq_GameAccountLogin} m Req_GameAccountLogin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_GameAccountLogin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ThirdId != null && Object.hasOwnProperty.call(m, "ThirdId"))
                w.uint32(10).string(m.ThirdId);
            if (m.Platform != null && Object.hasOwnProperty.call(m, "Platform"))
                w.uint32(16).int32(m.Platform);
            if (m.ProductLine != null && Object.hasOwnProperty.call(m, "ProductLine"))
                w.uint32(24).int32(m.ProductLine);
            if (m.ClientVersion != null && Object.hasOwnProperty.call(m, "ClientVersion"))
                w.uint32(34).string(m.ClientVersion);
            if (m.AccountToken != null && Object.hasOwnProperty.call(m, "AccountToken"))
                w.uint32(42).string(m.AccountToken);
            return w;
        };

        /**
         * Decodes a Req_GameAccountLogin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_GameAccountLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_GameAccountLogin} Req_GameAccountLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_GameAccountLogin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_GameAccountLogin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ThirdId = r.string();
                    break;
                case 2:
                    m.Platform = r.int32();
                    break;
                case 3:
                    m.ProductLine = r.int32();
                    break;
                case 4:
                    m.ClientVersion = r.string();
                    break;
                case 5:
                    m.AccountToken = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_GameAccountLogin message.
         * @function verify
         * @memberof DcgProto.Req_GameAccountLogin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_GameAccountLogin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ThirdId != null && m.hasOwnProperty("ThirdId")) {
                if (!$util.isString(m.ThirdId))
                    return "ThirdId: string expected";
            }
            if (m.Platform != null && m.hasOwnProperty("Platform")) {
                switch (m.Platform) {
                default:
                    return "Platform: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    break;
                }
            }
            if (m.ProductLine != null && m.hasOwnProperty("ProductLine")) {
                switch (m.ProductLine) {
                default:
                    return "ProductLine: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 9:
                case 10:
                    break;
                }
            }
            if (m.ClientVersion != null && m.hasOwnProperty("ClientVersion")) {
                if (!$util.isString(m.ClientVersion))
                    return "ClientVersion: string expected";
            }
            if (m.AccountToken != null && m.hasOwnProperty("AccountToken")) {
                if (!$util.isString(m.AccountToken))
                    return "AccountToken: string expected";
            }
            return null;
        };

        return Req_GameAccountLogin;
    })();

    DcgProto.Resp_GameAccountLogin = (function() {

        /**
         * Properties of a Resp_GameAccountLogin.
         * @memberof DcgProto
         * @interface IResp_GameAccountLogin
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_GameAccountLogin ErrorCode
         * @property {number|null} [ServerTime] Resp_GameAccountLogin ServerTime
         * @property {Long|null} [AccountId] Resp_GameAccountLogin AccountId
         * @property {string|null} [TokenId] Resp_GameAccountLogin TokenId
         * @property {Array.<DcgProto.IS_ServerInfo>|null} [ServerList] Resp_GameAccountLogin ServerList
         */

        /**
         * Constructs a new Resp_GameAccountLogin.
         * @memberof DcgProto
         * @classdesc Represents a Resp_GameAccountLogin.
         * @implements IResp_GameAccountLogin
         * @constructor
         * @param {DcgProto.IResp_GameAccountLogin=} [p] Properties to set
         */
        function Resp_GameAccountLogin(p) {
            this.ServerList = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_GameAccountLogin ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_GameAccountLogin
         * @instance
         */
        Resp_GameAccountLogin.prototype.ErrorCode = 0;

        /**
         * Resp_GameAccountLogin ServerTime.
         * @member {number} ServerTime
         * @memberof DcgProto.Resp_GameAccountLogin
         * @instance
         */
        Resp_GameAccountLogin.prototype.ServerTime = 0;

        /**
         * Resp_GameAccountLogin AccountId.
         * @member {Long} AccountId
         * @memberof DcgProto.Resp_GameAccountLogin
         * @instance
         */
        Resp_GameAccountLogin.prototype.AccountId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Resp_GameAccountLogin TokenId.
         * @member {string} TokenId
         * @memberof DcgProto.Resp_GameAccountLogin
         * @instance
         */
        Resp_GameAccountLogin.prototype.TokenId = "";

        /**
         * Resp_GameAccountLogin ServerList.
         * @member {Array.<DcgProto.IS_ServerInfo>} ServerList
         * @memberof DcgProto.Resp_GameAccountLogin
         * @instance
         */
        Resp_GameAccountLogin.prototype.ServerList = $util.emptyArray;

        /**
         * Creates a new Resp_GameAccountLogin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_GameAccountLogin
         * @static
         * @param {DcgProto.IResp_GameAccountLogin=} [properties] Properties to set
         * @returns {DcgProto.Resp_GameAccountLogin} Resp_GameAccountLogin instance
         */
        Resp_GameAccountLogin.create = function create(properties) {
            return new Resp_GameAccountLogin(properties);
        };

        /**
         * Encodes the specified Resp_GameAccountLogin message. Does not implicitly {@link DcgProto.Resp_GameAccountLogin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_GameAccountLogin
         * @static
         * @param {DcgProto.IResp_GameAccountLogin} m Resp_GameAccountLogin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_GameAccountLogin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.ServerTime != null && Object.hasOwnProperty.call(m, "ServerTime"))
                w.uint32(16).uint32(m.ServerTime);
            if (m.AccountId != null && Object.hasOwnProperty.call(m, "AccountId"))
                w.uint32(24).int64(m.AccountId);
            if (m.TokenId != null && Object.hasOwnProperty.call(m, "TokenId"))
                w.uint32(34).string(m.TokenId);
            if (m.ServerList != null && m.ServerList.length) {
                for (var i = 0; i < m.ServerList.length; ++i)
                    $root.DcgProto.S_ServerInfo.encode(m.ServerList[i], w.uint32(42).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Resp_GameAccountLogin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_GameAccountLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_GameAccountLogin} Resp_GameAccountLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_GameAccountLogin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_GameAccountLogin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.ServerTime = r.uint32();
                    break;
                case 3:
                    m.AccountId = r.int64();
                    break;
                case 4:
                    m.TokenId = r.string();
                    break;
                case 5:
                    if (!(m.ServerList && m.ServerList.length))
                        m.ServerList = [];
                    m.ServerList.push($root.DcgProto.S_ServerInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_GameAccountLogin message.
         * @function verify
         * @memberof DcgProto.Resp_GameAccountLogin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_GameAccountLogin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.ServerTime != null && m.hasOwnProperty("ServerTime")) {
                if (!$util.isInteger(m.ServerTime))
                    return "ServerTime: integer expected";
            }
            if (m.AccountId != null && m.hasOwnProperty("AccountId")) {
                if (!$util.isInteger(m.AccountId) && !(m.AccountId && $util.isInteger(m.AccountId.low) && $util.isInteger(m.AccountId.high)))
                    return "AccountId: integer|Long expected";
            }
            if (m.TokenId != null && m.hasOwnProperty("TokenId")) {
                if (!$util.isString(m.TokenId))
                    return "TokenId: string expected";
            }
            if (m.ServerList != null && m.hasOwnProperty("ServerList")) {
                if (!Array.isArray(m.ServerList))
                    return "ServerList: array expected";
                for (var i = 0; i < m.ServerList.length; ++i) {
                    {
                        var e = $root.DcgProto.S_ServerInfo.verify(m.ServerList[i]);
                        if (e)
                            return "ServerList." + e;
                    }
                }
            }
            return null;
        };

        return Resp_GameAccountLogin;
    })();

    DcgProto.S_RoleInfo = (function() {

        /**
         * Properties of a S_RoleInfo.
         * @memberof DcgProto
         * @interface IS_RoleInfo
         * @property {string|null} [NickName] S_RoleInfo NickName
         * @property {number|null} [AccountLevel] S_RoleInfo AccountLevel
         * @property {number|null} [Icon] S_RoleInfo Icon
         */

        /**
         * Constructs a new S_RoleInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_RoleInfo.
         * @implements IS_RoleInfo
         * @constructor
         * @param {DcgProto.IS_RoleInfo=} [p] Properties to set
         */
        function S_RoleInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_RoleInfo NickName.
         * @member {string} NickName
         * @memberof DcgProto.S_RoleInfo
         * @instance
         */
        S_RoleInfo.prototype.NickName = "";

        /**
         * S_RoleInfo AccountLevel.
         * @member {number} AccountLevel
         * @memberof DcgProto.S_RoleInfo
         * @instance
         */
        S_RoleInfo.prototype.AccountLevel = 0;

        /**
         * S_RoleInfo Icon.
         * @member {number} Icon
         * @memberof DcgProto.S_RoleInfo
         * @instance
         */
        S_RoleInfo.prototype.Icon = 0;

        /**
         * Creates a new S_RoleInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_RoleInfo
         * @static
         * @param {DcgProto.IS_RoleInfo=} [properties] Properties to set
         * @returns {DcgProto.S_RoleInfo} S_RoleInfo instance
         */
        S_RoleInfo.create = function create(properties) {
            return new S_RoleInfo(properties);
        };

        /**
         * Encodes the specified S_RoleInfo message. Does not implicitly {@link DcgProto.S_RoleInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_RoleInfo
         * @static
         * @param {DcgProto.IS_RoleInfo} m S_RoleInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_RoleInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.NickName != null && Object.hasOwnProperty.call(m, "NickName"))
                w.uint32(10).string(m.NickName);
            if (m.AccountLevel != null && Object.hasOwnProperty.call(m, "AccountLevel"))
                w.uint32(16).int32(m.AccountLevel);
            if (m.Icon != null && Object.hasOwnProperty.call(m, "Icon"))
                w.uint32(24).int32(m.Icon);
            return w;
        };

        /**
         * Decodes a S_RoleInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_RoleInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_RoleInfo} S_RoleInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_RoleInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_RoleInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.NickName = r.string();
                    break;
                case 2:
                    m.AccountLevel = r.int32();
                    break;
                case 3:
                    m.Icon = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_RoleInfo message.
         * @function verify
         * @memberof DcgProto.S_RoleInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_RoleInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.NickName != null && m.hasOwnProperty("NickName")) {
                if (!$util.isString(m.NickName))
                    return "NickName: string expected";
            }
            if (m.AccountLevel != null && m.hasOwnProperty("AccountLevel")) {
                if (!$util.isInteger(m.AccountLevel))
                    return "AccountLevel: integer expected";
            }
            if (m.Icon != null && m.hasOwnProperty("Icon")) {
                if (!$util.isInteger(m.Icon))
                    return "Icon: integer expected";
            }
            return null;
        };

        return S_RoleInfo;
    })();

    DcgProto.S_ServerInfo = (function() {

        /**
         * Properties of a S_ServerInfo.
         * @memberof DcgProto
         * @interface IS_ServerInfo
         * @property {number|null} [ServerId] S_ServerInfo ServerId
         * @property {number|null} [Area] S_ServerInfo Area
         * @property {string|null} [Name] S_ServerInfo Name
         * @property {string|null} [Ip] S_ServerInfo Ip
         * @property {number|null} [Port] S_ServerInfo Port
         * @property {DcgProto.E_ServerStatus|null} [Status] S_ServerInfo Status
         * @property {boolean|null} [IsNew] S_ServerInfo IsNew
         * @property {boolean|null} [IsHot] S_ServerInfo IsHot
         * @property {boolean|null} [IsRecommend] S_ServerInfo IsRecommend
         * @property {DcgProto.IS_RoleInfo|null} [RoleInfo] S_ServerInfo RoleInfo
         * @property {string|null} [Protocol] S_ServerInfo Protocol
         * @property {string|null} [ReplayURL] S_ServerInfo ReplayURL
         */

        /**
         * Constructs a new S_ServerInfo.
         * @memberof DcgProto
         * @classdesc Represents a S_ServerInfo.
         * @implements IS_ServerInfo
         * @constructor
         * @param {DcgProto.IS_ServerInfo=} [p] Properties to set
         */
        function S_ServerInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_ServerInfo ServerId.
         * @member {number} ServerId
         * @memberof DcgProto.S_ServerInfo
         * @instance
         */
        S_ServerInfo.prototype.ServerId = 0;

        /**
         * S_ServerInfo Area.
         * @member {number} Area
         * @memberof DcgProto.S_ServerInfo
         * @instance
         */
        S_ServerInfo.prototype.Area = 0;

        /**
         * S_ServerInfo Name.
         * @member {string} Name
         * @memberof DcgProto.S_ServerInfo
         * @instance
         */
        S_ServerInfo.prototype.Name = "";

        /**
         * S_ServerInfo Ip.
         * @member {string} Ip
         * @memberof DcgProto.S_ServerInfo
         * @instance
         */
        S_ServerInfo.prototype.Ip = "";

        /**
         * S_ServerInfo Port.
         * @member {number} Port
         * @memberof DcgProto.S_ServerInfo
         * @instance
         */
        S_ServerInfo.prototype.Port = 0;

        /**
         * S_ServerInfo Status.
         * @member {DcgProto.E_ServerStatus} Status
         * @memberof DcgProto.S_ServerInfo
         * @instance
         */
        S_ServerInfo.prototype.Status = 0;

        /**
         * S_ServerInfo IsNew.
         * @member {boolean} IsNew
         * @memberof DcgProto.S_ServerInfo
         * @instance
         */
        S_ServerInfo.prototype.IsNew = false;

        /**
         * S_ServerInfo IsHot.
         * @member {boolean} IsHot
         * @memberof DcgProto.S_ServerInfo
         * @instance
         */
        S_ServerInfo.prototype.IsHot = false;

        /**
         * S_ServerInfo IsRecommend.
         * @member {boolean} IsRecommend
         * @memberof DcgProto.S_ServerInfo
         * @instance
         */
        S_ServerInfo.prototype.IsRecommend = false;

        /**
         * S_ServerInfo RoleInfo.
         * @member {DcgProto.IS_RoleInfo|null|undefined} RoleInfo
         * @memberof DcgProto.S_ServerInfo
         * @instance
         */
        S_ServerInfo.prototype.RoleInfo = null;

        /**
         * S_ServerInfo Protocol.
         * @member {string} Protocol
         * @memberof DcgProto.S_ServerInfo
         * @instance
         */
        S_ServerInfo.prototype.Protocol = "";

        /**
         * S_ServerInfo ReplayURL.
         * @member {string} ReplayURL
         * @memberof DcgProto.S_ServerInfo
         * @instance
         */
        S_ServerInfo.prototype.ReplayURL = "";

        /**
         * Creates a new S_ServerInfo instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_ServerInfo
         * @static
         * @param {DcgProto.IS_ServerInfo=} [properties] Properties to set
         * @returns {DcgProto.S_ServerInfo} S_ServerInfo instance
         */
        S_ServerInfo.create = function create(properties) {
            return new S_ServerInfo(properties);
        };

        /**
         * Encodes the specified S_ServerInfo message. Does not implicitly {@link DcgProto.S_ServerInfo.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_ServerInfo
         * @static
         * @param {DcgProto.IS_ServerInfo} m S_ServerInfo message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_ServerInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ServerId != null && Object.hasOwnProperty.call(m, "ServerId"))
                w.uint32(8).int32(m.ServerId);
            if (m.Area != null && Object.hasOwnProperty.call(m, "Area"))
                w.uint32(16).int32(m.Area);
            if (m.Name != null && Object.hasOwnProperty.call(m, "Name"))
                w.uint32(26).string(m.Name);
            if (m.Ip != null && Object.hasOwnProperty.call(m, "Ip"))
                w.uint32(34).string(m.Ip);
            if (m.Port != null && Object.hasOwnProperty.call(m, "Port"))
                w.uint32(40).int32(m.Port);
            if (m.Status != null && Object.hasOwnProperty.call(m, "Status"))
                w.uint32(48).int32(m.Status);
            if (m.IsNew != null && Object.hasOwnProperty.call(m, "IsNew"))
                w.uint32(56).bool(m.IsNew);
            if (m.IsHot != null && Object.hasOwnProperty.call(m, "IsHot"))
                w.uint32(64).bool(m.IsHot);
            if (m.IsRecommend != null && Object.hasOwnProperty.call(m, "IsRecommend"))
                w.uint32(72).bool(m.IsRecommend);
            if (m.RoleInfo != null && Object.hasOwnProperty.call(m, "RoleInfo"))
                $root.DcgProto.S_RoleInfo.encode(m.RoleInfo, w.uint32(82).fork()).ldelim();
            if (m.Protocol != null && Object.hasOwnProperty.call(m, "Protocol"))
                w.uint32(90).string(m.Protocol);
            if (m.ReplayURL != null && Object.hasOwnProperty.call(m, "ReplayURL"))
                w.uint32(98).string(m.ReplayURL);
            return w;
        };

        /**
         * Decodes a S_ServerInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_ServerInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_ServerInfo} S_ServerInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_ServerInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_ServerInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ServerId = r.int32();
                    break;
                case 2:
                    m.Area = r.int32();
                    break;
                case 3:
                    m.Name = r.string();
                    break;
                case 4:
                    m.Ip = r.string();
                    break;
                case 5:
                    m.Port = r.int32();
                    break;
                case 6:
                    m.Status = r.int32();
                    break;
                case 7:
                    m.IsNew = r.bool();
                    break;
                case 8:
                    m.IsHot = r.bool();
                    break;
                case 9:
                    m.IsRecommend = r.bool();
                    break;
                case 10:
                    m.RoleInfo = $root.DcgProto.S_RoleInfo.decode(r, r.uint32());
                    break;
                case 11:
                    m.Protocol = r.string();
                    break;
                case 12:
                    m.ReplayURL = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_ServerInfo message.
         * @function verify
         * @memberof DcgProto.S_ServerInfo
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_ServerInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ServerId != null && m.hasOwnProperty("ServerId")) {
                if (!$util.isInteger(m.ServerId))
                    return "ServerId: integer expected";
            }
            if (m.Area != null && m.hasOwnProperty("Area")) {
                if (!$util.isInteger(m.Area))
                    return "Area: integer expected";
            }
            if (m.Name != null && m.hasOwnProperty("Name")) {
                if (!$util.isString(m.Name))
                    return "Name: string expected";
            }
            if (m.Ip != null && m.hasOwnProperty("Ip")) {
                if (!$util.isString(m.Ip))
                    return "Ip: string expected";
            }
            if (m.Port != null && m.hasOwnProperty("Port")) {
                if (!$util.isInteger(m.Port))
                    return "Port: integer expected";
            }
            if (m.Status != null && m.hasOwnProperty("Status")) {
                switch (m.Status) {
                default:
                    return "Status: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.IsNew != null && m.hasOwnProperty("IsNew")) {
                if (typeof m.IsNew !== "boolean")
                    return "IsNew: boolean expected";
            }
            if (m.IsHot != null && m.hasOwnProperty("IsHot")) {
                if (typeof m.IsHot !== "boolean")
                    return "IsHot: boolean expected";
            }
            if (m.IsRecommend != null && m.hasOwnProperty("IsRecommend")) {
                if (typeof m.IsRecommend !== "boolean")
                    return "IsRecommend: boolean expected";
            }
            if (m.RoleInfo != null && m.hasOwnProperty("RoleInfo")) {
                {
                    var e = $root.DcgProto.S_RoleInfo.verify(m.RoleInfo);
                    if (e)
                        return "RoleInfo." + e;
                }
            }
            if (m.Protocol != null && m.hasOwnProperty("Protocol")) {
                if (!$util.isString(m.Protocol))
                    return "Protocol: string expected";
            }
            if (m.ReplayURL != null && m.hasOwnProperty("ReplayURL")) {
                if (!$util.isString(m.ReplayURL))
                    return "ReplayURL: string expected";
            }
            return null;
        };

        return S_ServerInfo;
    })();

    DcgProto.Req_WxLogin = (function() {

        /**
         * Properties of a Req_WxLogin.
         * @memberof DcgProto
         * @interface IReq_WxLogin
         * @property {string|null} [JsCode] Req_WxLogin JsCode
         * @property {number|null} [Game] Req_WxLogin Game
         */

        /**
         * Constructs a new Req_WxLogin.
         * @memberof DcgProto
         * @classdesc Represents a Req_WxLogin.
         * @implements IReq_WxLogin
         * @constructor
         * @param {DcgProto.IReq_WxLogin=} [p] Properties to set
         */
        function Req_WxLogin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_WxLogin JsCode.
         * @member {string} JsCode
         * @memberof DcgProto.Req_WxLogin
         * @instance
         */
        Req_WxLogin.prototype.JsCode = "";

        /**
         * Req_WxLogin Game.
         * @member {number} Game
         * @memberof DcgProto.Req_WxLogin
         * @instance
         */
        Req_WxLogin.prototype.Game = 0;

        /**
         * Creates a new Req_WxLogin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_WxLogin
         * @static
         * @param {DcgProto.IReq_WxLogin=} [properties] Properties to set
         * @returns {DcgProto.Req_WxLogin} Req_WxLogin instance
         */
        Req_WxLogin.create = function create(properties) {
            return new Req_WxLogin(properties);
        };

        /**
         * Encodes the specified Req_WxLogin message. Does not implicitly {@link DcgProto.Req_WxLogin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_WxLogin
         * @static
         * @param {DcgProto.IReq_WxLogin} m Req_WxLogin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_WxLogin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.JsCode != null && Object.hasOwnProperty.call(m, "JsCode"))
                w.uint32(10).string(m.JsCode);
            if (m.Game != null && Object.hasOwnProperty.call(m, "Game"))
                w.uint32(16).int32(m.Game);
            return w;
        };

        /**
         * Decodes a Req_WxLogin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_WxLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_WxLogin} Req_WxLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_WxLogin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_WxLogin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.JsCode = r.string();
                    break;
                case 2:
                    m.Game = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_WxLogin message.
         * @function verify
         * @memberof DcgProto.Req_WxLogin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_WxLogin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.JsCode != null && m.hasOwnProperty("JsCode")) {
                if (!$util.isString(m.JsCode))
                    return "JsCode: string expected";
            }
            if (m.Game != null && m.hasOwnProperty("Game")) {
                if (!$util.isInteger(m.Game))
                    return "Game: integer expected";
            }
            return null;
        };

        return Req_WxLogin;
    })();

    DcgProto.S_WxResp = (function() {

        /**
         * Properties of a S_WxResp.
         * @memberof DcgProto
         * @interface IS_WxResp
         * @property {string|null} [OpenId] S_WxResp OpenId
         * @property {string|null} [Session_Key] S_WxResp Session_Key
         * @property {string|null} [UnionId] S_WxResp UnionId
         * @property {number|null} [ErrCode] S_WxResp ErrCode
         * @property {string|null} [ErrMsg] S_WxResp ErrMsg
         */

        /**
         * Constructs a new S_WxResp.
         * @memberof DcgProto
         * @classdesc Represents a S_WxResp.
         * @implements IS_WxResp
         * @constructor
         * @param {DcgProto.IS_WxResp=} [p] Properties to set
         */
        function S_WxResp(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * S_WxResp OpenId.
         * @member {string} OpenId
         * @memberof DcgProto.S_WxResp
         * @instance
         */
        S_WxResp.prototype.OpenId = "";

        /**
         * S_WxResp Session_Key.
         * @member {string} Session_Key
         * @memberof DcgProto.S_WxResp
         * @instance
         */
        S_WxResp.prototype.Session_Key = "";

        /**
         * S_WxResp UnionId.
         * @member {string} UnionId
         * @memberof DcgProto.S_WxResp
         * @instance
         */
        S_WxResp.prototype.UnionId = "";

        /**
         * S_WxResp ErrCode.
         * @member {number} ErrCode
         * @memberof DcgProto.S_WxResp
         * @instance
         */
        S_WxResp.prototype.ErrCode = 0;

        /**
         * S_WxResp ErrMsg.
         * @member {string} ErrMsg
         * @memberof DcgProto.S_WxResp
         * @instance
         */
        S_WxResp.prototype.ErrMsg = "";

        /**
         * Creates a new S_WxResp instance using the specified properties.
         * @function create
         * @memberof DcgProto.S_WxResp
         * @static
         * @param {DcgProto.IS_WxResp=} [properties] Properties to set
         * @returns {DcgProto.S_WxResp} S_WxResp instance
         */
        S_WxResp.create = function create(properties) {
            return new S_WxResp(properties);
        };

        /**
         * Encodes the specified S_WxResp message. Does not implicitly {@link DcgProto.S_WxResp.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.S_WxResp
         * @static
         * @param {DcgProto.IS_WxResp} m S_WxResp message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        S_WxResp.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.OpenId != null && Object.hasOwnProperty.call(m, "OpenId"))
                w.uint32(18).string(m.OpenId);
            if (m.Session_Key != null && Object.hasOwnProperty.call(m, "Session_Key"))
                w.uint32(26).string(m.Session_Key);
            if (m.UnionId != null && Object.hasOwnProperty.call(m, "UnionId"))
                w.uint32(34).string(m.UnionId);
            if (m.ErrCode != null && Object.hasOwnProperty.call(m, "ErrCode"))
                w.uint32(40).int32(m.ErrCode);
            if (m.ErrMsg != null && Object.hasOwnProperty.call(m, "ErrMsg"))
                w.uint32(50).string(m.ErrMsg);
            return w;
        };

        /**
         * Decodes a S_WxResp message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.S_WxResp
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.S_WxResp} S_WxResp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        S_WxResp.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.S_WxResp();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 2:
                    m.OpenId = r.string();
                    break;
                case 3:
                    m.Session_Key = r.string();
                    break;
                case 4:
                    m.UnionId = r.string();
                    break;
                case 5:
                    m.ErrCode = r.int32();
                    break;
                case 6:
                    m.ErrMsg = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a S_WxResp message.
         * @function verify
         * @memberof DcgProto.S_WxResp
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        S_WxResp.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.OpenId != null && m.hasOwnProperty("OpenId")) {
                if (!$util.isString(m.OpenId))
                    return "OpenId: string expected";
            }
            if (m.Session_Key != null && m.hasOwnProperty("Session_Key")) {
                if (!$util.isString(m.Session_Key))
                    return "Session_Key: string expected";
            }
            if (m.UnionId != null && m.hasOwnProperty("UnionId")) {
                if (!$util.isString(m.UnionId))
                    return "UnionId: string expected";
            }
            if (m.ErrCode != null && m.hasOwnProperty("ErrCode")) {
                if (!$util.isInteger(m.ErrCode))
                    return "ErrCode: integer expected";
            }
            if (m.ErrMsg != null && m.hasOwnProperty("ErrMsg")) {
                if (!$util.isString(m.ErrMsg))
                    return "ErrMsg: string expected";
            }
            return null;
        };

        return S_WxResp;
    })();

    DcgProto.Resp_WxLogin = (function() {

        /**
         * Properties of a Resp_WxLogin.
         * @memberof DcgProto
         * @interface IResp_WxLogin
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_WxLogin ErrorCode
         * @property {DcgProto.IS_WxResp|null} [WxResp] Resp_WxLogin WxResp
         */

        /**
         * Constructs a new Resp_WxLogin.
         * @memberof DcgProto
         * @classdesc Represents a Resp_WxLogin.
         * @implements IResp_WxLogin
         * @constructor
         * @param {DcgProto.IResp_WxLogin=} [p] Properties to set
         */
        function Resp_WxLogin(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_WxLogin ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_WxLogin
         * @instance
         */
        Resp_WxLogin.prototype.ErrorCode = 0;

        /**
         * Resp_WxLogin WxResp.
         * @member {DcgProto.IS_WxResp|null|undefined} WxResp
         * @memberof DcgProto.Resp_WxLogin
         * @instance
         */
        Resp_WxLogin.prototype.WxResp = null;

        /**
         * Creates a new Resp_WxLogin instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_WxLogin
         * @static
         * @param {DcgProto.IResp_WxLogin=} [properties] Properties to set
         * @returns {DcgProto.Resp_WxLogin} Resp_WxLogin instance
         */
        Resp_WxLogin.create = function create(properties) {
            return new Resp_WxLogin(properties);
        };

        /**
         * Encodes the specified Resp_WxLogin message. Does not implicitly {@link DcgProto.Resp_WxLogin.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_WxLogin
         * @static
         * @param {DcgProto.IResp_WxLogin} m Resp_WxLogin message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_WxLogin.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.WxResp != null && Object.hasOwnProperty.call(m, "WxResp"))
                $root.DcgProto.S_WxResp.encode(m.WxResp, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_WxLogin message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_WxLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_WxLogin} Resp_WxLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_WxLogin.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_WxLogin();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.WxResp = $root.DcgProto.S_WxResp.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_WxLogin message.
         * @function verify
         * @memberof DcgProto.Resp_WxLogin
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_WxLogin.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.WxResp != null && m.hasOwnProperty("WxResp")) {
                {
                    var e = $root.DcgProto.S_WxResp.verify(m.WxResp);
                    if (e)
                        return "WxResp." + e;
                }
            }
            return null;
        };

        return Resp_WxLogin;
    })();

    DcgProto.Req_WxDel = (function() {

        /**
         * Properties of a Req_WxDel.
         * @memberof DcgProto
         * @interface IReq_WxDel
         * @property {Long|null} [AccountId] Req_WxDel AccountId
         * @property {string|null} [ThirdId] Req_WxDel ThirdId
         */

        /**
         * Constructs a new Req_WxDel.
         * @memberof DcgProto
         * @classdesc Represents a Req_WxDel.
         * @implements IReq_WxDel
         * @constructor
         * @param {DcgProto.IReq_WxDel=} [p] Properties to set
         */
        function Req_WxDel(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_WxDel AccountId.
         * @member {Long} AccountId
         * @memberof DcgProto.Req_WxDel
         * @instance
         */
        Req_WxDel.prototype.AccountId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_WxDel ThirdId.
         * @member {string} ThirdId
         * @memberof DcgProto.Req_WxDel
         * @instance
         */
        Req_WxDel.prototype.ThirdId = "";

        /**
         * Creates a new Req_WxDel instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_WxDel
         * @static
         * @param {DcgProto.IReq_WxDel=} [properties] Properties to set
         * @returns {DcgProto.Req_WxDel} Req_WxDel instance
         */
        Req_WxDel.create = function create(properties) {
            return new Req_WxDel(properties);
        };

        /**
         * Encodes the specified Req_WxDel message. Does not implicitly {@link DcgProto.Req_WxDel.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_WxDel
         * @static
         * @param {DcgProto.IReq_WxDel} m Req_WxDel message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_WxDel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.AccountId != null && Object.hasOwnProperty.call(m, "AccountId"))
                w.uint32(8).int64(m.AccountId);
            if (m.ThirdId != null && Object.hasOwnProperty.call(m, "ThirdId"))
                w.uint32(18).string(m.ThirdId);
            return w;
        };

        /**
         * Decodes a Req_WxDel message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_WxDel
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_WxDel} Req_WxDel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_WxDel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_WxDel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.AccountId = r.int64();
                    break;
                case 2:
                    m.ThirdId = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_WxDel message.
         * @function verify
         * @memberof DcgProto.Req_WxDel
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_WxDel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.AccountId != null && m.hasOwnProperty("AccountId")) {
                if (!$util.isInteger(m.AccountId) && !(m.AccountId && $util.isInteger(m.AccountId.low) && $util.isInteger(m.AccountId.high)))
                    return "AccountId: integer|Long expected";
            }
            if (m.ThirdId != null && m.hasOwnProperty("ThirdId")) {
                if (!$util.isString(m.ThirdId))
                    return "ThirdId: string expected";
            }
            return null;
        };

        return Req_WxDel;
    })();

    DcgProto.Resp_WxDel = (function() {

        /**
         * Properties of a Resp_WxDel.
         * @memberof DcgProto
         * @interface IResp_WxDel
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_WxDel ErrorCode
         */

        /**
         * Constructs a new Resp_WxDel.
         * @memberof DcgProto
         * @classdesc Represents a Resp_WxDel.
         * @implements IResp_WxDel
         * @constructor
         * @param {DcgProto.IResp_WxDel=} [p] Properties to set
         */
        function Resp_WxDel(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_WxDel ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_WxDel
         * @instance
         */
        Resp_WxDel.prototype.ErrorCode = 0;

        /**
         * Creates a new Resp_WxDel instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_WxDel
         * @static
         * @param {DcgProto.IResp_WxDel=} [properties] Properties to set
         * @returns {DcgProto.Resp_WxDel} Resp_WxDel instance
         */
        Resp_WxDel.create = function create(properties) {
            return new Resp_WxDel(properties);
        };

        /**
         * Encodes the specified Resp_WxDel message. Does not implicitly {@link DcgProto.Resp_WxDel.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_WxDel
         * @static
         * @param {DcgProto.IResp_WxDel} m Resp_WxDel message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_WxDel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            return w;
        };

        /**
         * Decodes a Resp_WxDel message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_WxDel
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_WxDel} Resp_WxDel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_WxDel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_WxDel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_WxDel message.
         * @function verify
         * @memberof DcgProto.Resp_WxDel
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_WxDel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            return null;
        };

        return Resp_WxDel;
    })();

    DcgProto.Req_GetNotice = (function() {

        /**
         * Properties of a Req_GetNotice.
         * @memberof DcgProto
         * @interface IReq_GetNotice
         * @property {DcgProto.E_ProductLine|null} [ProductLine] Req_GetNotice ProductLine
         */

        /**
         * Constructs a new Req_GetNotice.
         * @memberof DcgProto
         * @classdesc Represents a Req_GetNotice.
         * @implements IReq_GetNotice
         * @constructor
         * @param {DcgProto.IReq_GetNotice=} [p] Properties to set
         */
        function Req_GetNotice(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_GetNotice ProductLine.
         * @member {DcgProto.E_ProductLine} ProductLine
         * @memberof DcgProto.Req_GetNotice
         * @instance
         */
        Req_GetNotice.prototype.ProductLine = 0;

        /**
         * Creates a new Req_GetNotice instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_GetNotice
         * @static
         * @param {DcgProto.IReq_GetNotice=} [properties] Properties to set
         * @returns {DcgProto.Req_GetNotice} Req_GetNotice instance
         */
        Req_GetNotice.create = function create(properties) {
            return new Req_GetNotice(properties);
        };

        /**
         * Encodes the specified Req_GetNotice message. Does not implicitly {@link DcgProto.Req_GetNotice.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_GetNotice
         * @static
         * @param {DcgProto.IReq_GetNotice} m Req_GetNotice message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_GetNotice.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ProductLine != null && Object.hasOwnProperty.call(m, "ProductLine"))
                w.uint32(8).int32(m.ProductLine);
            return w;
        };

        /**
         * Decodes a Req_GetNotice message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_GetNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_GetNotice} Req_GetNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_GetNotice.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_GetNotice();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ProductLine = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_GetNotice message.
         * @function verify
         * @memberof DcgProto.Req_GetNotice
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_GetNotice.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ProductLine != null && m.hasOwnProperty("ProductLine")) {
                switch (m.ProductLine) {
                default:
                    return "ProductLine: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 9:
                case 10:
                    break;
                }
            }
            return null;
        };

        return Req_GetNotice;
    })();

    DcgProto.Resp_GetNotice = (function() {

        /**
         * Properties of a Resp_GetNotice.
         * @memberof DcgProto
         * @interface IResp_GetNotice
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_GetNotice ErrorCode
         * @property {string|null} [Notice] Resp_GetNotice Notice
         */

        /**
         * Constructs a new Resp_GetNotice.
         * @memberof DcgProto
         * @classdesc Represents a Resp_GetNotice.
         * @implements IResp_GetNotice
         * @constructor
         * @param {DcgProto.IResp_GetNotice=} [p] Properties to set
         */
        function Resp_GetNotice(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_GetNotice ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_GetNotice
         * @instance
         */
        Resp_GetNotice.prototype.ErrorCode = 0;

        /**
         * Resp_GetNotice Notice.
         * @member {string} Notice
         * @memberof DcgProto.Resp_GetNotice
         * @instance
         */
        Resp_GetNotice.prototype.Notice = "";

        /**
         * Creates a new Resp_GetNotice instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_GetNotice
         * @static
         * @param {DcgProto.IResp_GetNotice=} [properties] Properties to set
         * @returns {DcgProto.Resp_GetNotice} Resp_GetNotice instance
         */
        Resp_GetNotice.create = function create(properties) {
            return new Resp_GetNotice(properties);
        };

        /**
         * Encodes the specified Resp_GetNotice message. Does not implicitly {@link DcgProto.Resp_GetNotice.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_GetNotice
         * @static
         * @param {DcgProto.IResp_GetNotice} m Resp_GetNotice message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_GetNotice.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Notice != null && Object.hasOwnProperty.call(m, "Notice"))
                w.uint32(18).string(m.Notice);
            return w;
        };

        /**
         * Decodes a Resp_GetNotice message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_GetNotice
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_GetNotice} Resp_GetNotice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_GetNotice.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_GetNotice();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Notice = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_GetNotice message.
         * @function verify
         * @memberof DcgProto.Resp_GetNotice
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_GetNotice.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Notice != null && m.hasOwnProperty("Notice")) {
                if (!$util.isString(m.Notice))
                    return "Notice: string expected";
            }
            return null;
        };

        return Resp_GetNotice;
    })();

    DcgProto.Req_BanDaiBindAccount = (function() {

        /**
         * Properties of a Req_BanDaiBindAccount.
         * @memberof DcgProto
         * @interface IReq_BanDaiBindAccount
         * @property {string|null} [ThirdId] Req_BanDaiBindAccount ThirdId
         * @property {string|null} [AccountToken] Req_BanDaiBindAccount AccountToken
         * @property {Long|null} [AccountId] Req_BanDaiBindAccount AccountId
         */

        /**
         * Constructs a new Req_BanDaiBindAccount.
         * @memberof DcgProto
         * @classdesc Represents a Req_BanDaiBindAccount.
         * @implements IReq_BanDaiBindAccount
         * @constructor
         * @param {DcgProto.IReq_BanDaiBindAccount=} [p] Properties to set
         */
        function Req_BanDaiBindAccount(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_BanDaiBindAccount ThirdId.
         * @member {string} ThirdId
         * @memberof DcgProto.Req_BanDaiBindAccount
         * @instance
         */
        Req_BanDaiBindAccount.prototype.ThirdId = "";

        /**
         * Req_BanDaiBindAccount AccountToken.
         * @member {string} AccountToken
         * @memberof DcgProto.Req_BanDaiBindAccount
         * @instance
         */
        Req_BanDaiBindAccount.prototype.AccountToken = "";

        /**
         * Req_BanDaiBindAccount AccountId.
         * @member {Long} AccountId
         * @memberof DcgProto.Req_BanDaiBindAccount
         * @instance
         */
        Req_BanDaiBindAccount.prototype.AccountId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_BanDaiBindAccount instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_BanDaiBindAccount
         * @static
         * @param {DcgProto.IReq_BanDaiBindAccount=} [properties] Properties to set
         * @returns {DcgProto.Req_BanDaiBindAccount} Req_BanDaiBindAccount instance
         */
        Req_BanDaiBindAccount.create = function create(properties) {
            return new Req_BanDaiBindAccount(properties);
        };

        /**
         * Encodes the specified Req_BanDaiBindAccount message. Does not implicitly {@link DcgProto.Req_BanDaiBindAccount.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_BanDaiBindAccount
         * @static
         * @param {DcgProto.IReq_BanDaiBindAccount} m Req_BanDaiBindAccount message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_BanDaiBindAccount.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ThirdId != null && Object.hasOwnProperty.call(m, "ThirdId"))
                w.uint32(10).string(m.ThirdId);
            if (m.AccountToken != null && Object.hasOwnProperty.call(m, "AccountToken"))
                w.uint32(18).string(m.AccountToken);
            if (m.AccountId != null && Object.hasOwnProperty.call(m, "AccountId"))
                w.uint32(24).int64(m.AccountId);
            return w;
        };

        /**
         * Decodes a Req_BanDaiBindAccount message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_BanDaiBindAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_BanDaiBindAccount} Req_BanDaiBindAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_BanDaiBindAccount.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_BanDaiBindAccount();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ThirdId = r.string();
                    break;
                case 2:
                    m.AccountToken = r.string();
                    break;
                case 3:
                    m.AccountId = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_BanDaiBindAccount message.
         * @function verify
         * @memberof DcgProto.Req_BanDaiBindAccount
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_BanDaiBindAccount.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ThirdId != null && m.hasOwnProperty("ThirdId")) {
                if (!$util.isString(m.ThirdId))
                    return "ThirdId: string expected";
            }
            if (m.AccountToken != null && m.hasOwnProperty("AccountToken")) {
                if (!$util.isString(m.AccountToken))
                    return "AccountToken: string expected";
            }
            if (m.AccountId != null && m.hasOwnProperty("AccountId")) {
                if (!$util.isInteger(m.AccountId) && !(m.AccountId && $util.isInteger(m.AccountId.low) && $util.isInteger(m.AccountId.high)))
                    return "AccountId: integer|Long expected";
            }
            return null;
        };

        return Req_BanDaiBindAccount;
    })();

    DcgProto.Resp_BanDaiBindAccount = (function() {

        /**
         * Properties of a Resp_BanDaiBindAccount.
         * @memberof DcgProto
         * @interface IResp_BanDaiBindAccount
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_BanDaiBindAccount ErrorCode
         */

        /**
         * Constructs a new Resp_BanDaiBindAccount.
         * @memberof DcgProto
         * @classdesc Represents a Resp_BanDaiBindAccount.
         * @implements IResp_BanDaiBindAccount
         * @constructor
         * @param {DcgProto.IResp_BanDaiBindAccount=} [p] Properties to set
         */
        function Resp_BanDaiBindAccount(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_BanDaiBindAccount ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_BanDaiBindAccount
         * @instance
         */
        Resp_BanDaiBindAccount.prototype.ErrorCode = 0;

        /**
         * Creates a new Resp_BanDaiBindAccount instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_BanDaiBindAccount
         * @static
         * @param {DcgProto.IResp_BanDaiBindAccount=} [properties] Properties to set
         * @returns {DcgProto.Resp_BanDaiBindAccount} Resp_BanDaiBindAccount instance
         */
        Resp_BanDaiBindAccount.create = function create(properties) {
            return new Resp_BanDaiBindAccount(properties);
        };

        /**
         * Encodes the specified Resp_BanDaiBindAccount message. Does not implicitly {@link DcgProto.Resp_BanDaiBindAccount.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_BanDaiBindAccount
         * @static
         * @param {DcgProto.IResp_BanDaiBindAccount} m Resp_BanDaiBindAccount message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_BanDaiBindAccount.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            return w;
        };

        /**
         * Decodes a Resp_BanDaiBindAccount message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_BanDaiBindAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_BanDaiBindAccount} Resp_BanDaiBindAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_BanDaiBindAccount.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_BanDaiBindAccount();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_BanDaiBindAccount message.
         * @function verify
         * @memberof DcgProto.Resp_BanDaiBindAccount
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_BanDaiBindAccount.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            return null;
        };

        return Resp_BanDaiBindAccount;
    })();

    DcgProto.Req_BanDaiDelAccount = (function() {

        /**
         * Properties of a Req_BanDaiDelAccount.
         * @memberof DcgProto
         * @interface IReq_BanDaiDelAccount
         * @property {string|null} [ThirdId] Req_BanDaiDelAccount ThirdId
         * @property {string|null} [AccountToken] Req_BanDaiDelAccount AccountToken
         */

        /**
         * Constructs a new Req_BanDaiDelAccount.
         * @memberof DcgProto
         * @classdesc Represents a Req_BanDaiDelAccount.
         * @implements IReq_BanDaiDelAccount
         * @constructor
         * @param {DcgProto.IReq_BanDaiDelAccount=} [p] Properties to set
         */
        function Req_BanDaiDelAccount(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_BanDaiDelAccount ThirdId.
         * @member {string} ThirdId
         * @memberof DcgProto.Req_BanDaiDelAccount
         * @instance
         */
        Req_BanDaiDelAccount.prototype.ThirdId = "";

        /**
         * Req_BanDaiDelAccount AccountToken.
         * @member {string} AccountToken
         * @memberof DcgProto.Req_BanDaiDelAccount
         * @instance
         */
        Req_BanDaiDelAccount.prototype.AccountToken = "";

        /**
         * Creates a new Req_BanDaiDelAccount instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_BanDaiDelAccount
         * @static
         * @param {DcgProto.IReq_BanDaiDelAccount=} [properties] Properties to set
         * @returns {DcgProto.Req_BanDaiDelAccount} Req_BanDaiDelAccount instance
         */
        Req_BanDaiDelAccount.create = function create(properties) {
            return new Req_BanDaiDelAccount(properties);
        };

        /**
         * Encodes the specified Req_BanDaiDelAccount message. Does not implicitly {@link DcgProto.Req_BanDaiDelAccount.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_BanDaiDelAccount
         * @static
         * @param {DcgProto.IReq_BanDaiDelAccount} m Req_BanDaiDelAccount message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_BanDaiDelAccount.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ThirdId != null && Object.hasOwnProperty.call(m, "ThirdId"))
                w.uint32(10).string(m.ThirdId);
            if (m.AccountToken != null && Object.hasOwnProperty.call(m, "AccountToken"))
                w.uint32(18).string(m.AccountToken);
            return w;
        };

        /**
         * Decodes a Req_BanDaiDelAccount message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_BanDaiDelAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_BanDaiDelAccount} Req_BanDaiDelAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_BanDaiDelAccount.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_BanDaiDelAccount();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ThirdId = r.string();
                    break;
                case 2:
                    m.AccountToken = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_BanDaiDelAccount message.
         * @function verify
         * @memberof DcgProto.Req_BanDaiDelAccount
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_BanDaiDelAccount.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ThirdId != null && m.hasOwnProperty("ThirdId")) {
                if (!$util.isString(m.ThirdId))
                    return "ThirdId: string expected";
            }
            if (m.AccountToken != null && m.hasOwnProperty("AccountToken")) {
                if (!$util.isString(m.AccountToken))
                    return "AccountToken: string expected";
            }
            return null;
        };

        return Req_BanDaiDelAccount;
    })();

    DcgProto.Resp_BanDaiDelAccount = (function() {

        /**
         * Properties of a Resp_BanDaiDelAccount.
         * @memberof DcgProto
         * @interface IResp_BanDaiDelAccount
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_BanDaiDelAccount ErrorCode
         */

        /**
         * Constructs a new Resp_BanDaiDelAccount.
         * @memberof DcgProto
         * @classdesc Represents a Resp_BanDaiDelAccount.
         * @implements IResp_BanDaiDelAccount
         * @constructor
         * @param {DcgProto.IResp_BanDaiDelAccount=} [p] Properties to set
         */
        function Resp_BanDaiDelAccount(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_BanDaiDelAccount ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_BanDaiDelAccount
         * @instance
         */
        Resp_BanDaiDelAccount.prototype.ErrorCode = 0;

        /**
         * Creates a new Resp_BanDaiDelAccount instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_BanDaiDelAccount
         * @static
         * @param {DcgProto.IResp_BanDaiDelAccount=} [properties] Properties to set
         * @returns {DcgProto.Resp_BanDaiDelAccount} Resp_BanDaiDelAccount instance
         */
        Resp_BanDaiDelAccount.create = function create(properties) {
            return new Resp_BanDaiDelAccount(properties);
        };

        /**
         * Encodes the specified Resp_BanDaiDelAccount message. Does not implicitly {@link DcgProto.Resp_BanDaiDelAccount.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_BanDaiDelAccount
         * @static
         * @param {DcgProto.IResp_BanDaiDelAccount} m Resp_BanDaiDelAccount message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_BanDaiDelAccount.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            return w;
        };

        /**
         * Decodes a Resp_BanDaiDelAccount message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_BanDaiDelAccount
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_BanDaiDelAccount} Resp_BanDaiDelAccount
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_BanDaiDelAccount.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_BanDaiDelAccount();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_BanDaiDelAccount message.
         * @function verify
         * @memberof DcgProto.Resp_BanDaiDelAccount
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_BanDaiDelAccount.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            return null;
        };

        return Resp_BanDaiDelAccount;
    })();

    DcgProto.Req_Remote2TsBattleCreate = (function() {

        /**
         * Properties of a Req_Remote2TsBattleCreate.
         * @memberof DcgProto
         * @interface IReq_Remote2TsBattleCreate
         */

        /**
         * Constructs a new Req_Remote2TsBattleCreate.
         * @memberof DcgProto
         * @classdesc Represents a Req_Remote2TsBattleCreate.
         * @implements IReq_Remote2TsBattleCreate
         * @constructor
         * @param {DcgProto.IReq_Remote2TsBattleCreate=} [p] Properties to set
         */
        function Req_Remote2TsBattleCreate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Req_Remote2TsBattleCreate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_Remote2TsBattleCreate
         * @static
         * @param {DcgProto.IReq_Remote2TsBattleCreate=} [properties] Properties to set
         * @returns {DcgProto.Req_Remote2TsBattleCreate} Req_Remote2TsBattleCreate instance
         */
        Req_Remote2TsBattleCreate.create = function create(properties) {
            return new Req_Remote2TsBattleCreate(properties);
        };

        /**
         * Encodes the specified Req_Remote2TsBattleCreate message. Does not implicitly {@link DcgProto.Req_Remote2TsBattleCreate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_Remote2TsBattleCreate
         * @static
         * @param {DcgProto.IReq_Remote2TsBattleCreate} m Req_Remote2TsBattleCreate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_Remote2TsBattleCreate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Req_Remote2TsBattleCreate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_Remote2TsBattleCreate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_Remote2TsBattleCreate} Req_Remote2TsBattleCreate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_Remote2TsBattleCreate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_Remote2TsBattleCreate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_Remote2TsBattleCreate message.
         * @function verify
         * @memberof DcgProto.Req_Remote2TsBattleCreate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_Remote2TsBattleCreate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Req_Remote2TsBattleCreate;
    })();

    DcgProto.Resp_Remote2TsBattleCreate = (function() {

        /**
         * Properties of a Resp_Remote2TsBattleCreate.
         * @memberof DcgProto
         * @interface IResp_Remote2TsBattleCreate
         */

        /**
         * Constructs a new Resp_Remote2TsBattleCreate.
         * @memberof DcgProto
         * @classdesc Represents a Resp_Remote2TsBattleCreate.
         * @implements IResp_Remote2TsBattleCreate
         * @constructor
         * @param {DcgProto.IResp_Remote2TsBattleCreate=} [p] Properties to set
         */
        function Resp_Remote2TsBattleCreate(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Resp_Remote2TsBattleCreate instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_Remote2TsBattleCreate
         * @static
         * @param {DcgProto.IResp_Remote2TsBattleCreate=} [properties] Properties to set
         * @returns {DcgProto.Resp_Remote2TsBattleCreate} Resp_Remote2TsBattleCreate instance
         */
        Resp_Remote2TsBattleCreate.create = function create(properties) {
            return new Resp_Remote2TsBattleCreate(properties);
        };

        /**
         * Encodes the specified Resp_Remote2TsBattleCreate message. Does not implicitly {@link DcgProto.Resp_Remote2TsBattleCreate.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_Remote2TsBattleCreate
         * @static
         * @param {DcgProto.IResp_Remote2TsBattleCreate} m Resp_Remote2TsBattleCreate message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_Remote2TsBattleCreate.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Resp_Remote2TsBattleCreate message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_Remote2TsBattleCreate
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_Remote2TsBattleCreate} Resp_Remote2TsBattleCreate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_Remote2TsBattleCreate.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_Remote2TsBattleCreate();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_Remote2TsBattleCreate message.
         * @function verify
         * @memberof DcgProto.Resp_Remote2TsBattleCreate
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_Remote2TsBattleCreate.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Resp_Remote2TsBattleCreate;
    })();

    DcgProto.Req_Remote2TsBattleInit = (function() {

        /**
         * Properties of a Req_Remote2TsBattleInit.
         * @memberof DcgProto
         * @interface IReq_Remote2TsBattleInit
         * @property {DcgProto.IS_RoomData|null} [RoomData] Req_Remote2TsBattleInit RoomData
         */

        /**
         * Constructs a new Req_Remote2TsBattleInit.
         * @memberof DcgProto
         * @classdesc Represents a Req_Remote2TsBattleInit.
         * @implements IReq_Remote2TsBattleInit
         * @constructor
         * @param {DcgProto.IReq_Remote2TsBattleInit=} [p] Properties to set
         */
        function Req_Remote2TsBattleInit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_Remote2TsBattleInit RoomData.
         * @member {DcgProto.IS_RoomData|null|undefined} RoomData
         * @memberof DcgProto.Req_Remote2TsBattleInit
         * @instance
         */
        Req_Remote2TsBattleInit.prototype.RoomData = null;

        /**
         * Creates a new Req_Remote2TsBattleInit instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_Remote2TsBattleInit
         * @static
         * @param {DcgProto.IReq_Remote2TsBattleInit=} [properties] Properties to set
         * @returns {DcgProto.Req_Remote2TsBattleInit} Req_Remote2TsBattleInit instance
         */
        Req_Remote2TsBattleInit.create = function create(properties) {
            return new Req_Remote2TsBattleInit(properties);
        };

        /**
         * Encodes the specified Req_Remote2TsBattleInit message. Does not implicitly {@link DcgProto.Req_Remote2TsBattleInit.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_Remote2TsBattleInit
         * @static
         * @param {DcgProto.IReq_Remote2TsBattleInit} m Req_Remote2TsBattleInit message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_Remote2TsBattleInit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomData != null && Object.hasOwnProperty.call(m, "RoomData"))
                $root.DcgProto.S_RoomData.encode(m.RoomData, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Req_Remote2TsBattleInit message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_Remote2TsBattleInit
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_Remote2TsBattleInit} Req_Remote2TsBattleInit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_Remote2TsBattleInit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_Remote2TsBattleInit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomData = $root.DcgProto.S_RoomData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_Remote2TsBattleInit message.
         * @function verify
         * @memberof DcgProto.Req_Remote2TsBattleInit
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_Remote2TsBattleInit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomData != null && m.hasOwnProperty("RoomData")) {
                {
                    var e = $root.DcgProto.S_RoomData.verify(m.RoomData);
                    if (e)
                        return "RoomData." + e;
                }
            }
            return null;
        };

        return Req_Remote2TsBattleInit;
    })();

    DcgProto.Resp_Remote2TsBattleInit = (function() {

        /**
         * Properties of a Resp_Remote2TsBattleInit.
         * @memberof DcgProto
         * @interface IResp_Remote2TsBattleInit
         * @property {DcgProto.IS_BattleMsg|null} [BattleMsg] Resp_Remote2TsBattleInit BattleMsg
         */

        /**
         * Constructs a new Resp_Remote2TsBattleInit.
         * @memberof DcgProto
         * @classdesc Represents a Resp_Remote2TsBattleInit.
         * @implements IResp_Remote2TsBattleInit
         * @constructor
         * @param {DcgProto.IResp_Remote2TsBattleInit=} [p] Properties to set
         */
        function Resp_Remote2TsBattleInit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_Remote2TsBattleInit BattleMsg.
         * @member {DcgProto.IS_BattleMsg|null|undefined} BattleMsg
         * @memberof DcgProto.Resp_Remote2TsBattleInit
         * @instance
         */
        Resp_Remote2TsBattleInit.prototype.BattleMsg = null;

        /**
         * Creates a new Resp_Remote2TsBattleInit instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_Remote2TsBattleInit
         * @static
         * @param {DcgProto.IResp_Remote2TsBattleInit=} [properties] Properties to set
         * @returns {DcgProto.Resp_Remote2TsBattleInit} Resp_Remote2TsBattleInit instance
         */
        Resp_Remote2TsBattleInit.create = function create(properties) {
            return new Resp_Remote2TsBattleInit(properties);
        };

        /**
         * Encodes the specified Resp_Remote2TsBattleInit message. Does not implicitly {@link DcgProto.Resp_Remote2TsBattleInit.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_Remote2TsBattleInit
         * @static
         * @param {DcgProto.IResp_Remote2TsBattleInit} m Resp_Remote2TsBattleInit message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_Remote2TsBattleInit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.BattleMsg != null && Object.hasOwnProperty.call(m, "BattleMsg"))
                $root.DcgProto.S_BattleMsg.encode(m.BattleMsg, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_Remote2TsBattleInit message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_Remote2TsBattleInit
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_Remote2TsBattleInit} Resp_Remote2TsBattleInit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_Remote2TsBattleInit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_Remote2TsBattleInit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.BattleMsg = $root.DcgProto.S_BattleMsg.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_Remote2TsBattleInit message.
         * @function verify
         * @memberof DcgProto.Resp_Remote2TsBattleInit
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_Remote2TsBattleInit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.BattleMsg != null && m.hasOwnProperty("BattleMsg")) {
                {
                    var e = $root.DcgProto.S_BattleMsg.verify(m.BattleMsg);
                    if (e)
                        return "BattleMsg." + e;
                }
            }
            return null;
        };

        return Resp_Remote2TsBattleInit;
    })();

    DcgProto.Req_Remote2TsBattleReady = (function() {

        /**
         * Properties of a Req_Remote2TsBattleReady.
         * @memberof DcgProto
         * @interface IReq_Remote2TsBattleReady
         * @property {DcgProto.IS_RoomInfo|null} [RoomInfo] Req_Remote2TsBattleReady RoomInfo
         */

        /**
         * Constructs a new Req_Remote2TsBattleReady.
         * @memberof DcgProto
         * @classdesc Represents a Req_Remote2TsBattleReady.
         * @implements IReq_Remote2TsBattleReady
         * @constructor
         * @param {DcgProto.IReq_Remote2TsBattleReady=} [p] Properties to set
         */
        function Req_Remote2TsBattleReady(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_Remote2TsBattleReady RoomInfo.
         * @member {DcgProto.IS_RoomInfo|null|undefined} RoomInfo
         * @memberof DcgProto.Req_Remote2TsBattleReady
         * @instance
         */
        Req_Remote2TsBattleReady.prototype.RoomInfo = null;

        /**
         * Creates a new Req_Remote2TsBattleReady instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_Remote2TsBattleReady
         * @static
         * @param {DcgProto.IReq_Remote2TsBattleReady=} [properties] Properties to set
         * @returns {DcgProto.Req_Remote2TsBattleReady} Req_Remote2TsBattleReady instance
         */
        Req_Remote2TsBattleReady.create = function create(properties) {
            return new Req_Remote2TsBattleReady(properties);
        };

        /**
         * Encodes the specified Req_Remote2TsBattleReady message. Does not implicitly {@link DcgProto.Req_Remote2TsBattleReady.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_Remote2TsBattleReady
         * @static
         * @param {DcgProto.IReq_Remote2TsBattleReady} m Req_Remote2TsBattleReady message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_Remote2TsBattleReady.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomInfo != null && Object.hasOwnProperty.call(m, "RoomInfo"))
                $root.DcgProto.S_RoomInfo.encode(m.RoomInfo, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Req_Remote2TsBattleReady message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_Remote2TsBattleReady
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_Remote2TsBattleReady} Req_Remote2TsBattleReady
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_Remote2TsBattleReady.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_Remote2TsBattleReady();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomInfo = $root.DcgProto.S_RoomInfo.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_Remote2TsBattleReady message.
         * @function verify
         * @memberof DcgProto.Req_Remote2TsBattleReady
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_Remote2TsBattleReady.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomInfo != null && m.hasOwnProperty("RoomInfo")) {
                {
                    var e = $root.DcgProto.S_RoomInfo.verify(m.RoomInfo);
                    if (e)
                        return "RoomInfo." + e;
                }
            }
            return null;
        };

        return Req_Remote2TsBattleReady;
    })();

    DcgProto.Resp_Remote2TsBattleReady = (function() {

        /**
         * Properties of a Resp_Remote2TsBattleReady.
         * @memberof DcgProto
         * @interface IResp_Remote2TsBattleReady
         * @property {DcgProto.IS_BattleMsg|null} [BattleMsg] Resp_Remote2TsBattleReady BattleMsg
         */

        /**
         * Constructs a new Resp_Remote2TsBattleReady.
         * @memberof DcgProto
         * @classdesc Represents a Resp_Remote2TsBattleReady.
         * @implements IResp_Remote2TsBattleReady
         * @constructor
         * @param {DcgProto.IResp_Remote2TsBattleReady=} [p] Properties to set
         */
        function Resp_Remote2TsBattleReady(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_Remote2TsBattleReady BattleMsg.
         * @member {DcgProto.IS_BattleMsg|null|undefined} BattleMsg
         * @memberof DcgProto.Resp_Remote2TsBattleReady
         * @instance
         */
        Resp_Remote2TsBattleReady.prototype.BattleMsg = null;

        /**
         * Creates a new Resp_Remote2TsBattleReady instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_Remote2TsBattleReady
         * @static
         * @param {DcgProto.IResp_Remote2TsBattleReady=} [properties] Properties to set
         * @returns {DcgProto.Resp_Remote2TsBattleReady} Resp_Remote2TsBattleReady instance
         */
        Resp_Remote2TsBattleReady.create = function create(properties) {
            return new Resp_Remote2TsBattleReady(properties);
        };

        /**
         * Encodes the specified Resp_Remote2TsBattleReady message. Does not implicitly {@link DcgProto.Resp_Remote2TsBattleReady.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_Remote2TsBattleReady
         * @static
         * @param {DcgProto.IResp_Remote2TsBattleReady} m Resp_Remote2TsBattleReady message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_Remote2TsBattleReady.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.BattleMsg != null && Object.hasOwnProperty.call(m, "BattleMsg"))
                $root.DcgProto.S_BattleMsg.encode(m.BattleMsg, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_Remote2TsBattleReady message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_Remote2TsBattleReady
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_Remote2TsBattleReady} Resp_Remote2TsBattleReady
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_Remote2TsBattleReady.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_Remote2TsBattleReady();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.BattleMsg = $root.DcgProto.S_BattleMsg.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_Remote2TsBattleReady message.
         * @function verify
         * @memberof DcgProto.Resp_Remote2TsBattleReady
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_Remote2TsBattleReady.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.BattleMsg != null && m.hasOwnProperty("BattleMsg")) {
                {
                    var e = $root.DcgProto.S_BattleMsg.verify(m.BattleMsg);
                    if (e)
                        return "BattleMsg." + e;
                }
            }
            return null;
        };

        return Resp_Remote2TsBattleReady;
    })();

    DcgProto.Req_Remote2TsTurn = (function() {

        /**
         * Properties of a Req_Remote2TsTurn.
         * @memberof DcgProto
         * @interface IReq_Remote2TsTurn
         */

        /**
         * Constructs a new Req_Remote2TsTurn.
         * @memberof DcgProto
         * @classdesc Represents a Req_Remote2TsTurn.
         * @implements IReq_Remote2TsTurn
         * @constructor
         * @param {DcgProto.IReq_Remote2TsTurn=} [p] Properties to set
         */
        function Req_Remote2TsTurn(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Req_Remote2TsTurn instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_Remote2TsTurn
         * @static
         * @param {DcgProto.IReq_Remote2TsTurn=} [properties] Properties to set
         * @returns {DcgProto.Req_Remote2TsTurn} Req_Remote2TsTurn instance
         */
        Req_Remote2TsTurn.create = function create(properties) {
            return new Req_Remote2TsTurn(properties);
        };

        /**
         * Encodes the specified Req_Remote2TsTurn message. Does not implicitly {@link DcgProto.Req_Remote2TsTurn.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_Remote2TsTurn
         * @static
         * @param {DcgProto.IReq_Remote2TsTurn} m Req_Remote2TsTurn message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_Remote2TsTurn.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Req_Remote2TsTurn message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_Remote2TsTurn
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_Remote2TsTurn} Req_Remote2TsTurn
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_Remote2TsTurn.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_Remote2TsTurn();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_Remote2TsTurn message.
         * @function verify
         * @memberof DcgProto.Req_Remote2TsTurn
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_Remote2TsTurn.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Req_Remote2TsTurn;
    })();

    DcgProto.Resp_Remote2TsTurn = (function() {

        /**
         * Properties of a Resp_Remote2TsTurn.
         * @memberof DcgProto
         * @interface IResp_Remote2TsTurn
         * @property {DcgProto.IS_BattleResult|null} [BattleResult] Resp_Remote2TsTurn BattleResult
         * @property {DcgProto.IS_BattleMsg|null} [BattleMsg] Resp_Remote2TsTurn BattleMsg
         * @property {DcgProto.IS_BattleTask|null} [BattleTask] Resp_Remote2TsTurn BattleTask
         */

        /**
         * Constructs a new Resp_Remote2TsTurn.
         * @memberof DcgProto
         * @classdesc Represents a Resp_Remote2TsTurn.
         * @implements IResp_Remote2TsTurn
         * @constructor
         * @param {DcgProto.IResp_Remote2TsTurn=} [p] Properties to set
         */
        function Resp_Remote2TsTurn(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_Remote2TsTurn BattleResult.
         * @member {DcgProto.IS_BattleResult|null|undefined} BattleResult
         * @memberof DcgProto.Resp_Remote2TsTurn
         * @instance
         */
        Resp_Remote2TsTurn.prototype.BattleResult = null;

        /**
         * Resp_Remote2TsTurn BattleMsg.
         * @member {DcgProto.IS_BattleMsg|null|undefined} BattleMsg
         * @memberof DcgProto.Resp_Remote2TsTurn
         * @instance
         */
        Resp_Remote2TsTurn.prototype.BattleMsg = null;

        /**
         * Resp_Remote2TsTurn BattleTask.
         * @member {DcgProto.IS_BattleTask|null|undefined} BattleTask
         * @memberof DcgProto.Resp_Remote2TsTurn
         * @instance
         */
        Resp_Remote2TsTurn.prototype.BattleTask = null;

        /**
         * Creates a new Resp_Remote2TsTurn instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_Remote2TsTurn
         * @static
         * @param {DcgProto.IResp_Remote2TsTurn=} [properties] Properties to set
         * @returns {DcgProto.Resp_Remote2TsTurn} Resp_Remote2TsTurn instance
         */
        Resp_Remote2TsTurn.create = function create(properties) {
            return new Resp_Remote2TsTurn(properties);
        };

        /**
         * Encodes the specified Resp_Remote2TsTurn message. Does not implicitly {@link DcgProto.Resp_Remote2TsTurn.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_Remote2TsTurn
         * @static
         * @param {DcgProto.IResp_Remote2TsTurn} m Resp_Remote2TsTurn message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_Remote2TsTurn.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.BattleResult != null && Object.hasOwnProperty.call(m, "BattleResult"))
                $root.DcgProto.S_BattleResult.encode(m.BattleResult, w.uint32(10).fork()).ldelim();
            if (m.BattleMsg != null && Object.hasOwnProperty.call(m, "BattleMsg"))
                $root.DcgProto.S_BattleMsg.encode(m.BattleMsg, w.uint32(18).fork()).ldelim();
            if (m.BattleTask != null && Object.hasOwnProperty.call(m, "BattleTask"))
                $root.DcgProto.S_BattleTask.encode(m.BattleTask, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_Remote2TsTurn message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_Remote2TsTurn
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_Remote2TsTurn} Resp_Remote2TsTurn
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_Remote2TsTurn.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_Remote2TsTurn();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.BattleResult = $root.DcgProto.S_BattleResult.decode(r, r.uint32());
                    break;
                case 2:
                    m.BattleMsg = $root.DcgProto.S_BattleMsg.decode(r, r.uint32());
                    break;
                case 3:
                    m.BattleTask = $root.DcgProto.S_BattleTask.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_Remote2TsTurn message.
         * @function verify
         * @memberof DcgProto.Resp_Remote2TsTurn
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_Remote2TsTurn.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.BattleResult != null && m.hasOwnProperty("BattleResult")) {
                {
                    var e = $root.DcgProto.S_BattleResult.verify(m.BattleResult);
                    if (e)
                        return "BattleResult." + e;
                }
            }
            if (m.BattleMsg != null && m.hasOwnProperty("BattleMsg")) {
                {
                    var e = $root.DcgProto.S_BattleMsg.verify(m.BattleMsg);
                    if (e)
                        return "BattleMsg." + e;
                }
            }
            if (m.BattleTask != null && m.hasOwnProperty("BattleTask")) {
                {
                    var e = $root.DcgProto.S_BattleTask.verify(m.BattleTask);
                    if (e)
                        return "BattleTask." + e;
                }
            }
            return null;
        };

        return Resp_Remote2TsTurn;
    })();

    DcgProto.Req_Remote2TsBattle = (function() {

        /**
         * Properties of a Req_Remote2TsBattle.
         * @memberof DcgProto
         * @interface IReq_Remote2TsBattle
         * @property {Long|null} [AccountIID] Req_Remote2TsBattle AccountIID
         * @property {DcgProto.IS_BattleParams|null} [BattleParams] Req_Remote2TsBattle BattleParams
         */

        /**
         * Constructs a new Req_Remote2TsBattle.
         * @memberof DcgProto
         * @classdesc Represents a Req_Remote2TsBattle.
         * @implements IReq_Remote2TsBattle
         * @constructor
         * @param {DcgProto.IReq_Remote2TsBattle=} [p] Properties to set
         */
        function Req_Remote2TsBattle(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_Remote2TsBattle AccountIID.
         * @member {Long} AccountIID
         * @memberof DcgProto.Req_Remote2TsBattle
         * @instance
         */
        Req_Remote2TsBattle.prototype.AccountIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_Remote2TsBattle BattleParams.
         * @member {DcgProto.IS_BattleParams|null|undefined} BattleParams
         * @memberof DcgProto.Req_Remote2TsBattle
         * @instance
         */
        Req_Remote2TsBattle.prototype.BattleParams = null;

        /**
         * Creates a new Req_Remote2TsBattle instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_Remote2TsBattle
         * @static
         * @param {DcgProto.IReq_Remote2TsBattle=} [properties] Properties to set
         * @returns {DcgProto.Req_Remote2TsBattle} Req_Remote2TsBattle instance
         */
        Req_Remote2TsBattle.create = function create(properties) {
            return new Req_Remote2TsBattle(properties);
        };

        /**
         * Encodes the specified Req_Remote2TsBattle message. Does not implicitly {@link DcgProto.Req_Remote2TsBattle.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_Remote2TsBattle
         * @static
         * @param {DcgProto.IReq_Remote2TsBattle} m Req_Remote2TsBattle message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_Remote2TsBattle.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.AccountIID != null && Object.hasOwnProperty.call(m, "AccountIID"))
                w.uint32(8).int64(m.AccountIID);
            if (m.BattleParams != null && Object.hasOwnProperty.call(m, "BattleParams"))
                $root.DcgProto.S_BattleParams.encode(m.BattleParams, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Req_Remote2TsBattle message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_Remote2TsBattle
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_Remote2TsBattle} Req_Remote2TsBattle
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_Remote2TsBattle.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_Remote2TsBattle();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.AccountIID = r.int64();
                    break;
                case 2:
                    m.BattleParams = $root.DcgProto.S_BattleParams.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_Remote2TsBattle message.
         * @function verify
         * @memberof DcgProto.Req_Remote2TsBattle
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_Remote2TsBattle.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.AccountIID != null && m.hasOwnProperty("AccountIID")) {
                if (!$util.isInteger(m.AccountIID) && !(m.AccountIID && $util.isInteger(m.AccountIID.low) && $util.isInteger(m.AccountIID.high)))
                    return "AccountIID: integer|Long expected";
            }
            if (m.BattleParams != null && m.hasOwnProperty("BattleParams")) {
                {
                    var e = $root.DcgProto.S_BattleParams.verify(m.BattleParams);
                    if (e)
                        return "BattleParams." + e;
                }
            }
            return null;
        };

        return Req_Remote2TsBattle;
    })();

    DcgProto.Resp_Remote2TsBattle = (function() {

        /**
         * Properties of a Resp_Remote2TsBattle.
         * @memberof DcgProto
         * @interface IResp_Remote2TsBattle
         * @property {DcgProto.IS_BattleResult|null} [BattleResult] Resp_Remote2TsBattle BattleResult
         * @property {DcgProto.IS_BattleMsg|null} [BattleMsg] Resp_Remote2TsBattle BattleMsg
         * @property {DcgProto.IS_BattleTask|null} [BattleTask] Resp_Remote2TsBattle BattleTask
         */

        /**
         * Constructs a new Resp_Remote2TsBattle.
         * @memberof DcgProto
         * @classdesc Represents a Resp_Remote2TsBattle.
         * @implements IResp_Remote2TsBattle
         * @constructor
         * @param {DcgProto.IResp_Remote2TsBattle=} [p] Properties to set
         */
        function Resp_Remote2TsBattle(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_Remote2TsBattle BattleResult.
         * @member {DcgProto.IS_BattleResult|null|undefined} BattleResult
         * @memberof DcgProto.Resp_Remote2TsBattle
         * @instance
         */
        Resp_Remote2TsBattle.prototype.BattleResult = null;

        /**
         * Resp_Remote2TsBattle BattleMsg.
         * @member {DcgProto.IS_BattleMsg|null|undefined} BattleMsg
         * @memberof DcgProto.Resp_Remote2TsBattle
         * @instance
         */
        Resp_Remote2TsBattle.prototype.BattleMsg = null;

        /**
         * Resp_Remote2TsBattle BattleTask.
         * @member {DcgProto.IS_BattleTask|null|undefined} BattleTask
         * @memberof DcgProto.Resp_Remote2TsBattle
         * @instance
         */
        Resp_Remote2TsBattle.prototype.BattleTask = null;

        /**
         * Creates a new Resp_Remote2TsBattle instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_Remote2TsBattle
         * @static
         * @param {DcgProto.IResp_Remote2TsBattle=} [properties] Properties to set
         * @returns {DcgProto.Resp_Remote2TsBattle} Resp_Remote2TsBattle instance
         */
        Resp_Remote2TsBattle.create = function create(properties) {
            return new Resp_Remote2TsBattle(properties);
        };

        /**
         * Encodes the specified Resp_Remote2TsBattle message. Does not implicitly {@link DcgProto.Resp_Remote2TsBattle.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_Remote2TsBattle
         * @static
         * @param {DcgProto.IResp_Remote2TsBattle} m Resp_Remote2TsBattle message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_Remote2TsBattle.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.BattleResult != null && Object.hasOwnProperty.call(m, "BattleResult"))
                $root.DcgProto.S_BattleResult.encode(m.BattleResult, w.uint32(10).fork()).ldelim();
            if (m.BattleMsg != null && Object.hasOwnProperty.call(m, "BattleMsg"))
                $root.DcgProto.S_BattleMsg.encode(m.BattleMsg, w.uint32(18).fork()).ldelim();
            if (m.BattleTask != null && Object.hasOwnProperty.call(m, "BattleTask"))
                $root.DcgProto.S_BattleTask.encode(m.BattleTask, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_Remote2TsBattle message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_Remote2TsBattle
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_Remote2TsBattle} Resp_Remote2TsBattle
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_Remote2TsBattle.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_Remote2TsBattle();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.BattleResult = $root.DcgProto.S_BattleResult.decode(r, r.uint32());
                    break;
                case 2:
                    m.BattleMsg = $root.DcgProto.S_BattleMsg.decode(r, r.uint32());
                    break;
                case 3:
                    m.BattleTask = $root.DcgProto.S_BattleTask.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_Remote2TsBattle message.
         * @function verify
         * @memberof DcgProto.Resp_Remote2TsBattle
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_Remote2TsBattle.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.BattleResult != null && m.hasOwnProperty("BattleResult")) {
                {
                    var e = $root.DcgProto.S_BattleResult.verify(m.BattleResult);
                    if (e)
                        return "BattleResult." + e;
                }
            }
            if (m.BattleMsg != null && m.hasOwnProperty("BattleMsg")) {
                {
                    var e = $root.DcgProto.S_BattleMsg.verify(m.BattleMsg);
                    if (e)
                        return "BattleMsg." + e;
                }
            }
            if (m.BattleTask != null && m.hasOwnProperty("BattleTask")) {
                {
                    var e = $root.DcgProto.S_BattleTask.verify(m.BattleTask);
                    if (e)
                        return "BattleTask." + e;
                }
            }
            return null;
        };

        return Resp_Remote2TsBattle;
    })();

    DcgProto.Req_Remote2TsBattleQuit = (function() {

        /**
         * Properties of a Req_Remote2TsBattleQuit.
         * @memberof DcgProto
         * @interface IReq_Remote2TsBattleQuit
         * @property {Long|null} [AccountIID] Req_Remote2TsBattleQuit AccountIID
         */

        /**
         * Constructs a new Req_Remote2TsBattleQuit.
         * @memberof DcgProto
         * @classdesc Represents a Req_Remote2TsBattleQuit.
         * @implements IReq_Remote2TsBattleQuit
         * @constructor
         * @param {DcgProto.IReq_Remote2TsBattleQuit=} [p] Properties to set
         */
        function Req_Remote2TsBattleQuit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_Remote2TsBattleQuit AccountIID.
         * @member {Long} AccountIID
         * @memberof DcgProto.Req_Remote2TsBattleQuit
         * @instance
         */
        Req_Remote2TsBattleQuit.prototype.AccountIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_Remote2TsBattleQuit instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_Remote2TsBattleQuit
         * @static
         * @param {DcgProto.IReq_Remote2TsBattleQuit=} [properties] Properties to set
         * @returns {DcgProto.Req_Remote2TsBattleQuit} Req_Remote2TsBattleQuit instance
         */
        Req_Remote2TsBattleQuit.create = function create(properties) {
            return new Req_Remote2TsBattleQuit(properties);
        };

        /**
         * Encodes the specified Req_Remote2TsBattleQuit message. Does not implicitly {@link DcgProto.Req_Remote2TsBattleQuit.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_Remote2TsBattleQuit
         * @static
         * @param {DcgProto.IReq_Remote2TsBattleQuit} m Req_Remote2TsBattleQuit message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_Remote2TsBattleQuit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.AccountIID != null && Object.hasOwnProperty.call(m, "AccountIID"))
                w.uint32(8).int64(m.AccountIID);
            return w;
        };

        /**
         * Decodes a Req_Remote2TsBattleQuit message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_Remote2TsBattleQuit
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_Remote2TsBattleQuit} Req_Remote2TsBattleQuit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_Remote2TsBattleQuit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_Remote2TsBattleQuit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.AccountIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_Remote2TsBattleQuit message.
         * @function verify
         * @memberof DcgProto.Req_Remote2TsBattleQuit
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_Remote2TsBattleQuit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.AccountIID != null && m.hasOwnProperty("AccountIID")) {
                if (!$util.isInteger(m.AccountIID) && !(m.AccountIID && $util.isInteger(m.AccountIID.low) && $util.isInteger(m.AccountIID.high)))
                    return "AccountIID: integer|Long expected";
            }
            return null;
        };

        return Req_Remote2TsBattleQuit;
    })();

    DcgProto.Resp_Remote2TsBattleQuit = (function() {

        /**
         * Properties of a Resp_Remote2TsBattleQuit.
         * @memberof DcgProto
         * @interface IResp_Remote2TsBattleQuit
         * @property {DcgProto.IS_BattleResult|null} [BattleResult] Resp_Remote2TsBattleQuit BattleResult
         * @property {DcgProto.IS_BattleMsg|null} [BattleMsg] Resp_Remote2TsBattleQuit BattleMsg
         * @property {DcgProto.IS_BattleTask|null} [BattleTask] Resp_Remote2TsBattleQuit BattleTask
         */

        /**
         * Constructs a new Resp_Remote2TsBattleQuit.
         * @memberof DcgProto
         * @classdesc Represents a Resp_Remote2TsBattleQuit.
         * @implements IResp_Remote2TsBattleQuit
         * @constructor
         * @param {DcgProto.IResp_Remote2TsBattleQuit=} [p] Properties to set
         */
        function Resp_Remote2TsBattleQuit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_Remote2TsBattleQuit BattleResult.
         * @member {DcgProto.IS_BattleResult|null|undefined} BattleResult
         * @memberof DcgProto.Resp_Remote2TsBattleQuit
         * @instance
         */
        Resp_Remote2TsBattleQuit.prototype.BattleResult = null;

        /**
         * Resp_Remote2TsBattleQuit BattleMsg.
         * @member {DcgProto.IS_BattleMsg|null|undefined} BattleMsg
         * @memberof DcgProto.Resp_Remote2TsBattleQuit
         * @instance
         */
        Resp_Remote2TsBattleQuit.prototype.BattleMsg = null;

        /**
         * Resp_Remote2TsBattleQuit BattleTask.
         * @member {DcgProto.IS_BattleTask|null|undefined} BattleTask
         * @memberof DcgProto.Resp_Remote2TsBattleQuit
         * @instance
         */
        Resp_Remote2TsBattleQuit.prototype.BattleTask = null;

        /**
         * Creates a new Resp_Remote2TsBattleQuit instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_Remote2TsBattleQuit
         * @static
         * @param {DcgProto.IResp_Remote2TsBattleQuit=} [properties] Properties to set
         * @returns {DcgProto.Resp_Remote2TsBattleQuit} Resp_Remote2TsBattleQuit instance
         */
        Resp_Remote2TsBattleQuit.create = function create(properties) {
            return new Resp_Remote2TsBattleQuit(properties);
        };

        /**
         * Encodes the specified Resp_Remote2TsBattleQuit message. Does not implicitly {@link DcgProto.Resp_Remote2TsBattleQuit.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_Remote2TsBattleQuit
         * @static
         * @param {DcgProto.IResp_Remote2TsBattleQuit} m Resp_Remote2TsBattleQuit message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_Remote2TsBattleQuit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.BattleResult != null && Object.hasOwnProperty.call(m, "BattleResult"))
                $root.DcgProto.S_BattleResult.encode(m.BattleResult, w.uint32(10).fork()).ldelim();
            if (m.BattleMsg != null && Object.hasOwnProperty.call(m, "BattleMsg"))
                $root.DcgProto.S_BattleMsg.encode(m.BattleMsg, w.uint32(18).fork()).ldelim();
            if (m.BattleTask != null && Object.hasOwnProperty.call(m, "BattleTask"))
                $root.DcgProto.S_BattleTask.encode(m.BattleTask, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_Remote2TsBattleQuit message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_Remote2TsBattleQuit
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_Remote2TsBattleQuit} Resp_Remote2TsBattleQuit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_Remote2TsBattleQuit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_Remote2TsBattleQuit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.BattleResult = $root.DcgProto.S_BattleResult.decode(r, r.uint32());
                    break;
                case 2:
                    m.BattleMsg = $root.DcgProto.S_BattleMsg.decode(r, r.uint32());
                    break;
                case 3:
                    m.BattleTask = $root.DcgProto.S_BattleTask.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_Remote2TsBattleQuit message.
         * @function verify
         * @memberof DcgProto.Resp_Remote2TsBattleQuit
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_Remote2TsBattleQuit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.BattleResult != null && m.hasOwnProperty("BattleResult")) {
                {
                    var e = $root.DcgProto.S_BattleResult.verify(m.BattleResult);
                    if (e)
                        return "BattleResult." + e;
                }
            }
            if (m.BattleMsg != null && m.hasOwnProperty("BattleMsg")) {
                {
                    var e = $root.DcgProto.S_BattleMsg.verify(m.BattleMsg);
                    if (e)
                        return "BattleMsg." + e;
                }
            }
            if (m.BattleTask != null && m.hasOwnProperty("BattleTask")) {
                {
                    var e = $root.DcgProto.S_BattleTask.verify(m.BattleTask);
                    if (e)
                        return "BattleTask." + e;
                }
            }
            return null;
        };

        return Resp_Remote2TsBattleQuit;
    })();

    DcgProto.Req_Remote2TsOffset = (function() {

        /**
         * Properties of a Req_Remote2TsOffset.
         * @memberof DcgProto
         * @interface IReq_Remote2TsOffset
         * @property {Long|null} [OffsetSec] Req_Remote2TsOffset OffsetSec
         */

        /**
         * Constructs a new Req_Remote2TsOffset.
         * @memberof DcgProto
         * @classdesc Represents a Req_Remote2TsOffset.
         * @implements IReq_Remote2TsOffset
         * @constructor
         * @param {DcgProto.IReq_Remote2TsOffset=} [p] Properties to set
         */
        function Req_Remote2TsOffset(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_Remote2TsOffset OffsetSec.
         * @member {Long} OffsetSec
         * @memberof DcgProto.Req_Remote2TsOffset
         * @instance
         */
        Req_Remote2TsOffset.prototype.OffsetSec = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_Remote2TsOffset instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_Remote2TsOffset
         * @static
         * @param {DcgProto.IReq_Remote2TsOffset=} [properties] Properties to set
         * @returns {DcgProto.Req_Remote2TsOffset} Req_Remote2TsOffset instance
         */
        Req_Remote2TsOffset.create = function create(properties) {
            return new Req_Remote2TsOffset(properties);
        };

        /**
         * Encodes the specified Req_Remote2TsOffset message. Does not implicitly {@link DcgProto.Req_Remote2TsOffset.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_Remote2TsOffset
         * @static
         * @param {DcgProto.IReq_Remote2TsOffset} m Req_Remote2TsOffset message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_Remote2TsOffset.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.OffsetSec != null && Object.hasOwnProperty.call(m, "OffsetSec"))
                w.uint32(8).int64(m.OffsetSec);
            return w;
        };

        /**
         * Decodes a Req_Remote2TsOffset message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_Remote2TsOffset
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_Remote2TsOffset} Req_Remote2TsOffset
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_Remote2TsOffset.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_Remote2TsOffset();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.OffsetSec = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_Remote2TsOffset message.
         * @function verify
         * @memberof DcgProto.Req_Remote2TsOffset
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_Remote2TsOffset.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.OffsetSec != null && m.hasOwnProperty("OffsetSec")) {
                if (!$util.isInteger(m.OffsetSec) && !(m.OffsetSec && $util.isInteger(m.OffsetSec.low) && $util.isInteger(m.OffsetSec.high)))
                    return "OffsetSec: integer|Long expected";
            }
            return null;
        };

        return Req_Remote2TsOffset;
    })();

    DcgProto.Resp_Remote2TsOffset = (function() {

        /**
         * Properties of a Resp_Remote2TsOffset.
         * @memberof DcgProto
         * @interface IResp_Remote2TsOffset
         */

        /**
         * Constructs a new Resp_Remote2TsOffset.
         * @memberof DcgProto
         * @classdesc Represents a Resp_Remote2TsOffset.
         * @implements IResp_Remote2TsOffset
         * @constructor
         * @param {DcgProto.IResp_Remote2TsOffset=} [p] Properties to set
         */
        function Resp_Remote2TsOffset(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Creates a new Resp_Remote2TsOffset instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_Remote2TsOffset
         * @static
         * @param {DcgProto.IResp_Remote2TsOffset=} [properties] Properties to set
         * @returns {DcgProto.Resp_Remote2TsOffset} Resp_Remote2TsOffset instance
         */
        Resp_Remote2TsOffset.create = function create(properties) {
            return new Resp_Remote2TsOffset(properties);
        };

        /**
         * Encodes the specified Resp_Remote2TsOffset message. Does not implicitly {@link DcgProto.Resp_Remote2TsOffset.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_Remote2TsOffset
         * @static
         * @param {DcgProto.IResp_Remote2TsOffset} m Resp_Remote2TsOffset message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_Remote2TsOffset.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        /**
         * Decodes a Resp_Remote2TsOffset message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_Remote2TsOffset
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_Remote2TsOffset} Resp_Remote2TsOffset
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_Remote2TsOffset.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_Remote2TsOffset();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_Remote2TsOffset message.
         * @function verify
         * @memberof DcgProto.Resp_Remote2TsOffset
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_Remote2TsOffset.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        return Resp_Remote2TsOffset;
    })();

    DcgProto.Req_Remote2TsBattleReconnect = (function() {

        /**
         * Properties of a Req_Remote2TsBattleReconnect.
         * @memberof DcgProto
         * @interface IReq_Remote2TsBattleReconnect
         * @property {Long|null} [AccountIID] Req_Remote2TsBattleReconnect AccountIID
         */

        /**
         * Constructs a new Req_Remote2TsBattleReconnect.
         * @memberof DcgProto
         * @classdesc Represents a Req_Remote2TsBattleReconnect.
         * @implements IReq_Remote2TsBattleReconnect
         * @constructor
         * @param {DcgProto.IReq_Remote2TsBattleReconnect=} [p] Properties to set
         */
        function Req_Remote2TsBattleReconnect(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_Remote2TsBattleReconnect AccountIID.
         * @member {Long} AccountIID
         * @memberof DcgProto.Req_Remote2TsBattleReconnect
         * @instance
         */
        Req_Remote2TsBattleReconnect.prototype.AccountIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new Req_Remote2TsBattleReconnect instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_Remote2TsBattleReconnect
         * @static
         * @param {DcgProto.IReq_Remote2TsBattleReconnect=} [properties] Properties to set
         * @returns {DcgProto.Req_Remote2TsBattleReconnect} Req_Remote2TsBattleReconnect instance
         */
        Req_Remote2TsBattleReconnect.create = function create(properties) {
            return new Req_Remote2TsBattleReconnect(properties);
        };

        /**
         * Encodes the specified Req_Remote2TsBattleReconnect message. Does not implicitly {@link DcgProto.Req_Remote2TsBattleReconnect.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_Remote2TsBattleReconnect
         * @static
         * @param {DcgProto.IReq_Remote2TsBattleReconnect} m Req_Remote2TsBattleReconnect message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_Remote2TsBattleReconnect.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.AccountIID != null && Object.hasOwnProperty.call(m, "AccountIID"))
                w.uint32(8).int64(m.AccountIID);
            return w;
        };

        /**
         * Decodes a Req_Remote2TsBattleReconnect message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_Remote2TsBattleReconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_Remote2TsBattleReconnect} Req_Remote2TsBattleReconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_Remote2TsBattleReconnect.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_Remote2TsBattleReconnect();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.AccountIID = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_Remote2TsBattleReconnect message.
         * @function verify
         * @memberof DcgProto.Req_Remote2TsBattleReconnect
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_Remote2TsBattleReconnect.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.AccountIID != null && m.hasOwnProperty("AccountIID")) {
                if (!$util.isInteger(m.AccountIID) && !(m.AccountIID && $util.isInteger(m.AccountIID.low) && $util.isInteger(m.AccountIID.high)))
                    return "AccountIID: integer|Long expected";
            }
            return null;
        };

        return Req_Remote2TsBattleReconnect;
    })();

    DcgProto.Resp_Remote2TsBattleReconnect = (function() {

        /**
         * Properties of a Resp_Remote2TsBattleReconnect.
         * @memberof DcgProto
         * @interface IResp_Remote2TsBattleReconnect
         * @property {DcgProto.IS_ReconnectData|null} [ReconnectData] Resp_Remote2TsBattleReconnect ReconnectData
         */

        /**
         * Constructs a new Resp_Remote2TsBattleReconnect.
         * @memberof DcgProto
         * @classdesc Represents a Resp_Remote2TsBattleReconnect.
         * @implements IResp_Remote2TsBattleReconnect
         * @constructor
         * @param {DcgProto.IResp_Remote2TsBattleReconnect=} [p] Properties to set
         */
        function Resp_Remote2TsBattleReconnect(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_Remote2TsBattleReconnect ReconnectData.
         * @member {DcgProto.IS_ReconnectData|null|undefined} ReconnectData
         * @memberof DcgProto.Resp_Remote2TsBattleReconnect
         * @instance
         */
        Resp_Remote2TsBattleReconnect.prototype.ReconnectData = null;

        /**
         * Creates a new Resp_Remote2TsBattleReconnect instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_Remote2TsBattleReconnect
         * @static
         * @param {DcgProto.IResp_Remote2TsBattleReconnect=} [properties] Properties to set
         * @returns {DcgProto.Resp_Remote2TsBattleReconnect} Resp_Remote2TsBattleReconnect instance
         */
        Resp_Remote2TsBattleReconnect.create = function create(properties) {
            return new Resp_Remote2TsBattleReconnect(properties);
        };

        /**
         * Encodes the specified Resp_Remote2TsBattleReconnect message. Does not implicitly {@link DcgProto.Resp_Remote2TsBattleReconnect.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_Remote2TsBattleReconnect
         * @static
         * @param {DcgProto.IResp_Remote2TsBattleReconnect} m Resp_Remote2TsBattleReconnect message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_Remote2TsBattleReconnect.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ReconnectData != null && Object.hasOwnProperty.call(m, "ReconnectData"))
                $root.DcgProto.S_ReconnectData.encode(m.ReconnectData, w.uint32(10).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_Remote2TsBattleReconnect message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_Remote2TsBattleReconnect
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_Remote2TsBattleReconnect} Resp_Remote2TsBattleReconnect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_Remote2TsBattleReconnect.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_Remote2TsBattleReconnect();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ReconnectData = $root.DcgProto.S_ReconnectData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_Remote2TsBattleReconnect message.
         * @function verify
         * @memberof DcgProto.Resp_Remote2TsBattleReconnect
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_Remote2TsBattleReconnect.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ReconnectData != null && m.hasOwnProperty("ReconnectData")) {
                {
                    var e = $root.DcgProto.S_ReconnectData.verify(m.ReconnectData);
                    if (e)
                        return "ReconnectData." + e;
                }
            }
            return null;
        };

        return Resp_Remote2TsBattleReconnect;
    })();

    DcgProto.Req_Remote2TsBattleMsg = (function() {

        /**
         * Properties of a Req_Remote2TsBattleMsg.
         * @memberof DcgProto
         * @interface IReq_Remote2TsBattleMsg
         * @property {number|null} [FrameIndex] Req_Remote2TsBattleMsg FrameIndex
         */

        /**
         * Constructs a new Req_Remote2TsBattleMsg.
         * @memberof DcgProto
         * @classdesc Represents a Req_Remote2TsBattleMsg.
         * @implements IReq_Remote2TsBattleMsg
         * @constructor
         * @param {DcgProto.IReq_Remote2TsBattleMsg=} [p] Properties to set
         */
        function Req_Remote2TsBattleMsg(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_Remote2TsBattleMsg FrameIndex.
         * @member {number} FrameIndex
         * @memberof DcgProto.Req_Remote2TsBattleMsg
         * @instance
         */
        Req_Remote2TsBattleMsg.prototype.FrameIndex = 0;

        /**
         * Creates a new Req_Remote2TsBattleMsg instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_Remote2TsBattleMsg
         * @static
         * @param {DcgProto.IReq_Remote2TsBattleMsg=} [properties] Properties to set
         * @returns {DcgProto.Req_Remote2TsBattleMsg} Req_Remote2TsBattleMsg instance
         */
        Req_Remote2TsBattleMsg.create = function create(properties) {
            return new Req_Remote2TsBattleMsg(properties);
        };

        /**
         * Encodes the specified Req_Remote2TsBattleMsg message. Does not implicitly {@link DcgProto.Req_Remote2TsBattleMsg.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_Remote2TsBattleMsg
         * @static
         * @param {DcgProto.IReq_Remote2TsBattleMsg} m Req_Remote2TsBattleMsg message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_Remote2TsBattleMsg.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.FrameIndex != null && Object.hasOwnProperty.call(m, "FrameIndex"))
                w.uint32(8).int32(m.FrameIndex);
            return w;
        };

        /**
         * Decodes a Req_Remote2TsBattleMsg message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_Remote2TsBattleMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_Remote2TsBattleMsg} Req_Remote2TsBattleMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_Remote2TsBattleMsg.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_Remote2TsBattleMsg();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.FrameIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_Remote2TsBattleMsg message.
         * @function verify
         * @memberof DcgProto.Req_Remote2TsBattleMsg
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_Remote2TsBattleMsg.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.FrameIndex != null && m.hasOwnProperty("FrameIndex")) {
                if (!$util.isInteger(m.FrameIndex))
                    return "FrameIndex: integer expected";
            }
            return null;
        };

        return Req_Remote2TsBattleMsg;
    })();

    DcgProto.Resp_Remote2TsBattleMsg = (function() {

        /**
         * Properties of a Resp_Remote2TsBattleMsg.
         * @memberof DcgProto
         * @interface IResp_Remote2TsBattleMsg
         * @property {Array.<DcgProto.IS_BattleMsg>|null} [BattleMsg] Resp_Remote2TsBattleMsg BattleMsg
         */

        /**
         * Constructs a new Resp_Remote2TsBattleMsg.
         * @memberof DcgProto
         * @classdesc Represents a Resp_Remote2TsBattleMsg.
         * @implements IResp_Remote2TsBattleMsg
         * @constructor
         * @param {DcgProto.IResp_Remote2TsBattleMsg=} [p] Properties to set
         */
        function Resp_Remote2TsBattleMsg(p) {
            this.BattleMsg = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_Remote2TsBattleMsg BattleMsg.
         * @member {Array.<DcgProto.IS_BattleMsg>} BattleMsg
         * @memberof DcgProto.Resp_Remote2TsBattleMsg
         * @instance
         */
        Resp_Remote2TsBattleMsg.prototype.BattleMsg = $util.emptyArray;

        /**
         * Creates a new Resp_Remote2TsBattleMsg instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_Remote2TsBattleMsg
         * @static
         * @param {DcgProto.IResp_Remote2TsBattleMsg=} [properties] Properties to set
         * @returns {DcgProto.Resp_Remote2TsBattleMsg} Resp_Remote2TsBattleMsg instance
         */
        Resp_Remote2TsBattleMsg.create = function create(properties) {
            return new Resp_Remote2TsBattleMsg(properties);
        };

        /**
         * Encodes the specified Resp_Remote2TsBattleMsg message. Does not implicitly {@link DcgProto.Resp_Remote2TsBattleMsg.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_Remote2TsBattleMsg
         * @static
         * @param {DcgProto.IResp_Remote2TsBattleMsg} m Resp_Remote2TsBattleMsg message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_Remote2TsBattleMsg.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.BattleMsg != null && m.BattleMsg.length) {
                for (var i = 0; i < m.BattleMsg.length; ++i)
                    $root.DcgProto.S_BattleMsg.encode(m.BattleMsg[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        /**
         * Decodes a Resp_Remote2TsBattleMsg message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_Remote2TsBattleMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_Remote2TsBattleMsg} Resp_Remote2TsBattleMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_Remote2TsBattleMsg.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_Remote2TsBattleMsg();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.BattleMsg && m.BattleMsg.length))
                        m.BattleMsg = [];
                    m.BattleMsg.push($root.DcgProto.S_BattleMsg.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_Remote2TsBattleMsg message.
         * @function verify
         * @memberof DcgProto.Resp_Remote2TsBattleMsg
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_Remote2TsBattleMsg.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.BattleMsg != null && m.hasOwnProperty("BattleMsg")) {
                if (!Array.isArray(m.BattleMsg))
                    return "BattleMsg: array expected";
                for (var i = 0; i < m.BattleMsg.length; ++i) {
                    {
                        var e = $root.DcgProto.S_BattleMsg.verify(m.BattleMsg[i]);
                        if (e)
                            return "BattleMsg." + e;
                    }
                }
            }
            return null;
        };

        return Resp_Remote2TsBattleMsg;
    })();

    DcgProto.Req_Remote2TsGm = (function() {

        /**
         * Properties of a Req_Remote2TsGm.
         * @memberof DcgProto
         * @interface IReq_Remote2TsGm
         * @property {Long|null} [AccountIID] Req_Remote2TsGm AccountIID
         * @property {DcgProto.IS_GmParams|null} [GmParams] Req_Remote2TsGm GmParams
         */

        /**
         * Constructs a new Req_Remote2TsGm.
         * @memberof DcgProto
         * @classdesc Represents a Req_Remote2TsGm.
         * @implements IReq_Remote2TsGm
         * @constructor
         * @param {DcgProto.IReq_Remote2TsGm=} [p] Properties to set
         */
        function Req_Remote2TsGm(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_Remote2TsGm AccountIID.
         * @member {Long} AccountIID
         * @memberof DcgProto.Req_Remote2TsGm
         * @instance
         */
        Req_Remote2TsGm.prototype.AccountIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_Remote2TsGm GmParams.
         * @member {DcgProto.IS_GmParams|null|undefined} GmParams
         * @memberof DcgProto.Req_Remote2TsGm
         * @instance
         */
        Req_Remote2TsGm.prototype.GmParams = null;

        /**
         * Creates a new Req_Remote2TsGm instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_Remote2TsGm
         * @static
         * @param {DcgProto.IReq_Remote2TsGm=} [properties] Properties to set
         * @returns {DcgProto.Req_Remote2TsGm} Req_Remote2TsGm instance
         */
        Req_Remote2TsGm.create = function create(properties) {
            return new Req_Remote2TsGm(properties);
        };

        /**
         * Encodes the specified Req_Remote2TsGm message. Does not implicitly {@link DcgProto.Req_Remote2TsGm.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_Remote2TsGm
         * @static
         * @param {DcgProto.IReq_Remote2TsGm} m Req_Remote2TsGm message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_Remote2TsGm.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.AccountIID != null && Object.hasOwnProperty.call(m, "AccountIID"))
                w.uint32(8).int64(m.AccountIID);
            if (m.GmParams != null && Object.hasOwnProperty.call(m, "GmParams"))
                $root.DcgProto.S_GmParams.encode(m.GmParams, w.uint32(18).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Req_Remote2TsGm message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_Remote2TsGm
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_Remote2TsGm} Req_Remote2TsGm
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_Remote2TsGm.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_Remote2TsGm();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.AccountIID = r.int64();
                    break;
                case 2:
                    m.GmParams = $root.DcgProto.S_GmParams.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_Remote2TsGm message.
         * @function verify
         * @memberof DcgProto.Req_Remote2TsGm
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_Remote2TsGm.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.AccountIID != null && m.hasOwnProperty("AccountIID")) {
                if (!$util.isInteger(m.AccountIID) && !(m.AccountIID && $util.isInteger(m.AccountIID.low) && $util.isInteger(m.AccountIID.high)))
                    return "AccountIID: integer|Long expected";
            }
            if (m.GmParams != null && m.hasOwnProperty("GmParams")) {
                {
                    var e = $root.DcgProto.S_GmParams.verify(m.GmParams);
                    if (e)
                        return "GmParams." + e;
                }
            }
            return null;
        };

        return Req_Remote2TsGm;
    })();

    DcgProto.Resp_Remote2TsGm = (function() {

        /**
         * Properties of a Resp_Remote2TsGm.
         * @memberof DcgProto
         * @interface IResp_Remote2TsGm
         * @property {DcgProto.IS_BattleResult|null} [BattleResult] Resp_Remote2TsGm BattleResult
         * @property {DcgProto.IS_BattleMsg|null} [BattleMsg] Resp_Remote2TsGm BattleMsg
         * @property {DcgProto.IS_BattleTask|null} [BattleTask] Resp_Remote2TsGm BattleTask
         */

        /**
         * Constructs a new Resp_Remote2TsGm.
         * @memberof DcgProto
         * @classdesc Represents a Resp_Remote2TsGm.
         * @implements IResp_Remote2TsGm
         * @constructor
         * @param {DcgProto.IResp_Remote2TsGm=} [p] Properties to set
         */
        function Resp_Remote2TsGm(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_Remote2TsGm BattleResult.
         * @member {DcgProto.IS_BattleResult|null|undefined} BattleResult
         * @memberof DcgProto.Resp_Remote2TsGm
         * @instance
         */
        Resp_Remote2TsGm.prototype.BattleResult = null;

        /**
         * Resp_Remote2TsGm BattleMsg.
         * @member {DcgProto.IS_BattleMsg|null|undefined} BattleMsg
         * @memberof DcgProto.Resp_Remote2TsGm
         * @instance
         */
        Resp_Remote2TsGm.prototype.BattleMsg = null;

        /**
         * Resp_Remote2TsGm BattleTask.
         * @member {DcgProto.IS_BattleTask|null|undefined} BattleTask
         * @memberof DcgProto.Resp_Remote2TsGm
         * @instance
         */
        Resp_Remote2TsGm.prototype.BattleTask = null;

        /**
         * Creates a new Resp_Remote2TsGm instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_Remote2TsGm
         * @static
         * @param {DcgProto.IResp_Remote2TsGm=} [properties] Properties to set
         * @returns {DcgProto.Resp_Remote2TsGm} Resp_Remote2TsGm instance
         */
        Resp_Remote2TsGm.create = function create(properties) {
            return new Resp_Remote2TsGm(properties);
        };

        /**
         * Encodes the specified Resp_Remote2TsGm message. Does not implicitly {@link DcgProto.Resp_Remote2TsGm.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_Remote2TsGm
         * @static
         * @param {DcgProto.IResp_Remote2TsGm} m Resp_Remote2TsGm message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_Remote2TsGm.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.BattleResult != null && Object.hasOwnProperty.call(m, "BattleResult"))
                $root.DcgProto.S_BattleResult.encode(m.BattleResult, w.uint32(10).fork()).ldelim();
            if (m.BattleMsg != null && Object.hasOwnProperty.call(m, "BattleMsg"))
                $root.DcgProto.S_BattleMsg.encode(m.BattleMsg, w.uint32(18).fork()).ldelim();
            if (m.BattleTask != null && Object.hasOwnProperty.call(m, "BattleTask"))
                $root.DcgProto.S_BattleTask.encode(m.BattleTask, w.uint32(26).fork()).ldelim();
            return w;
        };

        /**
         * Decodes a Resp_Remote2TsGm message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_Remote2TsGm
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_Remote2TsGm} Resp_Remote2TsGm
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_Remote2TsGm.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_Remote2TsGm();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.BattleResult = $root.DcgProto.S_BattleResult.decode(r, r.uint32());
                    break;
                case 2:
                    m.BattleMsg = $root.DcgProto.S_BattleMsg.decode(r, r.uint32());
                    break;
                case 3:
                    m.BattleTask = $root.DcgProto.S_BattleTask.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_Remote2TsGm message.
         * @function verify
         * @memberof DcgProto.Resp_Remote2TsGm
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_Remote2TsGm.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.BattleResult != null && m.hasOwnProperty("BattleResult")) {
                {
                    var e = $root.DcgProto.S_BattleResult.verify(m.BattleResult);
                    if (e)
                        return "BattleResult." + e;
                }
            }
            if (m.BattleMsg != null && m.hasOwnProperty("BattleMsg")) {
                {
                    var e = $root.DcgProto.S_BattleMsg.verify(m.BattleMsg);
                    if (e)
                        return "BattleMsg." + e;
                }
            }
            if (m.BattleTask != null && m.hasOwnProperty("BattleTask")) {
                {
                    var e = $root.DcgProto.S_BattleTask.verify(m.BattleTask);
                    if (e)
                        return "BattleTask." + e;
                }
            }
            return null;
        };

        return Resp_Remote2TsGm;
    })();

    DcgProto.Req_Remote2TsMsg = (function() {

        /**
         * Properties of a Req_Remote2TsMsg.
         * @memberof DcgProto
         * @interface IReq_Remote2TsMsg
         * @property {Long|null} [RoomIID] Req_Remote2TsMsg RoomIID
         * @property {Uint8Array|null} [Msg] Req_Remote2TsMsg Msg
         */

        /**
         * Constructs a new Req_Remote2TsMsg.
         * @memberof DcgProto
         * @classdesc Represents a Req_Remote2TsMsg.
         * @implements IReq_Remote2TsMsg
         * @constructor
         * @param {DcgProto.IReq_Remote2TsMsg=} [p] Properties to set
         */
        function Req_Remote2TsMsg(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Req_Remote2TsMsg RoomIID.
         * @member {Long} RoomIID
         * @memberof DcgProto.Req_Remote2TsMsg
         * @instance
         */
        Req_Remote2TsMsg.prototype.RoomIID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Req_Remote2TsMsg Msg.
         * @member {Uint8Array} Msg
         * @memberof DcgProto.Req_Remote2TsMsg
         * @instance
         */
        Req_Remote2TsMsg.prototype.Msg = $util.newBuffer([]);

        /**
         * Creates a new Req_Remote2TsMsg instance using the specified properties.
         * @function create
         * @memberof DcgProto.Req_Remote2TsMsg
         * @static
         * @param {DcgProto.IReq_Remote2TsMsg=} [properties] Properties to set
         * @returns {DcgProto.Req_Remote2TsMsg} Req_Remote2TsMsg instance
         */
        Req_Remote2TsMsg.create = function create(properties) {
            return new Req_Remote2TsMsg(properties);
        };

        /**
         * Encodes the specified Req_Remote2TsMsg message. Does not implicitly {@link DcgProto.Req_Remote2TsMsg.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Req_Remote2TsMsg
         * @static
         * @param {DcgProto.IReq_Remote2TsMsg} m Req_Remote2TsMsg message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Req_Remote2TsMsg.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.RoomIID != null && Object.hasOwnProperty.call(m, "RoomIID"))
                w.uint32(8).int64(m.RoomIID);
            if (m.Msg != null && Object.hasOwnProperty.call(m, "Msg"))
                w.uint32(18).bytes(m.Msg);
            return w;
        };

        /**
         * Decodes a Req_Remote2TsMsg message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Req_Remote2TsMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Req_Remote2TsMsg} Req_Remote2TsMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Req_Remote2TsMsg.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Req_Remote2TsMsg();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.RoomIID = r.int64();
                    break;
                case 2:
                    m.Msg = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Req_Remote2TsMsg message.
         * @function verify
         * @memberof DcgProto.Req_Remote2TsMsg
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Req_Remote2TsMsg.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.RoomIID != null && m.hasOwnProperty("RoomIID")) {
                if (!$util.isInteger(m.RoomIID) && !(m.RoomIID && $util.isInteger(m.RoomIID.low) && $util.isInteger(m.RoomIID.high)))
                    return "RoomIID: integer|Long expected";
            }
            if (m.Msg != null && m.hasOwnProperty("Msg")) {
                if (!(m.Msg && typeof m.Msg.length === "number" || $util.isString(m.Msg)))
                    return "Msg: buffer expected";
            }
            return null;
        };

        return Req_Remote2TsMsg;
    })();

    DcgProto.Resp_Remote2TsMsg = (function() {

        /**
         * Properties of a Resp_Remote2TsMsg.
         * @memberof DcgProto
         * @interface IResp_Remote2TsMsg
         * @property {DcgProto.E_ErrorCode|null} [ErrorCode] Resp_Remote2TsMsg ErrorCode
         * @property {Uint8Array|null} [Msg] Resp_Remote2TsMsg Msg
         */

        /**
         * Constructs a new Resp_Remote2TsMsg.
         * @memberof DcgProto
         * @classdesc Represents a Resp_Remote2TsMsg.
         * @implements IResp_Remote2TsMsg
         * @constructor
         * @param {DcgProto.IResp_Remote2TsMsg=} [p] Properties to set
         */
        function Resp_Remote2TsMsg(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        /**
         * Resp_Remote2TsMsg ErrorCode.
         * @member {DcgProto.E_ErrorCode} ErrorCode
         * @memberof DcgProto.Resp_Remote2TsMsg
         * @instance
         */
        Resp_Remote2TsMsg.prototype.ErrorCode = 0;

        /**
         * Resp_Remote2TsMsg Msg.
         * @member {Uint8Array} Msg
         * @memberof DcgProto.Resp_Remote2TsMsg
         * @instance
         */
        Resp_Remote2TsMsg.prototype.Msg = $util.newBuffer([]);

        /**
         * Creates a new Resp_Remote2TsMsg instance using the specified properties.
         * @function create
         * @memberof DcgProto.Resp_Remote2TsMsg
         * @static
         * @param {DcgProto.IResp_Remote2TsMsg=} [properties] Properties to set
         * @returns {DcgProto.Resp_Remote2TsMsg} Resp_Remote2TsMsg instance
         */
        Resp_Remote2TsMsg.create = function create(properties) {
            return new Resp_Remote2TsMsg(properties);
        };

        /**
         * Encodes the specified Resp_Remote2TsMsg message. Does not implicitly {@link DcgProto.Resp_Remote2TsMsg.verify|verify} messages.
         * @function encode
         * @memberof DcgProto.Resp_Remote2TsMsg
         * @static
         * @param {DcgProto.IResp_Remote2TsMsg} m Resp_Remote2TsMsg message or plain object to encode
         * @param {$protobuf.Writer} [w] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Resp_Remote2TsMsg.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.ErrorCode != null && Object.hasOwnProperty.call(m, "ErrorCode"))
                w.uint32(8).int32(m.ErrorCode);
            if (m.Msg != null && Object.hasOwnProperty.call(m, "Msg"))
                w.uint32(18).bytes(m.Msg);
            return w;
        };

        /**
         * Decodes a Resp_Remote2TsMsg message from the specified reader or buffer.
         * @function decode
         * @memberof DcgProto.Resp_Remote2TsMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
         * @param {number} [l] Message length if known beforehand
         * @returns {DcgProto.Resp_Remote2TsMsg} Resp_Remote2TsMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Resp_Remote2TsMsg.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.DcgProto.Resp_Remote2TsMsg();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.ErrorCode = r.int32();
                    break;
                case 2:
                    m.Msg = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        /**
         * Verifies a Resp_Remote2TsMsg message.
         * @function verify
         * @memberof DcgProto.Resp_Remote2TsMsg
         * @static
         * @param {Object.<string,*>} m Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Resp_Remote2TsMsg.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.ErrorCode != null && m.hasOwnProperty("ErrorCode")) {
                switch (m.ErrorCode) {
                default:
                    return "ErrorCode: enum value expected";
                case 0:
                case -1:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 400:
                case 404:
                case 450:
                case 499:
                case 500:
                case 700:
                case 701:
                case 1000:
                case 1001:
                case 1002:
                case 1003:
                case 1004:
                case 1005:
                case 1006:
                case 1100:
                case 1101:
                case 1102:
                case 1103:
                case 10000:
                case 10001:
                case 10002:
                case 10003:
                case 10004:
                case 10100:
                case 10101:
                case 10102:
                case 10103:
                case 10104:
                case 10105:
                case 10200:
                case 10300:
                case 10301:
                case 10302:
                case 10303:
                case 10304:
                case 10305:
                case 10306:
                case 10307:
                case 10308:
                case 10400:
                case 10401:
                case 10402:
                case 10403:
                case 10404:
                case 10405:
                case 10406:
                case 10500:
                case 10600:
                case 10601:
                case 10700:
                case 10701:
                case 10702:
                case 10703:
                case 10800:
                case 10801:
                case 10802:
                case 10900:
                case 10901:
                case 10902:
                case 10903:
                case 11000:
                case 11001:
                case 11002:
                case 11003:
                case 11004:
                case 11005:
                case 11006:
                case 11007:
                case 11008:
                case 11009:
                case 11010:
                case 11011:
                case 11012:
                case 11013:
                case 11014:
                case 11015:
                case 11016:
                case 11100:
                case 11101:
                case 11102:
                case 11103:
                case 11104:
                case 11105:
                case 11106:
                case 11107:
                case 11108:
                case 11109:
                case 11110:
                case 11111:
                case 11112:
                case 11300:
                case 11301:
                case 11302:
                case 11303:
                case 11304:
                case 11305:
                case 11306:
                case 11400:
                case 11401:
                case 11402:
                case 11403:
                case 11404:
                case 11405:
                case 11406:
                case 11407:
                case 11408:
                case 11409:
                case 11410:
                case 11411:
                case 11412:
                case 11413:
                case 11414:
                case 11415:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11600:
                case 11601:
                case 11602:
                case 11603:
                case 11604:
                case 11605:
                case 11606:
                case 11607:
                case 11608:
                case 11700:
                case 11701:
                case 11702:
                case 11703:
                case 11800:
                case 11801:
                case 11802:
                case 11803:
                case 11900:
                case 12000:
                case 12001:
                    break;
                }
            }
            if (m.Msg != null && m.hasOwnProperty("Msg")) {
                if (!(m.Msg && typeof m.Msg.length === "number" || $util.isString(m.Msg)))
                    return "Msg: buffer expected";
            }
            return null;
        };

        return Resp_Remote2TsMsg;
    })();

    return DcgProto;
})();

module.exports = $root;

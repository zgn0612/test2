import { DtBattleManager } from "../battle/dtcg/DtBattleManager";
import Singleton from "./Singleton";
import { DcgProto } from "./proto/protoMsg";
import * as Long from 'long';
import { FightService } from "../fight.service";
export declare class BattleManagerWithMsg {
    manager: DtBattleManager;
    msg: Array<DcgProto.IS_RoomFight>;
    battleResult: DcgProto.S_BattleResult;
    battleMsg: Array<DcgProto.S_BattleMsg>;
    currentWaitPlayerId: Long;
    battleTask: DcgProto.S_BattleTask;
    private gameOverTask;
    private convertMessage;
    private fightAID;
    private fightBID;
    private replayFile;
    private AIRoom;
    roomPanel: DcgProto.IS_RoomPanel;
    constructor();
    Init(serverRoomInfo: DcgProto.IS_RoomInfo): void;
    private SaveReplayPlayerInfoData;
    PushMsg(msg: DcgProto.IS_RoomFight): void;
    TakeMsg(): DcgProto.IS_BattleMsg;
    private NeedAIRun;
    RunAI(): boolean;
    CanGetMsg(): boolean;
    TakeBattleTask(): DcgProto.S_BattleTask;
    GameOver(): void;
    private GetBattleTask;
    private GetDefPlayerLog;
    private GetSaveLogData;
    parserMsg(msg: DcgProto.IS_RoomFight[]): [DcgProto.IS_RoomFight[], DcgProto.IS_RoomFight[], DcgProto.IS_RoomFight[]];
    private ConvertMsg;
    IsFightPlayer(playerId: Long): boolean;
    GetReplayFile(): DcgProto.S_FightReplay;
    SaveReplayPlayerOperate(playerId: Long, type: number, op: DcgProto.IS_BattleParams): void;
    Clear(): void;
}
export default class _roomMgr extends Singleton {
    IsUseClientServer: boolean;
    private managerMap;
    private timeOffsetSec;
    private service;
    InitRoomMgr(service: FightService): void;
    onCreateRoom(roomIID: Long): DcgProto.E_ErrorCode;
    onInitRoom(roomIID: Long, reqBattleInit: DcgProto.Req_Remote2TsBattleInit): [DcgProto.E_ErrorCode, DcgProto.IS_BattleMsg];
    onReadyRoom(roomIID: Long, reqBattleReady: DcgProto.Req_Remote2TsBattleReady): [DcgProto.E_ErrorCode, DcgProto.IS_BattleMsg];
    onTurnRoom(roomIID: Long): [DcgProto.E_ErrorCode, DcgProto.S_BattleResult, DcgProto.S_BattleTask, DcgProto.IS_BattleMsg];
    onBattle(roomIID: Long, reqBattle: DcgProto.Req_Remote2TsBattle): [DcgProto.E_ErrorCode, DcgProto.S_BattleResult, DcgProto.S_BattleTask, DcgProto.IS_BattleMsg];
    OnAIBattle(roomIID: Long, reqBattle: DcgProto.Req_Remote2TsBattle): void;
    onTimeOffsetSec(offsetSec: Long): void;
    onQuit(roomIID: Long, accountIID: Long): [DcgProto.E_ErrorCode, DcgProto.S_BattleResult, DcgProto.S_BattleTask, DcgProto.IS_BattleMsg];
    onDestroy(roomIID: Long): DcgProto.E_ErrorCode;
    onBattleGm(roomIID: Long, reqGm: DcgProto.Req_Remote2TsGm): [DcgProto.E_ErrorCode, DcgProto.S_BattleResult, DcgProto.S_BattleTask, DcgProto.IS_BattleMsg];
    GetBattleMsg(roomIID: Long, frameIndex: number): [DcgProto.E_ErrorCode, DcgProto.IS_BattleMsg[]];
    GetReconnectData(roomIID: Long, accountIID: Long): [DcgProto.E_ErrorCode, DcgProto.S_ReconnectData];
    OnRoomTimeOut(battleMgr: DtBattleManager, playerid: Long): void;
    OnRoomGameEnd(battleMgr: DtBattleManager): void;
    GameBattleLogicSendMsg(battleMgr: DtBattleManager, msg: any): void;
    private GetPlayerData;
    OnReceiveMsg(battleMgr: DtBattleManager, data: DcgProto.Req_Remote2TsBattle): boolean;
    ServerModeGameSendMsgToServer(data_req: DcgProto.IReq_RoomFight): void;
    ClientModeSendMsg(msg: DcgProto.IReq_RoomFight, pid: Long): void;
    GetServerTimeNumber(): number;
    GetServerTime(): Long;
    GetTimeOffsetSec(): Long;
}

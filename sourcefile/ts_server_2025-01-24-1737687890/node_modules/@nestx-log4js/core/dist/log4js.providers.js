"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAsyncLog4jsOptions = exports.createLog4jsLogger = void 0;
const log4js = require("log4js");
const log4js_options_1 = require("./log4js.options");
const log4js_classes_1 = require("./log4js.classes");
const log4js_extentions_1 = require("./log4js.extentions");
const createLog4jsLogger = (name) => ({
    provide: (0, log4js_options_1.getLog4jsLoggerToken)(name),
    inject: [(0, log4js_options_1.getLog4jsOptionsToken)(name)],
    useFactory: (options) => __awaiter(void 0, void 0, void 0, function* () {
        const config = options.config;
        const logger = log4js.configure(config).getLogger();
        logger.setParseCallStackFunction(log4js_extentions_1.parseNestModuleCallStack);
        return new log4js_classes_1.Log4jsLogger(logger);
    })
});
exports.createLog4jsLogger = createLog4jsLogger;
const createAsyncLog4jsOptions = (options) => {
    if (options.useFactory) {
        return {
            provide: (0, log4js_options_1.getLog4jsOptionsToken)(options.name),
            inject: options.inject,
            useFactory: options.useFactory
        };
    }
    const inject = [(options.useClass || options.useExisting)];
    return {
        provide: (0, log4js_options_1.getLog4jsOptionsToken)(options.name),
        inject: inject,
        useFactory: (log4jsOptionsFactory) => __awaiter(void 0, void 0, void 0, function* () {
            return log4jsOptionsFactory.createLog4jsOptions();
        })
    };
};
exports.createAsyncLog4jsOptions = createAsyncLog4jsOptions;
